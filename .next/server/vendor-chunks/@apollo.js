/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@apollo";
exports.ids = ["vendor-chunks/@apollo"];
exports.modules = {

/***/ "(rsc)/./node_modules/@apollo/protobufjs/minimal.js":
/*!****************************************************!*\
  !*** ./node_modules/@apollo/protobufjs/minimal.js ***!
  \****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// minimal library entry point.\n\n\nmodule.exports = __webpack_require__(/*! ./src/index-minimal */ \"(rsc)/./node_modules/@apollo/protobufjs/src/index-minimal.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9wcm90b2J1ZmpzL21pbmltYWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7O0FBRWE7QUFDYiwrSEFBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9wcm90b2J1ZmpzL21pbmltYWwuanM/Y2I3MSJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBtaW5pbWFsIGxpYnJhcnkgZW50cnkgcG9pbnQuXG5cblwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi9zcmMvaW5kZXgtbWluaW1hbFwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/protobufjs/minimal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/protobufjs/src/index-minimal.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/protobufjs/src/index-minimal.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nvar protobuf = exports;\n\n/**\n * Build type, one of `\"full\"`, `\"light\"` or `\"minimal\"`.\n * @name build\n * @type {string}\n * @const\n */\nprotobuf.build = \"minimal\";\n\n// Serialization\nprotobuf.Writer       = __webpack_require__(/*! ./writer */ \"(rsc)/./node_modules/@apollo/protobufjs/src/writer.js\");\nprotobuf.BufferWriter = __webpack_require__(/*! ./writer_buffer */ \"(rsc)/./node_modules/@apollo/protobufjs/src/writer_buffer.js\");\nprotobuf.Reader       = __webpack_require__(/*! ./reader */ \"(rsc)/./node_modules/@apollo/protobufjs/src/reader.js\");\nprotobuf.BufferReader = __webpack_require__(/*! ./reader_buffer */ \"(rsc)/./node_modules/@apollo/protobufjs/src/reader_buffer.js\");\n\n// Utility\nprotobuf.util         = __webpack_require__(/*! ./util/minimal */ \"(rsc)/./node_modules/@apollo/protobufjs/src/util/minimal.js\");\nprotobuf.rpc          = __webpack_require__(/*! ./rpc */ \"(rsc)/./node_modules/@apollo/protobufjs/src/rpc.js\");\nprotobuf.roots        = __webpack_require__(/*! ./roots */ \"(rsc)/./node_modules/@apollo/protobufjs/src/roots.js\");\nprotobuf.configure    = configure;\n\n/* istanbul ignore next */\n/**\n * Reconfigures the library according to the environment.\n * @returns {undefined}\n */\nfunction configure() {\n    protobuf.Reader._configure(protobuf.BufferReader);\n    protobuf.util._configure();\n}\n\n// Set up buffer utility according to the environment\nprotobuf.Writer._configure(protobuf.BufferWriter);\nconfigure();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9wcm90b2J1ZmpzL3NyYy9pbmRleC1taW5pbWFsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdCQUF3QixtQkFBTyxDQUFDLHVFQUFVO0FBQzFDLHdCQUF3QixtQkFBTyxDQUFDLHFGQUFpQjtBQUNqRCx3QkFBd0IsbUJBQU8sQ0FBQyx1RUFBVTtBQUMxQyx3QkFBd0IsbUJBQU8sQ0FBQyxxRkFBaUI7O0FBRWpEO0FBQ0Esd0JBQXdCLG1CQUFPLENBQUMsbUZBQWdCO0FBQ2hELHdCQUF3QixtQkFBTyxDQUFDLGlFQUFPO0FBQ3ZDLHdCQUF3QixtQkFBTyxDQUFDLHFFQUFTO0FBQ3pDOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3Byb3RvYnVmanMvc3JjL2luZGV4LW1pbmltYWwuanM/NDQ1YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBwcm90b2J1ZiA9IGV4cG9ydHM7XG5cbi8qKlxuICogQnVpbGQgdHlwZSwgb25lIG9mIGBcImZ1bGxcImAsIGBcImxpZ2h0XCJgIG9yIGBcIm1pbmltYWxcImAuXG4gKiBAbmFtZSBidWlsZFxuICogQHR5cGUge3N0cmluZ31cbiAqIEBjb25zdFxuICovXG5wcm90b2J1Zi5idWlsZCA9IFwibWluaW1hbFwiO1xuXG4vLyBTZXJpYWxpemF0aW9uXG5wcm90b2J1Zi5Xcml0ZXIgICAgICAgPSByZXF1aXJlKFwiLi93cml0ZXJcIik7XG5wcm90b2J1Zi5CdWZmZXJXcml0ZXIgPSByZXF1aXJlKFwiLi93cml0ZXJfYnVmZmVyXCIpO1xucHJvdG9idWYuUmVhZGVyICAgICAgID0gcmVxdWlyZShcIi4vcmVhZGVyXCIpO1xucHJvdG9idWYuQnVmZmVyUmVhZGVyID0gcmVxdWlyZShcIi4vcmVhZGVyX2J1ZmZlclwiKTtcblxuLy8gVXRpbGl0eVxucHJvdG9idWYudXRpbCAgICAgICAgID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xucHJvdG9idWYucnBjICAgICAgICAgID0gcmVxdWlyZShcIi4vcnBjXCIpO1xucHJvdG9idWYucm9vdHMgICAgICAgID0gcmVxdWlyZShcIi4vcm9vdHNcIik7XG5wcm90b2J1Zi5jb25maWd1cmUgICAgPSBjb25maWd1cmU7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4vKipcbiAqIFJlY29uZmlndXJlcyB0aGUgbGlicmFyeSBhY2NvcmRpbmcgdG8gdGhlIGVudmlyb25tZW50LlxuICogQHJldHVybnMge3VuZGVmaW5lZH1cbiAqL1xuZnVuY3Rpb24gY29uZmlndXJlKCkge1xuICAgIHByb3RvYnVmLlJlYWRlci5fY29uZmlndXJlKHByb3RvYnVmLkJ1ZmZlclJlYWRlcik7XG4gICAgcHJvdG9idWYudXRpbC5fY29uZmlndXJlKCk7XG59XG5cbi8vIFNldCB1cCBidWZmZXIgdXRpbGl0eSBhY2NvcmRpbmcgdG8gdGhlIGVudmlyb25tZW50XG5wcm90b2J1Zi5Xcml0ZXIuX2NvbmZpZ3VyZShwcm90b2J1Zi5CdWZmZXJXcml0ZXIpO1xuY29uZmlndXJlKCk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/protobufjs/src/index-minimal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/protobufjs/src/reader.js":
/*!*******************************************************!*\
  !*** ./node_modules/@apollo/protobufjs/src/reader.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Reader;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"(rsc)/./node_modules/@apollo/protobufjs/src/util/minimal.js\");\n\nvar BufferReader; // cyclic\n\nvar LongBits  = util.LongBits,\n    utf8      = util.utf8;\n\n/* istanbul ignore next */\nfunction indexOutOfRange(reader, writeLength) {\n    return RangeError(\"index out of range: \" + reader.pos + \" + \" + (writeLength || 1) + \" > \" + reader.len);\n}\n\n/**\n * Constructs a new reader instance using the specified buffer.\n * @classdesc Wire format reader using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n * @param {Uint8Array} buffer Buffer to read from\n */\nfunction Reader(buffer) {\n\n    /**\n     * Read buffer.\n     * @type {Uint8Array}\n     */\n    this.buf = buffer;\n\n    /**\n     * Read buffer position.\n     * @type {number}\n     */\n    this.pos = 0;\n\n    /**\n     * Read buffer length.\n     * @type {number}\n     */\n    this.len = buffer.length;\n}\n\nvar create_array = typeof Uint8Array !== \"undefined\"\n    ? function create_typed_array(buffer) {\n        if (buffer instanceof Uint8Array || Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    }\n    /* istanbul ignore next */\n    : function create_array(buffer) {\n        if (Array.isArray(buffer))\n            return new Reader(buffer);\n        throw Error(\"illegal buffer\");\n    };\n\n/**\n * Creates a new reader using the specified buffer.\n * @function\n * @param {Uint8Array|Buffer} buffer Buffer to read from\n * @returns {Reader|BufferReader} A {@link BufferReader} if `buffer` is a Buffer, otherwise a {@link Reader}\n * @throws {Error} If `buffer` is not a valid buffer\n */\nReader.create = util.Buffer\n    ? function create_buffer_setup(buffer) {\n        return (Reader.create = function create_buffer(buffer) {\n            return util.Buffer.isBuffer(buffer)\n                ? new BufferReader(buffer)\n                /* istanbul ignore next */\n                : create_array(buffer);\n        })(buffer);\n    }\n    /* istanbul ignore next */\n    : create_array;\n\nReader.prototype._slice = util.Array.prototype.subarray || /* istanbul ignore next */ util.Array.prototype.slice;\n\n/**\n * Reads a varint as an unsigned 32 bit value.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.uint32 = (function read_uint32_setup() {\n    var value = 4294967295; // optimizer type-hint, tends to deopt otherwise (?!)\n    return function read_uint32() {\n        value = (         this.buf[this.pos] & 127       ) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) <<  7) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 14) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] & 127) << 21) >>> 0; if (this.buf[this.pos++] < 128) return value;\n        value = (value | (this.buf[this.pos] &  15) << 28) >>> 0; if (this.buf[this.pos++] < 128) return value;\n\n        /* istanbul ignore if */\n        if ((this.pos += 5) > this.len) {\n            this.pos = this.len;\n            throw indexOutOfRange(this, 10);\n        }\n        return value;\n    };\n})();\n\n/**\n * Reads a varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.int32 = function read_int32() {\n    return this.uint32() | 0;\n};\n\n/**\n * Reads a zig-zag encoded varint as a signed 32 bit value.\n * @returns {number} Value read\n */\nReader.prototype.sint32 = function read_sint32() {\n    var value = this.uint32();\n    return value >>> 1 ^ -(value & 1) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readLongVarint() {\n    // tends to deopt with local vars for octet etc.\n    var bits = new LongBits(0, 0);\n    var i = 0;\n    if (this.len - this.pos > 4) { // fast route (lo)\n        for (; i < 4; ++i) {\n            // 1st..4th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 5th\n        bits.lo = (bits.lo | (this.buf[this.pos] & 127) << 28) >>> 0;\n        bits.hi = (bits.hi | (this.buf[this.pos] & 127) >>  4) >>> 0;\n        if (this.buf[this.pos++] < 128)\n            return bits;\n        i = 0;\n    } else {\n        for (; i < 3; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 1st..3th\n            bits.lo = (bits.lo | (this.buf[this.pos] & 127) << i * 7) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n        // 4th\n        bits.lo = (bits.lo | (this.buf[this.pos++] & 127) << i * 7) >>> 0;\n        return bits;\n    }\n    if (this.len - this.pos > 4) { // fast route (hi)\n        for (; i < 5; ++i) {\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    } else {\n        for (; i < 5; ++i) {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n            // 6th..10th\n            bits.hi = (bits.hi | (this.buf[this.pos] & 127) << i * 7 + 3) >>> 0;\n            if (this.buf[this.pos++] < 128)\n                return bits;\n        }\n    }\n    /* istanbul ignore next */\n    throw Error(\"invalid varint encoding\");\n}\n\n/* eslint-enable no-invalid-this */\n\n/*\n * Reads a varint as a signed 64 bit value.\n * @name Reader#int64\n * @function\n * @returns {Long} Value read\n */\n\n/*\n * Reads a varint as an unsigned 64 bit value.\n * @name Reader#uint64\n * @function\n * @returns {Long} Value read\n */\n\n/*\n * Reads a zig-zag encoded varint as a signed 64 bit value.\n * @name Reader#sint64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a varint as a boolean.\n * @returns {boolean} Value read\n */\nReader.prototype.bool = function read_bool() {\n    return this.uint32() !== 0;\n};\n\nfunction readFixed32_end(buf, end) { // note that this uses `end`, not `pos`\n    return (buf[end - 4]\n          | buf[end - 3] << 8\n          | buf[end - 2] << 16\n          | buf[end - 1] << 24) >>> 0;\n}\n\n/**\n * Reads fixed 32 bits as an unsigned 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.fixed32 = function read_fixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4);\n};\n\n/**\n * Reads fixed 32 bits as a signed 32 bit integer.\n * @returns {number} Value read\n */\nReader.prototype.sfixed32 = function read_sfixed32() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    return readFixed32_end(this.buf, this.pos += 4) | 0;\n};\n\n/* eslint-disable no-invalid-this */\n\nfunction readFixed64(/* this: Reader */) {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 8);\n\n    return new LongBits(readFixed32_end(this.buf, this.pos += 4), readFixed32_end(this.buf, this.pos += 4));\n}\n\n/* eslint-enable no-invalid-this */\n\n/*\n * Reads fixed 64 bits.\n * @name Reader#fixed64\n * @function\n * @returns {Long} Value read\n */\n\n/*\n * Reads zig-zag encoded fixed 64 bits.\n * @name Reader#sfixed64\n * @function\n * @returns {Long} Value read\n */\n\n/**\n * Reads a float (32 bit) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.float = function read_float() {\n\n    /* istanbul ignore if */\n    if (this.pos + 4 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readFloatLE(this.buf, this.pos);\n    this.pos += 4;\n    return value;\n};\n\n/**\n * Reads a double (64 bit float) as a number.\n * @function\n * @returns {number} Value read\n */\nReader.prototype.double = function read_double() {\n\n    /* istanbul ignore if */\n    if (this.pos + 8 > this.len)\n        throw indexOutOfRange(this, 4);\n\n    var value = util.float.readDoubleLE(this.buf, this.pos);\n    this.pos += 8;\n    return value;\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @returns {Uint8Array} Value read\n */\nReader.prototype.bytes = function read_bytes() {\n    var length = this.uint32(),\n        start  = this.pos,\n        end    = this.pos + length;\n\n    /* istanbul ignore if */\n    if (end > this.len)\n        throw indexOutOfRange(this, length);\n\n    this.pos += length;\n    if (Array.isArray(this.buf)) // plain array\n        return this.buf.slice(start, end);\n    return start === end // fix for IE 10/Win8 and others' subarray returning array of size 1\n        ? new this.buf.constructor(0)\n        : this._slice.call(this.buf, start, end);\n};\n\n/**\n * Reads a string preceeded by its byte length as a varint.\n * @returns {string} Value read\n */\nReader.prototype.string = function read_string() {\n    var bytes = this.bytes();\n    return utf8.read(bytes, 0, bytes.length);\n};\n\n/**\n * Skips the specified number of bytes if specified, otherwise skips a varint.\n * @param {number} [length] Length if known, otherwise a varint is assumed\n * @returns {Reader} `this`\n */\nReader.prototype.skip = function skip(length) {\n    if (typeof length === \"number\") {\n        /* istanbul ignore if */\n        if (this.pos + length > this.len)\n            throw indexOutOfRange(this, length);\n        this.pos += length;\n    } else {\n        do {\n            /* istanbul ignore if */\n            if (this.pos >= this.len)\n                throw indexOutOfRange(this);\n        } while (this.buf[this.pos++] & 128);\n    }\n    return this;\n};\n\n/**\n * Skips the next element of the specified wire type.\n * @param {number} wireType Wire type received\n * @returns {Reader} `this`\n */\nReader.prototype.skipType = function(wireType) {\n    switch (wireType) {\n        case 0:\n            this.skip();\n            break;\n        case 1:\n            this.skip(8);\n            break;\n        case 2:\n            this.skip(this.uint32());\n            break;\n        case 3:\n            while ((wireType = this.uint32() & 7) !== 4) {\n                this.skipType(wireType);\n            }\n            break;\n        case 5:\n            this.skip(4);\n            break;\n\n        /* istanbul ignore next */\n        default:\n            throw Error(\"invalid wire type \" + wireType + \" at offset \" + this.pos);\n    }\n    return this;\n};\n\nReader._configure = function(BufferReader_) {\n    BufferReader = BufferReader_;\n\n    var fn = util.Long ? \"toLong\" : /* istanbul ignore next */ \"toNumber\";\n    util.merge(Reader.prototype, {\n\n        int64: function read_int64() {\n            return readLongVarint.call(this)[fn](false);\n        },\n\n        uint64: function read_uint64() {\n            return readLongVarint.call(this)[fn](true);\n        },\n\n        sint64: function read_sint64() {\n            return readLongVarint.call(this).zzDecode()[fn](false);\n        },\n\n        fixed64: function read_fixed64() {\n            return readFixed64.call(this)[fn](true);\n        },\n\n        sfixed64: function read_sfixed64() {\n            return readFixed64.call(this)[fn](false);\n        }\n\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9wcm90b2J1ZmpzL3NyYy9yZWFkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjs7QUFFQSxnQkFBZ0IsbUJBQU8sQ0FBQyxtRkFBZ0I7O0FBRXhDLGtCQUFrQjs7QUFFbEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsWUFBWTtBQUN2QjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsbUJBQW1CO0FBQzlCLGFBQWEscUJBQXFCLEdBQUcsb0JBQW9CLHNDQUFzQztBQUMvRixZQUFZLE9BQU87QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQSw0QkFBNEI7QUFDNUI7QUFDQSxrRUFBa0U7QUFDbEUsa0VBQWtFO0FBQ2xFLGtFQUFrRTtBQUNsRSxrRUFBa0U7QUFDbEUsa0VBQWtFOztBQUVsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7QUFDbkMsZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ04sZUFBZSxPQUFPO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQztBQUNuQyxlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTixlQUFlLE9BQU87QUFDdEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYSxNQUFNO0FBQ25COztBQUVBO0FBQ0E7QUFDQSxhQUFhLFNBQVM7QUFDdEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUEscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsTUFBTTtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxhQUFhLFlBQVk7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWEsUUFBUTtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3Byb3RvYnVmanMvc3JjL3JlYWRlci5qcz84OWZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xubW9kdWxlLmV4cG9ydHMgPSBSZWFkZXI7XG5cbnZhciB1dGlsICAgICAgPSByZXF1aXJlKFwiLi91dGlsL21pbmltYWxcIik7XG5cbnZhciBCdWZmZXJSZWFkZXI7IC8vIGN5Y2xpY1xuXG52YXIgTG9uZ0JpdHMgID0gdXRpbC5Mb25nQml0cyxcbiAgICB1dGY4ICAgICAgPSB1dGlsLnV0Zjg7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBpbmRleE91dE9mUmFuZ2UocmVhZGVyLCB3cml0ZUxlbmd0aCkge1xuICAgIHJldHVybiBSYW5nZUVycm9yKFwiaW5kZXggb3V0IG9mIHJhbmdlOiBcIiArIHJlYWRlci5wb3MgKyBcIiArIFwiICsgKHdyaXRlTGVuZ3RoIHx8IDEpICsgXCIgPiBcIiArIHJlYWRlci5sZW4pO1xufVxuXG4vKipcbiAqIENvbnN0cnVjdHMgYSBuZXcgcmVhZGVyIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgYnVmZmVyLlxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCByZWFkZXIgdXNpbmcgYFVpbnQ4QXJyYXlgIGlmIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGBBcnJheWAuXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7VWludDhBcnJheX0gYnVmZmVyIEJ1ZmZlciB0byByZWFkIGZyb21cbiAqL1xuZnVuY3Rpb24gUmVhZGVyKGJ1ZmZlcikge1xuXG4gICAgLyoqXG4gICAgICogUmVhZCBidWZmZXIuXG4gICAgICogQHR5cGUge1VpbnQ4QXJyYXl9XG4gICAgICovXG4gICAgdGhpcy5idWYgPSBidWZmZXI7XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIGJ1ZmZlciBwb3NpdGlvbi5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMucG9zID0gMDtcblxuICAgIC8qKlxuICAgICAqIFJlYWQgYnVmZmVyIGxlbmd0aC5cbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMubGVuID0gYnVmZmVyLmxlbmd0aDtcbn1cblxudmFyIGNyZWF0ZV9hcnJheSA9IHR5cGVvZiBVaW50OEFycmF5ICE9PSBcInVuZGVmaW5lZFwiXG4gICAgPyBmdW5jdGlvbiBjcmVhdGVfdHlwZWRfYXJyYXkoYnVmZmVyKSB7XG4gICAgICAgIGlmIChidWZmZXIgaW5zdGFuY2VvZiBVaW50OEFycmF5IHx8IEFycmF5LmlzQXJyYXkoYnVmZmVyKSlcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVhZGVyKGJ1ZmZlcik7XG4gICAgICAgIHRocm93IEVycm9yKFwiaWxsZWdhbCBidWZmZXJcIik7XG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgOiBmdW5jdGlvbiBjcmVhdGVfYXJyYXkoYnVmZmVyKSB7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KGJ1ZmZlcikpXG4gICAgICAgICAgICByZXR1cm4gbmV3IFJlYWRlcihidWZmZXIpO1xuICAgICAgICB0aHJvdyBFcnJvcihcImlsbGVnYWwgYnVmZmVyXCIpO1xuICAgIH07XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyByZWFkZXIgdXNpbmcgdGhlIHNwZWNpZmllZCBidWZmZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEBwYXJhbSB7VWludDhBcnJheXxCdWZmZXJ9IGJ1ZmZlciBCdWZmZXIgdG8gcmVhZCBmcm9tXG4gKiBAcmV0dXJucyB7UmVhZGVyfEJ1ZmZlclJlYWRlcn0gQSB7QGxpbmsgQnVmZmVyUmVhZGVyfSBpZiBgYnVmZmVyYCBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGEge0BsaW5rIFJlYWRlcn1cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiBgYnVmZmVyYCBpcyBub3QgYSB2YWxpZCBidWZmZXJcbiAqL1xuUmVhZGVyLmNyZWF0ZSA9IHV0aWwuQnVmZmVyXG4gICAgPyBmdW5jdGlvbiBjcmVhdGVfYnVmZmVyX3NldHVwKGJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gKFJlYWRlci5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGVfYnVmZmVyKGJ1ZmZlcikge1xuICAgICAgICAgICAgcmV0dXJuIHV0aWwuQnVmZmVyLmlzQnVmZmVyKGJ1ZmZlcilcbiAgICAgICAgICAgICAgICA/IG5ldyBCdWZmZXJSZWFkZXIoYnVmZmVyKVxuICAgICAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgICAgICAgOiBjcmVhdGVfYXJyYXkoYnVmZmVyKTtcbiAgICAgICAgfSkoYnVmZmVyKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICA6IGNyZWF0ZV9hcnJheTtcblxuUmVhZGVyLnByb3RvdHlwZS5fc2xpY2UgPSB1dGlsLkFycmF5LnByb3RvdHlwZS5zdWJhcnJheSB8fCAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyB1dGlsLkFycmF5LnByb3RvdHlwZS5zbGljZTtcblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhbiB1bnNpZ25lZCAzMiBiaXQgdmFsdWUuXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS51aW50MzIgPSAoZnVuY3Rpb24gcmVhZF91aW50MzJfc2V0dXAoKSB7XG4gICAgdmFyIHZhbHVlID0gNDI5NDk2NzI5NTsgLy8gb3B0aW1pemVyIHR5cGUtaGludCwgdGVuZHMgdG8gZGVvcHQgb3RoZXJ3aXNlICg/ISlcbiAgICByZXR1cm4gZnVuY3Rpb24gcmVhZF91aW50MzIoKSB7XG4gICAgICAgIHZhbHVlID0gKCAgICAgICAgIHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNyAgICAgICApID4+PiAwOyBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCAgNykgPj4+IDA7IGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOCkgcmV0dXJuIHZhbHVlO1xuICAgICAgICB2YWx1ZSA9ICh2YWx1ZSB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IDE0KSA+Pj4gMDsgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KSByZXR1cm4gdmFsdWU7XG4gICAgICAgIHZhbHVlID0gKHZhbHVlIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgMjEpID4+PiAwOyBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpIHJldHVybiB2YWx1ZTtcbiAgICAgICAgdmFsdWUgPSAodmFsdWUgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgIDE1KSA8PCAyOCkgPj4+IDA7IGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOCkgcmV0dXJuIHZhbHVlO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoKHRoaXMucG9zICs9IDUpID4gdGhpcy5sZW4pIHtcbiAgICAgICAgICAgIHRoaXMucG9zID0gdGhpcy5sZW47XG4gICAgICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgMTApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9O1xufSkoKTtcblxuLyoqXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhIHNpZ25lZCAzMiBiaXQgdmFsdWUuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuaW50MzIgPSBmdW5jdGlvbiByZWFkX2ludDMyKCkge1xuICAgIHJldHVybiB0aGlzLnVpbnQzMigpIHwgMDtcbn07XG5cbi8qKlxuICogUmVhZHMgYSB6aWctemFnIGVuY29kZWQgdmFyaW50IGFzIGEgc2lnbmVkIDMyIGJpdCB2YWx1ZS5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5zaW50MzIgPSBmdW5jdGlvbiByZWFkX3NpbnQzMigpIHtcbiAgICB2YXIgdmFsdWUgPSB0aGlzLnVpbnQzMigpO1xuICAgIHJldHVybiB2YWx1ZSA+Pj4gMSBeIC0odmFsdWUgJiAxKSB8IDA7XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuZnVuY3Rpb24gcmVhZExvbmdWYXJpbnQoKSB7XG4gICAgLy8gdGVuZHMgdG8gZGVvcHQgd2l0aCBsb2NhbCB2YXJzIGZvciBvY3RldCBldGMuXG4gICAgdmFyIGJpdHMgPSBuZXcgTG9uZ0JpdHMoMCwgMCk7XG4gICAgdmFyIGkgPSAwO1xuICAgIGlmICh0aGlzLmxlbiAtIHRoaXMucG9zID4gNCkgeyAvLyBmYXN0IHJvdXRlIChsbylcbiAgICAgICAgZm9yICg7IGkgPCA0OyArK2kpIHtcbiAgICAgICAgICAgIC8vIDFzdC4uNHRoXG4gICAgICAgICAgICBiaXRzLmxvID0gKGJpdHMubG8gfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCBpICogNykgPj4+IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpdHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNXRoXG4gICAgICAgIGJpdHMubG8gPSAoYml0cy5sbyB8ICh0aGlzLmJ1Zlt0aGlzLnBvc10gJiAxMjcpIDw8IDI4KSA+Pj4gMDtcbiAgICAgICAgYml0cy5oaSA9IChiaXRzLmhpIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPj4gIDQpID4+PiAwO1xuICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXG4gICAgICAgICAgICByZXR1cm4gYml0cztcbiAgICAgICAgaSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICg7IGkgPCAzOyArK2kpIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMubGVuKVxuICAgICAgICAgICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzKTtcbiAgICAgICAgICAgIC8vIDFzdC4uM3RoXG4gICAgICAgICAgICBiaXRzLmxvID0gKGJpdHMubG8gfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCBpICogNykgPj4+IDA7XG4gICAgICAgICAgICBpZiAodGhpcy5idWZbdGhpcy5wb3MrK10gPCAxMjgpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGJpdHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8gNHRoXG4gICAgICAgIGJpdHMubG8gPSAoYml0cy5sbyB8ICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSAmIDEyNykgPDwgaSAqIDcpID4+PiAwO1xuICAgICAgICByZXR1cm4gYml0cztcbiAgICB9XG4gICAgaWYgKHRoaXMubGVuIC0gdGhpcy5wb3MgPiA0KSB7IC8vIGZhc3Qgcm91dGUgKGhpKVxuICAgICAgICBmb3IgKDsgaSA8IDU7ICsraSkge1xuICAgICAgICAgICAgLy8gNnRoLi4xMHRoXG4gICAgICAgICAgICBiaXRzLmhpID0gKGJpdHMuaGkgfCAodGhpcy5idWZbdGhpcy5wb3NdICYgMTI3KSA8PCBpICogNyArIDMpID4+PiAwO1xuICAgICAgICAgICAgaWYgKHRoaXMuYnVmW3RoaXMucG9zKytdIDwgMTI4KVxuICAgICAgICAgICAgICAgIHJldHVybiBiaXRzO1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZm9yICg7IGkgPCA1OyArK2kpIHtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKHRoaXMucG9zID49IHRoaXMubGVuKVxuICAgICAgICAgICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzKTtcbiAgICAgICAgICAgIC8vIDZ0aC4uMTB0aFxuICAgICAgICAgICAgYml0cy5oaSA9IChiaXRzLmhpIHwgKHRoaXMuYnVmW3RoaXMucG9zXSAmIDEyNykgPDwgaSAqIDcgKyAzKSA+Pj4gMDtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSA8IDEyOClcbiAgICAgICAgICAgICAgICByZXR1cm4gYml0cztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHRocm93IEVycm9yKFwiaW52YWxpZCB2YXJpbnQgZW5jb2RpbmdcIik7XG59XG5cbi8qIGVzbGludC1lbmFibGUgbm8taW52YWxpZC10aGlzICovXG5cbi8qXG4gKiBSZWFkcyBhIHZhcmludCBhcyBhIHNpZ25lZCA2NCBiaXQgdmFsdWUuXG4gKiBAbmFtZSBSZWFkZXIjaW50NjRcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcbiAqL1xuXG4vKlxuICogUmVhZHMgYSB2YXJpbnQgYXMgYW4gdW5zaWduZWQgNjQgYml0IHZhbHVlLlxuICogQG5hbWUgUmVhZGVyI3VpbnQ2NFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7TG9uZ30gVmFsdWUgcmVhZFxuICovXG5cbi8qXG4gKiBSZWFkcyBhIHppZy16YWcgZW5jb2RlZCB2YXJpbnQgYXMgYSBzaWduZWQgNjQgYml0IHZhbHVlLlxuICogQG5hbWUgUmVhZGVyI3NpbnQ2NFxuICogQGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7TG9uZ30gVmFsdWUgcmVhZFxuICovXG5cbi8qKlxuICogUmVhZHMgYSB2YXJpbnQgYXMgYSBib29sZWFuLlxuICogQHJldHVybnMge2Jvb2xlYW59IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5ib29sID0gZnVuY3Rpb24gcmVhZF9ib29sKCkge1xuICAgIHJldHVybiB0aGlzLnVpbnQzMigpICE9PSAwO1xufTtcblxuZnVuY3Rpb24gcmVhZEZpeGVkMzJfZW5kKGJ1ZiwgZW5kKSB7IC8vIG5vdGUgdGhhdCB0aGlzIHVzZXMgYGVuZGAsIG5vdCBgcG9zYFxuICAgIHJldHVybiAoYnVmW2VuZCAtIDRdXG4gICAgICAgICAgfCBidWZbZW5kIC0gM10gPDwgOFxuICAgICAgICAgIHwgYnVmW2VuZCAtIDJdIDw8IDE2XG4gICAgICAgICAgfCBidWZbZW5kIC0gMV0gPDwgMjQpID4+PiAwO1xufVxuXG4vKipcbiAqIFJlYWRzIGZpeGVkIDMyIGJpdHMgYXMgYW4gdW5zaWduZWQgMzIgYml0IGludGVnZXIuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuZml4ZWQzMiA9IGZ1bmN0aW9uIHJlYWRfZml4ZWQzMigpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh0aGlzLnBvcyArIDQgPiB0aGlzLmxlbilcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIDQpO1xuXG4gICAgcmV0dXJuIHJlYWRGaXhlZDMyX2VuZCh0aGlzLmJ1ZiwgdGhpcy5wb3MgKz0gNCk7XG59O1xuXG4vKipcbiAqIFJlYWRzIGZpeGVkIDMyIGJpdHMgYXMgYSBzaWduZWQgMzIgYml0IGludGVnZXIuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuc2ZpeGVkMzIgPSBmdW5jdGlvbiByZWFkX3NmaXhlZDMyKCkge1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHRoaXMucG9zICsgNCA+IHRoaXMubGVuKVxuICAgICAgICB0aHJvdyBpbmRleE91dE9mUmFuZ2UodGhpcywgNCk7XG5cbiAgICByZXR1cm4gcmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KSB8IDA7XG59O1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1pbnZhbGlkLXRoaXMgKi9cblxuZnVuY3Rpb24gcmVhZEZpeGVkNjQoLyogdGhpczogUmVhZGVyICovKSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5wb3MgKyA4ID4gdGhpcy5sZW4pXG4gICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCA4KTtcblxuICAgIHJldHVybiBuZXcgTG9uZ0JpdHMocmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KSwgcmVhZEZpeGVkMzJfZW5kKHRoaXMuYnVmLCB0aGlzLnBvcyArPSA0KSk7XG59XG5cbi8qIGVzbGludC1lbmFibGUgbm8taW52YWxpZC10aGlzICovXG5cbi8qXG4gKiBSZWFkcyBmaXhlZCA2NCBiaXRzLlxuICogQG5hbWUgUmVhZGVyI2ZpeGVkNjRcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcbiAqL1xuXG4vKlxuICogUmVhZHMgemlnLXphZyBlbmNvZGVkIGZpeGVkIDY0IGJpdHMuXG4gKiBAbmFtZSBSZWFkZXIjc2ZpeGVkNjRcbiAqIEBmdW5jdGlvblxuICogQHJldHVybnMge0xvbmd9IFZhbHVlIHJlYWRcbiAqL1xuXG4vKipcbiAqIFJlYWRzIGEgZmxvYXQgKDMyIGJpdCkgYXMgYSBudW1iZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5mbG9hdCA9IGZ1bmN0aW9uIHJlYWRfZmxvYXQoKSB7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAodGhpcy5wb3MgKyA0ID4gdGhpcy5sZW4pXG4gICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCA0KTtcblxuICAgIHZhciB2YWx1ZSA9IHV0aWwuZmxvYXQucmVhZEZsb2F0TEUodGhpcy5idWYsIHRoaXMucG9zKTtcbiAgICB0aGlzLnBvcyArPSA0O1xuICAgIHJldHVybiB2YWx1ZTtcbn07XG5cbi8qKlxuICogUmVhZHMgYSBkb3VibGUgKDY0IGJpdCBmbG9hdCkgYXMgYSBudW1iZXIuXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFZhbHVlIHJlYWRcbiAqL1xuUmVhZGVyLnByb3RvdHlwZS5kb3VibGUgPSBmdW5jdGlvbiByZWFkX2RvdWJsZSgpIHtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh0aGlzLnBvcyArIDggPiB0aGlzLmxlbilcbiAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMsIDQpO1xuXG4gICAgdmFyIHZhbHVlID0gdXRpbC5mbG9hdC5yZWFkRG91YmxlTEUodGhpcy5idWYsIHRoaXMucG9zKTtcbiAgICB0aGlzLnBvcyArPSA4O1xuICAgIHJldHVybiB2YWx1ZTtcbn07XG5cbi8qKlxuICogUmVhZHMgYSBzZXF1ZW5jZSBvZiBieXRlcyBwcmVjZWVkZWQgYnkgaXRzIGxlbmd0aCBhcyBhIHZhcmludC5cbiAqIEByZXR1cm5zIHtVaW50OEFycmF5fSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuYnl0ZXMgPSBmdW5jdGlvbiByZWFkX2J5dGVzKCkge1xuICAgIHZhciBsZW5ndGggPSB0aGlzLnVpbnQzMigpLFxuICAgICAgICBzdGFydCAgPSB0aGlzLnBvcyxcbiAgICAgICAgZW5kICAgID0gdGhpcy5wb3MgKyBsZW5ndGg7XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoZW5kID4gdGhpcy5sZW4pXG4gICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCBsZW5ndGgpO1xuXG4gICAgdGhpcy5wb3MgKz0gbGVuZ3RoO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHRoaXMuYnVmKSkgLy8gcGxhaW4gYXJyYXlcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmLnNsaWNlKHN0YXJ0LCBlbmQpO1xuICAgIHJldHVybiBzdGFydCA9PT0gZW5kIC8vIGZpeCBmb3IgSUUgMTAvV2luOCBhbmQgb3RoZXJzJyBzdWJhcnJheSByZXR1cm5pbmcgYXJyYXkgb2Ygc2l6ZSAxXG4gICAgICAgID8gbmV3IHRoaXMuYnVmLmNvbnN0cnVjdG9yKDApXG4gICAgICAgIDogdGhpcy5fc2xpY2UuY2FsbCh0aGlzLmJ1Ziwgc3RhcnQsIGVuZCk7XG59O1xuXG4vKipcbiAqIFJlYWRzIGEgc3RyaW5nIHByZWNlZWRlZCBieSBpdHMgYnl0ZSBsZW5ndGggYXMgYSB2YXJpbnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBWYWx1ZSByZWFkXG4gKi9cblJlYWRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gcmVhZF9zdHJpbmcoKSB7XG4gICAgdmFyIGJ5dGVzID0gdGhpcy5ieXRlcygpO1xuICAgIHJldHVybiB1dGY4LnJlYWQoYnl0ZXMsIDAsIGJ5dGVzLmxlbmd0aCk7XG59O1xuXG4vKipcbiAqIFNraXBzIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGJ5dGVzIGlmIHNwZWNpZmllZCwgb3RoZXJ3aXNlIHNraXBzIGEgdmFyaW50LlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIExlbmd0aCBpZiBrbm93biwgb3RoZXJ3aXNlIGEgdmFyaW50IGlzIGFzc3VtZWRcbiAqIEByZXR1cm5zIHtSZWFkZXJ9IGB0aGlzYFxuICovXG5SZWFkZXIucHJvdG90eXBlLnNraXAgPSBmdW5jdGlvbiBza2lwKGxlbmd0aCkge1xuICAgIGlmICh0eXBlb2YgbGVuZ3RoID09PSBcIm51bWJlclwiKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAodGhpcy5wb3MgKyBsZW5ndGggPiB0aGlzLmxlbilcbiAgICAgICAgICAgIHRocm93IGluZGV4T3V0T2ZSYW5nZSh0aGlzLCBsZW5ndGgpO1xuICAgICAgICB0aGlzLnBvcyArPSBsZW5ndGg7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICBpZiAodGhpcy5wb3MgPj0gdGhpcy5sZW4pXG4gICAgICAgICAgICAgICAgdGhyb3cgaW5kZXhPdXRPZlJhbmdlKHRoaXMpO1xuICAgICAgICB9IHdoaWxlICh0aGlzLmJ1Zlt0aGlzLnBvcysrXSAmIDEyOCk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xufTtcblxuLyoqXG4gKiBTa2lwcyB0aGUgbmV4dCBlbGVtZW50IG9mIHRoZSBzcGVjaWZpZWQgd2lyZSB0eXBlLlxuICogQHBhcmFtIHtudW1iZXJ9IHdpcmVUeXBlIFdpcmUgdHlwZSByZWNlaXZlZFxuICogQHJldHVybnMge1JlYWRlcn0gYHRoaXNgXG4gKi9cblJlYWRlci5wcm90b3R5cGUuc2tpcFR5cGUgPSBmdW5jdGlvbih3aXJlVHlwZSkge1xuICAgIHN3aXRjaCAod2lyZVR5cGUpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgICAgdGhpcy5za2lwKCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgdGhpcy5za2lwKDgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHRoaXMuc2tpcCh0aGlzLnVpbnQzMigpKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICB3aGlsZSAoKHdpcmVUeXBlID0gdGhpcy51aW50MzIoKSAmIDcpICE9PSA0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5za2lwVHlwZSh3aXJlVHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgdGhpcy5za2lwKDQpO1xuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHRocm93IEVycm9yKFwiaW52YWxpZCB3aXJlIHR5cGUgXCIgKyB3aXJlVHlwZSArIFwiIGF0IG9mZnNldCBcIiArIHRoaXMucG9zKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG59O1xuXG5SZWFkZXIuX2NvbmZpZ3VyZSA9IGZ1bmN0aW9uKEJ1ZmZlclJlYWRlcl8pIHtcbiAgICBCdWZmZXJSZWFkZXIgPSBCdWZmZXJSZWFkZXJfO1xuXG4gICAgdmFyIGZuID0gdXRpbC5Mb25nID8gXCJ0b0xvbmdcIiA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIFwidG9OdW1iZXJcIjtcbiAgICB1dGlsLm1lcmdlKFJlYWRlci5wcm90b3R5cGUsIHtcblxuICAgICAgICBpbnQ2NDogZnVuY3Rpb24gcmVhZF9pbnQ2NCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkTG9uZ1ZhcmludC5jYWxsKHRoaXMpW2ZuXShmYWxzZSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdWludDY0OiBmdW5jdGlvbiByZWFkX3VpbnQ2NCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkTG9uZ1ZhcmludC5jYWxsKHRoaXMpW2ZuXSh0cnVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzaW50NjQ6IGZ1bmN0aW9uIHJlYWRfc2ludDY0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHJlYWRMb25nVmFyaW50LmNhbGwodGhpcykuenpEZWNvZGUoKVtmbl0oZmFsc2UpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGZpeGVkNjQ6IGZ1bmN0aW9uIHJlYWRfZml4ZWQ2NCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkRml4ZWQ2NC5jYWxsKHRoaXMpW2ZuXSh0cnVlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZml4ZWQ2NDogZnVuY3Rpb24gcmVhZF9zZml4ZWQ2NCgpIHtcbiAgICAgICAgICAgIHJldHVybiByZWFkRml4ZWQ2NC5jYWxsKHRoaXMpW2ZuXShmYWxzZSk7XG4gICAgICAgIH1cblxuICAgIH0pO1xufTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/protobufjs/src/reader.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/protobufjs/src/reader_buffer.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/protobufjs/src/reader_buffer.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = BufferReader;\n\n// extends Reader\nvar Reader = __webpack_require__(/*! ./reader */ \"(rsc)/./node_modules/@apollo/protobufjs/src/reader.js\");\n(BufferReader.prototype = Object.create(Reader.prototype)).constructor = BufferReader;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"(rsc)/./node_modules/@apollo/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs a new buffer reader instance.\n * @classdesc Wire format reader using node buffers.\n * @extends Reader\n * @constructor\n * @param {Buffer} buffer Buffer to read from\n */\nfunction BufferReader(buffer) {\n    Reader.call(this, buffer);\n\n    /**\n     * Read buffer.\n     * @name BufferReader#buf\n     * @type {Buffer}\n     */\n}\n\n/* istanbul ignore else */\nif (util.Buffer)\n    BufferReader.prototype._slice = util.Buffer.prototype.slice;\n\n/**\n * @override\n */\nBufferReader.prototype.string = function read_string_buffer() {\n    var len = this.uint32(); // modifies pos\n    return this.buf.utf8Slice(this.pos, this.pos = Math.min(this.pos + len, this.len));\n};\n\n/**\n * Reads a sequence of bytes preceeded by its length as a varint.\n * @name BufferReader#bytes\n * @function\n * @returns {Buffer} Value read\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9wcm90b2J1ZmpzL3NyYy9yZWFkZXJfYnVmZmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7O0FBRUE7QUFDQSxhQUFhLG1CQUFPLENBQUMsdUVBQVU7QUFDL0I7O0FBRUEsV0FBVyxtQkFBTyxDQUFDLG1GQUFnQjs7QUFFbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsY0FBYztBQUNkO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhLFFBQVE7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9wcm90b2J1ZmpzL3NyYy9yZWFkZXJfYnVmZmVyLmpzPzg1MjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5tb2R1bGUuZXhwb3J0cyA9IEJ1ZmZlclJlYWRlcjtcblxuLy8gZXh0ZW5kcyBSZWFkZXJcbnZhciBSZWFkZXIgPSByZXF1aXJlKFwiLi9yZWFkZXJcIik7XG4oQnVmZmVyUmVhZGVyLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoUmVhZGVyLnByb3RvdHlwZSkpLmNvbnN0cnVjdG9yID0gQnVmZmVyUmVhZGVyO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoXCIuL3V0aWwvbWluaW1hbFwiKTtcblxuLyoqXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGJ1ZmZlciByZWFkZXIgaW5zdGFuY2UuXG4gKiBAY2xhc3NkZXNjIFdpcmUgZm9ybWF0IHJlYWRlciB1c2luZyBub2RlIGJ1ZmZlcnMuXG4gKiBAZXh0ZW5kcyBSZWFkZXJcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBCdWZmZXIgdG8gcmVhZCBmcm9tXG4gKi9cbmZ1bmN0aW9uIEJ1ZmZlclJlYWRlcihidWZmZXIpIHtcbiAgICBSZWFkZXIuY2FsbCh0aGlzLCBidWZmZXIpO1xuXG4gICAgLyoqXG4gICAgICogUmVhZCBidWZmZXIuXG4gICAgICogQG5hbWUgQnVmZmVyUmVhZGVyI2J1ZlxuICAgICAqIEB0eXBlIHtCdWZmZXJ9XG4gICAgICovXG59XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG5pZiAodXRpbC5CdWZmZXIpXG4gICAgQnVmZmVyUmVhZGVyLnByb3RvdHlwZS5fc2xpY2UgPSB1dGlsLkJ1ZmZlci5wcm90b3R5cGUuc2xpY2U7XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkJ1ZmZlclJlYWRlci5wcm90b3R5cGUuc3RyaW5nID0gZnVuY3Rpb24gcmVhZF9zdHJpbmdfYnVmZmVyKCkge1xuICAgIHZhciBsZW4gPSB0aGlzLnVpbnQzMigpOyAvLyBtb2RpZmllcyBwb3NcbiAgICByZXR1cm4gdGhpcy5idWYudXRmOFNsaWNlKHRoaXMucG9zLCB0aGlzLnBvcyA9IE1hdGgubWluKHRoaXMucG9zICsgbGVuLCB0aGlzLmxlbikpO1xufTtcblxuLyoqXG4gKiBSZWFkcyBhIHNlcXVlbmNlIG9mIGJ5dGVzIHByZWNlZWRlZCBieSBpdHMgbGVuZ3RoIGFzIGEgdmFyaW50LlxuICogQG5hbWUgQnVmZmVyUmVhZGVyI2J5dGVzXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFZhbHVlIHJlYWRcbiAqL1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/protobufjs/src/reader_buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/protobufjs/src/roots.js":
/*!******************************************************!*\
  !*** ./node_modules/@apollo/protobufjs/src/roots.js ***!
  \******************************************************/
/***/ ((module) => {

"use strict";
eval("\nmodule.exports = {};\n\n/**\n * Named roots.\n * This is where pbjs stores generated structures (the option `-r, --root` specifies a name).\n * Can also be used manually to make roots available accross modules.\n * @name roots\n * @type {Object.<string,Root>}\n * @example\n * // pbjs -r myroot -o compiled.js ...\n *\n * // in another module:\n * require(\"./compiled.js\");\n *\n * // in any subsequent module:\n * var root = protobuf.roots[\"myroot\"];\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9wcm90b2J1ZmpzL3NyYy9yb290cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vcHJvdG9idWZqcy9zcmMvcm9vdHMuanM/N2JjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0ge307XG5cbi8qKlxuICogTmFtZWQgcm9vdHMuXG4gKiBUaGlzIGlzIHdoZXJlIHBianMgc3RvcmVzIGdlbmVyYXRlZCBzdHJ1Y3R1cmVzICh0aGUgb3B0aW9uIGAtciwgLS1yb290YCBzcGVjaWZpZXMgYSBuYW1lKS5cbiAqIENhbiBhbHNvIGJlIHVzZWQgbWFudWFsbHkgdG8gbWFrZSByb290cyBhdmFpbGFibGUgYWNjcm9zcyBtb2R1bGVzLlxuICogQG5hbWUgcm9vdHNcbiAqIEB0eXBlIHtPYmplY3QuPHN0cmluZyxSb290Pn1cbiAqIEBleGFtcGxlXG4gKiAvLyBwYmpzIC1yIG15cm9vdCAtbyBjb21waWxlZC5qcyAuLi5cbiAqXG4gKiAvLyBpbiBhbm90aGVyIG1vZHVsZTpcbiAqIHJlcXVpcmUoXCIuL2NvbXBpbGVkLmpzXCIpO1xuICpcbiAqIC8vIGluIGFueSBzdWJzZXF1ZW50IG1vZHVsZTpcbiAqIHZhciByb290ID0gcHJvdG9idWYucm9vdHNbXCJteXJvb3RcIl07XG4gKi9cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/protobufjs/src/roots.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/protobufjs/src/rpc.js":
/*!****************************************************!*\
  !*** ./node_modules/@apollo/protobufjs/src/rpc.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\n\n/**\n * Streaming RPC helpers.\n * @namespace\n */\nvar rpc = exports;\n\n/**\n * RPC implementation passed to {@link Service#create} performing a service request on network level, i.e. by utilizing http requests or websockets.\n * @typedef RPCImpl\n * @type {function}\n * @param {Method|rpc.ServiceMethod<Message<{}>,Message<{}>>} method Reflected or static method being called\n * @param {Uint8Array} requestData Request data\n * @param {RPCImplCallback} callback Callback function\n * @returns {undefined}\n * @example\n * function rpcImpl(method, requestData, callback) {\n *     if (protobuf.util.lcFirst(method.name) !== \"myMethod\") // compatible with static code\n *         throw Error(\"no such method\");\n *     asynchronouslyObtainAResponse(requestData, function(err, responseData) {\n *         callback(err, responseData);\n *     });\n * }\n */\n\n/**\n * Node-style callback as used by {@link RPCImpl}.\n * @typedef RPCImplCallback\n * @type {function}\n * @param {Error|null} error Error, if any, otherwise `null`\n * @param {Uint8Array|null} [response] Response data or `null` to signal end of stream, if there hasn't been an error\n * @returns {undefined}\n */\n\nrpc.Service = __webpack_require__(/*! ./rpc/service */ \"(rsc)/./node_modules/@apollo/protobufjs/src/rpc/service.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9wcm90b2J1ZmpzL3NyYy9ycGMuanMiLCJtYXBwaW5ncyI6IkFBQWE7O0FBRWI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlDQUFpQyxzQkFBc0I7QUFDdkQ7QUFDQSxVQUFVO0FBQ1YsV0FBVyxtQ0FBbUMsWUFBWSxJQUFJO0FBQzlELFdBQVcsWUFBWTtBQUN2QixXQUFXLGlCQUFpQjtBQUM1QixhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7O0FBRUE7QUFDQSxtQ0FBbUMsY0FBYztBQUNqRDtBQUNBLFVBQVU7QUFDVixXQUFXLFlBQVk7QUFDdkIsV0FBVyxpQkFBaUI7QUFDNUIsYUFBYTtBQUNiOztBQUVBLGNBQWMsbUJBQU8sQ0FBQyxpRkFBZSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3Byb3RvYnVmanMvc3JjL3JwYy5qcz9jOGNiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKipcbiAqIFN0cmVhbWluZyBSUEMgaGVscGVycy5cbiAqIEBuYW1lc3BhY2VcbiAqL1xudmFyIHJwYyA9IGV4cG9ydHM7XG5cbi8qKlxuICogUlBDIGltcGxlbWVudGF0aW9uIHBhc3NlZCB0byB7QGxpbmsgU2VydmljZSNjcmVhdGV9IHBlcmZvcm1pbmcgYSBzZXJ2aWNlIHJlcXVlc3Qgb24gbmV0d29yayBsZXZlbCwgaS5lLiBieSB1dGlsaXppbmcgaHR0cCByZXF1ZXN0cyBvciB3ZWJzb2NrZXRzLlxuICogQHR5cGVkZWYgUlBDSW1wbFxuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtNZXRob2R8cnBjLlNlcnZpY2VNZXRob2Q8TWVzc2FnZTx7fT4sTWVzc2FnZTx7fT4+fSBtZXRob2QgUmVmbGVjdGVkIG9yIHN0YXRpYyBtZXRob2QgYmVpbmcgY2FsbGVkXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl9IHJlcXVlc3REYXRhIFJlcXVlc3QgZGF0YVxuICogQHBhcmFtIHtSUENJbXBsQ2FsbGJhY2t9IGNhbGxiYWNrIENhbGxiYWNrIGZ1bmN0aW9uXG4gKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICogQGV4YW1wbGVcbiAqIGZ1bmN0aW9uIHJwY0ltcGwobWV0aG9kLCByZXF1ZXN0RGF0YSwgY2FsbGJhY2spIHtcbiAqICAgICBpZiAocHJvdG9idWYudXRpbC5sY0ZpcnN0KG1ldGhvZC5uYW1lKSAhPT0gXCJteU1ldGhvZFwiKSAvLyBjb21wYXRpYmxlIHdpdGggc3RhdGljIGNvZGVcbiAqICAgICAgICAgdGhyb3cgRXJyb3IoXCJubyBzdWNoIG1ldGhvZFwiKTtcbiAqICAgICBhc3luY2hyb25vdXNseU9idGFpbkFSZXNwb25zZShyZXF1ZXN0RGF0YSwgZnVuY3Rpb24oZXJyLCByZXNwb25zZURhdGEpIHtcbiAqICAgICAgICAgY2FsbGJhY2soZXJyLCByZXNwb25zZURhdGEpO1xuICogICAgIH0pO1xuICogfVxuICovXG5cbi8qKlxuICogTm9kZS1zdHlsZSBjYWxsYmFjayBhcyB1c2VkIGJ5IHtAbGluayBSUENJbXBsfS5cbiAqIEB0eXBlZGVmIFJQQ0ltcGxDYWxsYmFja1xuICogQHR5cGUge2Z1bmN0aW9ufVxuICogQHBhcmFtIHtFcnJvcnxudWxsfSBlcnJvciBFcnJvciwgaWYgYW55LCBvdGhlcndpc2UgYG51bGxgXG4gKiBAcGFyYW0ge1VpbnQ4QXJyYXl8bnVsbH0gW3Jlc3BvbnNlXSBSZXNwb25zZSBkYXRhIG9yIGBudWxsYCB0byBzaWduYWwgZW5kIG9mIHN0cmVhbSwgaWYgdGhlcmUgaGFzbid0IGJlZW4gYW4gZXJyb3JcbiAqIEByZXR1cm5zIHt1bmRlZmluZWR9XG4gKi9cblxucnBjLlNlcnZpY2UgPSByZXF1aXJlKFwiLi9ycGMvc2VydmljZVwiKTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/protobufjs/src/rpc.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/protobufjs/src/rpc/service.js":
/*!************************************************************!*\
  !*** ./node_modules/@apollo/protobufjs/src/rpc/service.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Service;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"(rsc)/./node_modules/@apollo/protobufjs/src/util/minimal.js\");\n\n// Extends EventEmitter\n(Service.prototype = Object.create(util.EventEmitter.prototype)).constructor = Service;\n\n/**\n * A service method callback as used by {@link rpc.ServiceMethod|ServiceMethod}.\n *\n * Differs from {@link RPCImplCallback} in that it is an actual callback of a service method which may not return `response = null`.\n * @typedef rpc.ServiceMethodCallback\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {Error|null} error Error, if any\n * @param {TRes} [response] Response message\n * @returns {undefined}\n */\n\n/**\n * A service method part of a {@link rpc.Service} as created by {@link Service.create}.\n * @typedef rpc.ServiceMethod\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n * @type {function}\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} [callback] Node-style callback called with the error, if any, and the response message\n * @returns {Promise<Message<TRes>>} Promise if `callback` has been omitted, otherwise `undefined`\n */\n\n/**\n * Constructs a new RPC service instance.\n * @classdesc An RPC service as returned by {@link Service#create}.\n * @exports rpc.Service\n * @extends util.EventEmitter\n * @constructor\n * @param {RPCImpl} rpcImpl RPC implementation\n * @param {boolean} [requestDelimited=false] Whether requests are length-delimited\n * @param {boolean} [responseDelimited=false] Whether responses are length-delimited\n */\nfunction Service(rpcImpl, requestDelimited, responseDelimited) {\n\n    if (typeof rpcImpl !== \"function\")\n        throw TypeError(\"rpcImpl must be a function\");\n\n    util.EventEmitter.call(this);\n\n    /**\n     * RPC implementation. Becomes `null` once the service is ended.\n     * @type {RPCImpl|null}\n     */\n    this.rpcImpl = rpcImpl;\n\n    /**\n     * Whether requests are length-delimited.\n     * @type {boolean}\n     */\n    this.requestDelimited = Boolean(requestDelimited);\n\n    /**\n     * Whether responses are length-delimited.\n     * @type {boolean}\n     */\n    this.responseDelimited = Boolean(responseDelimited);\n}\n\n/**\n * Calls a service method through {@link rpc.Service#rpcImpl|rpcImpl}.\n * @param {Method|rpc.ServiceMethod<TReq,TRes>} method Reflected or static method\n * @param {Constructor<TReq>} requestCtor Request constructor\n * @param {Constructor<TRes>} responseCtor Response constructor\n * @param {TReq|Properties<TReq>} request Request message or plain object\n * @param {rpc.ServiceMethodCallback<TRes>} callback Service callback\n * @returns {undefined}\n * @template TReq extends Message<TReq>\n * @template TRes extends Message<TRes>\n */\nService.prototype.rpcCall = function rpcCall(method, requestCtor, responseCtor, request, callback) {\n\n    if (!request)\n        throw TypeError(\"request must be specified\");\n\n    var self = this;\n    if (!callback)\n        return util.asPromise(rpcCall, self, method, requestCtor, responseCtor, request);\n\n    if (!self.rpcImpl) {\n        setTimeout(function() { callback(Error(\"already ended\")); }, 0);\n        return undefined;\n    }\n\n    try {\n        return self.rpcImpl(\n            method,\n            requestCtor[self.requestDelimited ? \"encodeDelimited\" : \"encode\"](request).finish(),\n            function rpcCallback(err, response) {\n\n                if (err) {\n                    self.emit(\"error\", err, method);\n                    return callback(err);\n                }\n\n                if (response === null) {\n                    self.end(/* endedByRPC */ true);\n                    return undefined;\n                }\n\n                if (!(response instanceof responseCtor)) {\n                    try {\n                        response = responseCtor[self.responseDelimited ? \"decodeDelimited\" : \"decode\"](response);\n                    } catch (err) {\n                        self.emit(\"error\", err, method);\n                        return callback(err);\n                    }\n                }\n\n                self.emit(\"data\", response, method);\n                return callback(null, response);\n            }\n        );\n    } catch (err) {\n        self.emit(\"error\", err, method);\n        setTimeout(function() { callback(err); }, 0);\n        return undefined;\n    }\n};\n\n/**\n * Ends this service and emits the `end` event.\n * @param {boolean} [endedByRPC=false] Whether the service has been ended by the RPC implementation.\n * @returns {rpc.Service} `this`\n */\nService.prototype.end = function end(endedByRPC) {\n    if (this.rpcImpl) {\n        if (!endedByRPC) // signal end to rpcImpl\n            this.rpcImpl(null, null, null);\n        this.rpcImpl = null;\n        this.emit(\"end\").off();\n    }\n    return this;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/protobufjs/src/rpc/service.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/protobufjs/src/util/longbits.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/protobufjs/src/util/longbits.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = LongBits;\n\nvar util = __webpack_require__(/*! ../util/minimal */ \"(rsc)/./node_modules/@apollo/protobufjs/src/util/minimal.js\");\n\n/**\n * Constructs new long bits.\n * @classdesc Helper class for working with the low and high bits of a 64 bit value.\n * @memberof util\n * @constructor\n * @param {number} lo Low 32 bits, unsigned\n * @param {number} hi High 32 bits, unsigned\n */\nfunction LongBits(lo, hi) {\n\n    // note that the casts below are theoretically unnecessary as of today, but older statically\n    // generated converter code might still call the ctor with signed 32bits. kept for compat.\n\n    /**\n     * Low bits.\n     * @type {number}\n     */\n    this.lo = lo >>> 0;\n\n    /**\n     * High bits.\n     * @type {number}\n     */\n    this.hi = hi >>> 0;\n}\n\n/**\n * Zero bits.\n * @memberof util.LongBits\n * @type {util.LongBits}\n */\nvar zero = LongBits.zero = new LongBits(0, 0);\n\nzero.toNumber = function() { return 0; };\nzero.zzEncode = zero.zzDecode = function() { return this; };\nzero.length = function() { return 1; };\n\n/**\n * Zero hash.\n * @memberof util.LongBits\n * @type {string}\n */\nvar zeroHash = LongBits.zeroHash = \"\\0\\0\\0\\0\\0\\0\\0\\0\";\n\n/**\n * Constructs new long bits from the specified number.\n * @param {number} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.fromNumber = function fromNumber(value) {\n    if (value === 0)\n        return zero;\n    var sign = value < 0;\n    if (sign)\n        value = -value;\n    var lo = value >>> 0,\n        hi = (value - lo) / 4294967296 >>> 0;\n    if (sign) {\n        hi = ~hi >>> 0;\n        lo = ~lo >>> 0;\n        if (++lo > 4294967295) {\n            lo = 0;\n            if (++hi > 4294967295)\n                hi = 0;\n        }\n    }\n    return new LongBits(lo, hi);\n};\n\n/**\n * Constructs new long bits from a number, long or string.\n * @param {number|string} value Value\n * @returns {util.LongBits} Instance\n */\nLongBits.from = function from(value) {\n    if (typeof value === \"number\")\n        return LongBits.fromNumber(value);\n    if (util.isString(value)) {\n        /* istanbul ignore else */\n        if (util.Long)\n            value = util.Long.fromString(value);\n        else\n            return LongBits.fromNumber(parseInt(value, 10));\n    }\n    return value.low || value.high ? new LongBits(value.low >>> 0, value.high >>> 0) : zero;\n};\n\n/**\n * Converts this long bits to a possibly unsafe JavaScript number.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {number} Possibly unsafe number\n */\nLongBits.prototype.toNumber = function toNumber(unsigned) {\n    if (!unsigned && this.hi >>> 31) {\n        var lo = ~this.lo + 1 >>> 0,\n            hi = ~this.hi     >>> 0;\n        if (!lo)\n            hi = hi + 1 >>> 0;\n        return -(lo + hi * 4294967296);\n    }\n    return this.lo + this.hi * 4294967296;\n};\n\n/*\n * Converts this long bits to a long.\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long} Long\n */\nLongBits.prototype.toLong = function toLong(unsigned) {\n    return util.Long\n        ? new util.Long(this.lo | 0, this.hi | 0, Boolean(unsigned))\n        /* istanbul ignore next */\n        : { low: this.lo | 0, high: this.hi | 0, unsigned: Boolean(unsigned) };\n};\n\nvar charCodeAt = String.prototype.charCodeAt;\n\n/**\n * Constructs new long bits from the specified 8 characters long hash.\n * @param {string} hash Hash\n * @returns {util.LongBits} Bits\n */\nLongBits.fromHash = function fromHash(hash) {\n    if (hash === zeroHash)\n        return zero;\n    return new LongBits(\n        ( charCodeAt.call(hash, 0)\n        | charCodeAt.call(hash, 1) << 8\n        | charCodeAt.call(hash, 2) << 16\n        | charCodeAt.call(hash, 3) << 24) >>> 0\n    ,\n        ( charCodeAt.call(hash, 4)\n        | charCodeAt.call(hash, 5) << 8\n        | charCodeAt.call(hash, 6) << 16\n        | charCodeAt.call(hash, 7) << 24) >>> 0\n    );\n};\n\n/**\n * Converts this long bits to a 8 characters long hash.\n * @returns {string} Hash\n */\nLongBits.prototype.toHash = function toHash() {\n    return String.fromCharCode(\n        this.lo        & 255,\n        this.lo >>> 8  & 255,\n        this.lo >>> 16 & 255,\n        this.lo >>> 24      ,\n        this.hi        & 255,\n        this.hi >>> 8  & 255,\n        this.hi >>> 16 & 255,\n        this.hi >>> 24\n    );\n};\n\n/**\n * Zig-zag encodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzEncode = function zzEncode() {\n    var mask =   this.hi >> 31;\n    this.hi  = ((this.hi << 1 | this.lo >>> 31) ^ mask) >>> 0;\n    this.lo  = ( this.lo << 1                   ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Zig-zag decodes this long bits.\n * @returns {util.LongBits} `this`\n */\nLongBits.prototype.zzDecode = function zzDecode() {\n    var mask = -(this.lo & 1);\n    this.lo  = ((this.lo >>> 1 | this.hi << 31) ^ mask) >>> 0;\n    this.hi  = ( this.hi >>> 1                  ^ mask) >>> 0;\n    return this;\n};\n\n/**\n * Calculates the length of this longbits when encoded as a varint.\n * @returns {number} Length\n */\nLongBits.prototype.length = function length() {\n    var part0 =  this.lo,\n        part1 = (this.lo >>> 28 | this.hi << 4) >>> 0,\n        part2 =  this.hi >>> 24;\n    return part2 === 0\n         ? part1 === 0\n           ? part0 < 16384\n             ? part0 < 128 ? 1 : 2\n             : part0 < 2097152 ? 3 : 4\n           : part1 < 16384\n             ? part1 < 128 ? 5 : 6\n             : part1 < 2097152 ? 7 : 8\n         : part2 < 128 ? 9 : 10;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/protobufjs/src/util/longbits.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/protobufjs/src/util/minimal.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/protobufjs/src/util/minimal.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar util = exports;\n\n// used to return a Promise where callback is omitted\nutil.asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"(rsc)/./node_modules/@protobufjs/aspromise/index.js\");\n\n// converts to / from base64 encoded strings\nutil.base64 = __webpack_require__(/*! @protobufjs/base64 */ \"(rsc)/./node_modules/@protobufjs/base64/index.js\");\n\n// base class of rpc.Service\nutil.EventEmitter = __webpack_require__(/*! @protobufjs/eventemitter */ \"(rsc)/./node_modules/@protobufjs/eventemitter/index.js\");\n\n// float handling accross browsers\nutil.float = __webpack_require__(/*! @protobufjs/float */ \"(rsc)/./node_modules/@protobufjs/float/index.js\");\n\n// requires modules optionally and hides the call from bundlers\nutil.inquire = __webpack_require__(/*! @protobufjs/inquire */ \"(rsc)/./node_modules/@protobufjs/inquire/index.js\");\n\n// converts to / from utf8 encoded strings\nutil.utf8 = __webpack_require__(/*! @protobufjs/utf8 */ \"(rsc)/./node_modules/@protobufjs/utf8/index.js\");\n\n// provides a node-like buffer pool in the browser\nutil.pool = __webpack_require__(/*! @protobufjs/pool */ \"(rsc)/./node_modules/@protobufjs/pool/index.js\");\n\n// utility to work with the low and high bits of a 64 bit value\nutil.LongBits = __webpack_require__(/*! ./longbits */ \"(rsc)/./node_modules/@apollo/protobufjs/src/util/longbits.js\");\n\n// global object reference\nutil.global = typeof window !== \"undefined\" && window\n           || typeof global !== \"undefined\" && global\n           || typeof self   !== \"undefined\" && self\n           || this; // eslint-disable-line no-invalid-this\n\n/**\n * An immuable empty array.\n * @memberof util\n * @type {Array.<*>}\n * @const\n */\nutil.emptyArray = Object.freeze ? Object.freeze([]) : /* istanbul ignore next */ []; // used on prototypes\n\n/**\n * An immutable empty object.\n * @type {Object}\n * @const\n */\nutil.emptyObject = Object.freeze ? Object.freeze({}) : /* istanbul ignore next */ {}; // used on prototypes\n\n/**\n * Whether running within node or not.\n * @memberof util\n * @type {boolean}\n * @const\n */\nutil.isNode = Boolean(util.global.process && util.global.process.versions && util.global.process.versions.node);\n\n/**\n * Tests if the specified value is an integer.\n * @function\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is an integer\n */\nutil.isInteger = Number.isInteger || /* istanbul ignore next */ function isInteger(value) {\n    return typeof value === \"number\" && isFinite(value) && Math.floor(value) === value;\n};\n\n/**\n * Tests if the specified value is a string.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a string\n */\nutil.isString = function isString(value) {\n    return typeof value === \"string\" || value instanceof String;\n};\n\n/**\n * Tests if the specified value is a non-null object.\n * @param {*} value Value to test\n * @returns {boolean} `true` if the value is a non-null object\n */\nutil.isObject = function isObject(value) {\n    return value && typeof value === \"object\";\n};\n\n/**\n * Checks if a property on a message is considered to be present.\n * This is an alias of {@link util.isSet}.\n * @function\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isset =\n\n/**\n * Checks if a property on a message is considered to be present.\n * @param {Object} obj Plain object or message instance\n * @param {string} prop Property name\n * @returns {boolean} `true` if considered to be present, otherwise `false`\n */\nutil.isSet = function isSet(obj, prop) {\n    var value = obj[prop];\n    if (value != null && obj.hasOwnProperty(prop)) // eslint-disable-line eqeqeq, no-prototype-builtins\n        return typeof value !== \"object\" || (Array.isArray(value) ? value.length : Object.keys(value).length) > 0;\n    return false;\n};\n\n/**\n * Any compatible Buffer instance.\n * This is a minimal stand-alone definition of a Buffer instance. The actual type is that exported by node's typings.\n * @interface Buffer\n * @extends Uint8Array\n */\n\n/**\n * Node's Buffer class if available.\n * @type {Constructor<Buffer>}\n */\nutil.Buffer = (function() {\n    try {\n        var Buffer = util.inquire(\"buffer\").Buffer;\n        // refuse to use non-node buffers if not explicitly assigned (perf reasons):\n        return Buffer.prototype.utf8Write ? Buffer : /* istanbul ignore next */ null;\n    } catch (e) {\n        /* istanbul ignore next */\n        return null;\n    }\n})();\n\n// Internal alias of or polyfull for Buffer.from.\nutil._Buffer_from = null;\n\n// Internal alias of or polyfill for Buffer.allocUnsafe.\nutil._Buffer_allocUnsafe = null;\n\n/**\n * Creates a new buffer of whatever type supported by the environment.\n * @param {number|number[]} [sizeOrArray=0] Buffer size or number array\n * @returns {Uint8Array|Buffer} Buffer\n */\nutil.newBuffer = function newBuffer(sizeOrArray) {\n    /* istanbul ignore next */\n    return typeof sizeOrArray === \"number\"\n        ? util.Buffer\n            ? util._Buffer_allocUnsafe(sizeOrArray)\n            : new util.Array(sizeOrArray)\n        : util.Buffer\n            ? util._Buffer_from(sizeOrArray)\n            : typeof Uint8Array === \"undefined\"\n                ? sizeOrArray\n                : new Uint8Array(sizeOrArray);\n};\n\n/**\n * Array implementation used in the browser. `Uint8Array` if supported, otherwise `Array`.\n * @type {Constructor<Uint8Array>}\n */\nutil.Array = typeof Uint8Array !== \"undefined\" ? Uint8Array /* istanbul ignore next */ : Array;\n\n/*\n * Long.js's Long class if available and $ENABLE_LONG is set. This lets us leave it on\n * for this package's tests but have it be off in actual usage-reporting-protobuf use.\n * (We leave it on for some mode where there is no `process` that is used by tests.)\n */\nutil.Long = (typeof process === 'undefined' || process.env.ENABLE_LONG) ? (/* istanbul ignore next */ util.global.dcodeIO && /* istanbul ignore next */ util.global.dcodeIO.Long\n         || /* istanbul ignore next */ util.global.Long\n         || util.inquire(\"long\")) : undefined;\n\n/**\n * Regular expression used to verify 2 bit (`bool`) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key2Re = /^true|false|0|1$/;\n\n/**\n * Regular expression used to verify 32 bit (`int32` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key32Re = /^-?(?:0|[1-9][0-9]*)$/;\n\n/**\n * Regular expression used to verify 64 bit (`int64` etc.) map keys.\n * @type {RegExp}\n * @const\n */\nutil.key64Re = /^(?:[\\\\x00-\\\\xff]{8}|-?(?:0|[1-9][0-9]*))$/;\n\n/*\n * Converts a number or long to an 8 characters long hash string.\n * @param {Long|number} value Value to convert\n * @returns {string} Hash\n */\nutil.longToHash = function longToHash(value) {\n    return value\n        ? util.LongBits.from(value).toHash()\n        : util.LongBits.zeroHash;\n};\n\n/*\n * Converts an 8 characters long hash string to a long or number.\n * @param {string} hash Hash\n * @param {boolean} [unsigned=false] Whether unsigned or not\n * @returns {Long|number} Original value\n */\nutil.longFromHash = function longFromHash(hash, unsigned) {\n    var bits = util.LongBits.fromHash(hash);\n    if (util.Long)\n        return util.Long.fromBits(bits.lo, bits.hi, unsigned);\n    return bits.toNumber(Boolean(unsigned));\n};\n\n/**\n * Merges the properties of the source object into the destination object.\n * @memberof util\n * @param {Object.<string,*>} dst Destination object\n * @param {Object.<string,*>} src Source object\n * @param {boolean} [ifNotSet=false] Merges only if the key is not already set\n * @returns {Object.<string,*>} Destination object\n */\nfunction merge(dst, src, ifNotSet) { // used by converters\n    for (var keys = Object.keys(src), i = 0; i < keys.length; ++i)\n        if (dst[keys[i]] === undefined || !ifNotSet)\n            dst[keys[i]] = src[keys[i]];\n    return dst;\n}\n\nutil.merge = merge;\n\n/**\n * Converts the first character of a string to lower case.\n * @param {string} str String to convert\n * @returns {string} Converted string\n */\nutil.lcFirst = function lcFirst(str) {\n    return str.charAt(0).toLowerCase() + str.substring(1);\n};\n\n/**\n * Creates a custom error constructor.\n * @memberof util\n * @param {string} name Error name\n * @returns {Constructor<Error>} Custom error constructor\n */\nfunction newError(name) {\n\n    function CustomError(message, properties) {\n\n        if (!(this instanceof CustomError))\n            return new CustomError(message, properties);\n\n        // Error.call(this, message);\n        // ^ just returns a new error instance because the ctor can be called as a function\n\n        Object.defineProperty(this, \"message\", { get: function() { return message; } });\n\n        /* istanbul ignore next */\n        if (Error.captureStackTrace) // node\n            Error.captureStackTrace(this, CustomError);\n        else\n            Object.defineProperty(this, \"stack\", { value: (new Error()).stack || \"\" });\n\n        if (properties)\n            merge(this, properties);\n    }\n\n    (CustomError.prototype = Object.create(Error.prototype)).constructor = CustomError;\n\n    Object.defineProperty(CustomError.prototype, \"name\", { get: function() { return name; } });\n\n    CustomError.prototype.toString = function toString() {\n        return this.name + \": \" + this.message;\n    };\n\n    return CustomError;\n}\n\nutil.newError = newError;\n\n/**\n * Constructs a new protocol error.\n * @classdesc Error subclass indicating a protocol specifc error.\n * @memberof util\n * @extends Error\n * @template T extends Message<T>\n * @constructor\n * @param {string} message Error message\n * @param {Object.<string,*>} [properties] Additional properties\n * @example\n * try {\n *     MyMessage.decode(someBuffer); // throws if required fields are missing\n * } catch (e) {\n *     if (e instanceof ProtocolError && e.instance)\n *         console.log(\"decoded so far: \" + JSON.stringify(e.instance));\n * }\n */\nutil.ProtocolError = newError(\"ProtocolError\");\n\n/**\n * So far decoded message instance.\n * @name util.ProtocolError#instance\n * @type {Message<T>}\n */\n\n/**\n * A OneOf getter as returned by {@link util.oneOfGetter}.\n * @typedef OneOfGetter\n * @type {function}\n * @returns {string|undefined} Set field name, if any\n */\n\n/**\n * Builds a getter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfGetter} Unbound getter\n */\nutil.oneOfGetter = function getOneOf(fieldNames) {\n    var fieldMap = {};\n    for (var i = 0; i < fieldNames.length; ++i)\n        fieldMap[fieldNames[i]] = 1;\n\n    /**\n     * @returns {string|undefined} Set field name, if any\n     * @this Object\n     * @ignore\n     */\n    return function() { // eslint-disable-line consistent-return\n        for (var keys = Object.keys(this), i = keys.length - 1; i > -1; --i)\n            if (fieldMap[keys[i]] === 1 && this[keys[i]] !== undefined && this[keys[i]] !== null)\n                return keys[i];\n    };\n};\n\n/**\n * A OneOf setter as returned by {@link util.oneOfSetter}.\n * @typedef OneOfSetter\n * @type {function}\n * @param {string|undefined} value Field name\n * @returns {undefined}\n */\n\n/**\n * Builds a setter for a oneof's present field name.\n * @param {string[]} fieldNames Field names\n * @returns {OneOfSetter} Unbound setter\n */\nutil.oneOfSetter = function setOneOf(fieldNames) {\n\n    /**\n     * @param {string} name Field name\n     * @returns {undefined}\n     * @this Object\n     * @ignore\n     */\n    return function(name) {\n        for (var i = 0; i < fieldNames.length; ++i)\n            if (fieldNames[i] !== name)\n                delete this[fieldNames[i]];\n    };\n};\n\n/**\n * Default conversion options used for {@link Message#toJSON} implementations.\n *\n * These options are close to proto3's JSON mapping with the exception that internal types like Any are handled just like messages. More precisely:\n *\n * - Longs become strings\n * - Enums become string keys\n * - Bytes become base64 encoded strings\n * - (Sub-)Messages become plain objects\n * - Maps become plain objects with all string keys\n * - Repeated fields become arrays\n * - NaN and Infinity for float and double fields become strings\n *\n * @type {IConversionOptions}\n * @see https://developers.google.com/protocol-buffers/docs/proto3?hl=en#json\n */\nutil.toJSONOptions = {\n    longs: String,\n    enums: String,\n    bytes: String,\n    json: true\n};\n\n// Sets up buffer utility according to the environment (called in index-minimal)\nutil._configure = function() {\n    var Buffer = util.Buffer;\n    /* istanbul ignore if */\n    if (!Buffer) {\n        util._Buffer_from = util._Buffer_allocUnsafe = null;\n        return;\n    }\n    // because node 4.x buffers are incompatible & immutable\n    // see: https://github.com/dcodeIO/protobuf.js/pull/665\n    util._Buffer_from = Buffer.from !== Uint8Array.from && Buffer.from ||\n        /* istanbul ignore next */\n        function Buffer_from(value, encoding) {\n            return new Buffer(value, encoding);\n        };\n    util._Buffer_allocUnsafe = Buffer.allocUnsafe ||\n        /* istanbul ignore next */\n        function Buffer_allocUnsafe(size) {\n            return new Buffer(size);\n        };\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/protobufjs/src/util/minimal.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/protobufjs/src/writer.js":
/*!*******************************************************!*\
  !*** ./node_modules/@apollo/protobufjs/src/writer.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = Writer;\n\nvar util      = __webpack_require__(/*! ./util/minimal */ \"(rsc)/./node_modules/@apollo/protobufjs/src/util/minimal.js\");\n\nvar BufferWriter; // cyclic\n\nvar LongBits  = util.LongBits,\n    base64    = util.base64,\n    utf8      = util.utf8;\n\n/**\n * Constructs a new writer operation instance.\n * @classdesc Scheduled writer operation.\n * @constructor\n * @param {function(*, Uint8Array, number)} fn Function to call\n * @param {number} len Value byte length\n * @param {*} val Value to write\n * @ignore\n */\nfunction Op(fn, len, val) {\n\n    /**\n     * Function to call.\n     * @type {function(Uint8Array, number, *)}\n     */\n    this.fn = fn;\n\n    /**\n     * Value byte length.\n     * @type {number}\n     */\n    this.len = len;\n\n    /**\n     * Next operation.\n     * @type {Writer.Op|undefined}\n     */\n    this.next = undefined;\n\n    /**\n     * Value to write.\n     * @type {*}\n     */\n    this.val = val; // type varies\n}\n\n/* istanbul ignore next */\nfunction noop() {} // eslint-disable-line no-empty-function\n\n/**\n * Constructs a new writer state instance.\n * @classdesc Copied writer state.\n * @memberof Writer\n * @constructor\n * @param {Writer} writer Writer to copy state from\n * @ignore\n */\nfunction State(writer) {\n\n    /**\n     * Current head.\n     * @type {Writer.Op}\n     */\n    this.head = writer.head;\n\n    /**\n     * Current tail.\n     * @type {Writer.Op}\n     */\n    this.tail = writer.tail;\n\n    /**\n     * Current buffer length.\n     * @type {number}\n     */\n    this.len = writer.len;\n\n    /**\n     * Next state.\n     * @type {State|null}\n     */\n    this.next = writer.states;\n}\n\n/**\n * Constructs a new writer instance.\n * @classdesc Wire format writer using `Uint8Array` if available, otherwise `Array`.\n * @constructor\n */\nfunction Writer() {\n\n    /**\n     * Current length.\n     * @type {number}\n     */\n    this.len = 0;\n\n    /**\n     * Operations head.\n     * @type {Object}\n     */\n    this.head = new Op(noop, 0, 0);\n\n    /**\n     * Operations tail\n     * @type {Object}\n     */\n    this.tail = this.head;\n\n    /**\n     * Linked forked states.\n     * @type {Object|null}\n     */\n    this.states = null;\n\n    // When a value is written, the writer calculates its byte length and puts it into a linked\n    // list of operations to perform when finish() is called. This both allows us to allocate\n    // buffers of the exact required size and reduces the amount of work we have to do compared\n    // to first calculating over objects and then encoding over objects. In our case, the encoding\n    // part is just a linked list walk calling operations with already prepared values.\n}\n\n/**\n * Creates a new writer.\n * @function\n * @returns {BufferWriter|Writer} A {@link BufferWriter} when Buffers are supported, otherwise a {@link Writer}\n */\nWriter.create = util.Buffer\n    ? function create_buffer_setup() {\n        return (Writer.create = function create_buffer() {\n            return new BufferWriter();\n        })();\n    }\n    /* istanbul ignore next */\n    : function create_array() {\n        return new Writer();\n    };\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Uint8Array} Buffer\n */\nWriter.alloc = function alloc(size) {\n    return new util.Array(size);\n};\n\n// Use Uint8Array buffer pool in the browser, just like node does with buffers\n/* istanbul ignore else */\nif (util.Array !== Array)\n    Writer.alloc = util.pool(Writer.alloc, util.Array.prototype.subarray);\n\n/**\n * Pushes a new operation to the queue.\n * @param {function(Uint8Array, number, *)} fn Function to call\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @returns {Writer} `this`\n * @private\n */\nWriter.prototype._push = function push(fn, len, val) {\n    this.tail = this.tail.next = new Op(fn, len, val);\n    this.len += len;\n    return this;\n};\n\nfunction writeByte(val, buf, pos) {\n    buf[pos] = val & 255;\n}\n\nfunction writeVarint32(val, buf, pos) {\n    while (val > 127) {\n        buf[pos++] = val & 127 | 128;\n        val >>>= 7;\n    }\n    buf[pos] = val;\n}\n\n/**\n * Constructs a new varint writer operation instance.\n * @classdesc Scheduled varint writer operation.\n * @extends Op\n * @constructor\n * @param {number} len Value byte length\n * @param {number} val Value to write\n * @ignore\n */\nfunction VarintOp(len, val) {\n    this.len = len;\n    this.next = undefined;\n    this.val = val;\n}\n\nVarintOp.prototype = Object.create(Op.prototype);\nVarintOp.prototype.fn = writeVarint32;\n\n/**\n * Writes an unsigned 32 bit value as a varint.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.uint32 = function write_uint32(value) {\n    // here, the call to this.push has been inlined and a varint specific Op subclass is used.\n    // uint32 is by far the most frequently used operation and benefits significantly from this.\n    this.len += (this.tail = this.tail.next = new VarintOp(\n        (value = value >>> 0)\n                < 128       ? 1\n        : value < 16384     ? 2\n        : value < 2097152   ? 3\n        : value < 268435456 ? 4\n        :                     5,\n    value)).len;\n    return this;\n};\n\n/**\n * Writes a signed 32 bit value as a varint.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.int32 = function write_int32(value) {\n    return value < 0\n        ? this._push(writeVarint64, 10, LongBits.fromNumber(value)) // 10 bytes per spec\n        : this.uint32(value);\n};\n\n/**\n * Writes a 32 bit value as a varint, zig-zag encoded.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sint32 = function write_sint32(value) {\n    return this.uint32((value << 1 ^ value >> 31) >>> 0);\n};\n\nfunction writeVarint64(val, buf, pos) {\n    while (val.hi) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = (val.lo >>> 7 | val.hi << 25) >>> 0;\n        val.hi >>>= 7;\n    }\n    while (val.lo > 127) {\n        buf[pos++] = val.lo & 127 | 128;\n        val.lo = val.lo >>> 7;\n    }\n    buf[pos++] = val.lo;\n}\n\n/**\n * Writes an unsigned 64 bit value as a varint.\n * @param {number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.uint64 = function write_uint64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a signed 64 bit value as a varint.\n * @function\n * @param {number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.int64 = Writer.prototype.uint64;\n\n/**\n * Writes a signed 64 bit value as a varint, zig-zag encoded.\n * @param {number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sint64 = function write_sint64(value) {\n    var bits = LongBits.from(value).zzEncode();\n    return this._push(writeVarint64, bits.length(), bits);\n};\n\n/**\n * Writes a boolish value as a varint.\n * @param {boolean} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bool = function write_bool(value) {\n    return this._push(writeByte, 1, value ? 1 : 0);\n};\n\nfunction writeFixed32(val, buf, pos) {\n    buf[pos    ] =  val         & 255;\n    buf[pos + 1] =  val >>> 8   & 255;\n    buf[pos + 2] =  val >>> 16  & 255;\n    buf[pos + 3] =  val >>> 24;\n}\n\n/**\n * Writes an unsigned 32 bit value as fixed 32 bits.\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.fixed32 = function write_fixed32(value) {\n    return this._push(writeFixed32, 4, value >>> 0);\n};\n\n/**\n * Writes a signed 32 bit value as fixed 32 bits.\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.sfixed32 = Writer.prototype.fixed32;\n\n/**\n * Writes an unsigned 64 bit value as fixed 64 bits.\n * @param {number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.fixed64 = function write_fixed64(value) {\n    var bits = LongBits.from(value);\n    return this._push(writeFixed32, 4, bits.lo)._push(writeFixed32, 4, bits.hi);\n};\n\n/**\n * Writes a signed 64 bit value as fixed 64 bits.\n * @function\n * @param {number|string} value Value to write\n * @returns {Writer} `this`\n * @throws {TypeError} If `value` is a string and no long library is present.\n */\nWriter.prototype.sfixed64 = Writer.prototype.fixed64;\n\n/**\n * Writes a float (32 bit).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.float = function write_float(value) {\n    return this._push(util.float.writeFloatLE, 4, value);\n};\n\n/**\n * Writes a double (64 bit float).\n * @function\n * @param {number} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.double = function write_double(value) {\n    return this._push(util.float.writeDoubleLE, 8, value);\n};\n\nvar writeBytes = util.Array.prototype.set\n    ? function writeBytes_set(val, buf, pos) {\n        buf.set(val, pos); // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytes_for(val, buf, pos) {\n        for (var i = 0; i < val.length; ++i)\n            buf[pos + i] = val[i];\n    };\n\n/**\n * Writes a sequence of bytes.\n * @param {Uint8Array|string} value Buffer or base64 encoded string to write\n * @returns {Writer} `this`\n */\nWriter.prototype.bytes = function write_bytes(value) {\n    var len = value.length >>> 0;\n    if (!len)\n        return this._push(writeByte, 1, 0);\n    if (util.isString(value)) {\n        var buf = Writer.alloc(len = base64.length(value));\n        base64.decode(value, buf, 0);\n        value = buf;\n    }\n    return this.uint32(len)._push(writeBytes, len, value);\n};\n\n/**\n * Writes a string.\n * @param {string} value Value to write\n * @returns {Writer} `this`\n */\nWriter.prototype.string = function write_string(value) {\n    var len = utf8.length(value);\n    return len\n        ? this.uint32(len)._push(utf8.write, len, value)\n        : this._push(writeByte, 1, 0);\n};\n\n/**\n * Forks this writer's state by pushing it to a stack.\n * Calling {@link Writer#reset|reset} or {@link Writer#ldelim|ldelim} resets the writer to the previous state.\n * @returns {Writer} `this`\n */\nWriter.prototype.fork = function fork() {\n    this.states = new State(this);\n    this.head = this.tail = new Op(noop, 0, 0);\n    this.len = 0;\n    return this;\n};\n\n/**\n * Resets this instance to the last state.\n * @returns {Writer} `this`\n */\nWriter.prototype.reset = function reset() {\n    if (this.states) {\n        this.head   = this.states.head;\n        this.tail   = this.states.tail;\n        this.len    = this.states.len;\n        this.states = this.states.next;\n    } else {\n        this.head = this.tail = new Op(noop, 0, 0);\n        this.len  = 0;\n    }\n    return this;\n};\n\n/**\n * Resets to the last state and appends the fork state's current write length as a varint followed by its operations.\n * @returns {Writer} `this`\n */\nWriter.prototype.ldelim = function ldelim() {\n    var head = this.head,\n        tail = this.tail,\n        len  = this.len;\n    this.reset().uint32(len);\n    if (len) {\n        this.tail.next = head.next; // skip noop\n        this.tail = tail;\n        this.len += len;\n    }\n    return this;\n};\n\n/**\n * Finishes the write operation.\n * @returns {Uint8Array} Finished buffer\n */\nWriter.prototype.finish = function finish() {\n    var head = this.head.next, // skip noop\n        buf  = this.constructor.alloc(this.len),\n        pos  = 0;\n    while (head) {\n        head.fn(head.val, buf, pos);\n        pos += head.len;\n        head = head.next;\n    }\n    // this.head = this.tail = null;\n    return buf;\n};\n\nWriter._configure = function(BufferWriter_) {\n    BufferWriter = BufferWriter_;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/protobufjs/src/writer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/protobufjs/src/writer_buffer.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/protobufjs/src/writer_buffer.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nmodule.exports = BufferWriter;\n\n// extends Writer\nvar Writer = __webpack_require__(/*! ./writer */ \"(rsc)/./node_modules/@apollo/protobufjs/src/writer.js\");\n(BufferWriter.prototype = Object.create(Writer.prototype)).constructor = BufferWriter;\n\nvar util = __webpack_require__(/*! ./util/minimal */ \"(rsc)/./node_modules/@apollo/protobufjs/src/util/minimal.js\");\n\nvar Buffer = util.Buffer;\n\n/**\n * Constructs a new buffer writer instance.\n * @classdesc Wire format writer using node buffers.\n * @extends Writer\n * @constructor\n */\nfunction BufferWriter() {\n    Writer.call(this);\n}\n\n/**\n * Allocates a buffer of the specified size.\n * @param {number} size Buffer size\n * @returns {Buffer} Buffer\n */\nBufferWriter.alloc = function alloc_buffer(size) {\n    return (BufferWriter.alloc = util._Buffer_allocUnsafe)(size);\n};\n\nvar writeBytesBuffer = Buffer && Buffer.prototype instanceof Uint8Array && Buffer.prototype.set.name === \"set\"\n    ? function writeBytesBuffer_set(val, buf, pos) {\n        buf.set(val, pos); // faster than copy (requires node >= 4 where Buffers extend Uint8Array and set is properly inherited)\n                           // also works for plain array values\n    }\n    /* istanbul ignore next */\n    : function writeBytesBuffer_copy(val, buf, pos) {\n        if (val.copy) // Buffer values\n            val.copy(buf, pos, 0, val.length);\n        else for (var i = 0; i < val.length;) // plain array values\n            buf[pos++] = val[i++];\n    };\n\n/**\n * @override\n */\nBufferWriter.prototype.bytes = function write_bytes_buffer(value) {\n    if (util.isString(value))\n        value = util._Buffer_from(value, \"base64\");\n    var len = value.length >>> 0;\n    this.uint32(len);\n    if (len)\n        this._push(writeBytesBuffer, len, value);\n    return this;\n};\n\nfunction writeStringBuffer(val, buf, pos) {\n    if (val.length < 40) // plain js is faster for short strings (probably due to redundant assertions)\n        util.utf8.write(val, buf, pos);\n    else\n        buf.utf8Write(val, pos);\n}\n\n/**\n * @override\n */\nBufferWriter.prototype.string = function write_string_buffer(value) {\n    var len = Buffer.byteLength(value);\n    this.uint32(len);\n    if (len)\n        this._push(writeStringBuffer, len, value);\n    return this;\n};\n\n\n/**\n * Finishes the write operation.\n * @name BufferWriter#finish\n * @function\n * @returns {Buffer} Finished buffer\n */\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9wcm90b2J1ZmpzL3NyYy93cml0ZXJfYnVmZmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7O0FBRUE7QUFDQSxhQUFhLG1CQUFPLENBQUMsdUVBQVU7QUFDL0I7O0FBRUEsV0FBVyxtQkFBTyxDQUFDLG1GQUFnQjs7QUFFbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCLGVBQWU7QUFDNUM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWEsUUFBUTtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3Byb3RvYnVmanMvc3JjL3dyaXRlcl9idWZmZXIuanM/OTkyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbm1vZHVsZS5leHBvcnRzID0gQnVmZmVyV3JpdGVyO1xuXG4vLyBleHRlbmRzIFdyaXRlclxudmFyIFdyaXRlciA9IHJlcXVpcmUoXCIuL3dyaXRlclwiKTtcbihCdWZmZXJXcml0ZXIucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShXcml0ZXIucHJvdG90eXBlKSkuY29uc3RydWN0b3IgPSBCdWZmZXJXcml0ZXI7XG5cbnZhciB1dGlsID0gcmVxdWlyZShcIi4vdXRpbC9taW5pbWFsXCIpO1xuXG52YXIgQnVmZmVyID0gdXRpbC5CdWZmZXI7XG5cbi8qKlxuICogQ29uc3RydWN0cyBhIG5ldyBidWZmZXIgd3JpdGVyIGluc3RhbmNlLlxuICogQGNsYXNzZGVzYyBXaXJlIGZvcm1hdCB3cml0ZXIgdXNpbmcgbm9kZSBidWZmZXJzLlxuICogQGV4dGVuZHMgV3JpdGVyXG4gKiBAY29uc3RydWN0b3JcbiAqL1xuZnVuY3Rpb24gQnVmZmVyV3JpdGVyKCkge1xuICAgIFdyaXRlci5jYWxsKHRoaXMpO1xufVxuXG4vKipcbiAqIEFsbG9jYXRlcyBhIGJ1ZmZlciBvZiB0aGUgc3BlY2lmaWVkIHNpemUuXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBCdWZmZXIgc2l6ZVxuICogQHJldHVybnMge0J1ZmZlcn0gQnVmZmVyXG4gKi9cbkJ1ZmZlcldyaXRlci5hbGxvYyA9IGZ1bmN0aW9uIGFsbG9jX2J1ZmZlcihzaXplKSB7XG4gICAgcmV0dXJuIChCdWZmZXJXcml0ZXIuYWxsb2MgPSB1dGlsLl9CdWZmZXJfYWxsb2NVbnNhZmUpKHNpemUpO1xufTtcblxudmFyIHdyaXRlQnl0ZXNCdWZmZXIgPSBCdWZmZXIgJiYgQnVmZmVyLnByb3RvdHlwZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkgJiYgQnVmZmVyLnByb3RvdHlwZS5zZXQubmFtZSA9PT0gXCJzZXRcIlxuICAgID8gZnVuY3Rpb24gd3JpdGVCeXRlc0J1ZmZlcl9zZXQodmFsLCBidWYsIHBvcykge1xuICAgICAgICBidWYuc2V0KHZhbCwgcG9zKTsgLy8gZmFzdGVyIHRoYW4gY29weSAocmVxdWlyZXMgbm9kZSA+PSA0IHdoZXJlIEJ1ZmZlcnMgZXh0ZW5kIFVpbnQ4QXJyYXkgYW5kIHNldCBpcyBwcm9wZXJseSBpbmhlcml0ZWQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbHNvIHdvcmtzIGZvciBwbGFpbiBhcnJheSB2YWx1ZXNcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICA6IGZ1bmN0aW9uIHdyaXRlQnl0ZXNCdWZmZXJfY29weSh2YWwsIGJ1ZiwgcG9zKSB7XG4gICAgICAgIGlmICh2YWwuY29weSkgLy8gQnVmZmVyIHZhbHVlc1xuICAgICAgICAgICAgdmFsLmNvcHkoYnVmLCBwb3MsIDAsIHZhbC5sZW5ndGgpO1xuICAgICAgICBlbHNlIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDspIC8vIHBsYWluIGFycmF5IHZhbHVlc1xuICAgICAgICAgICAgYnVmW3BvcysrXSA9IHZhbFtpKytdO1xuICAgIH07XG5cbi8qKlxuICogQG92ZXJyaWRlXG4gKi9cbkJ1ZmZlcldyaXRlci5wcm90b3R5cGUuYnl0ZXMgPSBmdW5jdGlvbiB3cml0ZV9ieXRlc19idWZmZXIodmFsdWUpIHtcbiAgICBpZiAodXRpbC5pc1N0cmluZyh2YWx1ZSkpXG4gICAgICAgIHZhbHVlID0gdXRpbC5fQnVmZmVyX2Zyb20odmFsdWUsIFwiYmFzZTY0XCIpO1xuICAgIHZhciBsZW4gPSB2YWx1ZS5sZW5ndGggPj4+IDA7XG4gICAgdGhpcy51aW50MzIobGVuKTtcbiAgICBpZiAobGVuKVxuICAgICAgICB0aGlzLl9wdXNoKHdyaXRlQnl0ZXNCdWZmZXIsIGxlbiwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gd3JpdGVTdHJpbmdCdWZmZXIodmFsLCBidWYsIHBvcykge1xuICAgIGlmICh2YWwubGVuZ3RoIDwgNDApIC8vIHBsYWluIGpzIGlzIGZhc3RlciBmb3Igc2hvcnQgc3RyaW5ncyAocHJvYmFibHkgZHVlIHRvIHJlZHVuZGFudCBhc3NlcnRpb25zKVxuICAgICAgICB1dGlsLnV0Zjgud3JpdGUodmFsLCBidWYsIHBvcyk7XG4gICAgZWxzZVxuICAgICAgICBidWYudXRmOFdyaXRlKHZhbCwgcG9zKTtcbn1cblxuLyoqXG4gKiBAb3ZlcnJpZGVcbiAqL1xuQnVmZmVyV3JpdGVyLnByb3RvdHlwZS5zdHJpbmcgPSBmdW5jdGlvbiB3cml0ZV9zdHJpbmdfYnVmZmVyKHZhbHVlKSB7XG4gICAgdmFyIGxlbiA9IEJ1ZmZlci5ieXRlTGVuZ3RoKHZhbHVlKTtcbiAgICB0aGlzLnVpbnQzMihsZW4pO1xuICAgIGlmIChsZW4pXG4gICAgICAgIHRoaXMuX3B1c2god3JpdGVTdHJpbmdCdWZmZXIsIGxlbiwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xufTtcblxuXG4vKipcbiAqIEZpbmlzaGVzIHRoZSB3cml0ZSBvcGVyYXRpb24uXG4gKiBAbmFtZSBCdWZmZXJXcml0ZXIjZmluaXNoXG4gKiBAZnVuY3Rpb25cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IEZpbmlzaGVkIGJ1ZmZlclxuICovXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/protobufjs/src/writer_buffer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.dropunuseddefinitions/dist/index.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@apollo/utils.dropunuseddefinitions/dist/index.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.dropUnusedDefinitions = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nfunction dropUnusedDefinitions(ast, operationName) {\n    const separated = (0, graphql_1.separateOperations)(ast)[operationName];\n    if (!separated) {\n        return ast;\n    }\n    return separated;\n}\nexports.dropUnusedDefinitions = dropUnusedDefinitions;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMuZHJvcHVudXNlZGRlZmluaXRpb25zL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNkJBQTZCO0FBQzdCLGtCQUFrQixtQkFBTyxDQUFDLHVEQUFTO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AYXBvbGxvL3V0aWxzLmRyb3B1bnVzZWRkZWZpbml0aW9ucy9kaXN0L2luZGV4LmpzPzJkMzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRyb3BVbnVzZWREZWZpbml0aW9ucyA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuZnVuY3Rpb24gZHJvcFVudXNlZERlZmluaXRpb25zKGFzdCwgb3BlcmF0aW9uTmFtZSkge1xuICAgIGNvbnN0IHNlcGFyYXRlZCA9ICgwLCBncmFwaHFsXzEuc2VwYXJhdGVPcGVyYXRpb25zKShhc3QpW29wZXJhdGlvbk5hbWVdO1xuICAgIGlmICghc2VwYXJhdGVkKSB7XG4gICAgICAgIHJldHVybiBhc3Q7XG4gICAgfVxuICAgIHJldHVybiBzZXBhcmF0ZWQ7XG59XG5leHBvcnRzLmRyb3BVbnVzZWREZWZpbml0aW9ucyA9IGRyb3BVbnVzZWREZWZpbml0aW9ucztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.dropunuseddefinitions/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/ErrorsAreMissesCache.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/ErrorsAreMissesCache.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ErrorsAreMissesCache = void 0;\nclass ErrorsAreMissesCache {\n    constructor(cache, logger) {\n        this.cache = cache;\n        this.logger = logger;\n    }\n    async get(key) {\n        try {\n            return await this.cache.get(key);\n        }\n        catch (e) {\n            if (this.logger) {\n                if (e instanceof Error) {\n                    this.logger.error(e.message);\n                }\n                else {\n                    this.logger.error(e);\n                }\n            }\n            return undefined;\n        }\n    }\n    async set(key, value, opts) {\n        return this.cache.set(key, value, opts);\n    }\n    async delete(key) {\n        return this.cache.delete(key);\n    }\n}\nexports.ErrorsAreMissesCache = ErrorsAreMissesCache;\n//# sourceMappingURL=ErrorsAreMissesCache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMua2V5dmFsdWVjYWNoZS9kaXN0L0Vycm9yc0FyZU1pc3Nlc0NhY2hlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGFwb2xsby91dGlscy5rZXl2YWx1ZWNhY2hlL2Rpc3QvRXJyb3JzQXJlTWlzc2VzQ2FjaGUuanM/OTkyMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXJyb3JzQXJlTWlzc2VzQ2FjaGUgPSB2b2lkIDA7XG5jbGFzcyBFcnJvcnNBcmVNaXNzZXNDYWNoZSB7XG4gICAgY29uc3RydWN0b3IoY2FjaGUsIGxvZ2dlcikge1xuICAgICAgICB0aGlzLmNhY2hlID0gY2FjaGU7XG4gICAgICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICAgIH1cbiAgICBhc3luYyBnZXQoa2V5KSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5jYWNoZS5nZXQoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubG9nZ2VyKSB7XG4gICAgICAgICAgICAgICAgaWYgKGUgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihlLm1lc3NhZ2UpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5sb2dnZXIuZXJyb3IoZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBhc3luYyBzZXQoa2V5LCB2YWx1ZSwgb3B0cykge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS5zZXQoa2V5LCB2YWx1ZSwgb3B0cyk7XG4gICAgfVxuICAgIGFzeW5jIGRlbGV0ZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY2FjaGUuZGVsZXRlKGtleSk7XG4gICAgfVxufVxuZXhwb3J0cy5FcnJvcnNBcmVNaXNzZXNDYWNoZSA9IEVycm9yc0FyZU1pc3Nlc0NhY2hlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXJyb3JzQXJlTWlzc2VzQ2FjaGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/ErrorsAreMissesCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/InMemoryLRUCache.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/InMemoryLRUCache.js ***!
  \*******************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.InMemoryLRUCache = void 0;\nconst lru_cache_1 = __importDefault(__webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/@apollo/server/node_modules/lru-cache/index.js\"));\nclass InMemoryLRUCache {\n    constructor(lruCacheOpts) {\n        this.cache = new lru_cache_1.default({\n            sizeCalculation: InMemoryLRUCache.sizeCalculation,\n            maxSize: Math.pow(2, 20) * 30,\n            ...lruCacheOpts,\n        });\n    }\n    static sizeCalculation(item) {\n        if (typeof item === \"string\") {\n            return item.length;\n        }\n        if (typeof item === \"object\") {\n            return Buffer.byteLength(JSON.stringify(item), \"utf8\");\n        }\n        return 1;\n    }\n    async set(key, value, options) {\n        if (options === null || options === void 0 ? void 0 : options.ttl) {\n            this.cache.set(key, value, { ttl: options.ttl * 1000 });\n        }\n        else {\n            this.cache.set(key, value);\n        }\n    }\n    async get(key) {\n        return this.cache.get(key);\n    }\n    async delete(key) {\n        return this.cache.delete(key);\n    }\n    clear() {\n        this.cache.clear();\n    }\n    keys() {\n        return [...this.cache.keys()];\n    }\n}\nexports.InMemoryLRUCache = InMemoryLRUCache;\n//# sourceMappingURL=InMemoryLRUCache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMua2V5dmFsdWVjYWNoZS9kaXN0L0luTWVtb3J5TFJVQ2FjaGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsb0NBQW9DLG1CQUFPLENBQUMsc0ZBQVc7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qyx5QkFBeUI7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AYXBvbGxvL3V0aWxzLmtleXZhbHVlY2FjaGUvZGlzdC9Jbk1lbW9yeUxSVUNhY2hlLmpzPzBjYWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkluTWVtb3J5TFJVQ2FjaGUgPSB2b2lkIDA7XG5jb25zdCBscnVfY2FjaGVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwibHJ1LWNhY2hlXCIpKTtcbmNsYXNzIEluTWVtb3J5TFJVQ2FjaGUge1xuICAgIGNvbnN0cnVjdG9yKGxydUNhY2hlT3B0cykge1xuICAgICAgICB0aGlzLmNhY2hlID0gbmV3IGxydV9jYWNoZV8xLmRlZmF1bHQoe1xuICAgICAgICAgICAgc2l6ZUNhbGN1bGF0aW9uOiBJbk1lbW9yeUxSVUNhY2hlLnNpemVDYWxjdWxhdGlvbixcbiAgICAgICAgICAgIG1heFNpemU6IE1hdGgucG93KDIsIDIwKSAqIDMwLFxuICAgICAgICAgICAgLi4ubHJ1Q2FjaGVPcHRzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgc3RhdGljIHNpemVDYWxjdWxhdGlvbihpdGVtKSB7XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgcmV0dXJuIGl0ZW0ubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgaXRlbSA9PT0gXCJvYmplY3RcIikge1xuICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5ieXRlTGVuZ3RoKEpTT04uc3RyaW5naWZ5KGl0ZW0pLCBcInV0ZjhcIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGFzeW5jIHNldChrZXksIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMudHRsKSB7XG4gICAgICAgICAgICB0aGlzLmNhY2hlLnNldChrZXksIHZhbHVlLCB7IHR0bDogb3B0aW9ucy50dGwgKiAxMDAwIH0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5jYWNoZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgZ2V0KGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgYXN5bmMgZGVsZXRlKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jYWNoZS5kZWxldGUoa2V5KTtcbiAgICB9XG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRoaXMuY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAga2V5cygpIHtcbiAgICAgICAgcmV0dXJuIFsuLi50aGlzLmNhY2hlLmtleXMoKV07XG4gICAgfVxufVxuZXhwb3J0cy5Jbk1lbW9yeUxSVUNhY2hlID0gSW5NZW1vcnlMUlVDYWNoZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUluTWVtb3J5TFJVQ2FjaGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/InMemoryLRUCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/PrefixingKeyValueCache.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/PrefixingKeyValueCache.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nvar _a;\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.PrefixingKeyValueCache = void 0;\nconst prefixesAreUnnecessaryForIsolationSymbol = Symbol(\"prefixesAreUnnecessaryForIsolation\");\nclass PrefixingKeyValueCache {\n    constructor(wrapped, prefix) {\n        this.wrapped = wrapped;\n        if (PrefixingKeyValueCache.prefixesAreUnnecessaryForIsolation(wrapped)) {\n            this.prefix = \"\";\n            this[prefixesAreUnnecessaryForIsolationSymbol] = true;\n        }\n        else {\n            this.prefix = prefix;\n        }\n    }\n    get(key) {\n        return this.wrapped.get(this.prefix + key);\n    }\n    set(key, value, options) {\n        return this.wrapped.set(this.prefix + key, value, options);\n    }\n    delete(key) {\n        return this.wrapped.delete(this.prefix + key);\n    }\n    static prefixesAreUnnecessaryForIsolation(c) {\n        return prefixesAreUnnecessaryForIsolationSymbol in c;\n    }\n    static cacheDangerouslyDoesNotNeedPrefixesForIsolation(c) {\n        return new PrefixesAreUnnecessaryForIsolationCache(c);\n    }\n}\nexports.PrefixingKeyValueCache = PrefixingKeyValueCache;\nclass PrefixesAreUnnecessaryForIsolationCache {\n    constructor(wrapped) {\n        this.wrapped = wrapped;\n        this[_a] = true;\n    }\n    get(key) {\n        return this.wrapped.get(key);\n    }\n    set(key, value, options) {\n        return this.wrapped.set(key, value, options);\n    }\n    delete(key) {\n        return this.wrapped.delete(key);\n    }\n}\n_a = prefixesAreUnnecessaryForIsolationSymbol;\n//# sourceMappingURL=PrefixingKeyValueCache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMua2V5dmFsdWVjYWNoZS9kaXN0L1ByZWZpeGluZ0tleVZhbHVlQ2FjaGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGFwb2xsby91dGlscy5rZXl2YWx1ZWNhY2hlL2Rpc3QvUHJlZml4aW5nS2V5VmFsdWVDYWNoZS5qcz8xOGZkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9hO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5QcmVmaXhpbmdLZXlWYWx1ZUNhY2hlID0gdm9pZCAwO1xuY29uc3QgcHJlZml4ZXNBcmVVbm5lY2Vzc2FyeUZvcklzb2xhdGlvblN5bWJvbCA9IFN5bWJvbChcInByZWZpeGVzQXJlVW5uZWNlc3NhcnlGb3JJc29sYXRpb25cIik7XG5jbGFzcyBQcmVmaXhpbmdLZXlWYWx1ZUNhY2hlIHtcbiAgICBjb25zdHJ1Y3Rvcih3cmFwcGVkLCBwcmVmaXgpIHtcbiAgICAgICAgdGhpcy53cmFwcGVkID0gd3JhcHBlZDtcbiAgICAgICAgaWYgKFByZWZpeGluZ0tleVZhbHVlQ2FjaGUucHJlZml4ZXNBcmVVbm5lY2Vzc2FyeUZvcklzb2xhdGlvbih3cmFwcGVkKSkge1xuICAgICAgICAgICAgdGhpcy5wcmVmaXggPSBcIlwiO1xuICAgICAgICAgICAgdGhpc1twcmVmaXhlc0FyZVVubmVjZXNzYXJ5Rm9ySXNvbGF0aW9uU3ltYm9sXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnByZWZpeCA9IHByZWZpeDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLndyYXBwZWQuZ2V0KHRoaXMucHJlZml4ICsga2V5KTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlZC5zZXQodGhpcy5wcmVmaXggKyBrZXksIHZhbHVlLCBvcHRpb25zKTtcbiAgICB9XG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy53cmFwcGVkLmRlbGV0ZSh0aGlzLnByZWZpeCArIGtleSk7XG4gICAgfVxuICAgIHN0YXRpYyBwcmVmaXhlc0FyZVVubmVjZXNzYXJ5Rm9ySXNvbGF0aW9uKGMpIHtcbiAgICAgICAgcmV0dXJuIHByZWZpeGVzQXJlVW5uZWNlc3NhcnlGb3JJc29sYXRpb25TeW1ib2wgaW4gYztcbiAgICB9XG4gICAgc3RhdGljIGNhY2hlRGFuZ2Vyb3VzbHlEb2VzTm90TmVlZFByZWZpeGVzRm9ySXNvbGF0aW9uKGMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcmVmaXhlc0FyZVVubmVjZXNzYXJ5Rm9ySXNvbGF0aW9uQ2FjaGUoYyk7XG4gICAgfVxufVxuZXhwb3J0cy5QcmVmaXhpbmdLZXlWYWx1ZUNhY2hlID0gUHJlZml4aW5nS2V5VmFsdWVDYWNoZTtcbmNsYXNzIFByZWZpeGVzQXJlVW5uZWNlc3NhcnlGb3JJc29sYXRpb25DYWNoZSB7XG4gICAgY29uc3RydWN0b3Iod3JhcHBlZCkge1xuICAgICAgICB0aGlzLndyYXBwZWQgPSB3cmFwcGVkO1xuICAgICAgICB0aGlzW19hXSA9IHRydWU7XG4gICAgfVxuICAgIGdldChrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlZC5nZXQoa2V5KTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlZC5zZXQoa2V5LCB2YWx1ZSwgb3B0aW9ucyk7XG4gICAgfVxuICAgIGRlbGV0ZShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JhcHBlZC5kZWxldGUoa2V5KTtcbiAgICB9XG59XG5fYSA9IHByZWZpeGVzQXJlVW5uZWNlc3NhcnlGb3JJc29sYXRpb25TeW1ib2w7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QcmVmaXhpbmdLZXlWYWx1ZUNhY2hlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/PrefixingKeyValueCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ErrorsAreMissesCache = exports.InMemoryLRUCache = exports.PrefixingKeyValueCache = void 0;\nvar PrefixingKeyValueCache_1 = __webpack_require__(/*! ./PrefixingKeyValueCache */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/PrefixingKeyValueCache.js\");\nObject.defineProperty(exports, \"PrefixingKeyValueCache\", ({ enumerable: true, get: function () { return PrefixingKeyValueCache_1.PrefixingKeyValueCache; } }));\nvar InMemoryLRUCache_1 = __webpack_require__(/*! ./InMemoryLRUCache */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/InMemoryLRUCache.js\");\nObject.defineProperty(exports, \"InMemoryLRUCache\", ({ enumerable: true, get: function () { return InMemoryLRUCache_1.InMemoryLRUCache; } }));\nvar ErrorsAreMissesCache_1 = __webpack_require__(/*! ./ErrorsAreMissesCache */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/ErrorsAreMissesCache.js\");\nObject.defineProperty(exports, \"ErrorsAreMissesCache\", ({ enumerable: true, get: function () { return ErrorsAreMissesCache_1.ErrorsAreMissesCache; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMua2V5dmFsdWVjYWNoZS9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLHdCQUF3QixHQUFHLDhCQUE4QjtBQUN4RiwrQkFBK0IsbUJBQU8sQ0FBQyw2SUFBMEI7QUFDakUsMERBQXlELEVBQUUscUNBQXFDLDJEQUEyRCxFQUFDO0FBQzVKLHlCQUF5QixtQkFBTyxDQUFDLGlJQUFvQjtBQUNyRCxvREFBbUQsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUM7QUFDMUksNkJBQTZCLG1CQUFPLENBQUMseUlBQXdCO0FBQzdELHdEQUF1RCxFQUFFLHFDQUFxQyx1REFBdUQsRUFBQztBQUN0SiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGFwb2xsby91dGlscy5rZXl2YWx1ZWNhY2hlL2Rpc3QvaW5kZXguanM/ZWJmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuRXJyb3JzQXJlTWlzc2VzQ2FjaGUgPSBleHBvcnRzLkluTWVtb3J5TFJVQ2FjaGUgPSBleHBvcnRzLlByZWZpeGluZ0tleVZhbHVlQ2FjaGUgPSB2b2lkIDA7XG52YXIgUHJlZml4aW5nS2V5VmFsdWVDYWNoZV8xID0gcmVxdWlyZShcIi4vUHJlZml4aW5nS2V5VmFsdWVDYWNoZVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlByZWZpeGluZ0tleVZhbHVlQ2FjaGVcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFByZWZpeGluZ0tleVZhbHVlQ2FjaGVfMS5QcmVmaXhpbmdLZXlWYWx1ZUNhY2hlOyB9IH0pO1xudmFyIEluTWVtb3J5TFJVQ2FjaGVfMSA9IHJlcXVpcmUoXCIuL0luTWVtb3J5TFJVQ2FjaGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJJbk1lbW9yeUxSVUNhY2hlXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBJbk1lbW9yeUxSVUNhY2hlXzEuSW5NZW1vcnlMUlVDYWNoZTsgfSB9KTtcbnZhciBFcnJvcnNBcmVNaXNzZXNDYWNoZV8xID0gcmVxdWlyZShcIi4vRXJyb3JzQXJlTWlzc2VzQ2FjaGVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJFcnJvcnNBcmVNaXNzZXNDYWNoZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gRXJyb3JzQXJlTWlzc2VzQ2FjaGVfMS5FcnJvcnNBcmVNaXNzZXNDYWNoZTsgfSB9KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.printwithreducedwhitespace/dist/index.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@apollo/utils.printwithreducedwhitespace/dist/index.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.printWithReducedWhitespace = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nfunction printWithReducedWhitespace(ast) {\n    const sanitizedAST = (0, graphql_1.visit)(ast, {\n        StringValue(node) {\n            return {\n                ...node,\n                value: Buffer.from(node.value, \"utf8\").toString(\"hex\"),\n                block: false,\n            };\n        },\n    });\n    const withWhitespace = (0, graphql_1.print)(sanitizedAST);\n    const minimizedButStillHex = withWhitespace\n        .replace(/\\s+/g, \" \")\n        .replace(/([^_a-zA-Z0-9]) /g, (_, c) => c)\n        .replace(/ ([^_a-zA-Z0-9])/g, (_, c) => c);\n    return minimizedButStillHex.replace(/\"([a-f0-9]+)\"/g, (_, hex) => JSON.stringify(Buffer.from(hex, \"hex\").toString(\"utf8\")));\n}\nexports.printWithReducedWhitespace = printWithReducedWhitespace;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMucHJpbnR3aXRocmVkdWNlZHdoaXRlc3BhY2UvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQ0FBa0M7QUFDbEMsa0JBQWtCLG1CQUFPLENBQUMsdURBQVM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0M7QUFDbEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMucHJpbnR3aXRocmVkdWNlZHdoaXRlc3BhY2UvZGlzdC9pbmRleC5qcz80OWY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5wcmludFdpdGhSZWR1Y2VkV2hpdGVzcGFjZSA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuZnVuY3Rpb24gcHJpbnRXaXRoUmVkdWNlZFdoaXRlc3BhY2UoYXN0KSB7XG4gICAgY29uc3Qgc2FuaXRpemVkQVNUID0gKDAsIGdyYXBocWxfMS52aXNpdCkoYXN0LCB7XG4gICAgICAgIFN0cmluZ1ZhbHVlKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgLi4ubm9kZSxcbiAgICAgICAgICAgICAgICB2YWx1ZTogQnVmZmVyLmZyb20obm9kZS52YWx1ZSwgXCJ1dGY4XCIpLnRvU3RyaW5nKFwiaGV4XCIpLFxuICAgICAgICAgICAgICAgIGJsb2NrOiBmYWxzZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfSk7XG4gICAgY29uc3Qgd2l0aFdoaXRlc3BhY2UgPSAoMCwgZ3JhcGhxbF8xLnByaW50KShzYW5pdGl6ZWRBU1QpO1xuICAgIGNvbnN0IG1pbmltaXplZEJ1dFN0aWxsSGV4ID0gd2l0aFdoaXRlc3BhY2VcbiAgICAgICAgLnJlcGxhY2UoL1xccysvZywgXCIgXCIpXG4gICAgICAgIC5yZXBsYWNlKC8oW15fYS16QS1aMC05XSkgL2csIChfLCBjKSA9PiBjKVxuICAgICAgICAucmVwbGFjZSgvIChbXl9hLXpBLVowLTldKS9nLCAoXywgYykgPT4gYyk7XG4gICAgcmV0dXJuIG1pbmltaXplZEJ1dFN0aWxsSGV4LnJlcGxhY2UoL1wiKFthLWYwLTldKylcIi9nLCAoXywgaGV4KSA9PiBKU09OLnN0cmluZ2lmeShCdWZmZXIuZnJvbShoZXgsIFwiaGV4XCIpLnRvU3RyaW5nKFwidXRmOFwiKSkpO1xufVxuZXhwb3J0cy5wcmludFdpdGhSZWR1Y2VkV2hpdGVzcGFjZSA9IHByaW50V2l0aFJlZHVjZWRXaGl0ZXNwYWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.printwithreducedwhitespace/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.removealiases/dist/index.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@apollo/utils.removealiases/dist/index.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.removeAliases = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nfunction removeAliases(ast) {\n    return (0, graphql_1.visit)(ast, {\n        Field(node) {\n            const { alias, ...rest } = node;\n            return rest;\n        },\n    });\n}\nexports.removeAliases = removeAliases;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMucmVtb3ZlYWxpYXNlcy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFCQUFxQjtBQUNyQixrQkFBa0IsbUJBQU8sQ0FBQyx1REFBUztBQUNuQztBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsaUJBQWlCO0FBQ3JDO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLHFCQUFxQjtBQUNyQiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGFwb2xsby91dGlscy5yZW1vdmVhbGlhc2VzL2Rpc3QvaW5kZXguanM/ZmFiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucmVtb3ZlQWxpYXNlcyA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuZnVuY3Rpb24gcmVtb3ZlQWxpYXNlcyhhc3QpIHtcbiAgICByZXR1cm4gKDAsIGdyYXBocWxfMS52aXNpdCkoYXN0LCB7XG4gICAgICAgIEZpZWxkKG5vZGUpIHtcbiAgICAgICAgICAgIGNvbnN0IHsgYWxpYXMsIC4uLnJlc3QgfSA9IG5vZGU7XG4gICAgICAgICAgICByZXR1cm4gcmVzdDtcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbmV4cG9ydHMucmVtb3ZlQWxpYXNlcyA9IHJlbW92ZUFsaWFzZXM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.removealiases/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.sortast/dist/index.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@apollo/utils.sortast/dist/index.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.sortAST = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst lodash_sortby_1 = __importDefault(__webpack_require__(/*! lodash.sortby */ \"(rsc)/./node_modules/lodash.sortby/index.js\"));\nfunction sortAST(ast) {\n    return (0, graphql_1.visit)(ast, {\n        Document(node) {\n            return {\n                ...node,\n                definitions: (0, lodash_sortby_1.default)(node.definitions, \"kind\", \"name.value\"),\n            };\n        },\n        OperationDefinition(node) {\n            return sortVariableDefinitions(node);\n        },\n        SelectionSet(node) {\n            return {\n                ...node,\n                selections: (0, lodash_sortby_1.default)(node.selections, \"kind\", \"name.value\"),\n            };\n        },\n        Field(node) {\n            return sortArguments(node);\n        },\n        FragmentSpread(node) {\n            return sortDirectives(node);\n        },\n        InlineFragment(node) {\n            return sortDirectives(node);\n        },\n        FragmentDefinition(node) {\n            return sortDirectives(sortVariableDefinitions(node));\n        },\n        Directive(node) {\n            return sortArguments(node);\n        },\n    });\n}\nexports.sortAST = sortAST;\nfunction sortDirectives(node) {\n    return \"directives\" in node\n        ? { ...node, directives: (0, lodash_sortby_1.default)(node.directives, \"name.value\") }\n        : node;\n}\nfunction sortArguments(node) {\n    return \"arguments\" in node\n        ? { ...node, arguments: (0, lodash_sortby_1.default)(node.arguments, \"name.value\") }\n        : node;\n}\nfunction sortVariableDefinitions(node) {\n    return \"variableDefinitions\" in node\n        ? {\n            ...node,\n            variableDefinitions: (0, lodash_sortby_1.default)(node.variableDefinitions, \"variable.name.value\"),\n        }\n        : node;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMuc29ydGFzdC9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQSw2Q0FBNkM7QUFDN0M7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsZUFBZTtBQUNmLGtCQUFrQixtQkFBTyxDQUFDLHVEQUFTO0FBQ25DLHdDQUF3QyxtQkFBTyxDQUFDLGtFQUFlO0FBQy9EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ0EsZUFBZTtBQUNmO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGFwb2xsby91dGlscy5zb3J0YXN0L2Rpc3QvaW5kZXguanM/N2QzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuc29ydEFTVCA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3QgbG9kYXNoX3NvcnRieV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJsb2Rhc2guc29ydGJ5XCIpKTtcbmZ1bmN0aW9uIHNvcnRBU1QoYXN0KSB7XG4gICAgcmV0dXJuICgwLCBncmFwaHFsXzEudmlzaXQpKGFzdCwge1xuICAgICAgICBEb2N1bWVudChub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLm5vZGUsXG4gICAgICAgICAgICAgICAgZGVmaW5pdGlvbnM6ICgwLCBsb2Rhc2hfc29ydGJ5XzEuZGVmYXVsdCkobm9kZS5kZWZpbml0aW9ucywgXCJraW5kXCIsIFwibmFtZS52YWx1ZVwiKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIE9wZXJhdGlvbkRlZmluaXRpb24obm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRWYXJpYWJsZURlZmluaXRpb25zKG5vZGUpO1xuICAgICAgICB9LFxuICAgICAgICBTZWxlY3Rpb25TZXQobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAuLi5ub2RlLFxuICAgICAgICAgICAgICAgIHNlbGVjdGlvbnM6ICgwLCBsb2Rhc2hfc29ydGJ5XzEuZGVmYXVsdCkobm9kZS5zZWxlY3Rpb25zLCBcImtpbmRcIiwgXCJuYW1lLnZhbHVlXCIpLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgRmllbGQobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnRBcmd1bWVudHMobm9kZSk7XG4gICAgICAgIH0sXG4gICAgICAgIEZyYWdtZW50U3ByZWFkKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3J0RGlyZWN0aXZlcyhub2RlKTtcbiAgICAgICAgfSxcbiAgICAgICAgSW5saW5lRnJhZ21lbnQobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnREaXJlY3RpdmVzKG5vZGUpO1xuICAgICAgICB9LFxuICAgICAgICBGcmFnbWVudERlZmluaXRpb24obm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHNvcnREaXJlY3RpdmVzKHNvcnRWYXJpYWJsZURlZmluaXRpb25zKG5vZGUpKTtcbiAgICAgICAgfSxcbiAgICAgICAgRGlyZWN0aXZlKG5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3J0QXJndW1lbnRzKG5vZGUpO1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuZXhwb3J0cy5zb3J0QVNUID0gc29ydEFTVDtcbmZ1bmN0aW9uIHNvcnREaXJlY3RpdmVzKG5vZGUpIHtcbiAgICByZXR1cm4gXCJkaXJlY3RpdmVzXCIgaW4gbm9kZVxuICAgICAgICA/IHsgLi4ubm9kZSwgZGlyZWN0aXZlczogKDAsIGxvZGFzaF9zb3J0YnlfMS5kZWZhdWx0KShub2RlLmRpcmVjdGl2ZXMsIFwibmFtZS52YWx1ZVwiKSB9XG4gICAgICAgIDogbm9kZTtcbn1cbmZ1bmN0aW9uIHNvcnRBcmd1bWVudHMobm9kZSkge1xuICAgIHJldHVybiBcImFyZ3VtZW50c1wiIGluIG5vZGVcbiAgICAgICAgPyB7IC4uLm5vZGUsIGFyZ3VtZW50czogKDAsIGxvZGFzaF9zb3J0YnlfMS5kZWZhdWx0KShub2RlLmFyZ3VtZW50cywgXCJuYW1lLnZhbHVlXCIpIH1cbiAgICAgICAgOiBub2RlO1xufVxuZnVuY3Rpb24gc29ydFZhcmlhYmxlRGVmaW5pdGlvbnMobm9kZSkge1xuICAgIHJldHVybiBcInZhcmlhYmxlRGVmaW5pdGlvbnNcIiBpbiBub2RlXG4gICAgICAgID8ge1xuICAgICAgICAgICAgLi4ubm9kZSxcbiAgICAgICAgICAgIHZhcmlhYmxlRGVmaW5pdGlvbnM6ICgwLCBsb2Rhc2hfc29ydGJ5XzEuZGVmYXVsdCkobm9kZS52YXJpYWJsZURlZmluaXRpb25zLCBcInZhcmlhYmxlLm5hbWUudmFsdWVcIiksXG4gICAgICAgIH1cbiAgICAgICAgOiBub2RlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.sortast/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.stripsensitiveliterals/dist/index.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@apollo/utils.stripsensitiveliterals/dist/index.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.stripSensitiveLiterals = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nfunction stripSensitiveLiterals(ast, options = {\n    hideListAndObjectLiterals: false,\n}) {\n    const listAndObjectVisitorIfEnabled = options.hideListAndObjectLiterals\n        ? {\n            ListValue(node) {\n                return { ...node, values: [] };\n            },\n            ObjectValue(node) {\n                return { ...node, fields: [] };\n            },\n        }\n        : {};\n    return (0, graphql_1.visit)(ast, {\n        IntValue(node) {\n            return { ...node, value: \"0\" };\n        },\n        FloatValue(node) {\n            return { ...node, value: \"0\" };\n        },\n        StringValue(node) {\n            return { ...node, value: \"\", block: false };\n        },\n        ...listAndObjectVisitorIfEnabled,\n    });\n}\nexports.stripSensitiveLiterals = stripSensitiveLiterals;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMuc3RyaXBzZW5zaXRpdmVsaXRlcmFscy9kaXN0L2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDhCQUE4QjtBQUM5QixrQkFBa0IsbUJBQU8sQ0FBQyx1REFBUztBQUNuQztBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QixhQUFhO0FBQ2I7QUFDQSx5QkFBeUI7QUFDekIsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCLFNBQVM7QUFDVDtBQUNBLHFCQUFxQjtBQUNyQixTQUFTO0FBQ1Q7QUFDQSxxQkFBcUI7QUFDckIsU0FBUztBQUNUO0FBQ0EsS0FBSztBQUNMO0FBQ0EsOEJBQThCO0FBQzlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AYXBvbGxvL3V0aWxzLnN0cmlwc2Vuc2l0aXZlbGl0ZXJhbHMvZGlzdC9pbmRleC5qcz80Y2QzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zdHJpcFNlbnNpdGl2ZUxpdGVyYWxzID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5mdW5jdGlvbiBzdHJpcFNlbnNpdGl2ZUxpdGVyYWxzKGFzdCwgb3B0aW9ucyA9IHtcbiAgICBoaWRlTGlzdEFuZE9iamVjdExpdGVyYWxzOiBmYWxzZSxcbn0pIHtcbiAgICBjb25zdCBsaXN0QW5kT2JqZWN0VmlzaXRvcklmRW5hYmxlZCA9IG9wdGlvbnMuaGlkZUxpc3RBbmRPYmplY3RMaXRlcmFsc1xuICAgICAgICA/IHtcbiAgICAgICAgICAgIExpc3RWYWx1ZShub2RlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgLi4ubm9kZSwgdmFsdWVzOiBbXSB9O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIE9iamVjdFZhbHVlKG5vZGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4geyAuLi5ub2RlLCBmaWVsZHM6IFtdIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICB9XG4gICAgICAgIDoge307XG4gICAgcmV0dXJuICgwLCBncmFwaHFsXzEudmlzaXQpKGFzdCwge1xuICAgICAgICBJbnRWYWx1ZShub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4geyAuLi5ub2RlLCB2YWx1ZTogXCIwXCIgfTtcbiAgICAgICAgfSxcbiAgICAgICAgRmxvYXRWYWx1ZShub2RlKSB7XG4gICAgICAgICAgICByZXR1cm4geyAuLi5ub2RlLCB2YWx1ZTogXCIwXCIgfTtcbiAgICAgICAgfSxcbiAgICAgICAgU3RyaW5nVmFsdWUobm9kZSkge1xuICAgICAgICAgICAgcmV0dXJuIHsgLi4ubm9kZSwgdmFsdWU6IFwiXCIsIGJsb2NrOiBmYWxzZSB9O1xuICAgICAgICB9LFxuICAgICAgICAuLi5saXN0QW5kT2JqZWN0VmlzaXRvcklmRW5hYmxlZCxcbiAgICB9KTtcbn1cbmV4cG9ydHMuc3RyaXBTZW5zaXRpdmVMaXRlcmFscyA9IHN0cmlwU2Vuc2l0aXZlTGl0ZXJhbHM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.stripsensitiveliterals/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/calculateReferencedFieldsByType.js":
/*!***********************************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/calculateReferencedFieldsByType.js ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.calculateReferencedFieldsByType = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst usage_reporting_protobuf_1 = __webpack_require__(/*! @apollo/usage-reporting-protobuf */ \"(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/cjs/protobuf.js\");\nfunction calculateReferencedFieldsByType({ document, schema, resolvedOperationName, }) {\n    const documentSeparatedByOperation = (0, graphql_1.separateOperations)(document);\n    const filteredDocument = documentSeparatedByOperation[resolvedOperationName !== null && resolvedOperationName !== void 0 ? resolvedOperationName : \"\"];\n    if (!filteredDocument) {\n        throw Error(`shouldn't happen: operation '${resolvedOperationName !== null && resolvedOperationName !== void 0 ? resolvedOperationName : \"\"}' not found`);\n    }\n    const typeInfo = new graphql_1.TypeInfo(schema);\n    const interfaces = new Set();\n    const referencedFieldSetByType = Object.create(null);\n    (0, graphql_1.visit)(filteredDocument, (0, graphql_1.visitWithTypeInfo)(typeInfo, {\n        Field(field) {\n            const fieldName = field.name.value;\n            const parentType = typeInfo.getParentType();\n            if (!parentType) {\n                throw Error(`shouldn't happen: missing parent type for field ${fieldName}`);\n            }\n            const parentTypeName = parentType.name;\n            if (!referencedFieldSetByType[parentTypeName]) {\n                referencedFieldSetByType[parentTypeName] = new Set();\n                if ((0, graphql_1.isInterfaceType)(parentType)) {\n                    interfaces.add(parentTypeName);\n                }\n            }\n            referencedFieldSetByType[parentTypeName].add(fieldName);\n        },\n    }));\n    const referencedFieldsByType = Object.create(null);\n    for (const [typeName, fieldNames] of Object.entries(referencedFieldSetByType)) {\n        referencedFieldsByType[typeName] = new usage_reporting_protobuf_1.ReferencedFieldsForType({\n            fieldNames: [...fieldNames],\n            isInterface: interfaces.has(typeName),\n        });\n    }\n    return referencedFieldsByType;\n}\nexports.calculateReferencedFieldsByType = calculateReferencedFieldsByType;\n//# sourceMappingURL=calculateReferencedFieldsByType.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMudXNhZ2VyZXBvcnRpbmcvZGlzdC9jYWxjdWxhdGVSZWZlcmVuY2VkRmllbGRzQnlUeXBlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVDQUF1QztBQUN2QyxrQkFBa0IsbUJBQU8sQ0FBQyx1REFBUztBQUNuQyxtQ0FBbUMsbUJBQU8sQ0FBQyx5SEFBa0M7QUFDN0UsMkNBQTJDLDBDQUEwQztBQUNyRjtBQUNBO0FBQ0E7QUFDQSxvREFBb0QsZ0dBQWdHO0FBQ3BKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtFQUErRSxVQUFVO0FBQ3pGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMudXNhZ2VyZXBvcnRpbmcvZGlzdC9jYWxjdWxhdGVSZWZlcmVuY2VkRmllbGRzQnlUeXBlLmpzPzA1MzgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNhbGN1bGF0ZVJlZmVyZW5jZWRGaWVsZHNCeVR5cGUgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IHVzYWdlX3JlcG9ydGluZ19wcm90b2J1Zl8xID0gcmVxdWlyZShcIkBhcG9sbG8vdXNhZ2UtcmVwb3J0aW5nLXByb3RvYnVmXCIpO1xuZnVuY3Rpb24gY2FsY3VsYXRlUmVmZXJlbmNlZEZpZWxkc0J5VHlwZSh7IGRvY3VtZW50LCBzY2hlbWEsIHJlc29sdmVkT3BlcmF0aW9uTmFtZSwgfSkge1xuICAgIGNvbnN0IGRvY3VtZW50U2VwYXJhdGVkQnlPcGVyYXRpb24gPSAoMCwgZ3JhcGhxbF8xLnNlcGFyYXRlT3BlcmF0aW9ucykoZG9jdW1lbnQpO1xuICAgIGNvbnN0IGZpbHRlcmVkRG9jdW1lbnQgPSBkb2N1bWVudFNlcGFyYXRlZEJ5T3BlcmF0aW9uW3Jlc29sdmVkT3BlcmF0aW9uTmFtZSAhPT0gbnVsbCAmJiByZXNvbHZlZE9wZXJhdGlvbk5hbWUgIT09IHZvaWQgMCA/IHJlc29sdmVkT3BlcmF0aW9uTmFtZSA6IFwiXCJdO1xuICAgIGlmICghZmlsdGVyZWREb2N1bWVudCkge1xuICAgICAgICB0aHJvdyBFcnJvcihgc2hvdWxkbid0IGhhcHBlbjogb3BlcmF0aW9uICcke3Jlc29sdmVkT3BlcmF0aW9uTmFtZSAhPT0gbnVsbCAmJiByZXNvbHZlZE9wZXJhdGlvbk5hbWUgIT09IHZvaWQgMCA/IHJlc29sdmVkT3BlcmF0aW9uTmFtZSA6IFwiXCJ9JyBub3QgZm91bmRgKTtcbiAgICB9XG4gICAgY29uc3QgdHlwZUluZm8gPSBuZXcgZ3JhcGhxbF8xLlR5cGVJbmZvKHNjaGVtYSk7XG4gICAgY29uc3QgaW50ZXJmYWNlcyA9IG5ldyBTZXQoKTtcbiAgICBjb25zdCByZWZlcmVuY2VkRmllbGRTZXRCeVR5cGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICgwLCBncmFwaHFsXzEudmlzaXQpKGZpbHRlcmVkRG9jdW1lbnQsICgwLCBncmFwaHFsXzEudmlzaXRXaXRoVHlwZUluZm8pKHR5cGVJbmZvLCB7XG4gICAgICAgIEZpZWxkKGZpZWxkKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBmaWVsZC5uYW1lLnZhbHVlO1xuICAgICAgICAgICAgY29uc3QgcGFyZW50VHlwZSA9IHR5cGVJbmZvLmdldFBhcmVudFR5cGUoKTtcbiAgICAgICAgICAgIGlmICghcGFyZW50VHlwZSkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKGBzaG91bGRuJ3QgaGFwcGVuOiBtaXNzaW5nIHBhcmVudCB0eXBlIGZvciBmaWVsZCAke2ZpZWxkTmFtZX1gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHBhcmVudFR5cGVOYW1lID0gcGFyZW50VHlwZS5uYW1lO1xuICAgICAgICAgICAgaWYgKCFyZWZlcmVuY2VkRmllbGRTZXRCeVR5cGVbcGFyZW50VHlwZU5hbWVdKSB7XG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlZEZpZWxkU2V0QnlUeXBlW3BhcmVudFR5cGVOYW1lXSA9IG5ldyBTZXQoKTtcbiAgICAgICAgICAgICAgICBpZiAoKDAsIGdyYXBocWxfMS5pc0ludGVyZmFjZVR5cGUpKHBhcmVudFR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgIGludGVyZmFjZXMuYWRkKHBhcmVudFR5cGVOYW1lKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZWZlcmVuY2VkRmllbGRTZXRCeVR5cGVbcGFyZW50VHlwZU5hbWVdLmFkZChmaWVsZE5hbWUpO1xuICAgICAgICB9LFxuICAgIH0pKTtcbiAgICBjb25zdCByZWZlcmVuY2VkRmllbGRzQnlUeXBlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBmb3IgKGNvbnN0IFt0eXBlTmFtZSwgZmllbGROYW1lc10gb2YgT2JqZWN0LmVudHJpZXMocmVmZXJlbmNlZEZpZWxkU2V0QnlUeXBlKSkge1xuICAgICAgICByZWZlcmVuY2VkRmllbGRzQnlUeXBlW3R5cGVOYW1lXSA9IG5ldyB1c2FnZV9yZXBvcnRpbmdfcHJvdG9idWZfMS5SZWZlcmVuY2VkRmllbGRzRm9yVHlwZSh7XG4gICAgICAgICAgICBmaWVsZE5hbWVzOiBbLi4uZmllbGROYW1lc10sXG4gICAgICAgICAgICBpc0ludGVyZmFjZTogaW50ZXJmYWNlcy5oYXModHlwZU5hbWUpLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlZmVyZW5jZWRGaWVsZHNCeVR5cGU7XG59XG5leHBvcnRzLmNhbGN1bGF0ZVJlZmVyZW5jZWRGaWVsZHNCeVR5cGUgPSBjYWxjdWxhdGVSZWZlcmVuY2VkRmllbGRzQnlUeXBlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y2FsY3VsYXRlUmVmZXJlbmNlZEZpZWxkc0J5VHlwZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/calculateReferencedFieldsByType.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/index.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/index.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.usageReportingSignature = exports.calculateReferencedFieldsByType = void 0;\nvar calculateReferencedFieldsByType_1 = __webpack_require__(/*! ./calculateReferencedFieldsByType */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/calculateReferencedFieldsByType.js\");\nObject.defineProperty(exports, \"calculateReferencedFieldsByType\", ({ enumerable: true, get: function () { return calculateReferencedFieldsByType_1.calculateReferencedFieldsByType; } }));\nvar signature_1 = __webpack_require__(/*! ./signature */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/signature.js\");\nObject.defineProperty(exports, \"usageReportingSignature\", ({ enumerable: true, get: function () { return signature_1.usageReportingSignature; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMudXNhZ2VyZXBvcnRpbmcvZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCwrQkFBK0IsR0FBRyx1Q0FBdUM7QUFDekUsd0NBQXdDLG1CQUFPLENBQUMsZ0tBQW1DO0FBQ25GLG1FQUFrRSxFQUFFLHFDQUFxQyw2RUFBNkUsRUFBQztBQUN2TCxrQkFBa0IsbUJBQU8sQ0FBQyxvSEFBYTtBQUN2QywyREFBMEQsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUM7QUFDakoiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMudXNhZ2VyZXBvcnRpbmcvZGlzdC9pbmRleC5qcz9hYzg3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy51c2FnZVJlcG9ydGluZ1NpZ25hdHVyZSA9IGV4cG9ydHMuY2FsY3VsYXRlUmVmZXJlbmNlZEZpZWxkc0J5VHlwZSA9IHZvaWQgMDtcbnZhciBjYWxjdWxhdGVSZWZlcmVuY2VkRmllbGRzQnlUeXBlXzEgPSByZXF1aXJlKFwiLi9jYWxjdWxhdGVSZWZlcmVuY2VkRmllbGRzQnlUeXBlXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2FsY3VsYXRlUmVmZXJlbmNlZEZpZWxkc0J5VHlwZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FsY3VsYXRlUmVmZXJlbmNlZEZpZWxkc0J5VHlwZV8xLmNhbGN1bGF0ZVJlZmVyZW5jZWRGaWVsZHNCeVR5cGU7IH0gfSk7XG52YXIgc2lnbmF0dXJlXzEgPSByZXF1aXJlKFwiLi9zaWduYXR1cmVcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1c2FnZVJlcG9ydGluZ1NpZ25hdHVyZVwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc2lnbmF0dXJlXzEudXNhZ2VSZXBvcnRpbmdTaWduYXR1cmU7IH0gfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/signature.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/signature.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.usageReportingSignature = void 0;\nconst utils_dropunuseddefinitions_1 = __webpack_require__(/*! @apollo/utils.dropunuseddefinitions */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.dropunuseddefinitions/dist/index.js\");\nconst utils_stripsensitiveliterals_1 = __webpack_require__(/*! @apollo/utils.stripsensitiveliterals */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.stripsensitiveliterals/dist/index.js\");\nconst utils_printwithreducedwhitespace_1 = __webpack_require__(/*! @apollo/utils.printwithreducedwhitespace */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.printwithreducedwhitespace/dist/index.js\");\nconst utils_removealiases_1 = __webpack_require__(/*! @apollo/utils.removealiases */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.removealiases/dist/index.js\");\nconst utils_sortast_1 = __webpack_require__(/*! @apollo/utils.sortast */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.sortast/dist/index.js\");\nfunction usageReportingSignature(ast, operationName) {\n    return (0, utils_printwithreducedwhitespace_1.printWithReducedWhitespace)((0, utils_sortast_1.sortAST)((0, utils_removealiases_1.removeAliases)((0, utils_stripsensitiveliterals_1.stripSensitiveLiterals)((0, utils_dropunuseddefinitions_1.dropUnusedDefinitions)(ast, operationName), {\n        hideListAndObjectLiterals: true,\n    }))));\n}\nexports.usageReportingSignature = usageReportingSignature;\n//# sourceMappingURL=signature.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMudXNhZ2VyZXBvcnRpbmcvZGlzdC9zaWduYXR1cmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsK0JBQStCO0FBQy9CLHNDQUFzQyxtQkFBTyxDQUFDLCtJQUFxQztBQUNuRix1Q0FBdUMsbUJBQU8sQ0FBQyxpSkFBc0M7QUFDckYsMkNBQTJDLG1CQUFPLENBQUMseUpBQTBDO0FBQzdGLDhCQUE4QixtQkFBTyxDQUFDLCtIQUE2QjtBQUNuRSx3QkFBd0IsbUJBQU8sQ0FBQyxtSEFBdUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EsK0JBQStCO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AYXBvbGxvL3V0aWxzLnVzYWdlcmVwb3J0aW5nL2Rpc3Qvc2lnbmF0dXJlLmpzP2E5ZmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVzYWdlUmVwb3J0aW5nU2lnbmF0dXJlID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfZHJvcHVudXNlZGRlZmluaXRpb25zXzEgPSByZXF1aXJlKFwiQGFwb2xsby91dGlscy5kcm9wdW51c2VkZGVmaW5pdGlvbnNcIik7XG5jb25zdCB1dGlsc19zdHJpcHNlbnNpdGl2ZWxpdGVyYWxzXzEgPSByZXF1aXJlKFwiQGFwb2xsby91dGlscy5zdHJpcHNlbnNpdGl2ZWxpdGVyYWxzXCIpO1xuY29uc3QgdXRpbHNfcHJpbnR3aXRocmVkdWNlZHdoaXRlc3BhY2VfMSA9IHJlcXVpcmUoXCJAYXBvbGxvL3V0aWxzLnByaW50d2l0aHJlZHVjZWR3aGl0ZXNwYWNlXCIpO1xuY29uc3QgdXRpbHNfcmVtb3ZlYWxpYXNlc18xID0gcmVxdWlyZShcIkBhcG9sbG8vdXRpbHMucmVtb3ZlYWxpYXNlc1wiKTtcbmNvbnN0IHV0aWxzX3NvcnRhc3RfMSA9IHJlcXVpcmUoXCJAYXBvbGxvL3V0aWxzLnNvcnRhc3RcIik7XG5mdW5jdGlvbiB1c2FnZVJlcG9ydGluZ1NpZ25hdHVyZShhc3QsIG9wZXJhdGlvbk5hbWUpIHtcbiAgICByZXR1cm4gKDAsIHV0aWxzX3ByaW50d2l0aHJlZHVjZWR3aGl0ZXNwYWNlXzEucHJpbnRXaXRoUmVkdWNlZFdoaXRlc3BhY2UpKCgwLCB1dGlsc19zb3J0YXN0XzEuc29ydEFTVCkoKDAsIHV0aWxzX3JlbW92ZWFsaWFzZXNfMS5yZW1vdmVBbGlhc2VzKSgoMCwgdXRpbHNfc3RyaXBzZW5zaXRpdmVsaXRlcmFsc18xLnN0cmlwU2Vuc2l0aXZlTGl0ZXJhbHMpKCgwLCB1dGlsc19kcm9wdW51c2VkZGVmaW5pdGlvbnNfMS5kcm9wVW51c2VkRGVmaW5pdGlvbnMpKGFzdCwgb3BlcmF0aW9uTmFtZSksIHtcbiAgICAgICAgaGlkZUxpc3RBbmRPYmplY3RMaXRlcmFsczogdHJ1ZSxcbiAgICB9KSkpKTtcbn1cbmV4cG9ydHMudXNhZ2VSZXBvcnRpbmdTaWduYXR1cmUgPSB1c2FnZVJlcG9ydGluZ1NpZ25hdHVyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNpZ25hdHVyZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/signature.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/utils.createhash/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/utils.createhash/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.createHash = void 0;\nconst utils_isnodelike_1 = __webpack_require__(/*! @apollo/utils.isnodelike */ \"(rsc)/./node_modules/@apollo/utils.isnodelike/dist/index.js\");\nfunction createHash(kind) {\n    if (utils_isnodelike_1.isNodeLike) {\n        return __webpack_require__(/*! crypto */ \"crypto\").createHash(kind);\n    }\n    return __webpack_require__(/*! sha.js */ \"(rsc)/./node_modules/sha.js/index.js\")(kind);\n}\nexports.createHash = createHash;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby91dGlscy5jcmVhdGVoYXNoL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLDJCQUEyQixtQkFBTyxDQUFDLDZGQUEwQjtBQUM3RDtBQUNBO0FBQ0EsZUFBZSxtQkFBYyxDQUFDLHNCQUFRO0FBQ3RDO0FBQ0EsV0FBVyxtQkFBTyxDQUFDLG9EQUFRO0FBQzNCO0FBQ0Esa0JBQWtCO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMuY3JlYXRlaGFzaC9kaXN0L2luZGV4LmpzPzBjMDMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNyZWF0ZUhhc2ggPSB2b2lkIDA7XG5jb25zdCB1dGlsc19pc25vZGVsaWtlXzEgPSByZXF1aXJlKFwiQGFwb2xsby91dGlscy5pc25vZGVsaWtlXCIpO1xuZnVuY3Rpb24gY3JlYXRlSGFzaChraW5kKSB7XG4gICAgaWYgKHV0aWxzX2lzbm9kZWxpa2VfMS5pc05vZGVMaWtlKSB7XG4gICAgICAgIHJldHVybiBtb2R1bGUucmVxdWlyZShcImNyeXB0b1wiKS5jcmVhdGVIYXNoKGtpbmQpO1xuICAgIH1cbiAgICByZXR1cm4gcmVxdWlyZShcInNoYS5qc1wiKShraW5kKTtcbn1cbmV4cG9ydHMuY3JlYXRlSGFzaCA9IGNyZWF0ZUhhc2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/utils.createhash/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/utils.isnodelike/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/utils.isnodelike/dist/index.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isNodeLike = void 0;\nexports.isNodeLike = typeof process === \"object\" &&\n    process &&\n    process.release &&\n    process.versions &&\n    typeof process.versions.node === \"string\";\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby91dGlscy5pc25vZGVsaWtlL2Rpc3QvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsa0JBQWtCO0FBQ2xCLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vdXRpbHMuaXNub2RlbGlrZS9kaXN0L2luZGV4LmpzPzJiYmMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzTm9kZUxpa2UgPSB2b2lkIDA7XG5leHBvcnRzLmlzTm9kZUxpa2UgPSB0eXBlb2YgcHJvY2VzcyA9PT0gXCJvYmplY3RcIiAmJlxuICAgIHByb2Nlc3MgJiZcbiAgICBwcm9jZXNzLnJlbGVhc2UgJiZcbiAgICBwcm9jZXNzLnZlcnNpb25zICYmXG4gICAgdHlwZW9mIHByb2Nlc3MudmVyc2lvbnMubm9kZSA9PT0gXCJzdHJpbmdcIjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/utils.isnodelike/dist/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/ApolloServer.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/ApolloServer.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.chooseContentTypeForSingleResultResponse = exports.MEDIA_TYPES = exports.isImplicitlyInstallablePlugin = exports.internalExecuteOperation = exports.ApolloServer = void 0;\nconst utils_isnodelike_1 = __webpack_require__(/*! @apollo/utils.isnodelike */ \"(rsc)/./node_modules/@apollo/utils.isnodelike/dist/index.js\");\nconst utils_keyvaluecache_1 = __webpack_require__(/*! @apollo/utils.keyvaluecache */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/index.js\");\nconst schema_1 = __webpack_require__(/*! @graphql-tools/schema */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/index.js\");\nconst resolvable_js_1 = __importDefault(__webpack_require__(/*! ./utils/resolvable.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/resolvable.js\"));\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst loglevel_1 = __importDefault(__webpack_require__(/*! loglevel */ \"(rsc)/./node_modules/loglevel/lib/loglevel.js\"));\nconst negotiator_1 = __importDefault(__webpack_require__(/*! negotiator */ \"(rsc)/./node_modules/negotiator/index.js\"));\nconst cachePolicy_js_1 = __webpack_require__(/*! ./cachePolicy.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/cachePolicy.js\");\nconst determineApolloConfig_js_1 = __webpack_require__(/*! ./determineApolloConfig.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/determineApolloConfig.js\");\nconst errorNormalize_js_1 = __webpack_require__(/*! ./errorNormalize.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/errorNormalize.js\");\nconst index_js_1 = __webpack_require__(/*! ./errors/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/errors/index.js\");\nconst httpBatching_js_1 = __webpack_require__(/*! ./httpBatching.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/httpBatching.js\");\nconst internalPlugin_js_1 = __webpack_require__(/*! ./internalPlugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/internalPlugin.js\");\nconst preventCsrf_js_1 = __webpack_require__(/*! ./preventCsrf.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/preventCsrf.js\");\nconst requestPipeline_js_1 = __webpack_require__(/*! ./requestPipeline.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/requestPipeline.js\");\nconst runHttpQuery_js_1 = __webpack_require__(/*! ./runHttpQuery.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/runHttpQuery.js\");\nconst HeaderMap_js_1 = __webpack_require__(/*! ./utils/HeaderMap.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/HeaderMap.js\");\nconst UnreachableCaseError_js_1 = __webpack_require__(/*! ./utils/UnreachableCaseError.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/UnreachableCaseError.js\");\nconst computeCoreSchemaHash_js_1 = __webpack_require__(/*! ./utils/computeCoreSchemaHash.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/computeCoreSchemaHash.js\");\nconst isDefined_js_1 = __webpack_require__(/*! ./utils/isDefined.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/isDefined.js\");\nconst schemaManager_js_1 = __webpack_require__(/*! ./utils/schemaManager.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/schemaManager.js\");\nconst NoIntrospection = (context) => ({\n    Field(node) {\n        if (node.name.value === '__schema' || node.name.value === '__type') {\n            context.reportError(new graphql_1.GraphQLError('GraphQL introspection is not allowed by Apollo Server, but the query contained __schema or __type. To enable introspection, pass introspection: true to ApolloServer in production', {\n                nodes: [node],\n                extensions: {\n                    validationErrorCode: index_js_1.ApolloServerValidationErrorCode.INTROSPECTION_DISABLED,\n                },\n            }));\n        }\n    },\n});\nfunction defaultLogger() {\n    const loglevelLogger = loglevel_1.default.getLogger('apollo-server');\n    loglevelLogger.setLevel(loglevel_1.default.levels.INFO);\n    return loglevelLogger;\n}\nclass ApolloServer {\n    constructor(config) {\n        const nodeEnv = config.nodeEnv ?? \"development\" ?? '';\n        this.logger = config.logger ?? defaultLogger();\n        const apolloConfig = (0, determineApolloConfig_js_1.determineApolloConfig)(config.apollo, this.logger);\n        const isDev = nodeEnv !== 'production';\n        if (config.cache &&\n            config.cache !== 'bounded' &&\n            utils_keyvaluecache_1.PrefixingKeyValueCache.prefixesAreUnnecessaryForIsolation(config.cache)) {\n            throw new Error('You cannot pass a cache returned from ' +\n                '`PrefixingKeyValueCache.cacheDangerouslyDoesNotNeedPrefixesForIsolation`' +\n                'to `new ApolloServer({ cache })`, because Apollo Server may use it for ' +\n                'multiple features whose cache keys must be distinct from each other.');\n        }\n        const state = config.gateway\n            ?\n                {\n                    phase: 'initialized',\n                    schemaManager: new schemaManager_js_1.SchemaManager({\n                        gateway: config.gateway,\n                        apolloConfig,\n                        schemaDerivedDataProvider: (schema) => ApolloServer.generateSchemaDerivedData(schema, config.documentStore),\n                        logger: this.logger,\n                    }),\n                }\n            :\n                {\n                    phase: 'initialized',\n                    schemaManager: new schemaManager_js_1.SchemaManager({\n                        apiSchema: ApolloServer.constructSchema(config),\n                        schemaDerivedDataProvider: (schema) => ApolloServer.generateSchemaDerivedData(schema, config.documentStore),\n                        logger: this.logger,\n                    }),\n                };\n        const introspectionEnabled = config.introspection ?? isDev;\n        const hideSchemaDetailsFromClientErrors = config.hideSchemaDetailsFromClientErrors ?? false;\n        this.cache =\n            config.cache === undefined || config.cache === 'bounded'\n                ? new utils_keyvaluecache_1.InMemoryLRUCache()\n                : config.cache;\n        this.internals = {\n            formatError: config.formatError,\n            rootValue: config.rootValue,\n            validationRules: [\n                ...(config.validationRules ?? []),\n                ...(introspectionEnabled ? [] : [NoIntrospection]),\n            ],\n            hideSchemaDetailsFromClientErrors,\n            dangerouslyDisableValidation: config.dangerouslyDisableValidation ?? false,\n            fieldResolver: config.fieldResolver,\n            includeStacktraceInErrorResponses: config.includeStacktraceInErrorResponses ??\n                (nodeEnv !== 'production' && nodeEnv !== 'test'),\n            persistedQueries: config.persistedQueries === false\n                ? undefined\n                : {\n                    ...config.persistedQueries,\n                    cache: new utils_keyvaluecache_1.PrefixingKeyValueCache(config.persistedQueries?.cache ?? this.cache, requestPipeline_js_1.APQ_CACHE_PREFIX),\n                },\n            nodeEnv,\n            allowBatchedHttpRequests: config.allowBatchedHttpRequests ?? false,\n            apolloConfig,\n            plugins: config.plugins ?? [],\n            parseOptions: config.parseOptions ?? {},\n            state,\n            stopOnTerminationSignals: config.stopOnTerminationSignals,\n            gatewayExecutor: null,\n            csrfPreventionRequestHeaders: config.csrfPrevention === true || config.csrfPrevention === undefined\n                ? preventCsrf_js_1.recommendedCsrfPreventionRequestHeaders\n                : config.csrfPrevention === false\n                    ? null\n                    : (config.csrfPrevention.requestHeaders ??\n                        preventCsrf_js_1.recommendedCsrfPreventionRequestHeaders),\n            status400ForVariableCoercionErrors: config.status400ForVariableCoercionErrors ?? false,\n            __testing_incrementalExecutionResults: config.__testing_incrementalExecutionResults,\n            stringifyResult: config.stringifyResult ?? runHttpQuery_js_1.prettyJSONStringify,\n        };\n    }\n    async start() {\n        return await this._start(false);\n    }\n    startInBackgroundHandlingStartupErrorsByLoggingAndFailingAllRequests() {\n        this._start(true).catch((e) => this.logStartupError(e));\n    }\n    async _start(startedInBackground) {\n        if (this.internals.state.phase !== 'initialized') {\n            throw new Error(`You should only call 'start()' or ` +\n                `'startInBackgroundHandlingStartupErrorsByLoggingAndFailingAllRequests()' ` +\n                `once on your ApolloServer.`);\n        }\n        const schemaManager = this.internals.state.schemaManager;\n        const barrier = (0, resolvable_js_1.default)();\n        this.internals.state = {\n            phase: 'starting',\n            barrier,\n            schemaManager,\n            startedInBackground,\n        };\n        try {\n            await this.addDefaultPlugins();\n            const toDispose = [];\n            const executor = await schemaManager.start();\n            if (executor) {\n                this.internals.gatewayExecutor = executor;\n            }\n            toDispose.push(async () => {\n                await schemaManager.stop();\n            });\n            const schemaDerivedData = schemaManager.getSchemaDerivedData();\n            const service = {\n                logger: this.logger,\n                cache: this.cache,\n                schema: schemaDerivedData.schema,\n                apollo: this.internals.apolloConfig,\n                startedInBackground,\n            };\n            const taggedServerListeners = (await Promise.all(this.internals.plugins.map(async (plugin) => ({\n                serverListener: plugin.serverWillStart && (await plugin.serverWillStart(service)),\n                installedImplicitly: isImplicitlyInstallablePlugin(plugin) &&\n                    plugin.__internal_installed_implicitly__,\n            })))).filter((maybeTaggedServerListener) => typeof maybeTaggedServerListener.serverListener === 'object');\n            taggedServerListeners.forEach(({ serverListener: { schemaDidLoadOrUpdate } }) => {\n                if (schemaDidLoadOrUpdate) {\n                    schemaManager.onSchemaLoadOrUpdate(schemaDidLoadOrUpdate);\n                }\n            });\n            const serverWillStops = taggedServerListeners\n                .map((l) => l.serverListener.serverWillStop)\n                .filter(isDefined_js_1.isDefined);\n            if (serverWillStops.length) {\n                toDispose.push(async () => {\n                    await Promise.all(serverWillStops.map((serverWillStop) => serverWillStop()));\n                });\n            }\n            const drainServerCallbacks = taggedServerListeners\n                .map((l) => l.serverListener.drainServer)\n                .filter(isDefined_js_1.isDefined);\n            const drainServers = drainServerCallbacks.length\n                ? async () => {\n                    await Promise.all(drainServerCallbacks.map((drainServer) => drainServer()));\n                }\n                : null;\n            let taggedServerListenersWithRenderLandingPage = taggedServerListeners.filter((l) => l.serverListener.renderLandingPage);\n            if (taggedServerListenersWithRenderLandingPage.length > 1) {\n                taggedServerListenersWithRenderLandingPage =\n                    taggedServerListenersWithRenderLandingPage.filter((l) => !l.installedImplicitly);\n            }\n            let landingPage = null;\n            if (taggedServerListenersWithRenderLandingPage.length > 1) {\n                throw Error('Only one plugin can implement renderLandingPage.');\n            }\n            else if (taggedServerListenersWithRenderLandingPage.length) {\n                landingPage =\n                    await taggedServerListenersWithRenderLandingPage[0].serverListener\n                        .renderLandingPage();\n            }\n            const toDisposeLast = this.maybeRegisterTerminationSignalHandlers(['SIGINT', 'SIGTERM'], startedInBackground);\n            this.internals.state = {\n                phase: 'started',\n                schemaManager,\n                drainServers,\n                landingPage,\n                toDispose,\n                toDisposeLast,\n            };\n        }\n        catch (maybeError) {\n            const error = (0, errorNormalize_js_1.ensureError)(maybeError);\n            try {\n                await Promise.all(this.internals.plugins.map(async (plugin) => plugin.startupDidFail?.({ error })));\n            }\n            catch (pluginError) {\n                this.logger.error(`startupDidFail hook threw: ${pluginError}`);\n            }\n            this.internals.state = {\n                phase: 'failed to start',\n                error,\n            };\n            throw error;\n        }\n        finally {\n            barrier.resolve();\n        }\n    }\n    maybeRegisterTerminationSignalHandlers(signals, startedInBackground) {\n        const toDisposeLast = [];\n        if (this.internals.stopOnTerminationSignals === false ||\n            (this.internals.stopOnTerminationSignals === undefined &&\n                !(utils_isnodelike_1.isNodeLike &&\n                    this.internals.nodeEnv !== 'test' &&\n                    !startedInBackground))) {\n            return toDisposeLast;\n        }\n        let receivedSignal = false;\n        const signalHandler = async (signal) => {\n            if (receivedSignal) {\n                return;\n            }\n            receivedSignal = true;\n            try {\n                await this.stop();\n            }\n            catch (e) {\n                this.logger.error(`stop() threw during ${signal} shutdown`);\n                this.logger.error(e);\n                process.exit(1);\n            }\n            process.kill(process.pid, signal);\n        };\n        signals.forEach((signal) => {\n            process.on(signal, signalHandler);\n            toDisposeLast.push(async () => {\n                process.removeListener(signal, signalHandler);\n            });\n        });\n        return toDisposeLast;\n    }\n    async _ensureStarted() {\n        while (true) {\n            switch (this.internals.state.phase) {\n                case 'initialized':\n                    throw new Error('You need to call `server.start()` before using your Apollo Server.');\n                case 'starting':\n                    await this.internals.state.barrier;\n                    break;\n                case 'failed to start':\n                    this.logStartupError(this.internals.state.error);\n                    throw new Error('This data graph is missing a valid configuration. More details may be available in the server logs.');\n                case 'started':\n                case 'draining':\n                    return this.internals.state;\n                case 'stopping':\n                case 'stopped':\n                    this.logger.warn('A GraphQL operation was received during server shutdown. The ' +\n                        'operation will fail. Consider draining the HTTP server on shutdown; ' +\n                        'see https://go.apollo.dev/s/drain for details.');\n                    throw new Error(`Cannot execute GraphQL operations ${this.internals.state.phase === 'stopping'\n                        ? 'while the server is stopping'\n                        : 'after the server has stopped'}.'`);\n                default:\n                    throw new UnreachableCaseError_js_1.UnreachableCaseError(this.internals.state);\n            }\n        }\n    }\n    assertStarted(expressionForError) {\n        if (this.internals.state.phase !== 'started' &&\n            this.internals.state.phase !== 'draining' &&\n            !(this.internals.state.phase === 'starting' &&\n                this.internals.state.startedInBackground)) {\n            throw new Error('You must `await server.start()` before calling `' +\n                expressionForError +\n                '`');\n        }\n    }\n    logStartupError(err) {\n        this.logger.error('An error occurred during Apollo Server startup. All GraphQL requests ' +\n            'will now fail. The startup error was: ' +\n            (err?.message || err));\n    }\n    static constructSchema(config) {\n        if (config.schema) {\n            return config.schema;\n        }\n        const { typeDefs, resolvers } = config;\n        const augmentedTypeDefs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];\n        return (0, schema_1.makeExecutableSchema)({\n            typeDefs: augmentedTypeDefs,\n            resolvers,\n        });\n    }\n    static generateSchemaDerivedData(schema, providedDocumentStore) {\n        (0, graphql_1.assertValidSchema)(schema);\n        return {\n            schema,\n            documentStore: providedDocumentStore === undefined\n                ? new utils_keyvaluecache_1.InMemoryLRUCache()\n                : providedDocumentStore,\n            documentStoreKeyPrefix: providedDocumentStore\n                ? `${(0, computeCoreSchemaHash_js_1.computeCoreSchemaHash)((0, graphql_1.printSchema)(schema))}:`\n                : '',\n        };\n    }\n    async stop() {\n        switch (this.internals.state.phase) {\n            case 'initialized':\n            case 'starting':\n            case 'failed to start':\n                throw Error('apolloServer.stop() should only be called after `await apolloServer.start()` has succeeded');\n            case 'stopped':\n                if (this.internals.state.stopError) {\n                    throw this.internals.state.stopError;\n                }\n                return;\n            case 'stopping':\n            case 'draining': {\n                await this.internals.state.barrier;\n                const state = this.internals.state;\n                if (state.phase !== 'stopped') {\n                    throw Error(`Surprising post-stopping state ${state.phase}`);\n                }\n                if (state.stopError) {\n                    throw state.stopError;\n                }\n                return;\n            }\n            case 'started':\n                break;\n            default:\n                throw new UnreachableCaseError_js_1.UnreachableCaseError(this.internals.state);\n        }\n        const barrier = (0, resolvable_js_1.default)();\n        const { schemaManager, drainServers, landingPage, toDispose, toDisposeLast, } = this.internals.state;\n        this.internals.state = {\n            phase: 'draining',\n            barrier,\n            schemaManager,\n            landingPage,\n        };\n        try {\n            await drainServers?.();\n            this.internals.state = { phase: 'stopping', barrier };\n            await Promise.all([...toDispose].map((dispose) => dispose()));\n            await Promise.all([...toDisposeLast].map((dispose) => dispose()));\n        }\n        catch (stopError) {\n            this.internals.state = {\n                phase: 'stopped',\n                stopError: stopError,\n            };\n            barrier.resolve();\n            throw stopError;\n        }\n        this.internals.state = { phase: 'stopped', stopError: null };\n    }\n    async addDefaultPlugins() {\n        const { plugins, apolloConfig, nodeEnv, hideSchemaDetailsFromClientErrors, } = this.internals;\n        const isDev = nodeEnv !== 'production';\n        const alreadyHavePluginWithInternalId = (id) => plugins.some((p) => (0, internalPlugin_js_1.pluginIsInternal)(p) && p.__internal_plugin_id__ === id);\n        const pluginsByInternalID = new Map();\n        for (const p of plugins) {\n            if ((0, internalPlugin_js_1.pluginIsInternal)(p)) {\n                const id = p.__internal_plugin_id__;\n                if (!pluginsByInternalID.has(id)) {\n                    pluginsByInternalID.set(id, {\n                        sawDisabled: false,\n                        sawNonDisabled: false,\n                    });\n                }\n                const seen = pluginsByInternalID.get(id);\n                if (p.__is_disabled_plugin__) {\n                    seen.sawDisabled = true;\n                }\n                else {\n                    seen.sawNonDisabled = true;\n                }\n                if (seen.sawDisabled && seen.sawNonDisabled) {\n                    throw new Error(`You have tried to install both ApolloServerPlugin${id} and ` +\n                        `ApolloServerPlugin${id}Disabled in your server. Please choose ` +\n                        `whether or not you want to disable the feature and install the ` +\n                        `appropriate plugin for your use case.`);\n                }\n            }\n        }\n        {\n            if (!alreadyHavePluginWithInternalId('CacheControl')) {\n                const { ApolloServerPluginCacheControl } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! ./plugin/cacheControl/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/cacheControl/index.js\")));\n                plugins.push(ApolloServerPluginCacheControl());\n            }\n        }\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('UsageReporting');\n            if (!alreadyHavePlugin && apolloConfig.key) {\n                if (apolloConfig.graphRef) {\n                    const { ApolloServerPluginUsageReporting } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! ./plugin/usageReporting/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/index.js\")));\n                    plugins.unshift(ApolloServerPluginUsageReporting({\n                        __onlyIfSchemaIsNotSubgraph: true,\n                    }));\n                }\n                else {\n                    this.logger.warn('You have specified an Apollo key but have not specified a graph ref; usage ' +\n                        'reporting is disabled. To enable usage reporting, set the `APOLLO_GRAPH_REF` ' +\n                        'environment variable to `your-graph-id@your-graph-variant`. To disable this ' +\n                        'warning, install `ApolloServerPluginUsageReportingDisabled`.');\n                }\n            }\n        }\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('SchemaReporting');\n            const enabledViaEnvVar = process.env.APOLLO_SCHEMA_REPORTING === 'true';\n            if (!alreadyHavePlugin && enabledViaEnvVar) {\n                if (apolloConfig.key) {\n                    const { ApolloServerPluginSchemaReporting } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! ./plugin/schemaReporting/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/schemaReporting/index.js\")));\n                    plugins.push(ApolloServerPluginSchemaReporting());\n                }\n                else {\n                    throw new Error(\"You've enabled schema reporting by setting the APOLLO_SCHEMA_REPORTING \" +\n                        'environment variable to true, but you also need to provide your ' +\n                        'Apollo API key, via the APOLLO_KEY environment ' +\n                        'variable or via `new ApolloServer({apollo: {key})');\n                }\n            }\n        }\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('InlineTrace');\n            if (!alreadyHavePlugin) {\n                const { ApolloServerPluginInlineTrace } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! ./plugin/inlineTrace/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/inlineTrace/index.js\")));\n                plugins.push(ApolloServerPluginInlineTrace({ __onlyIfSchemaIsSubgraph: true }));\n            }\n        }\n        const alreadyHavePlugin = alreadyHavePluginWithInternalId('LandingPageDisabled');\n        if (!alreadyHavePlugin) {\n            const { ApolloServerPluginLandingPageLocalDefault, ApolloServerPluginLandingPageProductionDefault, } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! ./plugin/landingPage/default/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/landingPage/default/index.js\")));\n            const plugin = isDev\n                ? ApolloServerPluginLandingPageLocalDefault()\n                : ApolloServerPluginLandingPageProductionDefault();\n            if (!isImplicitlyInstallablePlugin(plugin)) {\n                throw Error('default landing page plugin should be implicitly installable?');\n            }\n            plugin.__internal_installed_implicitly__ = true;\n            plugins.push(plugin);\n        }\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('DisableSuggestions');\n            if (hideSchemaDetailsFromClientErrors && !alreadyHavePlugin) {\n                const { ApolloServerPluginDisableSuggestions } = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! ./plugin/disableSuggestions/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/disableSuggestions/index.js\")));\n                plugins.push(ApolloServerPluginDisableSuggestions());\n            }\n        }\n    }\n    addPlugin(plugin) {\n        if (this.internals.state.phase !== 'initialized') {\n            throw new Error(\"Can't add plugins after the server has started\");\n        }\n        this.internals.plugins.push(plugin);\n    }\n    async executeHTTPGraphQLRequest({ httpGraphQLRequest, context, }) {\n        try {\n            let runningServerState;\n            try {\n                runningServerState = await this._ensureStarted();\n            }\n            catch (error) {\n                return await this.errorResponse(error, httpGraphQLRequest);\n            }\n            if (runningServerState.landingPage &&\n                this.prefersHTML(httpGraphQLRequest)) {\n                let renderedHtml;\n                if (typeof runningServerState.landingPage.html === 'string') {\n                    renderedHtml = runningServerState.landingPage.html;\n                }\n                else {\n                    try {\n                        renderedHtml = await runningServerState.landingPage.html();\n                    }\n                    catch (maybeError) {\n                        const error = (0, errorNormalize_js_1.ensureError)(maybeError);\n                        this.logger.error(`Landing page \\`html\\` function threw: ${error}`);\n                        return await this.errorResponse(error, httpGraphQLRequest);\n                    }\n                }\n                return {\n                    headers: new HeaderMap_js_1.HeaderMap([['content-type', 'text/html']]),\n                    body: {\n                        kind: 'complete',\n                        string: renderedHtml,\n                    },\n                };\n            }\n            if (this.internals.csrfPreventionRequestHeaders) {\n                (0, preventCsrf_js_1.preventCsrf)(httpGraphQLRequest.headers, this.internals.csrfPreventionRequestHeaders);\n            }\n            let contextValue;\n            try {\n                contextValue = await context();\n            }\n            catch (maybeError) {\n                const error = (0, errorNormalize_js_1.ensureError)(maybeError);\n                try {\n                    await Promise.all(this.internals.plugins.map(async (plugin) => plugin.contextCreationDidFail?.({\n                        error,\n                    })));\n                }\n                catch (pluginError) {\n                    this.logger.error(`contextCreationDidFail hook threw: ${pluginError}`);\n                }\n                return await this.errorResponse((0, errorNormalize_js_1.ensureGraphQLError)(error, 'Context creation failed: '), httpGraphQLRequest);\n            }\n            return await (0, httpBatching_js_1.runPotentiallyBatchedHttpQuery)(this, httpGraphQLRequest, contextValue, runningServerState.schemaManager.getSchemaDerivedData(), this.internals);\n        }\n        catch (maybeError_) {\n            const maybeError = maybeError_;\n            if (maybeError instanceof graphql_1.GraphQLError &&\n                maybeError.extensions.code === index_js_1.ApolloServerErrorCode.BAD_REQUEST) {\n                try {\n                    await Promise.all(this.internals.plugins.map(async (plugin) => plugin.invalidRequestWasReceived?.({ error: maybeError })));\n                }\n                catch (pluginError) {\n                    this.logger.error(`invalidRequestWasReceived hook threw: ${pluginError}`);\n                }\n            }\n            return await this.errorResponse(maybeError, httpGraphQLRequest);\n        }\n    }\n    async errorResponse(error, requestHead) {\n        const { formattedErrors, httpFromErrors } = (0, errorNormalize_js_1.normalizeAndFormatErrors)([error], {\n            includeStacktraceInErrorResponses: this.internals.includeStacktraceInErrorResponses,\n            formatError: this.internals.formatError,\n        });\n        return {\n            status: httpFromErrors.status ?? 500,\n            headers: new HeaderMap_js_1.HeaderMap([\n                ...httpFromErrors.headers,\n                [\n                    'content-type',\n                    chooseContentTypeForSingleResultResponse(requestHead) ??\n                        exports.MEDIA_TYPES.APPLICATION_JSON,\n                ],\n            ]),\n            body: {\n                kind: 'complete',\n                string: await this.internals.stringifyResult({\n                    errors: formattedErrors,\n                }),\n            },\n        };\n    }\n    prefersHTML(request) {\n        const acceptHeader = request.headers.get('accept');\n        return (request.method === 'GET' &&\n            !!acceptHeader &&\n            new negotiator_1.default({\n                headers: { accept: acceptHeader },\n            }).mediaType([\n                exports.MEDIA_TYPES.APPLICATION_JSON,\n                exports.MEDIA_TYPES.APPLICATION_GRAPHQL_RESPONSE_JSON,\n                exports.MEDIA_TYPES.MULTIPART_MIXED_EXPERIMENTAL,\n                exports.MEDIA_TYPES.MULTIPART_MIXED_NO_DEFER_SPEC,\n                exports.MEDIA_TYPES.TEXT_HTML,\n            ]) === exports.MEDIA_TYPES.TEXT_HTML);\n    }\n    async executeOperation(request, options = {}) {\n        if (this.internals.state.phase === 'initialized') {\n            await this.start();\n        }\n        const schemaDerivedData = (await this._ensureStarted()).schemaManager.getSchemaDerivedData();\n        const graphQLRequest = {\n            ...request,\n            query: request.query && typeof request.query !== 'string'\n                ? (0, graphql_1.print)(request.query)\n                : request.query,\n        };\n        const response = await internalExecuteOperation({\n            server: this,\n            graphQLRequest,\n            internals: this.internals,\n            schemaDerivedData,\n            sharedResponseHTTPGraphQLHead: null,\n        }, options);\n        return response;\n    }\n}\nexports.ApolloServer = ApolloServer;\nasync function internalExecuteOperation({ server, graphQLRequest, internals, schemaDerivedData, sharedResponseHTTPGraphQLHead, }, options) {\n    const requestContext = {\n        logger: server.logger,\n        cache: server.cache,\n        schema: schemaDerivedData.schema,\n        request: graphQLRequest,\n        response: {\n            http: sharedResponseHTTPGraphQLHead ?? (0, runHttpQuery_js_1.newHTTPGraphQLHead)(),\n        },\n        contextValue: cloneObject(options?.contextValue ?? {}),\n        metrics: {},\n        overallCachePolicy: (0, cachePolicy_js_1.newCachePolicy)(),\n        requestIsBatched: sharedResponseHTTPGraphQLHead !== null,\n    };\n    try {\n        return await (0, requestPipeline_js_1.processGraphQLRequest)(schemaDerivedData, server, internals, requestContext);\n    }\n    catch (maybeError) {\n        const error = (0, errorNormalize_js_1.ensureError)(maybeError);\n        await Promise.all(internals.plugins.map(async (plugin) => plugin.unexpectedErrorProcessingRequest?.({\n            requestContext,\n            error,\n        })));\n        server.logger.error(`Unexpected error processing request: ${error}`);\n        throw new Error('Internal server error');\n    }\n}\nexports.internalExecuteOperation = internalExecuteOperation;\nfunction isImplicitlyInstallablePlugin(p) {\n    return '__internal_installed_implicitly__' in p;\n}\nexports.isImplicitlyInstallablePlugin = isImplicitlyInstallablePlugin;\nexports.MEDIA_TYPES = {\n    APPLICATION_JSON: 'application/json; charset=utf-8',\n    APPLICATION_JSON_GRAPHQL_CALLBACK: 'application/json; callbackSpec=1.0; charset=utf-8',\n    APPLICATION_GRAPHQL_RESPONSE_JSON: 'application/graphql-response+json; charset=utf-8',\n    MULTIPART_MIXED_NO_DEFER_SPEC: 'multipart/mixed',\n    MULTIPART_MIXED_EXPERIMENTAL: 'multipart/mixed; deferSpec=20220824',\n    TEXT_HTML: 'text/html',\n};\nfunction chooseContentTypeForSingleResultResponse(head) {\n    const acceptHeader = head.headers.get('accept');\n    if (!acceptHeader) {\n        return exports.MEDIA_TYPES.APPLICATION_JSON;\n    }\n    else {\n        const preferred = new negotiator_1.default({\n            headers: { accept: head.headers.get('accept') },\n        }).mediaType([\n            exports.MEDIA_TYPES.APPLICATION_JSON,\n            exports.MEDIA_TYPES.APPLICATION_GRAPHQL_RESPONSE_JSON,\n            exports.MEDIA_TYPES.APPLICATION_JSON_GRAPHQL_CALLBACK,\n        ]);\n        if (preferred) {\n            return preferred;\n        }\n        else {\n            return null;\n        }\n    }\n}\nexports.chooseContentTypeForSingleResultResponse = chooseContentTypeForSingleResultResponse;\nfunction cloneObject(object) {\n    return Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n}\n//# sourceMappingURL=ApolloServer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/ApolloServer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/cachePolicy.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/cachePolicy.js ***!
  \*************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.newCachePolicy = void 0;\nfunction newCachePolicy() {\n    return {\n        maxAge: undefined,\n        scope: undefined,\n        restrict(hint) {\n            if (hint.maxAge !== undefined &&\n                (this.maxAge === undefined || hint.maxAge < this.maxAge)) {\n                this.maxAge = hint.maxAge;\n            }\n            if (hint.scope !== undefined && this.scope !== 'PRIVATE') {\n                this.scope = hint.scope;\n            }\n        },\n        replace(hint) {\n            if (hint.maxAge !== undefined) {\n                this.maxAge = hint.maxAge;\n            }\n            if (hint.scope !== undefined) {\n                this.scope = hint.scope;\n            }\n        },\n        policyIfCacheable() {\n            if (this.maxAge === undefined || this.maxAge === 0) {\n                return null;\n            }\n            return { maxAge: this.maxAge, scope: this.scope ?? 'PUBLIC' };\n        },\n    };\n}\nexports.newCachePolicy = newCachePolicy;\n//# sourceMappingURL=cachePolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvY2FjaGVQb2xpY3kuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixTQUFTO0FBQ1Q7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2Nqcy9jYWNoZVBvbGljeS5qcz83NWIyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5uZXdDYWNoZVBvbGljeSA9IHZvaWQgMDtcbmZ1bmN0aW9uIG5ld0NhY2hlUG9saWN5KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1heEFnZTogdW5kZWZpbmVkLFxuICAgICAgICBzY29wZTogdW5kZWZpbmVkLFxuICAgICAgICByZXN0cmljdChoaW50KSB7XG4gICAgICAgICAgICBpZiAoaGludC5tYXhBZ2UgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICh0aGlzLm1heEFnZSA9PT0gdW5kZWZpbmVkIHx8IGhpbnQubWF4QWdlIDwgdGhpcy5tYXhBZ2UpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXhBZ2UgPSBoaW50Lm1heEFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoaW50LnNjb3BlICE9PSB1bmRlZmluZWQgJiYgdGhpcy5zY29wZSAhPT0gJ1BSSVZBVEUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY29wZSA9IGhpbnQuc2NvcGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlcGxhY2UoaGludCkge1xuICAgICAgICAgICAgaWYgKGhpbnQubWF4QWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1heEFnZSA9IGhpbnQubWF4QWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhpbnQuc2NvcGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2NvcGUgPSBoaW50LnNjb3BlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwb2xpY3lJZkNhY2hlYWJsZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1heEFnZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMubWF4QWdlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBtYXhBZ2U6IHRoaXMubWF4QWdlLCBzY29wZTogdGhpcy5zY29wZSA/PyAnUFVCTElDJyB9O1xuICAgICAgICB9LFxuICAgIH07XG59XG5leHBvcnRzLm5ld0NhY2hlUG9saWN5ID0gbmV3Q2FjaGVQb2xpY3k7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWNoZVBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/cachePolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/determineApolloConfig.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/determineApolloConfig.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.determineApolloConfig = void 0;\nconst utils_createhash_1 = __webpack_require__(/*! @apollo/utils.createhash */ \"(rsc)/./node_modules/@apollo/utils.createhash/dist/index.js\");\nfunction determineApolloConfig(input, logger) {\n    const apolloConfig = {};\n    const { APOLLO_KEY, APOLLO_GRAPH_REF, APOLLO_GRAPH_ID, APOLLO_GRAPH_VARIANT, } = process.env;\n    if (input?.key) {\n        apolloConfig.key = input.key.trim();\n    }\n    else if (APOLLO_KEY) {\n        apolloConfig.key = APOLLO_KEY.trim();\n    }\n    if ((input?.key ?? APOLLO_KEY) !== apolloConfig.key) {\n        logger.warn('The provided API key has unexpected leading or trailing whitespace. ' +\n            'Apollo Server will trim the key value before use.');\n    }\n    if (apolloConfig.key) {\n        assertValidHeaderValue(apolloConfig.key);\n    }\n    if (apolloConfig.key) {\n        apolloConfig.keyHash = (0, utils_createhash_1.createHash)('sha512')\n            .update(apolloConfig.key)\n            .digest('hex');\n    }\n    if (input?.graphRef) {\n        apolloConfig.graphRef = input.graphRef;\n    }\n    else if (APOLLO_GRAPH_REF) {\n        apolloConfig.graphRef = APOLLO_GRAPH_REF;\n    }\n    const graphId = input?.graphId ?? APOLLO_GRAPH_ID;\n    const graphVariant = input?.graphVariant ?? APOLLO_GRAPH_VARIANT;\n    if (apolloConfig.graphRef) {\n        if (graphId) {\n            throw new Error('Cannot specify both graph ref and graph ID. Please use ' +\n                '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.');\n        }\n        if (graphVariant) {\n            throw new Error('Cannot specify both graph ref and graph variant. Please use ' +\n                '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph variant.');\n        }\n    }\n    else if (graphId) {\n        apolloConfig.graphRef = graphVariant\n            ? `${graphId}@${graphVariant}`\n            : graphId;\n    }\n    return apolloConfig;\n}\nexports.determineApolloConfig = determineApolloConfig;\nfunction assertValidHeaderValue(value) {\n    const invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/g;\n    if (invalidHeaderCharRegex.test(value)) {\n        const invalidChars = value.match(invalidHeaderCharRegex);\n        throw new Error(`The API key provided to Apollo Server contains characters which are invalid as HTTP header values. The following characters found in the key are invalid: ${invalidChars.join(', ')}. Valid header values may only contain ASCII visible characters. If you think there is an issue with your key, please contact Apollo support.`);\n    }\n}\n//# sourceMappingURL=determineApolloConfig.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvZGV0ZXJtaW5lQXBvbGxvQ29uZmlnLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3QiwyQkFBMkIsbUJBQU8sQ0FBQyw2RkFBMEI7QUFDN0Q7QUFDQTtBQUNBLFlBQVksdUVBQXVFO0FBQ25GO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUSxHQUFHLGFBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxTEFBcUwsd0JBQXdCO0FBQzdNO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2Nqcy9kZXRlcm1pbmVBcG9sbG9Db25maWcuanM/NTY2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGV0ZXJtaW5lQXBvbGxvQ29uZmlnID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfY3JlYXRlaGFzaF8xID0gcmVxdWlyZShcIkBhcG9sbG8vdXRpbHMuY3JlYXRlaGFzaFwiKTtcbmZ1bmN0aW9uIGRldGVybWluZUFwb2xsb0NvbmZpZyhpbnB1dCwgbG9nZ2VyKSB7XG4gICAgY29uc3QgYXBvbGxvQ29uZmlnID0ge307XG4gICAgY29uc3QgeyBBUE9MTE9fS0VZLCBBUE9MTE9fR1JBUEhfUkVGLCBBUE9MTE9fR1JBUEhfSUQsIEFQT0xMT19HUkFQSF9WQVJJQU5ULCB9ID0gcHJvY2Vzcy5lbnY7XG4gICAgaWYgKGlucHV0Py5rZXkpIHtcbiAgICAgICAgYXBvbGxvQ29uZmlnLmtleSA9IGlucHV0LmtleS50cmltKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFQT0xMT19LRVkpIHtcbiAgICAgICAgYXBvbGxvQ29uZmlnLmtleSA9IEFQT0xMT19LRVkudHJpbSgpO1xuICAgIH1cbiAgICBpZiAoKGlucHV0Py5rZXkgPz8gQVBPTExPX0tFWSkgIT09IGFwb2xsb0NvbmZpZy5rZXkpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ1RoZSBwcm92aWRlZCBBUEkga2V5IGhhcyB1bmV4cGVjdGVkIGxlYWRpbmcgb3IgdHJhaWxpbmcgd2hpdGVzcGFjZS4gJyArXG4gICAgICAgICAgICAnQXBvbGxvIFNlcnZlciB3aWxsIHRyaW0gdGhlIGtleSB2YWx1ZSBiZWZvcmUgdXNlLicpO1xuICAgIH1cbiAgICBpZiAoYXBvbGxvQ29uZmlnLmtleSkge1xuICAgICAgICBhc3NlcnRWYWxpZEhlYWRlclZhbHVlKGFwb2xsb0NvbmZpZy5rZXkpO1xuICAgIH1cbiAgICBpZiAoYXBvbGxvQ29uZmlnLmtleSkge1xuICAgICAgICBhcG9sbG9Db25maWcua2V5SGFzaCA9ICgwLCB1dGlsc19jcmVhdGVoYXNoXzEuY3JlYXRlSGFzaCkoJ3NoYTUxMicpXG4gICAgICAgICAgICAudXBkYXRlKGFwb2xsb0NvbmZpZy5rZXkpXG4gICAgICAgICAgICAuZGlnZXN0KCdoZXgnKTtcbiAgICB9XG4gICAgaWYgKGlucHV0Py5ncmFwaFJlZikge1xuICAgICAgICBhcG9sbG9Db25maWcuZ3JhcGhSZWYgPSBpbnB1dC5ncmFwaFJlZjtcbiAgICB9XG4gICAgZWxzZSBpZiAoQVBPTExPX0dSQVBIX1JFRikge1xuICAgICAgICBhcG9sbG9Db25maWcuZ3JhcGhSZWYgPSBBUE9MTE9fR1JBUEhfUkVGO1xuICAgIH1cbiAgICBjb25zdCBncmFwaElkID0gaW5wdXQ/LmdyYXBoSWQgPz8gQVBPTExPX0dSQVBIX0lEO1xuICAgIGNvbnN0IGdyYXBoVmFyaWFudCA9IGlucHV0Py5ncmFwaFZhcmlhbnQgPz8gQVBPTExPX0dSQVBIX1ZBUklBTlQ7XG4gICAgaWYgKGFwb2xsb0NvbmZpZy5ncmFwaFJlZikge1xuICAgICAgICBpZiAoZ3JhcGhJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc3BlY2lmeSBib3RoIGdyYXBoIHJlZiBhbmQgZ3JhcGggSUQuIFBsZWFzZSB1c2UgJyArXG4gICAgICAgICAgICAgICAgJ2BhcG9sbG8uZ3JhcGhSZWZgIG9yIGBBUE9MTE9fR1JBUEhfUkVGYCB3aXRob3V0IGFsc28gc2V0dGluZyB0aGUgZ3JhcGggSUQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdyYXBoVmFyaWFudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc3BlY2lmeSBib3RoIGdyYXBoIHJlZiBhbmQgZ3JhcGggdmFyaWFudC4gUGxlYXNlIHVzZSAnICtcbiAgICAgICAgICAgICAgICAnYGFwb2xsby5ncmFwaFJlZmAgb3IgYEFQT0xMT19HUkFQSF9SRUZgIHdpdGhvdXQgYWxzbyBzZXR0aW5nIHRoZSBncmFwaCB2YXJpYW50LicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGdyYXBoSWQpIHtcbiAgICAgICAgYXBvbGxvQ29uZmlnLmdyYXBoUmVmID0gZ3JhcGhWYXJpYW50XG4gICAgICAgICAgICA/IGAke2dyYXBoSWR9QCR7Z3JhcGhWYXJpYW50fWBcbiAgICAgICAgICAgIDogZ3JhcGhJZDtcbiAgICB9XG4gICAgcmV0dXJuIGFwb2xsb0NvbmZpZztcbn1cbmV4cG9ydHMuZGV0ZXJtaW5lQXBvbGxvQ29uZmlnID0gZGV0ZXJtaW5lQXBvbGxvQ29uZmlnO1xuZnVuY3Rpb24gYXNzZXJ0VmFsaWRIZWFkZXJWYWx1ZSh2YWx1ZSkge1xuICAgIGNvbnN0IGludmFsaWRIZWFkZXJDaGFyUmVnZXggPSAvW15cXHRcXHgyMC1cXHg3ZVxceDgwLVxceGZmXS9nO1xuICAgIGlmIChpbnZhbGlkSGVhZGVyQ2hhclJlZ2V4LnRlc3QodmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IGludmFsaWRDaGFycyA9IHZhbHVlLm1hdGNoKGludmFsaWRIZWFkZXJDaGFyUmVnZXgpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFRoZSBBUEkga2V5IHByb3ZpZGVkIHRvIEFwb2xsbyBTZXJ2ZXIgY29udGFpbnMgY2hhcmFjdGVycyB3aGljaCBhcmUgaW52YWxpZCBhcyBIVFRQIGhlYWRlciB2YWx1ZXMuIFRoZSBmb2xsb3dpbmcgY2hhcmFjdGVycyBmb3VuZCBpbiB0aGUga2V5IGFyZSBpbnZhbGlkOiAke2ludmFsaWRDaGFycy5qb2luKCcsICcpfS4gVmFsaWQgaGVhZGVyIHZhbHVlcyBtYXkgb25seSBjb250YWluIEFTQ0lJIHZpc2libGUgY2hhcmFjdGVycy4gSWYgeW91IHRoaW5rIHRoZXJlIGlzIGFuIGlzc3VlIHdpdGggeW91ciBrZXksIHBsZWFzZSBjb250YWN0IEFwb2xsbyBzdXBwb3J0LmApO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRldGVybWluZUFwb2xsb0NvbmZpZy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/determineApolloConfig.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/errorNormalize.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/errorNormalize.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ensureGraphQLError = exports.ensureError = exports.normalizeAndFormatErrors = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst index_js_1 = __webpack_require__(/*! ./errors/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/errors/index.js\");\nconst runHttpQuery_js_1 = __webpack_require__(/*! ./runHttpQuery.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/runHttpQuery.js\");\nconst HeaderMap_js_1 = __webpack_require__(/*! ./utils/HeaderMap.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/HeaderMap.js\");\nfunction normalizeAndFormatErrors(errors, options = {}) {\n    const formatError = options.formatError ?? ((error) => error);\n    const httpFromErrors = (0, runHttpQuery_js_1.newHTTPGraphQLHead)();\n    return {\n        httpFromErrors,\n        formattedErrors: errors.map((error) => {\n            try {\n                return formatError(enrichError(error), error);\n            }\n            catch (formattingError) {\n                if (options.includeStacktraceInErrorResponses) {\n                    return enrichError(formattingError);\n                }\n                else {\n                    return {\n                        message: 'Internal server error',\n                        extensions: { code: index_js_1.ApolloServerErrorCode.INTERNAL_SERVER_ERROR },\n                    };\n                }\n            }\n        }),\n    };\n    function enrichError(maybeError) {\n        const graphqlError = ensureGraphQLError(maybeError);\n        const extensions = {\n            ...graphqlError.extensions,\n            code: graphqlError.extensions.code ??\n                index_js_1.ApolloServerErrorCode.INTERNAL_SERVER_ERROR,\n        };\n        if (isPartialHTTPGraphQLHead(extensions.http)) {\n            (0, runHttpQuery_js_1.mergeHTTPGraphQLHead)(httpFromErrors, {\n                headers: new HeaderMap_js_1.HeaderMap(),\n                ...extensions.http,\n            });\n            delete extensions.http;\n        }\n        if (options.includeStacktraceInErrorResponses) {\n            extensions.stacktrace = graphqlError.stack?.split('\\n');\n        }\n        return { ...graphqlError.toJSON(), extensions };\n    }\n}\nexports.normalizeAndFormatErrors = normalizeAndFormatErrors;\nfunction ensureError(maybeError) {\n    return maybeError instanceof Error\n        ? maybeError\n        : new graphql_1.GraphQLError('Unexpected error value: ' + String(maybeError));\n}\nexports.ensureError = ensureError;\nfunction ensureGraphQLError(maybeError, messagePrefixIfNotGraphQLError = '') {\n    const error = ensureError(maybeError);\n    return error instanceof graphql_1.GraphQLError\n        ? error\n        : new graphql_1.GraphQLError(messagePrefixIfNotGraphQLError + error.message, {\n            originalError: error,\n        });\n}\nexports.ensureGraphQLError = ensureGraphQLError;\nfunction isPartialHTTPGraphQLHead(x) {\n    return (!!x &&\n        typeof x === 'object' &&\n        (!('status' in x) || typeof x.status === 'number') &&\n        (!('headers' in x) || x.headers instanceof Map));\n}\n//# sourceMappingURL=errorNormalize.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvZXJyb3JOb3JtYWxpemUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMEJBQTBCLEdBQUcsbUJBQW1CLEdBQUcsZ0NBQWdDO0FBQ25GLGtCQUFrQixtQkFBTyxDQUFDLHVEQUFTO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLHVGQUFtQjtBQUM5QywwQkFBMEIsbUJBQU8sQ0FBQyx1RkFBbUI7QUFDckQsdUJBQXVCLG1CQUFPLENBQUMsNkZBQXNCO0FBQ3JELHNEQUFzRDtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsOERBQThEO0FBQ3BHO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EsMEJBQTBCO0FBQzFCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvY2pzL2Vycm9yTm9ybWFsaXplLmpzPzg0ZGQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmVuc3VyZUdyYXBoUUxFcnJvciA9IGV4cG9ydHMuZW5zdXJlRXJyb3IgPSBleHBvcnRzLm5vcm1hbGl6ZUFuZEZvcm1hdEVycm9ycyA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuL2Vycm9ycy9pbmRleC5qc1wiKTtcbmNvbnN0IHJ1bkh0dHBRdWVyeV9qc18xID0gcmVxdWlyZShcIi4vcnVuSHR0cFF1ZXJ5LmpzXCIpO1xuY29uc3QgSGVhZGVyTWFwX2pzXzEgPSByZXF1aXJlKFwiLi91dGlscy9IZWFkZXJNYXAuanNcIik7XG5mdW5jdGlvbiBub3JtYWxpemVBbmRGb3JtYXRFcnJvcnMoZXJyb3JzLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBmb3JtYXRFcnJvciA9IG9wdGlvbnMuZm9ybWF0RXJyb3IgPz8gKChlcnJvcikgPT4gZXJyb3IpO1xuICAgIGNvbnN0IGh0dHBGcm9tRXJyb3JzID0gKDAsIHJ1bkh0dHBRdWVyeV9qc18xLm5ld0hUVFBHcmFwaFFMSGVhZCkoKTtcbiAgICByZXR1cm4ge1xuICAgICAgICBodHRwRnJvbUVycm9ycyxcbiAgICAgICAgZm9ybWF0dGVkRXJyb3JzOiBlcnJvcnMubWFwKChlcnJvcikgPT4ge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0RXJyb3IoZW5yaWNoRXJyb3IoZXJyb3IpLCBlcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZm9ybWF0dGluZ0Vycm9yKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaW5jbHVkZVN0YWNrdHJhY2VJbkVycm9yUmVzcG9uc2VzKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbnJpY2hFcnJvcihmb3JtYXR0aW5nRXJyb3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdJbnRlcm5hbCBzZXJ2ZXIgZXJyb3InLFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5zaW9uczogeyBjb2RlOiBpbmRleF9qc18xLkFwb2xsb1NlcnZlckVycm9yQ29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IgfSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgIH07XG4gICAgZnVuY3Rpb24gZW5yaWNoRXJyb3IobWF5YmVFcnJvcikge1xuICAgICAgICBjb25zdCBncmFwaHFsRXJyb3IgPSBlbnN1cmVHcmFwaFFMRXJyb3IobWF5YmVFcnJvcik7XG4gICAgICAgIGNvbnN0IGV4dGVuc2lvbnMgPSB7XG4gICAgICAgICAgICAuLi5ncmFwaHFsRXJyb3IuZXh0ZW5zaW9ucyxcbiAgICAgICAgICAgIGNvZGU6IGdyYXBocWxFcnJvci5leHRlbnNpb25zLmNvZGUgPz9cbiAgICAgICAgICAgICAgICBpbmRleF9qc18xLkFwb2xsb1NlcnZlckVycm9yQ29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChpc1BhcnRpYWxIVFRQR3JhcGhRTEhlYWQoZXh0ZW5zaW9ucy5odHRwKSkge1xuICAgICAgICAgICAgKDAsIHJ1bkh0dHBRdWVyeV9qc18xLm1lcmdlSFRUUEdyYXBoUUxIZWFkKShodHRwRnJvbUVycm9ycywge1xuICAgICAgICAgICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJNYXBfanNfMS5IZWFkZXJNYXAoKSxcbiAgICAgICAgICAgICAgICAuLi5leHRlbnNpb25zLmh0dHAsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGRlbGV0ZSBleHRlbnNpb25zLmh0dHA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuaW5jbHVkZVN0YWNrdHJhY2VJbkVycm9yUmVzcG9uc2VzKSB7XG4gICAgICAgICAgICBleHRlbnNpb25zLnN0YWNrdHJhY2UgPSBncmFwaHFsRXJyb3Iuc3RhY2s/LnNwbGl0KCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyAuLi5ncmFwaHFsRXJyb3IudG9KU09OKCksIGV4dGVuc2lvbnMgfTtcbiAgICB9XG59XG5leHBvcnRzLm5vcm1hbGl6ZUFuZEZvcm1hdEVycm9ycyA9IG5vcm1hbGl6ZUFuZEZvcm1hdEVycm9ycztcbmZ1bmN0aW9uIGVuc3VyZUVycm9yKG1heWJlRXJyb3IpIHtcbiAgICByZXR1cm4gbWF5YmVFcnJvciBpbnN0YW5jZW9mIEVycm9yXG4gICAgICAgID8gbWF5YmVFcnJvclxuICAgICAgICA6IG5ldyBncmFwaHFsXzEuR3JhcGhRTEVycm9yKCdVbmV4cGVjdGVkIGVycm9yIHZhbHVlOiAnICsgU3RyaW5nKG1heWJlRXJyb3IpKTtcbn1cbmV4cG9ydHMuZW5zdXJlRXJyb3IgPSBlbnN1cmVFcnJvcjtcbmZ1bmN0aW9uIGVuc3VyZUdyYXBoUUxFcnJvcihtYXliZUVycm9yLCBtZXNzYWdlUHJlZml4SWZOb3RHcmFwaFFMRXJyb3IgPSAnJykge1xuICAgIGNvbnN0IGVycm9yID0gZW5zdXJlRXJyb3IobWF5YmVFcnJvcik7XG4gICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgZ3JhcGhxbF8xLkdyYXBoUUxFcnJvclxuICAgICAgICA/IGVycm9yXG4gICAgICAgIDogbmV3IGdyYXBocWxfMS5HcmFwaFFMRXJyb3IobWVzc2FnZVByZWZpeElmTm90R3JhcGhRTEVycm9yICsgZXJyb3IubWVzc2FnZSwge1xuICAgICAgICAgICAgb3JpZ2luYWxFcnJvcjogZXJyb3IsXG4gICAgICAgIH0pO1xufVxuZXhwb3J0cy5lbnN1cmVHcmFwaFFMRXJyb3IgPSBlbnN1cmVHcmFwaFFMRXJyb3I7XG5mdW5jdGlvbiBpc1BhcnRpYWxIVFRQR3JhcGhRTEhlYWQoeCkge1xuICAgIHJldHVybiAoISF4ICYmXG4gICAgICAgIHR5cGVvZiB4ID09PSAnb2JqZWN0JyAmJlxuICAgICAgICAoISgnc3RhdHVzJyBpbiB4KSB8fCB0eXBlb2YgeC5zdGF0dXMgPT09ICdudW1iZXInKSAmJlxuICAgICAgICAoISgnaGVhZGVycycgaW4geCkgfHwgeC5oZWFkZXJzIGluc3RhbmNlb2YgTWFwKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvck5vcm1hbGl6ZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/errorNormalize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/errors/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/errors/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.unwrapResolverError = exports.ApolloServerValidationErrorCode = exports.ApolloServerErrorCode = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nvar ApolloServerErrorCode;\n(function (ApolloServerErrorCode) {\n    ApolloServerErrorCode[\"INTERNAL_SERVER_ERROR\"] = \"INTERNAL_SERVER_ERROR\";\n    ApolloServerErrorCode[\"GRAPHQL_PARSE_FAILED\"] = \"GRAPHQL_PARSE_FAILED\";\n    ApolloServerErrorCode[\"GRAPHQL_VALIDATION_FAILED\"] = \"GRAPHQL_VALIDATION_FAILED\";\n    ApolloServerErrorCode[\"PERSISTED_QUERY_NOT_FOUND\"] = \"PERSISTED_QUERY_NOT_FOUND\";\n    ApolloServerErrorCode[\"PERSISTED_QUERY_NOT_SUPPORTED\"] = \"PERSISTED_QUERY_NOT_SUPPORTED\";\n    ApolloServerErrorCode[\"BAD_USER_INPUT\"] = \"BAD_USER_INPUT\";\n    ApolloServerErrorCode[\"OPERATION_RESOLUTION_FAILURE\"] = \"OPERATION_RESOLUTION_FAILURE\";\n    ApolloServerErrorCode[\"BAD_REQUEST\"] = \"BAD_REQUEST\";\n})(ApolloServerErrorCode || (exports.ApolloServerErrorCode = ApolloServerErrorCode = {}));\nvar ApolloServerValidationErrorCode;\n(function (ApolloServerValidationErrorCode) {\n    ApolloServerValidationErrorCode[\"INTROSPECTION_DISABLED\"] = \"INTROSPECTION_DISABLED\";\n})(ApolloServerValidationErrorCode || (exports.ApolloServerValidationErrorCode = ApolloServerValidationErrorCode = {}));\nfunction unwrapResolverError(error) {\n    if (error instanceof graphql_1.GraphQLError && error.path && error.originalError) {\n        return error.originalError;\n    }\n    return error;\n}\nexports.unwrapResolverError = unwrapResolverError;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvZXJyb3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDJCQUEyQixHQUFHLHVDQUF1QyxHQUFHLDZCQUE2QjtBQUNyRyxrQkFBa0IsbUJBQU8sQ0FBQyx1REFBUztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUMsNEJBQTRCLDZCQUE2Qiw2QkFBNkI7QUFDdkY7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0MsdUNBQXVDLHVDQUF1QztBQUNySDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyQkFBMkI7QUFDM0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvZXJyb3JzL2luZGV4LmpzPzg3MTgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnVud3JhcFJlc29sdmVyRXJyb3IgPSBleHBvcnRzLkFwb2xsb1NlcnZlclZhbGlkYXRpb25FcnJvckNvZGUgPSBleHBvcnRzLkFwb2xsb1NlcnZlckVycm9yQ29kZSA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xudmFyIEFwb2xsb1NlcnZlckVycm9yQ29kZTtcbihmdW5jdGlvbiAoQXBvbGxvU2VydmVyRXJyb3JDb2RlKSB7XG4gICAgQXBvbGxvU2VydmVyRXJyb3JDb2RlW1wiSU5URVJOQUxfU0VSVkVSX0VSUk9SXCJdID0gXCJJTlRFUk5BTF9TRVJWRVJfRVJST1JcIjtcbiAgICBBcG9sbG9TZXJ2ZXJFcnJvckNvZGVbXCJHUkFQSFFMX1BBUlNFX0ZBSUxFRFwiXSA9IFwiR1JBUEhRTF9QQVJTRV9GQUlMRURcIjtcbiAgICBBcG9sbG9TZXJ2ZXJFcnJvckNvZGVbXCJHUkFQSFFMX1ZBTElEQVRJT05fRkFJTEVEXCJdID0gXCJHUkFQSFFMX1ZBTElEQVRJT05fRkFJTEVEXCI7XG4gICAgQXBvbGxvU2VydmVyRXJyb3JDb2RlW1wiUEVSU0lTVEVEX1FVRVJZX05PVF9GT1VORFwiXSA9IFwiUEVSU0lTVEVEX1FVRVJZX05PVF9GT1VORFwiO1xuICAgIEFwb2xsb1NlcnZlckVycm9yQ29kZVtcIlBFUlNJU1RFRF9RVUVSWV9OT1RfU1VQUE9SVEVEXCJdID0gXCJQRVJTSVNURURfUVVFUllfTk9UX1NVUFBPUlRFRFwiO1xuICAgIEFwb2xsb1NlcnZlckVycm9yQ29kZVtcIkJBRF9VU0VSX0lOUFVUXCJdID0gXCJCQURfVVNFUl9JTlBVVFwiO1xuICAgIEFwb2xsb1NlcnZlckVycm9yQ29kZVtcIk9QRVJBVElPTl9SRVNPTFVUSU9OX0ZBSUxVUkVcIl0gPSBcIk9QRVJBVElPTl9SRVNPTFVUSU9OX0ZBSUxVUkVcIjtcbiAgICBBcG9sbG9TZXJ2ZXJFcnJvckNvZGVbXCJCQURfUkVRVUVTVFwiXSA9IFwiQkFEX1JFUVVFU1RcIjtcbn0pKEFwb2xsb1NlcnZlckVycm9yQ29kZSB8fCAoZXhwb3J0cy5BcG9sbG9TZXJ2ZXJFcnJvckNvZGUgPSBBcG9sbG9TZXJ2ZXJFcnJvckNvZGUgPSB7fSkpO1xudmFyIEFwb2xsb1NlcnZlclZhbGlkYXRpb25FcnJvckNvZGU7XG4oZnVuY3Rpb24gKEFwb2xsb1NlcnZlclZhbGlkYXRpb25FcnJvckNvZGUpIHtcbiAgICBBcG9sbG9TZXJ2ZXJWYWxpZGF0aW9uRXJyb3JDb2RlW1wiSU5UUk9TUEVDVElPTl9ESVNBQkxFRFwiXSA9IFwiSU5UUk9TUEVDVElPTl9ESVNBQkxFRFwiO1xufSkoQXBvbGxvU2VydmVyVmFsaWRhdGlvbkVycm9yQ29kZSB8fCAoZXhwb3J0cy5BcG9sbG9TZXJ2ZXJWYWxpZGF0aW9uRXJyb3JDb2RlID0gQXBvbGxvU2VydmVyVmFsaWRhdGlvbkVycm9yQ29kZSA9IHt9KSk7XG5mdW5jdGlvbiB1bndyYXBSZXNvbHZlckVycm9yKGVycm9yKSB7XG4gICAgaWYgKGVycm9yIGluc3RhbmNlb2YgZ3JhcGhxbF8xLkdyYXBoUUxFcnJvciAmJiBlcnJvci5wYXRoICYmIGVycm9yLm9yaWdpbmFsRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLm9yaWdpbmFsRXJyb3I7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcjtcbn1cbmV4cG9ydHMudW53cmFwUmVzb2x2ZXJFcnJvciA9IHVud3JhcFJlc29sdmVyRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/errors/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/externalTypes/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/externalTypes/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvZXh0ZXJuYWxUeXBlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2Nqcy9leHRlcm5hbFR5cGVzL2luZGV4LmpzP2Q2YzkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/externalTypes/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/generated/packageVersion.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/generated/packageVersion.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.packageVersion = void 0;\nexports.packageVersion = \"4.11.0\";\n//# sourceMappingURL=packageVersion.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvZ2VuZXJhdGVkL3BhY2thZ2VWZXJzaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNCQUFzQjtBQUN0QixzQkFBc0I7QUFDdEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvZ2VuZXJhdGVkL3BhY2thZ2VWZXJzaW9uLmpzP2Y0ZDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnBhY2thZ2VWZXJzaW9uID0gdm9pZCAwO1xuZXhwb3J0cy5wYWNrYWdlVmVyc2lvbiA9IFwiNC4xMS4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWNrYWdlVmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/generated/packageVersion.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/httpBatching.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/httpBatching.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.runPotentiallyBatchedHttpQuery = void 0;\nconst runHttpQuery_js_1 = __webpack_require__(/*! ./runHttpQuery.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/runHttpQuery.js\");\nconst internalErrorClasses_js_1 = __webpack_require__(/*! ./internalErrorClasses.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/internalErrorClasses.js\");\nasync function runBatchedHttpQuery({ server, batchRequest, body, contextValue, schemaDerivedData, internals, }) {\n    if (body.length === 0) {\n        throw new internalErrorClasses_js_1.BadRequestError('No operations found in request.');\n    }\n    const sharedResponseHTTPGraphQLHead = (0, runHttpQuery_js_1.newHTTPGraphQLHead)();\n    const responseBodies = await Promise.all(body.map(async (bodyPiece) => {\n        const singleRequest = {\n            ...batchRequest,\n            body: bodyPiece,\n        };\n        const response = await (0, runHttpQuery_js_1.runHttpQuery)({\n            server,\n            httpRequest: singleRequest,\n            contextValue,\n            schemaDerivedData,\n            internals,\n            sharedResponseHTTPGraphQLHead,\n        });\n        if (response.body.kind === 'chunked') {\n            throw Error('Incremental delivery is not implemented for batch requests');\n        }\n        return response.body.string;\n    }));\n    return {\n        ...sharedResponseHTTPGraphQLHead,\n        body: { kind: 'complete', string: `[${responseBodies.join(',')}]` },\n    };\n}\nasync function runPotentiallyBatchedHttpQuery(server, httpGraphQLRequest, contextValue, schemaDerivedData, internals) {\n    if (!(httpGraphQLRequest.method === 'POST' &&\n        Array.isArray(httpGraphQLRequest.body))) {\n        return await (0, runHttpQuery_js_1.runHttpQuery)({\n            server,\n            httpRequest: httpGraphQLRequest,\n            contextValue,\n            schemaDerivedData,\n            internals,\n            sharedResponseHTTPGraphQLHead: null,\n        });\n    }\n    if (internals.allowBatchedHttpRequests) {\n        return await runBatchedHttpQuery({\n            server,\n            batchRequest: httpGraphQLRequest,\n            body: httpGraphQLRequest.body,\n            contextValue,\n            schemaDerivedData,\n            internals,\n        });\n    }\n    throw new internalErrorClasses_js_1.BadRequestError('Operation batching disabled.');\n}\nexports.runPotentiallyBatchedHttpQuery = runPotentiallyBatchedHttpQuery;\n//# sourceMappingURL=httpBatching.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvaHR0cEJhdGNoaW5nLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQztBQUN0QywwQkFBMEIsbUJBQU8sQ0FBQyx1RkFBbUI7QUFDckQsa0NBQWtDLG1CQUFPLENBQUMsdUdBQTJCO0FBQ3JFLHFDQUFxQyx5RUFBeUU7QUFDOUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGdCQUFnQiw4QkFBOEIseUJBQXlCLElBQUk7QUFDM0U7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0M7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvaHR0cEJhdGNoaW5nLmpzPzAwNzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLnJ1blBvdGVudGlhbGx5QmF0Y2hlZEh0dHBRdWVyeSA9IHZvaWQgMDtcbmNvbnN0IHJ1bkh0dHBRdWVyeV9qc18xID0gcmVxdWlyZShcIi4vcnVuSHR0cFF1ZXJ5LmpzXCIpO1xuY29uc3QgaW50ZXJuYWxFcnJvckNsYXNzZXNfanNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsRXJyb3JDbGFzc2VzLmpzXCIpO1xuYXN5bmMgZnVuY3Rpb24gcnVuQmF0Y2hlZEh0dHBRdWVyeSh7IHNlcnZlciwgYmF0Y2hSZXF1ZXN0LCBib2R5LCBjb250ZXh0VmFsdWUsIHNjaGVtYURlcml2ZWREYXRhLCBpbnRlcm5hbHMsIH0pIHtcbiAgICBpZiAoYm9keS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IGludGVybmFsRXJyb3JDbGFzc2VzX2pzXzEuQmFkUmVxdWVzdEVycm9yKCdObyBvcGVyYXRpb25zIGZvdW5kIGluIHJlcXVlc3QuJyk7XG4gICAgfVxuICAgIGNvbnN0IHNoYXJlZFJlc3BvbnNlSFRUUEdyYXBoUUxIZWFkID0gKDAsIHJ1bkh0dHBRdWVyeV9qc18xLm5ld0hUVFBHcmFwaFFMSGVhZCkoKTtcbiAgICBjb25zdCByZXNwb25zZUJvZGllcyA9IGF3YWl0IFByb21pc2UuYWxsKGJvZHkubWFwKGFzeW5jIChib2R5UGllY2UpID0+IHtcbiAgICAgICAgY29uc3Qgc2luZ2xlUmVxdWVzdCA9IHtcbiAgICAgICAgICAgIC4uLmJhdGNoUmVxdWVzdCxcbiAgICAgICAgICAgIGJvZHk6IGJvZHlQaWVjZSxcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCAoMCwgcnVuSHR0cFF1ZXJ5X2pzXzEucnVuSHR0cFF1ZXJ5KSh7XG4gICAgICAgICAgICBzZXJ2ZXIsXG4gICAgICAgICAgICBodHRwUmVxdWVzdDogc2luZ2xlUmVxdWVzdCxcbiAgICAgICAgICAgIGNvbnRleHRWYWx1ZSxcbiAgICAgICAgICAgIHNjaGVtYURlcml2ZWREYXRhLFxuICAgICAgICAgICAgaW50ZXJuYWxzLFxuICAgICAgICAgICAgc2hhcmVkUmVzcG9uc2VIVFRQR3JhcGhRTEhlYWQsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzcG9uc2UuYm9keS5raW5kID09PSAnY2h1bmtlZCcpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdJbmNyZW1lbnRhbCBkZWxpdmVyeSBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIGJhdGNoIHJlcXVlc3RzJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJvZHkuc3RyaW5nO1xuICAgIH0pKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5zaGFyZWRSZXNwb25zZUhUVFBHcmFwaFFMSGVhZCxcbiAgICAgICAgYm9keTogeyBraW5kOiAnY29tcGxldGUnLCBzdHJpbmc6IGBbJHtyZXNwb25zZUJvZGllcy5qb2luKCcsJyl9XWAgfSxcbiAgICB9O1xufVxuYXN5bmMgZnVuY3Rpb24gcnVuUG90ZW50aWFsbHlCYXRjaGVkSHR0cFF1ZXJ5KHNlcnZlciwgaHR0cEdyYXBoUUxSZXF1ZXN0LCBjb250ZXh0VmFsdWUsIHNjaGVtYURlcml2ZWREYXRhLCBpbnRlcm5hbHMpIHtcbiAgICBpZiAoIShodHRwR3JhcGhRTFJlcXVlc3QubWV0aG9kID09PSAnUE9TVCcgJiZcbiAgICAgICAgQXJyYXkuaXNBcnJheShodHRwR3JhcGhRTFJlcXVlc3QuYm9keSkpKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCAoMCwgcnVuSHR0cFF1ZXJ5X2pzXzEucnVuSHR0cFF1ZXJ5KSh7XG4gICAgICAgICAgICBzZXJ2ZXIsXG4gICAgICAgICAgICBodHRwUmVxdWVzdDogaHR0cEdyYXBoUUxSZXF1ZXN0LFxuICAgICAgICAgICAgY29udGV4dFZhbHVlLFxuICAgICAgICAgICAgc2NoZW1hRGVyaXZlZERhdGEsXG4gICAgICAgICAgICBpbnRlcm5hbHMsXG4gICAgICAgICAgICBzaGFyZWRSZXNwb25zZUhUVFBHcmFwaFFMSGVhZDogbnVsbCxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGlmIChpbnRlcm5hbHMuYWxsb3dCYXRjaGVkSHR0cFJlcXVlc3RzKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCBydW5CYXRjaGVkSHR0cFF1ZXJ5KHtcbiAgICAgICAgICAgIHNlcnZlcixcbiAgICAgICAgICAgIGJhdGNoUmVxdWVzdDogaHR0cEdyYXBoUUxSZXF1ZXN0LFxuICAgICAgICAgICAgYm9keTogaHR0cEdyYXBoUUxSZXF1ZXN0LmJvZHksXG4gICAgICAgICAgICBjb250ZXh0VmFsdWUsXG4gICAgICAgICAgICBzY2hlbWFEZXJpdmVkRGF0YSxcbiAgICAgICAgICAgIGludGVybmFscyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHRocm93IG5ldyBpbnRlcm5hbEVycm9yQ2xhc3Nlc19qc18xLkJhZFJlcXVlc3RFcnJvcignT3BlcmF0aW9uIGJhdGNoaW5nIGRpc2FibGVkLicpO1xufVxuZXhwb3J0cy5ydW5Qb3RlbnRpYWxseUJhdGNoZWRIdHRwUXVlcnkgPSBydW5Qb3RlbnRpYWxseUJhdGNoZWRIdHRwUXVlcnk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1odHRwQmF0Y2hpbmcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/httpBatching.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/incrementalDeliveryPolyfill.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/incrementalDeliveryPolyfill.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.executeIncrementally = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nlet graphqlExperimentalExecuteIncrementally = undefined;\nasync function tryToLoadGraphQL17() {\n    if (graphqlExperimentalExecuteIncrementally !== undefined) {\n        return;\n    }\n    const graphql = await Promise.resolve().then(() => __importStar(__webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\")));\n    if ('experimentalExecuteIncrementally' in graphql) {\n        graphqlExperimentalExecuteIncrementally = graphql\n            .experimentalExecuteIncrementally;\n    }\n    else {\n        graphqlExperimentalExecuteIncrementally = null;\n    }\n}\nasync function executeIncrementally(args) {\n    await tryToLoadGraphQL17();\n    if (graphqlExperimentalExecuteIncrementally) {\n        return graphqlExperimentalExecuteIncrementally(args);\n    }\n    return (0, graphql_1.execute)(args);\n}\nexports.executeIncrementally = executeIncrementally;\n//# sourceMappingURL=incrementalDeliveryPolyfill.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvaW5jcmVtZW50YWxEZWxpdmVyeVBvbHlmaWxsLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9DQUFvQztBQUNuRDtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQSwwQ0FBMEMsNEJBQTRCO0FBQ3RFLENBQUM7QUFDRDtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0QkFBNEI7QUFDNUIsa0JBQWtCLG1CQUFPLENBQUMsdURBQVM7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxtQkFBTyxDQUFDLHVEQUFTO0FBQ3JGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2Nqcy9pbmNyZW1lbnRhbERlbGl2ZXJ5UG9seWZpbGwuanM/NTgzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19zZXRNb2R1bGVEZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX3NldE1vZHVsZURlZmF1bHQpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgXCJkZWZhdWx0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHYgfSk7XG59KSA6IGZ1bmN0aW9uKG8sIHYpIHtcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XG59KTtcbnZhciBfX2ltcG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0U3RhcikgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIGlmIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpIHJldHVybiBtb2Q7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcbiAgICBfX3NldE1vZHVsZURlZmF1bHQocmVzdWx0LCBtb2QpO1xuICAgIHJldHVybiByZXN1bHQ7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5leGVjdXRlSW5jcmVtZW50YWxseSA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xubGV0IGdyYXBocWxFeHBlcmltZW50YWxFeGVjdXRlSW5jcmVtZW50YWxseSA9IHVuZGVmaW5lZDtcbmFzeW5jIGZ1bmN0aW9uIHRyeVRvTG9hZEdyYXBoUUwxNygpIHtcbiAgICBpZiAoZ3JhcGhxbEV4cGVyaW1lbnRhbEV4ZWN1dGVJbmNyZW1lbnRhbGx5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBjb25zdCBncmFwaHFsID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKCkudGhlbigoKSA9PiBfX2ltcG9ydFN0YXIocmVxdWlyZSgnZ3JhcGhxbCcpKSk7XG4gICAgaWYgKCdleHBlcmltZW50YWxFeGVjdXRlSW5jcmVtZW50YWxseScgaW4gZ3JhcGhxbCkge1xuICAgICAgICBncmFwaHFsRXhwZXJpbWVudGFsRXhlY3V0ZUluY3JlbWVudGFsbHkgPSBncmFwaHFsXG4gICAgICAgICAgICAuZXhwZXJpbWVudGFsRXhlY3V0ZUluY3JlbWVudGFsbHk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBncmFwaHFsRXhwZXJpbWVudGFsRXhlY3V0ZUluY3JlbWVudGFsbHkgPSBudWxsO1xuICAgIH1cbn1cbmFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVJbmNyZW1lbnRhbGx5KGFyZ3MpIHtcbiAgICBhd2FpdCB0cnlUb0xvYWRHcmFwaFFMMTcoKTtcbiAgICBpZiAoZ3JhcGhxbEV4cGVyaW1lbnRhbEV4ZWN1dGVJbmNyZW1lbnRhbGx5KSB7XG4gICAgICAgIHJldHVybiBncmFwaHFsRXhwZXJpbWVudGFsRXhlY3V0ZUluY3JlbWVudGFsbHkoYXJncyk7XG4gICAgfVxuICAgIHJldHVybiAoMCwgZ3JhcGhxbF8xLmV4ZWN1dGUpKGFyZ3MpO1xufVxuZXhwb3J0cy5leGVjdXRlSW5jcmVtZW50YWxseSA9IGV4ZWN1dGVJbmNyZW1lbnRhbGx5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5jcmVtZW50YWxEZWxpdmVyeVBvbHlmaWxsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/incrementalDeliveryPolyfill.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/index.js ***!
  \*******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HeaderMap = exports.ApolloServer = void 0;\nvar ApolloServer_js_1 = __webpack_require__(/*! ./ApolloServer.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/ApolloServer.js\");\nObject.defineProperty(exports, \"ApolloServer\", ({ enumerable: true, get: function () { return ApolloServer_js_1.ApolloServer; } }));\nvar HeaderMap_js_1 = __webpack_require__(/*! ./utils/HeaderMap.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/HeaderMap.js\");\nObject.defineProperty(exports, \"HeaderMap\", ({ enumerable: true, get: function () { return HeaderMap_js_1.HeaderMap; } }));\n__exportStar(__webpack_require__(/*! ./externalTypes/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/externalTypes/index.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsb0NBQW9DO0FBQ25EO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQSw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCLEdBQUcsb0JBQW9CO0FBQ3hDLHdCQUF3QixtQkFBTyxDQUFDLHVGQUFtQjtBQUNuRCxnREFBK0MsRUFBRSxxQ0FBcUMsMENBQTBDLEVBQUM7QUFDakkscUJBQXFCLG1CQUFPLENBQUMsNkZBQXNCO0FBQ25ELDZDQUE0QyxFQUFFLHFDQUFxQyxvQ0FBb0MsRUFBQztBQUN4SCxhQUFhLG1CQUFPLENBQUMscUdBQTBCO0FBQy9DIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvY2pzL2luZGV4LmpzP2I1YmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fZXhwb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19leHBvcnRTdGFyKSB8fCBmdW5jdGlvbihtLCBleHBvcnRzKSB7XG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChleHBvcnRzLCBwKSkgX19jcmVhdGVCaW5kaW5nKGV4cG9ydHMsIG0sIHApO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuSGVhZGVyTWFwID0gZXhwb3J0cy5BcG9sbG9TZXJ2ZXIgPSB2b2lkIDA7XG52YXIgQXBvbGxvU2VydmVyX2pzXzEgPSByZXF1aXJlKFwiLi9BcG9sbG9TZXJ2ZXIuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJBcG9sbG9TZXJ2ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEFwb2xsb1NlcnZlcl9qc18xLkFwb2xsb1NlcnZlcjsgfSB9KTtcbnZhciBIZWFkZXJNYXBfanNfMSA9IHJlcXVpcmUoXCIuL3V0aWxzL0hlYWRlck1hcC5qc1wiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIkhlYWRlck1hcFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gSGVhZGVyTWFwX2pzXzEuSGVhZGVyTWFwOyB9IH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2V4dGVybmFsVHlwZXMvaW5kZXguanNcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/internalErrorClasses.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/internalErrorClasses.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.BadRequestError = exports.OperationResolutionError = exports.UserInputError = exports.PersistedQueryNotSupportedError = exports.PersistedQueryNotFoundError = exports.ValidationError = exports.SyntaxError = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst index_js_1 = __webpack_require__(/*! ./errors/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/errors/index.js\");\nconst runHttpQuery_js_1 = __webpack_require__(/*! ./runHttpQuery.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/runHttpQuery.js\");\nconst HeaderMap_js_1 = __webpack_require__(/*! ./utils/HeaderMap.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/HeaderMap.js\");\nclass GraphQLErrorWithCode extends graphql_1.GraphQLError {\n    constructor(message, code, options) {\n        super(message, {\n            ...options,\n            extensions: { ...options?.extensions, code },\n        });\n        this.name = this.constructor.name;\n    }\n}\nclass SyntaxError extends GraphQLErrorWithCode {\n    constructor(graphqlError) {\n        super(graphqlError.message, index_js_1.ApolloServerErrorCode.GRAPHQL_PARSE_FAILED, {\n            source: graphqlError.source,\n            positions: graphqlError.positions,\n            extensions: { http: (0, runHttpQuery_js_1.newHTTPGraphQLHead)(400), ...graphqlError.extensions },\n            originalError: graphqlError,\n        });\n    }\n}\nexports.SyntaxError = SyntaxError;\nclass ValidationError extends GraphQLErrorWithCode {\n    constructor(graphqlError) {\n        super(graphqlError.message, index_js_1.ApolloServerErrorCode.GRAPHQL_VALIDATION_FAILED, {\n            nodes: graphqlError.nodes,\n            extensions: {\n                http: (0, runHttpQuery_js_1.newHTTPGraphQLHead)(400),\n                ...graphqlError.extensions,\n            },\n            originalError: graphqlError.originalError ?? graphqlError,\n        });\n    }\n}\nexports.ValidationError = ValidationError;\nconst getPersistedQueryErrorHttp = () => ({\n    status: 200,\n    headers: new HeaderMap_js_1.HeaderMap([\n        ['cache-control', 'private, no-cache, must-revalidate'],\n    ]),\n});\nclass PersistedQueryNotFoundError extends GraphQLErrorWithCode {\n    constructor() {\n        super('PersistedQueryNotFound', index_js_1.ApolloServerErrorCode.PERSISTED_QUERY_NOT_FOUND, { extensions: { http: getPersistedQueryErrorHttp() } });\n    }\n}\nexports.PersistedQueryNotFoundError = PersistedQueryNotFoundError;\nclass PersistedQueryNotSupportedError extends GraphQLErrorWithCode {\n    constructor() {\n        super('PersistedQueryNotSupported', index_js_1.ApolloServerErrorCode.PERSISTED_QUERY_NOT_SUPPORTED, { extensions: { http: getPersistedQueryErrorHttp() } });\n    }\n}\nexports.PersistedQueryNotSupportedError = PersistedQueryNotSupportedError;\nclass UserInputError extends GraphQLErrorWithCode {\n    constructor(graphqlError) {\n        super(graphqlError.message, index_js_1.ApolloServerErrorCode.BAD_USER_INPUT, {\n            nodes: graphqlError.nodes,\n            originalError: graphqlError.originalError ?? graphqlError,\n            extensions: graphqlError.extensions,\n        });\n    }\n}\nexports.UserInputError = UserInputError;\nclass OperationResolutionError extends GraphQLErrorWithCode {\n    constructor(graphqlError) {\n        super(graphqlError.message, index_js_1.ApolloServerErrorCode.OPERATION_RESOLUTION_FAILURE, {\n            nodes: graphqlError.nodes,\n            originalError: graphqlError.originalError ?? graphqlError,\n            extensions: {\n                http: (0, runHttpQuery_js_1.newHTTPGraphQLHead)(400),\n                ...graphqlError.extensions,\n            },\n        });\n    }\n}\nexports.OperationResolutionError = OperationResolutionError;\nclass BadRequestError extends GraphQLErrorWithCode {\n    constructor(message, options) {\n        super(message, index_js_1.ApolloServerErrorCode.BAD_REQUEST, {\n            ...options,\n            extensions: { http: (0, runHttpQuery_js_1.newHTTPGraphQLHead)(400), ...options?.extensions },\n        });\n    }\n}\nexports.BadRequestError = BadRequestError;\n//# sourceMappingURL=internalErrorClasses.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvaW50ZXJuYWxFcnJvckNsYXNzZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsZ0NBQWdDLEdBQUcsc0JBQXNCLEdBQUcsdUNBQXVDLEdBQUcsbUNBQW1DLEdBQUcsdUJBQXVCLEdBQUcsbUJBQW1CO0FBQ25OLGtCQUFrQixtQkFBTyxDQUFDLHVEQUFTO0FBQ25DLG1CQUFtQixtQkFBTyxDQUFDLHVGQUFtQjtBQUM5QywwQkFBMEIsbUJBQU8sQ0FBQyx1RkFBbUI7QUFDckQsdUJBQXVCLG1CQUFPLENBQUMsNkZBQXNCO0FBQ3JEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDhCQUE4QjtBQUN4RCxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixrRkFBa0Y7QUFDNUc7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLG1CQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBLHNHQUFzRyxjQUFjLHNDQUFzQztBQUMxSjtBQUNBO0FBQ0EsbUNBQW1DO0FBQ25DO0FBQ0E7QUFDQSw4R0FBOEcsY0FBYyxzQ0FBc0M7QUFDbEs7QUFDQTtBQUNBLHVDQUF1QztBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0EsZ0NBQWdDO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDhFQUE4RTtBQUN4RyxTQUFTO0FBQ1Q7QUFDQTtBQUNBLHVCQUF1QjtBQUN2QiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2Nqcy9pbnRlcm5hbEVycm9yQ2xhc3Nlcy5qcz9hZjIxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5CYWRSZXF1ZXN0RXJyb3IgPSBleHBvcnRzLk9wZXJhdGlvblJlc29sdXRpb25FcnJvciA9IGV4cG9ydHMuVXNlcklucHV0RXJyb3IgPSBleHBvcnRzLlBlcnNpc3RlZFF1ZXJ5Tm90U3VwcG9ydGVkRXJyb3IgPSBleHBvcnRzLlBlcnNpc3RlZFF1ZXJ5Tm90Rm91bmRFcnJvciA9IGV4cG9ydHMuVmFsaWRhdGlvbkVycm9yID0gZXhwb3J0cy5TeW50YXhFcnJvciA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3QgaW5kZXhfanNfMSA9IHJlcXVpcmUoXCIuL2Vycm9ycy9pbmRleC5qc1wiKTtcbmNvbnN0IHJ1bkh0dHBRdWVyeV9qc18xID0gcmVxdWlyZShcIi4vcnVuSHR0cFF1ZXJ5LmpzXCIpO1xuY29uc3QgSGVhZGVyTWFwX2pzXzEgPSByZXF1aXJlKFwiLi91dGlscy9IZWFkZXJNYXAuanNcIik7XG5jbGFzcyBHcmFwaFFMRXJyb3JXaXRoQ29kZSBleHRlbmRzIGdyYXBocWxfMS5HcmFwaFFMRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIGNvZGUsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGV4dGVuc2lvbnM6IHsgLi4ub3B0aW9ucz8uZXh0ZW5zaW9ucywgY29kZSB9LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5uYW1lID0gdGhpcy5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgIH1cbn1cbmNsYXNzIFN5bnRheEVycm9yIGV4dGVuZHMgR3JhcGhRTEVycm9yV2l0aENvZGUge1xuICAgIGNvbnN0cnVjdG9yKGdyYXBocWxFcnJvcikge1xuICAgICAgICBzdXBlcihncmFwaHFsRXJyb3IubWVzc2FnZSwgaW5kZXhfanNfMS5BcG9sbG9TZXJ2ZXJFcnJvckNvZGUuR1JBUEhRTF9QQVJTRV9GQUlMRUQsIHtcbiAgICAgICAgICAgIHNvdXJjZTogZ3JhcGhxbEVycm9yLnNvdXJjZSxcbiAgICAgICAgICAgIHBvc2l0aW9uczogZ3JhcGhxbEVycm9yLnBvc2l0aW9ucyxcbiAgICAgICAgICAgIGV4dGVuc2lvbnM6IHsgaHR0cDogKDAsIHJ1bkh0dHBRdWVyeV9qc18xLm5ld0hUVFBHcmFwaFFMSGVhZCkoNDAwKSwgLi4uZ3JhcGhxbEVycm9yLmV4dGVuc2lvbnMgfSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGdyYXBocWxFcnJvcixcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5TeW50YXhFcnJvciA9IFN5bnRheEVycm9yO1xuY2xhc3MgVmFsaWRhdGlvbkVycm9yIGV4dGVuZHMgR3JhcGhRTEVycm9yV2l0aENvZGUge1xuICAgIGNvbnN0cnVjdG9yKGdyYXBocWxFcnJvcikge1xuICAgICAgICBzdXBlcihncmFwaHFsRXJyb3IubWVzc2FnZSwgaW5kZXhfanNfMS5BcG9sbG9TZXJ2ZXJFcnJvckNvZGUuR1JBUEhRTF9WQUxJREFUSU9OX0ZBSUxFRCwge1xuICAgICAgICAgICAgbm9kZXM6IGdyYXBocWxFcnJvci5ub2RlcyxcbiAgICAgICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICBodHRwOiAoMCwgcnVuSHR0cFF1ZXJ5X2pzXzEubmV3SFRUUEdyYXBoUUxIZWFkKSg0MDApLFxuICAgICAgICAgICAgICAgIC4uLmdyYXBocWxFcnJvci5leHRlbnNpb25zLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGdyYXBocWxFcnJvci5vcmlnaW5hbEVycm9yID8/IGdyYXBocWxFcnJvcixcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5WYWxpZGF0aW9uRXJyb3IgPSBWYWxpZGF0aW9uRXJyb3I7XG5jb25zdCBnZXRQZXJzaXN0ZWRRdWVyeUVycm9ySHR0cCA9ICgpID0+ICh7XG4gICAgc3RhdHVzOiAyMDAsXG4gICAgaGVhZGVyczogbmV3IEhlYWRlck1hcF9qc18xLkhlYWRlck1hcChbXG4gICAgICAgIFsnY2FjaGUtY29udHJvbCcsICdwcml2YXRlLCBuby1jYWNoZSwgbXVzdC1yZXZhbGlkYXRlJ10sXG4gICAgXSksXG59KTtcbmNsYXNzIFBlcnNpc3RlZFF1ZXJ5Tm90Rm91bmRFcnJvciBleHRlbmRzIEdyYXBoUUxFcnJvcldpdGhDb2RlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ1BlcnNpc3RlZFF1ZXJ5Tm90Rm91bmQnLCBpbmRleF9qc18xLkFwb2xsb1NlcnZlckVycm9yQ29kZS5QRVJTSVNURURfUVVFUllfTk9UX0ZPVU5ELCB7IGV4dGVuc2lvbnM6IHsgaHR0cDogZ2V0UGVyc2lzdGVkUXVlcnlFcnJvckh0dHAoKSB9IH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuUGVyc2lzdGVkUXVlcnlOb3RGb3VuZEVycm9yID0gUGVyc2lzdGVkUXVlcnlOb3RGb3VuZEVycm9yO1xuY2xhc3MgUGVyc2lzdGVkUXVlcnlOb3RTdXBwb3J0ZWRFcnJvciBleHRlbmRzIEdyYXBoUUxFcnJvcldpdGhDb2RlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ1BlcnNpc3RlZFF1ZXJ5Tm90U3VwcG9ydGVkJywgaW5kZXhfanNfMS5BcG9sbG9TZXJ2ZXJFcnJvckNvZGUuUEVSU0lTVEVEX1FVRVJZX05PVF9TVVBQT1JURUQsIHsgZXh0ZW5zaW9uczogeyBodHRwOiBnZXRQZXJzaXN0ZWRRdWVyeUVycm9ySHR0cCgpIH0gfSk7XG4gICAgfVxufVxuZXhwb3J0cy5QZXJzaXN0ZWRRdWVyeU5vdFN1cHBvcnRlZEVycm9yID0gUGVyc2lzdGVkUXVlcnlOb3RTdXBwb3J0ZWRFcnJvcjtcbmNsYXNzIFVzZXJJbnB1dEVycm9yIGV4dGVuZHMgR3JhcGhRTEVycm9yV2l0aENvZGUge1xuICAgIGNvbnN0cnVjdG9yKGdyYXBocWxFcnJvcikge1xuICAgICAgICBzdXBlcihncmFwaHFsRXJyb3IubWVzc2FnZSwgaW5kZXhfanNfMS5BcG9sbG9TZXJ2ZXJFcnJvckNvZGUuQkFEX1VTRVJfSU5QVVQsIHtcbiAgICAgICAgICAgIG5vZGVzOiBncmFwaHFsRXJyb3Iubm9kZXMsXG4gICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBncmFwaHFsRXJyb3Iub3JpZ2luYWxFcnJvciA/PyBncmFwaHFsRXJyb3IsXG4gICAgICAgICAgICBleHRlbnNpb25zOiBncmFwaHFsRXJyb3IuZXh0ZW5zaW9ucyxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5Vc2VySW5wdXRFcnJvciA9IFVzZXJJbnB1dEVycm9yO1xuY2xhc3MgT3BlcmF0aW9uUmVzb2x1dGlvbkVycm9yIGV4dGVuZHMgR3JhcGhRTEVycm9yV2l0aENvZGUge1xuICAgIGNvbnN0cnVjdG9yKGdyYXBocWxFcnJvcikge1xuICAgICAgICBzdXBlcihncmFwaHFsRXJyb3IubWVzc2FnZSwgaW5kZXhfanNfMS5BcG9sbG9TZXJ2ZXJFcnJvckNvZGUuT1BFUkFUSU9OX1JFU09MVVRJT05fRkFJTFVSRSwge1xuICAgICAgICAgICAgbm9kZXM6IGdyYXBocWxFcnJvci5ub2RlcyxcbiAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGdyYXBocWxFcnJvci5vcmlnaW5hbEVycm9yID8/IGdyYXBocWxFcnJvcixcbiAgICAgICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICBodHRwOiAoMCwgcnVuSHR0cFF1ZXJ5X2pzXzEubmV3SFRUUEdyYXBoUUxIZWFkKSg0MDApLFxuICAgICAgICAgICAgICAgIC4uLmdyYXBocWxFcnJvci5leHRlbnNpb25zLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5PcGVyYXRpb25SZXNvbHV0aW9uRXJyb3IgPSBPcGVyYXRpb25SZXNvbHV0aW9uRXJyb3I7XG5jbGFzcyBCYWRSZXF1ZXN0RXJyb3IgZXh0ZW5kcyBHcmFwaFFMRXJyb3JXaXRoQ29kZSB7XG4gICAgY29uc3RydWN0b3IobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihtZXNzYWdlLCBpbmRleF9qc18xLkFwb2xsb1NlcnZlckVycm9yQ29kZS5CQURfUkVRVUVTVCwge1xuICAgICAgICAgICAgLi4ub3B0aW9ucyxcbiAgICAgICAgICAgIGV4dGVuc2lvbnM6IHsgaHR0cDogKDAsIHJ1bkh0dHBRdWVyeV9qc18xLm5ld0hUVFBHcmFwaFFMSGVhZCkoNDAwKSwgLi4ub3B0aW9ucz8uZXh0ZW5zaW9ucyB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLkJhZFJlcXVlc3RFcnJvciA9IEJhZFJlcXVlc3RFcnJvcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVybmFsRXJyb3JDbGFzc2VzLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/internalErrorClasses.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/internalPlugin.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/internalPlugin.js ***!
  \****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.pluginIsInternal = exports.internalPlugin = void 0;\nfunction internalPlugin(p) {\n    return p;\n}\nexports.internalPlugin = internalPlugin;\nfunction pluginIsInternal(plugin) {\n    return '__internal_plugin_id__' in plugin;\n}\nexports.pluginIsInternal = pluginIsInternal;\n//# sourceMappingURL=internalPlugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvaW50ZXJuYWxQbHVnaW4uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCLEdBQUcsc0JBQXNCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvaW50ZXJuYWxQbHVnaW4uanM/NjJlYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucGx1Z2luSXNJbnRlcm5hbCA9IGV4cG9ydHMuaW50ZXJuYWxQbHVnaW4gPSB2b2lkIDA7XG5mdW5jdGlvbiBpbnRlcm5hbFBsdWdpbihwKSB7XG4gICAgcmV0dXJuIHA7XG59XG5leHBvcnRzLmludGVybmFsUGx1Z2luID0gaW50ZXJuYWxQbHVnaW47XG5mdW5jdGlvbiBwbHVnaW5Jc0ludGVybmFsKHBsdWdpbikge1xuICAgIHJldHVybiAnX19pbnRlcm5hbF9wbHVnaW5faWRfXycgaW4gcGx1Z2luO1xufVxuZXhwb3J0cy5wbHVnaW5Jc0ludGVybmFsID0gcGx1Z2luSXNJbnRlcm5hbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVybmFsUGx1Z2luLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/internalPlugin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/cacheControl/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/cacheControl/index.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApolloServerPluginCacheControl = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst cachePolicy_js_1 = __webpack_require__(/*! ../../cachePolicy.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/cachePolicy.js\");\nconst internalPlugin_js_1 = __webpack_require__(/*! ../../internalPlugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/internalPlugin.js\");\nconst lru_cache_1 = __importDefault(__webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/@apollo/server/node_modules/lru-cache/index.js\"));\nfunction ApolloServerPluginCacheControl(options = Object.create(null)) {\n    let typeAnnotationCache;\n    let fieldAnnotationCache;\n    return (0, internalPlugin_js_1.internalPlugin)({\n        __internal_plugin_id__: 'CacheControl',\n        __is_disabled_plugin__: false,\n        async serverWillStart({ schema }) {\n            typeAnnotationCache = new lru_cache_1.default({\n                max: Object.values(schema.getTypeMap()).filter(graphql_1.isCompositeType)\n                    .length,\n            });\n            fieldAnnotationCache = new lru_cache_1.default({\n                max: Object.values(schema.getTypeMap())\n                    .filter(graphql_1.isObjectType)\n                    .flatMap((t) => Object.values(t.getFields())).length +\n                    Object.values(schema.getTypeMap())\n                        .filter(graphql_1.isInterfaceType)\n                        .flatMap((t) => Object.values(t.getFields())).length,\n            });\n            return undefined;\n        },\n        async requestDidStart(requestContext) {\n            function memoizedCacheAnnotationFromType(t) {\n                const existing = typeAnnotationCache.get(t);\n                if (existing) {\n                    return existing;\n                }\n                const annotation = cacheAnnotationFromType(t);\n                typeAnnotationCache.set(t, annotation);\n                return annotation;\n            }\n            function memoizedCacheAnnotationFromField(field) {\n                const existing = fieldAnnotationCache.get(field);\n                if (existing) {\n                    return existing;\n                }\n                const annotation = cacheAnnotationFromField(field);\n                fieldAnnotationCache.set(field, annotation);\n                return annotation;\n            }\n            const defaultMaxAge = options.defaultMaxAge ?? 0;\n            const calculateHttpHeaders = options.calculateHttpHeaders ?? true;\n            const { __testing__cacheHints } = options;\n            return {\n                async executionDidStart() {\n                    if (isRestricted(requestContext.overallCachePolicy)) {\n                        const fakeFieldPolicy = (0, cachePolicy_js_1.newCachePolicy)();\n                        return {\n                            willResolveField({ info }) {\n                                info.cacheControl = {\n                                    setCacheHint: (dynamicHint) => {\n                                        fakeFieldPolicy.replace(dynamicHint);\n                                    },\n                                    cacheHint: fakeFieldPolicy,\n                                    cacheHintFromType: memoizedCacheAnnotationFromType,\n                                };\n                            },\n                        };\n                    }\n                    return {\n                        willResolveField({ info }) {\n                            const fieldPolicy = (0, cachePolicy_js_1.newCachePolicy)();\n                            let inheritMaxAge = false;\n                            const targetType = (0, graphql_1.getNamedType)(info.returnType);\n                            if ((0, graphql_1.isCompositeType)(targetType)) {\n                                const typeAnnotation = memoizedCacheAnnotationFromType(targetType);\n                                fieldPolicy.replace(typeAnnotation);\n                                inheritMaxAge = !!typeAnnotation.inheritMaxAge;\n                            }\n                            const fieldAnnotation = memoizedCacheAnnotationFromField(info.parentType.getFields()[info.fieldName]);\n                            if (fieldAnnotation.inheritMaxAge &&\n                                fieldPolicy.maxAge === undefined) {\n                                inheritMaxAge = true;\n                                if (fieldAnnotation.scope) {\n                                    fieldPolicy.replace({ scope: fieldAnnotation.scope });\n                                }\n                            }\n                            else {\n                                fieldPolicy.replace(fieldAnnotation);\n                            }\n                            info.cacheControl = {\n                                setCacheHint: (dynamicHint) => {\n                                    fieldPolicy.replace(dynamicHint);\n                                },\n                                cacheHint: fieldPolicy,\n                                cacheHintFromType: memoizedCacheAnnotationFromType,\n                            };\n                            return () => {\n                                if (fieldPolicy.maxAge === undefined &&\n                                    (((0, graphql_1.isCompositeType)(targetType) && !inheritMaxAge) ||\n                                        !info.path.prev)) {\n                                    fieldPolicy.restrict({ maxAge: defaultMaxAge });\n                                }\n                                if (__testing__cacheHints && isRestricted(fieldPolicy)) {\n                                    const path = (0, graphql_1.responsePathAsArray)(info.path).join('.');\n                                    if (__testing__cacheHints.has(path)) {\n                                        throw Error(\"shouldn't happen: addHint should only be called once per path\");\n                                    }\n                                    __testing__cacheHints.set(path, {\n                                        maxAge: fieldPolicy.maxAge,\n                                        scope: fieldPolicy.scope,\n                                    });\n                                }\n                                requestContext.overallCachePolicy.restrict(fieldPolicy);\n                            };\n                        },\n                    };\n                },\n                async willSendResponse(requestContext) {\n                    if (!calculateHttpHeaders) {\n                        return;\n                    }\n                    const { response, overallCachePolicy } = requestContext;\n                    const existingCacheControlHeader = parseExistingCacheControlHeader(response.http.headers.get('cache-control'));\n                    if (existingCacheControlHeader.kind === 'unparsable') {\n                        return;\n                    }\n                    const cachePolicy = (0, cachePolicy_js_1.newCachePolicy)();\n                    cachePolicy.replace(overallCachePolicy);\n                    if (existingCacheControlHeader.kind === 'parsable-and-cacheable') {\n                        cachePolicy.restrict(existingCacheControlHeader.hint);\n                    }\n                    const policyIfCacheable = cachePolicy.policyIfCacheable();\n                    if (policyIfCacheable &&\n                        existingCacheControlHeader.kind !== 'uncacheable' &&\n                        response.body.kind === 'single' &&\n                        !response.body.singleResult.errors) {\n                        response.http.headers.set('cache-control', `max-age=${policyIfCacheable.maxAge}, ${policyIfCacheable.scope.toLowerCase()}`);\n                    }\n                    else if (calculateHttpHeaders !== 'if-cacheable') {\n                        response.http.headers.set('cache-control', CACHE_CONTROL_HEADER_UNCACHEABLE);\n                    }\n                },\n            };\n        },\n    });\n}\nexports.ApolloServerPluginCacheControl = ApolloServerPluginCacheControl;\nconst CACHE_CONTROL_HEADER_CACHEABLE_REGEXP = /^max-age=(\\d+), (public|private)$/;\nconst CACHE_CONTROL_HEADER_UNCACHEABLE = 'no-store';\nfunction parseExistingCacheControlHeader(header) {\n    if (!header) {\n        return { kind: 'no-header' };\n    }\n    if (header === CACHE_CONTROL_HEADER_UNCACHEABLE) {\n        return { kind: 'uncacheable' };\n    }\n    const match = CACHE_CONTROL_HEADER_CACHEABLE_REGEXP.exec(header);\n    if (!match) {\n        return { kind: 'unparsable' };\n    }\n    return {\n        kind: 'parsable-and-cacheable',\n        hint: {\n            maxAge: +match[1],\n            scope: match[2] === 'public' ? 'PUBLIC' : 'PRIVATE',\n        },\n    };\n}\nfunction cacheAnnotationFromDirectives(directives) {\n    if (!directives)\n        return undefined;\n    const cacheControlDirective = directives.find((directive) => directive.name.value === 'cacheControl');\n    if (!cacheControlDirective)\n        return undefined;\n    if (!cacheControlDirective.arguments)\n        return undefined;\n    const maxAgeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === 'maxAge');\n    const scopeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === 'scope');\n    const inheritMaxAgeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === 'inheritMaxAge');\n    const scopeString = scopeArgument?.value?.kind === 'EnumValue'\n        ? scopeArgument.value.value\n        : undefined;\n    const scope = scopeString === 'PUBLIC' || scopeString === 'PRIVATE'\n        ? scopeString\n        : undefined;\n    if (inheritMaxAgeArgument?.value?.kind === 'BooleanValue' &&\n        inheritMaxAgeArgument.value.value) {\n        return { inheritMaxAge: true, scope };\n    }\n    return {\n        maxAge: maxAgeArgument?.value?.kind === 'IntValue'\n            ? parseInt(maxAgeArgument.value.value)\n            : undefined,\n        scope,\n    };\n}\nfunction cacheAnnotationFromType(t) {\n    if (t.astNode) {\n        const hint = cacheAnnotationFromDirectives(t.astNode.directives);\n        if (hint) {\n            return hint;\n        }\n    }\n    if (t.extensionASTNodes) {\n        for (const node of t.extensionASTNodes) {\n            const hint = cacheAnnotationFromDirectives(node.directives);\n            if (hint) {\n                return hint;\n            }\n        }\n    }\n    return {};\n}\nfunction cacheAnnotationFromField(field) {\n    if (field.astNode) {\n        const hint = cacheAnnotationFromDirectives(field.astNode.directives);\n        if (hint) {\n            return hint;\n        }\n    }\n    return {};\n}\nfunction isRestricted(hint) {\n    return hint.maxAge !== undefined || hint.scope !== undefined;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL2NhY2hlQ29udHJvbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiO0FBQ0EsNkNBQTZDO0FBQzdDO0FBQ0EsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHNDQUFzQztBQUN0QyxrQkFBa0IsbUJBQU8sQ0FBQyx1REFBUztBQUNuQyx5QkFBeUIsbUJBQU8sQ0FBQyx5RkFBc0I7QUFDdkQsNEJBQTRCLG1CQUFPLENBQUMsK0ZBQXlCO0FBQzdELG9DQUFvQyxtQkFBTyxDQUFDLHNGQUFXO0FBQ3ZEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxRQUFRO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0Isd0JBQXdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQ0FBK0MsTUFBTTtBQUNyRDtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxNQUFNO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELDhCQUE4QjtBQUN4RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkRBQTJELHVCQUF1QjtBQUNsRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLCtCQUErQjtBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOEVBQThFLHlCQUF5QixJQUFJLHNDQUFzQztBQUNqSjtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvY2pzL3BsdWdpbi9jYWNoZUNvbnRyb2wvaW5kZXguanM/NTZjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXBvbGxvU2VydmVyUGx1Z2luQ2FjaGVDb250cm9sID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5jb25zdCBjYWNoZVBvbGljeV9qc18xID0gcmVxdWlyZShcIi4uLy4uL2NhY2hlUG9saWN5LmpzXCIpO1xuY29uc3QgaW50ZXJuYWxQbHVnaW5fanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9pbnRlcm5hbFBsdWdpbi5qc1wiKTtcbmNvbnN0IGxydV9jYWNoZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJscnUtY2FjaGVcIikpO1xuZnVuY3Rpb24gQXBvbGxvU2VydmVyUGx1Z2luQ2FjaGVDb250cm9sKG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpKSB7XG4gICAgbGV0IHR5cGVBbm5vdGF0aW9uQ2FjaGU7XG4gICAgbGV0IGZpZWxkQW5ub3RhdGlvbkNhY2hlO1xuICAgIHJldHVybiAoMCwgaW50ZXJuYWxQbHVnaW5fanNfMS5pbnRlcm5hbFBsdWdpbikoe1xuICAgICAgICBfX2ludGVybmFsX3BsdWdpbl9pZF9fOiAnQ2FjaGVDb250cm9sJyxcbiAgICAgICAgX19pc19kaXNhYmxlZF9wbHVnaW5fXzogZmFsc2UsXG4gICAgICAgIGFzeW5jIHNlcnZlcldpbGxTdGFydCh7IHNjaGVtYSB9KSB7XG4gICAgICAgICAgICB0eXBlQW5ub3RhdGlvbkNhY2hlID0gbmV3IGxydV9jYWNoZV8xLmRlZmF1bHQoe1xuICAgICAgICAgICAgICAgIG1heDogT2JqZWN0LnZhbHVlcyhzY2hlbWEuZ2V0VHlwZU1hcCgpKS5maWx0ZXIoZ3JhcGhxbF8xLmlzQ29tcG9zaXRlVHlwZSlcbiAgICAgICAgICAgICAgICAgICAgLmxlbmd0aCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZmllbGRBbm5vdGF0aW9uQ2FjaGUgPSBuZXcgbHJ1X2NhY2hlXzEuZGVmYXVsdCh7XG4gICAgICAgICAgICAgICAgbWF4OiBPYmplY3QudmFsdWVzKHNjaGVtYS5nZXRUeXBlTWFwKCkpXG4gICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZ3JhcGhxbF8xLmlzT2JqZWN0VHlwZSlcbiAgICAgICAgICAgICAgICAgICAgLmZsYXRNYXAoKHQpID0+IE9iamVjdC52YWx1ZXModC5nZXRGaWVsZHMoKSkpLmxlbmd0aCArXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC52YWx1ZXMoc2NoZW1hLmdldFR5cGVNYXAoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5maWx0ZXIoZ3JhcGhxbF8xLmlzSW50ZXJmYWNlVHlwZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5mbGF0TWFwKCh0KSA9PiBPYmplY3QudmFsdWVzKHQuZ2V0RmllbGRzKCkpKS5sZW5ndGgsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHJlcXVlc3REaWRTdGFydChyZXF1ZXN0Q29udGV4dCkge1xuICAgICAgICAgICAgZnVuY3Rpb24gbWVtb2l6ZWRDYWNoZUFubm90YXRpb25Gcm9tVHlwZSh0KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZXhpc3RpbmcgPSB0eXBlQW5ub3RhdGlvbkNhY2hlLmdldCh0KTtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBhbm5vdGF0aW9uID0gY2FjaGVBbm5vdGF0aW9uRnJvbVR5cGUodCk7XG4gICAgICAgICAgICAgICAgdHlwZUFubm90YXRpb25DYWNoZS5zZXQodCwgYW5ub3RhdGlvbik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFubm90YXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmdW5jdGlvbiBtZW1vaXplZENhY2hlQW5ub3RhdGlvbkZyb21GaWVsZChmaWVsZCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nID0gZmllbGRBbm5vdGF0aW9uQ2FjaGUuZ2V0KGZpZWxkKTtcbiAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV4aXN0aW5nO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb25zdCBhbm5vdGF0aW9uID0gY2FjaGVBbm5vdGF0aW9uRnJvbUZpZWxkKGZpZWxkKTtcbiAgICAgICAgICAgICAgICBmaWVsZEFubm90YXRpb25DYWNoZS5zZXQoZmllbGQsIGFubm90YXRpb24pO1xuICAgICAgICAgICAgICAgIHJldHVybiBhbm5vdGF0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZGVmYXVsdE1heEFnZSA9IG9wdGlvbnMuZGVmYXVsdE1heEFnZSA/PyAwO1xuICAgICAgICAgICAgY29uc3QgY2FsY3VsYXRlSHR0cEhlYWRlcnMgPSBvcHRpb25zLmNhbGN1bGF0ZUh0dHBIZWFkZXJzID8/IHRydWU7XG4gICAgICAgICAgICBjb25zdCB7IF9fdGVzdGluZ19fY2FjaGVIaW50cyB9ID0gb3B0aW9ucztcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYXN5bmMgZXhlY3V0aW9uRGlkU3RhcnQoKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChpc1Jlc3RyaWN0ZWQocmVxdWVzdENvbnRleHQub3ZlcmFsbENhY2hlUG9saWN5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmFrZUZpZWxkUG9saWN5ID0gKDAsIGNhY2hlUG9saWN5X2pzXzEubmV3Q2FjaGVQb2xpY3kpKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbGxSZXNvbHZlRmllbGQoeyBpbmZvIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5jYWNoZUNvbnRyb2wgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRDYWNoZUhpbnQ6IChkeW5hbWljSGludCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZha2VGaWVsZFBvbGljeS5yZXBsYWNlKGR5bmFtaWNIaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWNoZUhpbnQ6IGZha2VGaWVsZFBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhY2hlSGludEZyb21UeXBlOiBtZW1vaXplZENhY2hlQW5ub3RhdGlvbkZyb21UeXBlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWxsUmVzb2x2ZUZpZWxkKHsgaW5mbyB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGRQb2xpY3kgPSAoMCwgY2FjaGVQb2xpY3lfanNfMS5uZXdDYWNoZVBvbGljeSkoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaW5oZXJpdE1heEFnZSA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhcmdldFR5cGUgPSAoMCwgZ3JhcGhxbF8xLmdldE5hbWVkVHlwZSkoaW5mby5yZXR1cm5UeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoKDAsIGdyYXBocWxfMS5pc0NvbXBvc2l0ZVR5cGUpKHRhcmdldFR5cGUpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHR5cGVBbm5vdGF0aW9uID0gbWVtb2l6ZWRDYWNoZUFubm90YXRpb25Gcm9tVHlwZSh0YXJnZXRUeXBlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRQb2xpY3kucmVwbGFjZSh0eXBlQW5ub3RhdGlvbik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluaGVyaXRNYXhBZ2UgPSAhIXR5cGVBbm5vdGF0aW9uLmluaGVyaXRNYXhBZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkQW5ub3RhdGlvbiA9IG1lbW9pemVkQ2FjaGVBbm5vdGF0aW9uRnJvbUZpZWxkKGluZm8ucGFyZW50VHlwZS5nZXRGaWVsZHMoKVtpbmZvLmZpZWxkTmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZEFubm90YXRpb24uaW5oZXJpdE1heEFnZSAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZFBvbGljeS5tYXhBZ2UgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbmhlcml0TWF4QWdlID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkQW5ub3RhdGlvbi5zY29wZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmllbGRQb2xpY3kucmVwbGFjZSh7IHNjb3BlOiBmaWVsZEFubm90YXRpb24uc2NvcGUgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkUG9saWN5LnJlcGxhY2UoZmllbGRBbm5vdGF0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5mby5jYWNoZUNvbnRyb2wgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldENhY2hlSGludDogKGR5bmFtaWNIaW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWVsZFBvbGljeS5yZXBsYWNlKGR5bmFtaWNIaW50KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVIaW50OiBmaWVsZFBvbGljeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVIaW50RnJvbVR5cGU6IG1lbW9pemVkQ2FjaGVBbm5vdGF0aW9uRnJvbVR5cGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGRQb2xpY3kubWF4QWdlID09PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICgoKDAsIGdyYXBocWxfMS5pc0NvbXBvc2l0ZVR5cGUpKHRhcmdldFR5cGUpICYmICFpbmhlcml0TWF4QWdlKSB8fFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICFpbmZvLnBhdGgucHJldikpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpZWxkUG9saWN5LnJlc3RyaWN0KHsgbWF4QWdlOiBkZWZhdWx0TWF4QWdlIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChfX3Rlc3RpbmdfX2NhY2hlSGludHMgJiYgaXNSZXN0cmljdGVkKGZpZWxkUG9saWN5KSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF0aCA9ICgwLCBncmFwaHFsXzEucmVzcG9uc2VQYXRoQXNBcnJheSkoaW5mby5wYXRoKS5qb2luKCcuJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX190ZXN0aW5nX19jYWNoZUhpbnRzLmhhcyhwYXRoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFwic2hvdWxkbid0IGhhcHBlbjogYWRkSGludCBzaG91bGQgb25seSBiZSBjYWxsZWQgb25jZSBwZXIgcGF0aFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF9fdGVzdGluZ19fY2FjaGVIaW50cy5zZXQocGF0aCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heEFnZTogZmllbGRQb2xpY3kubWF4QWdlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlOiBmaWVsZFBvbGljeS5zY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVlc3RDb250ZXh0Lm92ZXJhbGxDYWNoZVBvbGljeS5yZXN0cmljdChmaWVsZFBvbGljeSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhc3luYyB3aWxsU2VuZFJlc3BvbnNlKHJlcXVlc3RDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghY2FsY3VsYXRlSHR0cEhlYWRlcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHJlc3BvbnNlLCBvdmVyYWxsQ2FjaGVQb2xpY3kgfSA9IHJlcXVlc3RDb250ZXh0O1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBleGlzdGluZ0NhY2hlQ29udHJvbEhlYWRlciA9IHBhcnNlRXhpc3RpbmdDYWNoZUNvbnRyb2xIZWFkZXIocmVzcG9uc2UuaHR0cC5oZWFkZXJzLmdldCgnY2FjaGUtY29udHJvbCcpKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nQ2FjaGVDb250cm9sSGVhZGVyLmtpbmQgPT09ICd1bnBhcnNhYmxlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNhY2hlUG9saWN5ID0gKDAsIGNhY2hlUG9saWN5X2pzXzEubmV3Q2FjaGVQb2xpY3kpKCk7XG4gICAgICAgICAgICAgICAgICAgIGNhY2hlUG9saWN5LnJlcGxhY2Uob3ZlcmFsbENhY2hlUG9saWN5KTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nQ2FjaGVDb250cm9sSGVhZGVyLmtpbmQgPT09ICdwYXJzYWJsZS1hbmQtY2FjaGVhYmxlJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVQb2xpY3kucmVzdHJpY3QoZXhpc3RpbmdDYWNoZUNvbnRyb2xIZWFkZXIuaGludCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcG9saWN5SWZDYWNoZWFibGUgPSBjYWNoZVBvbGljeS5wb2xpY3lJZkNhY2hlYWJsZSgpO1xuICAgICAgICAgICAgICAgICAgICBpZiAocG9saWN5SWZDYWNoZWFibGUgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nQ2FjaGVDb250cm9sSGVhZGVyLmtpbmQgIT09ICd1bmNhY2hlYWJsZScgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmJvZHkua2luZCA9PT0gJ3NpbmdsZScgJiZcbiAgICAgICAgICAgICAgICAgICAgICAgICFyZXNwb25zZS5ib2R5LnNpbmdsZVJlc3VsdC5lcnJvcnMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmh0dHAuaGVhZGVycy5zZXQoJ2NhY2hlLWNvbnRyb2wnLCBgbWF4LWFnZT0ke3BvbGljeUlmQ2FjaGVhYmxlLm1heEFnZX0sICR7cG9saWN5SWZDYWNoZWFibGUuc2NvcGUudG9Mb3dlckNhc2UoKX1gKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmIChjYWxjdWxhdGVIdHRwSGVhZGVycyAhPT0gJ2lmLWNhY2hlYWJsZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlLmh0dHAuaGVhZGVycy5zZXQoJ2NhY2hlLWNvbnRyb2wnLCBDQUNIRV9DT05UUk9MX0hFQURFUl9VTkNBQ0hFQUJMRSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbmV4cG9ydHMuQXBvbGxvU2VydmVyUGx1Z2luQ2FjaGVDb250cm9sID0gQXBvbGxvU2VydmVyUGx1Z2luQ2FjaGVDb250cm9sO1xuY29uc3QgQ0FDSEVfQ09OVFJPTF9IRUFERVJfQ0FDSEVBQkxFX1JFR0VYUCA9IC9ebWF4LWFnZT0oXFxkKyksIChwdWJsaWN8cHJpdmF0ZSkkLztcbmNvbnN0IENBQ0hFX0NPTlRST0xfSEVBREVSX1VOQ0FDSEVBQkxFID0gJ25vLXN0b3JlJztcbmZ1bmN0aW9uIHBhcnNlRXhpc3RpbmdDYWNoZUNvbnRyb2xIZWFkZXIoaGVhZGVyKSB7XG4gICAgaWYgKCFoZWFkZXIpIHtcbiAgICAgICAgcmV0dXJuIHsga2luZDogJ25vLWhlYWRlcicgfTtcbiAgICB9XG4gICAgaWYgKGhlYWRlciA9PT0gQ0FDSEVfQ09OVFJPTF9IRUFERVJfVU5DQUNIRUFCTEUpIHtcbiAgICAgICAgcmV0dXJuIHsga2luZDogJ3VuY2FjaGVhYmxlJyB9O1xuICAgIH1cbiAgICBjb25zdCBtYXRjaCA9IENBQ0hFX0NPTlRST0xfSEVBREVSX0NBQ0hFQUJMRV9SRUdFWFAuZXhlYyhoZWFkZXIpO1xuICAgIGlmICghbWF0Y2gpIHtcbiAgICAgICAgcmV0dXJuIHsga2luZDogJ3VucGFyc2FibGUnIH07XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGtpbmQ6ICdwYXJzYWJsZS1hbmQtY2FjaGVhYmxlJyxcbiAgICAgICAgaGludDoge1xuICAgICAgICAgICAgbWF4QWdlOiArbWF0Y2hbMV0sXG4gICAgICAgICAgICBzY29wZTogbWF0Y2hbMl0gPT09ICdwdWJsaWMnID8gJ1BVQkxJQycgOiAnUFJJVkFURScsXG4gICAgICAgIH0sXG4gICAgfTtcbn1cbmZ1bmN0aW9uIGNhY2hlQW5ub3RhdGlvbkZyb21EaXJlY3RpdmVzKGRpcmVjdGl2ZXMpIHtcbiAgICBpZiAoIWRpcmVjdGl2ZXMpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgY29uc3QgY2FjaGVDb250cm9sRGlyZWN0aXZlID0gZGlyZWN0aXZlcy5maW5kKChkaXJlY3RpdmUpID0+IGRpcmVjdGl2ZS5uYW1lLnZhbHVlID09PSAnY2FjaGVDb250cm9sJyk7XG4gICAgaWYgKCFjYWNoZUNvbnRyb2xEaXJlY3RpdmUpXG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgaWYgKCFjYWNoZUNvbnRyb2xEaXJlY3RpdmUuYXJndW1lbnRzKVxuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgIGNvbnN0IG1heEFnZUFyZ3VtZW50ID0gY2FjaGVDb250cm9sRGlyZWN0aXZlLmFyZ3VtZW50cy5maW5kKChhcmd1bWVudCkgPT4gYXJndW1lbnQubmFtZS52YWx1ZSA9PT0gJ21heEFnZScpO1xuICAgIGNvbnN0IHNjb3BlQXJndW1lbnQgPSBjYWNoZUNvbnRyb2xEaXJlY3RpdmUuYXJndW1lbnRzLmZpbmQoKGFyZ3VtZW50KSA9PiBhcmd1bWVudC5uYW1lLnZhbHVlID09PSAnc2NvcGUnKTtcbiAgICBjb25zdCBpbmhlcml0TWF4QWdlQXJndW1lbnQgPSBjYWNoZUNvbnRyb2xEaXJlY3RpdmUuYXJndW1lbnRzLmZpbmQoKGFyZ3VtZW50KSA9PiBhcmd1bWVudC5uYW1lLnZhbHVlID09PSAnaW5oZXJpdE1heEFnZScpO1xuICAgIGNvbnN0IHNjb3BlU3RyaW5nID0gc2NvcGVBcmd1bWVudD8udmFsdWU/LmtpbmQgPT09ICdFbnVtVmFsdWUnXG4gICAgICAgID8gc2NvcGVBcmd1bWVudC52YWx1ZS52YWx1ZVxuICAgICAgICA6IHVuZGVmaW5lZDtcbiAgICBjb25zdCBzY29wZSA9IHNjb3BlU3RyaW5nID09PSAnUFVCTElDJyB8fCBzY29wZVN0cmluZyA9PT0gJ1BSSVZBVEUnXG4gICAgICAgID8gc2NvcGVTdHJpbmdcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgaWYgKGluaGVyaXRNYXhBZ2VBcmd1bWVudD8udmFsdWU/LmtpbmQgPT09ICdCb29sZWFuVmFsdWUnICYmXG4gICAgICAgIGluaGVyaXRNYXhBZ2VBcmd1bWVudC52YWx1ZS52YWx1ZSkge1xuICAgICAgICByZXR1cm4geyBpbmhlcml0TWF4QWdlOiB0cnVlLCBzY29wZSB9O1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICBtYXhBZ2U6IG1heEFnZUFyZ3VtZW50Py52YWx1ZT8ua2luZCA9PT0gJ0ludFZhbHVlJ1xuICAgICAgICAgICAgPyBwYXJzZUludChtYXhBZ2VBcmd1bWVudC52YWx1ZS52YWx1ZSlcbiAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICBzY29wZSxcbiAgICB9O1xufVxuZnVuY3Rpb24gY2FjaGVBbm5vdGF0aW9uRnJvbVR5cGUodCkge1xuICAgIGlmICh0LmFzdE5vZGUpIHtcbiAgICAgICAgY29uc3QgaGludCA9IGNhY2hlQW5ub3RhdGlvbkZyb21EaXJlY3RpdmVzKHQuYXN0Tm9kZS5kaXJlY3RpdmVzKTtcbiAgICAgICAgaWYgKGhpbnQpIHtcbiAgICAgICAgICAgIHJldHVybiBoaW50O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0LmV4dGVuc2lvbkFTVE5vZGVzKSB7XG4gICAgICAgIGZvciAoY29uc3Qgbm9kZSBvZiB0LmV4dGVuc2lvbkFTVE5vZGVzKSB7XG4gICAgICAgICAgICBjb25zdCBoaW50ID0gY2FjaGVBbm5vdGF0aW9uRnJvbURpcmVjdGl2ZXMobm9kZS5kaXJlY3RpdmVzKTtcbiAgICAgICAgICAgIGlmIChoaW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhpbnQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHt9O1xufVxuZnVuY3Rpb24gY2FjaGVBbm5vdGF0aW9uRnJvbUZpZWxkKGZpZWxkKSB7XG4gICAgaWYgKGZpZWxkLmFzdE5vZGUpIHtcbiAgICAgICAgY29uc3QgaGludCA9IGNhY2hlQW5ub3RhdGlvbkZyb21EaXJlY3RpdmVzKGZpZWxkLmFzdE5vZGUuZGlyZWN0aXZlcyk7XG4gICAgICAgIGlmIChoaW50KSB7XG4gICAgICAgICAgICByZXR1cm4gaGludDtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4ge307XG59XG5mdW5jdGlvbiBpc1Jlc3RyaWN0ZWQoaGludCkge1xuICAgIHJldHVybiBoaW50Lm1heEFnZSAhPT0gdW5kZWZpbmVkIHx8IGhpbnQuc2NvcGUgIT09IHVuZGVmaW5lZDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/cacheControl/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/disableSuggestions/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/disableSuggestions/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApolloServerPluginDisableSuggestions = void 0;\nconst internalPlugin_js_1 = __webpack_require__(/*! ../../internalPlugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/internalPlugin.js\");\nfunction ApolloServerPluginDisableSuggestions() {\n    return (0, internalPlugin_js_1.internalPlugin)({\n        __internal_plugin_id__: 'DisableSuggestions',\n        __is_disabled_plugin__: false,\n        async requestDidStart() {\n            return {\n                async validationDidStart() {\n                    return async (validationErrors) => {\n                        validationErrors?.forEach((error) => {\n                            error.message = error.message.replace(/ ?Did you mean(.+?)\\?$/, '');\n                        });\n                    };\n                },\n            };\n        },\n    });\n}\nexports.ApolloServerPluginDisableSuggestions = ApolloServerPluginDisableSuggestions;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL2Rpc2FibGVTdWdnZXN0aW9ucy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw0Q0FBNEM7QUFDNUMsNEJBQTRCLG1CQUFPLENBQUMsK0ZBQXlCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLDRDQUE0QztBQUM1QyIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2Nqcy9wbHVnaW4vZGlzYWJsZVN1Z2dlc3Rpb25zL2luZGV4LmpzP2E0MjEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFwb2xsb1NlcnZlclBsdWdpbkRpc2FibGVTdWdnZXN0aW9ucyA9IHZvaWQgMDtcbmNvbnN0IGludGVybmFsUGx1Z2luX2pzXzEgPSByZXF1aXJlKFwiLi4vLi4vaW50ZXJuYWxQbHVnaW4uanNcIik7XG5mdW5jdGlvbiBBcG9sbG9TZXJ2ZXJQbHVnaW5EaXNhYmxlU3VnZ2VzdGlvbnMoKSB7XG4gICAgcmV0dXJuICgwLCBpbnRlcm5hbFBsdWdpbl9qc18xLmludGVybmFsUGx1Z2luKSh7XG4gICAgICAgIF9faW50ZXJuYWxfcGx1Z2luX2lkX186ICdEaXNhYmxlU3VnZ2VzdGlvbnMnLFxuICAgICAgICBfX2lzX2Rpc2FibGVkX3BsdWdpbl9fOiBmYWxzZSxcbiAgICAgICAgYXN5bmMgcmVxdWVzdERpZFN0YXJ0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhc3luYyB2YWxpZGF0aW9uRGlkU3RhcnQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhc3luYyAodmFsaWRhdGlvbkVycm9ycykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbkVycm9ycz8uZm9yRWFjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlID0gZXJyb3IubWVzc2FnZS5yZXBsYWNlKC8gP0RpZCB5b3UgbWVhbiguKz8pXFw/JC8sICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuZXhwb3J0cy5BcG9sbG9TZXJ2ZXJQbHVnaW5EaXNhYmxlU3VnZ2VzdGlvbnMgPSBBcG9sbG9TZXJ2ZXJQbHVnaW5EaXNhYmxlU3VnZ2VzdGlvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/disableSuggestions/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/inlineTrace/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/inlineTrace/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApolloServerPluginInlineTrace = void 0;\nconst usage_reporting_protobuf_1 = __webpack_require__(/*! @apollo/usage-reporting-protobuf */ \"(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/cjs/protobuf.js\");\nconst traceTreeBuilder_js_1 = __webpack_require__(/*! ../traceTreeBuilder.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/traceTreeBuilder.js\");\nconst internalPlugin_js_1 = __webpack_require__(/*! ../../internalPlugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/internalPlugin.js\");\nconst schemaIsSubgraph_js_1 = __webpack_require__(/*! ../schemaIsSubgraph.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/schemaIsSubgraph.js\");\nfunction ApolloServerPluginInlineTrace(options = Object.create(null)) {\n    let enabled = options.__onlyIfSchemaIsSubgraph ? null : true;\n    return (0, internalPlugin_js_1.internalPlugin)({\n        __internal_plugin_id__: 'InlineTrace',\n        __is_disabled_plugin__: false,\n        async serverWillStart({ schema, logger }) {\n            if (enabled === null) {\n                enabled = (0, schemaIsSubgraph_js_1.schemaIsSubgraph)(schema);\n                if (enabled) {\n                    logger.info('Enabling inline tracing for this subgraph. To disable, use ' +\n                        'ApolloServerPluginInlineTraceDisabled.');\n                }\n            }\n        },\n        async requestDidStart({ request: { http }, metrics }) {\n            if (!enabled) {\n                return;\n            }\n            const treeBuilder = new traceTreeBuilder_js_1.TraceTreeBuilder({\n                maskedBy: 'ApolloServerPluginInlineTrace',\n                sendErrors: options.includeErrors,\n            });\n            if (http?.headers.get('apollo-federation-include-trace') !== 'ftv1') {\n                return;\n            }\n            if (metrics.captureTraces === false) {\n                return;\n            }\n            metrics.captureTraces = true;\n            treeBuilder.startTiming();\n            return {\n                async executionDidStart() {\n                    return {\n                        willResolveField({ info }) {\n                            return treeBuilder.willResolveField(info);\n                        },\n                    };\n                },\n                async didEncounterErrors({ errors }) {\n                    treeBuilder.didEncounterErrors(errors);\n                },\n                async willSendResponse({ response }) {\n                    treeBuilder.stopTiming();\n                    if (response.body.kind === 'incremental') {\n                        return;\n                    }\n                    if (metrics.queryPlanTrace) {\n                        treeBuilder.trace.queryPlan = metrics.queryPlanTrace;\n                    }\n                    const encodedUint8Array = usage_reporting_protobuf_1.Trace.encode(treeBuilder.trace).finish();\n                    const encodedBuffer = Buffer.from(encodedUint8Array, encodedUint8Array.byteOffset, encodedUint8Array.byteLength);\n                    const extensions = response.body.singleResult.extensions ||\n                        (response.body.singleResult.extensions = Object.create(null));\n                    if (typeof extensions.ftv1 !== 'undefined') {\n                        throw new Error('The `ftv1` extension was already present.');\n                    }\n                    extensions.ftv1 = encodedBuffer.toString('base64');\n                },\n            };\n        },\n    });\n}\nexports.ApolloServerPluginInlineTrace = ApolloServerPluginInlineTrace;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL2lubGluZVRyYWNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHFDQUFxQztBQUNyQyxtQ0FBbUMsbUJBQU8sQ0FBQyx5SEFBa0M7QUFDN0UsOEJBQThCLG1CQUFPLENBQUMsdUdBQXdCO0FBQzlELDRCQUE0QixtQkFBTyxDQUFDLCtGQUF5QjtBQUM3RCw4QkFBOEIsbUJBQU8sQ0FBQyx1R0FBd0I7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxnQkFBZ0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsZ0NBQWdDLFdBQVcsTUFBTSxXQUFXO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDLE1BQU07QUFDakQ7QUFDQSx5QkFBeUI7QUFDekI7QUFDQSxpQkFBaUI7QUFDakIsMkNBQTJDLFFBQVE7QUFDbkQ7QUFDQSxpQkFBaUI7QUFDakIseUNBQXlDLFVBQVU7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBLHFDQUFxQztBQUNyQyIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2Nqcy9wbHVnaW4vaW5saW5lVHJhY2UvaW5kZXguanM/NGZiMiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQXBvbGxvU2VydmVyUGx1Z2luSW5saW5lVHJhY2UgPSB2b2lkIDA7XG5jb25zdCB1c2FnZV9yZXBvcnRpbmdfcHJvdG9idWZfMSA9IHJlcXVpcmUoXCJAYXBvbGxvL3VzYWdlLXJlcG9ydGluZy1wcm90b2J1ZlwiKTtcbmNvbnN0IHRyYWNlVHJlZUJ1aWxkZXJfanNfMSA9IHJlcXVpcmUoXCIuLi90cmFjZVRyZWVCdWlsZGVyLmpzXCIpO1xuY29uc3QgaW50ZXJuYWxQbHVnaW5fanNfMSA9IHJlcXVpcmUoXCIuLi8uLi9pbnRlcm5hbFBsdWdpbi5qc1wiKTtcbmNvbnN0IHNjaGVtYUlzU3ViZ3JhcGhfanNfMSA9IHJlcXVpcmUoXCIuLi9zY2hlbWFJc1N1YmdyYXBoLmpzXCIpO1xuZnVuY3Rpb24gQXBvbGxvU2VydmVyUGx1Z2luSW5saW5lVHJhY2Uob3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCkpIHtcbiAgICBsZXQgZW5hYmxlZCA9IG9wdGlvbnMuX19vbmx5SWZTY2hlbWFJc1N1YmdyYXBoID8gbnVsbCA6IHRydWU7XG4gICAgcmV0dXJuICgwLCBpbnRlcm5hbFBsdWdpbl9qc18xLmludGVybmFsUGx1Z2luKSh7XG4gICAgICAgIF9faW50ZXJuYWxfcGx1Z2luX2lkX186ICdJbmxpbmVUcmFjZScsXG4gICAgICAgIF9faXNfZGlzYWJsZWRfcGx1Z2luX186IGZhbHNlLFxuICAgICAgICBhc3luYyBzZXJ2ZXJXaWxsU3RhcnQoeyBzY2hlbWEsIGxvZ2dlciB9KSB7XG4gICAgICAgICAgICBpZiAoZW5hYmxlZCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGVuYWJsZWQgPSAoMCwgc2NoZW1hSXNTdWJncmFwaF9qc18xLnNjaGVtYUlzU3ViZ3JhcGgpKHNjaGVtYSk7XG4gICAgICAgICAgICAgICAgaWYgKGVuYWJsZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ0VuYWJsaW5nIGlubGluZSB0cmFjaW5nIGZvciB0aGlzIHN1YmdyYXBoLiBUbyBkaXNhYmxlLCB1c2UgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnQXBvbGxvU2VydmVyUGx1Z2luSW5saW5lVHJhY2VEaXNhYmxlZC4nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIHJlcXVlc3REaWRTdGFydCh7IHJlcXVlc3Q6IHsgaHR0cCB9LCBtZXRyaWNzIH0pIHtcbiAgICAgICAgICAgIGlmICghZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHRyZWVCdWlsZGVyID0gbmV3IHRyYWNlVHJlZUJ1aWxkZXJfanNfMS5UcmFjZVRyZWVCdWlsZGVyKHtcbiAgICAgICAgICAgICAgICBtYXNrZWRCeTogJ0Fwb2xsb1NlcnZlclBsdWdpbklubGluZVRyYWNlJyxcbiAgICAgICAgICAgICAgICBzZW5kRXJyb3JzOiBvcHRpb25zLmluY2x1ZGVFcnJvcnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGlmIChodHRwPy5oZWFkZXJzLmdldCgnYXBvbGxvLWZlZGVyYXRpb24taW5jbHVkZS10cmFjZScpICE9PSAnZnR2MScpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWV0cmljcy5jYXB0dXJlVHJhY2VzID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG1ldHJpY3MuY2FwdHVyZVRyYWNlcyA9IHRydWU7XG4gICAgICAgICAgICB0cmVlQnVpbGRlci5zdGFydFRpbWluZygpO1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhc3luYyBleGVjdXRpb25EaWRTdGFydCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbGxSZXNvbHZlRmllbGQoeyBpbmZvIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJlZUJ1aWxkZXIud2lsbFJlc29sdmVGaWVsZChpbmZvKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhc3luYyBkaWRFbmNvdW50ZXJFcnJvcnMoeyBlcnJvcnMgfSkge1xuICAgICAgICAgICAgICAgICAgICB0cmVlQnVpbGRlci5kaWRFbmNvdW50ZXJFcnJvcnMoZXJyb3JzKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGFzeW5jIHdpbGxTZW5kUmVzcG9uc2UoeyByZXNwb25zZSB9KSB7XG4gICAgICAgICAgICAgICAgICAgIHRyZWVCdWlsZGVyLnN0b3BUaW1pbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLmJvZHkua2luZCA9PT0gJ2luY3JlbWVudGFsJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXRyaWNzLnF1ZXJ5UGxhblRyYWNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cmVlQnVpbGRlci50cmFjZS5xdWVyeVBsYW4gPSBtZXRyaWNzLnF1ZXJ5UGxhblRyYWNlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuY29kZWRVaW50OEFycmF5ID0gdXNhZ2VfcmVwb3J0aW5nX3Byb3RvYnVmXzEuVHJhY2UuZW5jb2RlKHRyZWVCdWlsZGVyLnRyYWNlKS5maW5pc2goKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZW5jb2RlZEJ1ZmZlciA9IEJ1ZmZlci5mcm9tKGVuY29kZWRVaW50OEFycmF5LCBlbmNvZGVkVWludDhBcnJheS5ieXRlT2Zmc2V0LCBlbmNvZGVkVWludDhBcnJheS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZXh0ZW5zaW9ucyA9IHJlc3BvbnNlLmJvZHkuc2luZ2xlUmVzdWx0LmV4dGVuc2lvbnMgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgIChyZXNwb25zZS5ib2R5LnNpbmdsZVJlc3VsdC5leHRlbnNpb25zID0gT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgZXh0ZW5zaW9ucy5mdHYxICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGUgYGZ0djFgIGV4dGVuc2lvbiB3YXMgYWxyZWFkeSBwcmVzZW50LicpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnMuZnR2MSA9IGVuY29kZWRCdWZmZXIudG9TdHJpbmcoJ2Jhc2U2NCcpO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuZXhwb3J0cy5BcG9sbG9TZXJ2ZXJQbHVnaW5JbmxpbmVUcmFjZSA9IEFwb2xsb1NlcnZlclBsdWdpbklubGluZVRyYWNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/inlineTrace/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/landingPage/default/getEmbeddedHTML.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/landingPage/default/getEmbeddedHTML.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getEmbeddedSandboxHTML = exports.getEmbeddedExplorerHTML = void 0;\nfunction getConfigStringForHtml(config) {\n    return JSON.stringify(config)\n        .replace('<', '\\\\u003c')\n        .replace('>', '\\\\u003e')\n        .replace('&', '\\\\u0026')\n        .replace(\"'\", '\\\\u0027');\n}\nconst getEmbeddedExplorerHTML = (explorerCdnVersion, config, apolloServerVersion, nonce) => {\n    const productionLandingPageEmbedConfigOrDefault = {\n        displayOptions: {},\n        persistExplorerState: false,\n        runTelemetry: true,\n        ...(typeof config.embed === 'boolean' ? {} : config.embed),\n    };\n    const embeddedExplorerParams = {\n        graphRef: config.graphRef,\n        target: '#embeddableExplorer',\n        initialState: {\n            ...('document' in config || 'headers' in config || 'variables' in config\n                ? {\n                    document: config.document,\n                    headers: config.headers,\n                    variables: config.variables,\n                }\n                : {}),\n            ...('collectionId' in config\n                ? {\n                    collectionId: config.collectionId,\n                    operationId: config.operationId,\n                }\n                : {}),\n            displayOptions: {\n                ...productionLandingPageEmbedConfigOrDefault.displayOptions,\n            },\n        },\n        persistExplorerState: productionLandingPageEmbedConfigOrDefault.persistExplorerState,\n        includeCookies: config.includeCookies,\n        runtime: apolloServerVersion,\n        runTelemetry: productionLandingPageEmbedConfigOrDefault.runTelemetry,\n        allowDynamicStyles: false,\n    };\n    return `\n<div class=\"fallback\">\n  <h1>Welcome to Apollo Server</h1>\n  <p>Apollo Explorer cannot be loaded; it appears that you might be offline.</p>\n</div>\n<style nonce=${nonce}>\n  iframe {\n    background-color: white;\n    height: 100%;\n    width: 100%;\n    border: none;\n  }\n  #embeddableExplorer {\n    width: 100vw;\n    height: 100vh;\n    position: absolute;\n    top: 0;\n  }\n</style>\n<div id=\"embeddableExplorer\"></div>\n<script nonce=\"${nonce}\" src=\"https://embeddable-explorer.cdn.apollographql.com/${encodeURIComponent(explorerCdnVersion)}/embeddable-explorer.umd.production.min.js?runtime=${encodeURIComponent(apolloServerVersion)}\"></script>\n<script nonce=\"${nonce}\">\n  var endpointUrl = window.location.href;\n  var embeddedExplorerConfig = ${getConfigStringForHtml(embeddedExplorerParams)};\n  new window.EmbeddedExplorer({\n    ...embeddedExplorerConfig,\n    endpointUrl,\n  });\n</script>\n`;\n};\nexports.getEmbeddedExplorerHTML = getEmbeddedExplorerHTML;\nconst getEmbeddedSandboxHTML = (sandboxCdnVersion, config, apolloServerVersion, nonce) => {\n    const localDevelopmentEmbedConfigOrDefault = {\n        runTelemetry: true,\n        endpointIsEditable: false,\n        initialState: {},\n        ...(typeof config.embed === 'boolean' ? {} : (config.embed ?? {})),\n    };\n    const embeddedSandboxConfig = {\n        target: '#embeddableSandbox',\n        initialState: {\n            ...('document' in config || 'headers' in config || 'variables' in config\n                ? {\n                    document: config.document,\n                    variables: config.variables,\n                    headers: config.headers,\n                }\n                : {}),\n            ...('collectionId' in config\n                ? {\n                    collectionId: config.collectionId,\n                    operationId: config.operationId,\n                }\n                : {}),\n            includeCookies: config.includeCookies,\n            ...localDevelopmentEmbedConfigOrDefault.initialState,\n        },\n        hideCookieToggle: false,\n        endpointIsEditable: localDevelopmentEmbedConfigOrDefault.endpointIsEditable,\n        runtime: apolloServerVersion,\n        runTelemetry: localDevelopmentEmbedConfigOrDefault.runTelemetry,\n        allowDynamicStyles: false,\n    };\n    return `\n<div class=\"fallback\">\n  <h1>Welcome to Apollo Server</h1>\n  <p>Apollo Sandbox cannot be loaded; it appears that you might be offline.</p>\n</div>\n<style nonce=${nonce}>\n  iframe {\n    background-color: white;\n    height: 100%;\n    width: 100%;\n    border: none;\n  }\n  #embeddableSandbox {\n    width: 100vw;\n    height: 100vh;\n    position: absolute;\n    top: 0;\n  }\n</style>\n<div id=\"embeddableSandbox\"></div>\n<script nonce=\"${nonce}\" src=\"https://embeddable-sandbox.cdn.apollographql.com/${encodeURIComponent(sandboxCdnVersion)}/embeddable-sandbox.umd.production.min.js?runtime=${encodeURIComponent(apolloServerVersion)}\"></script>\n<script nonce=\"${nonce}\">\n  var initialEndpoint = window.location.href;\n  var embeddedSandboxConfig = ${getConfigStringForHtml(embeddedSandboxConfig)};\n  new window.EmbeddedSandbox(\n    {\n      ...embeddedSandboxConfig,\n      initialEndpoint,\n    }\n  );\n</script>\n`;\n};\nexports.getEmbeddedSandboxHTML = getEmbeddedSandboxHTML;\n//# sourceMappingURL=getEmbeddedHTML.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/landingPage/default/getEmbeddedHTML.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/landingPage/default/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/landingPage/default/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION = exports.DEFAULT_EMBEDDED_SANDBOX_VERSION = exports.DEFAULT_EMBEDDED_EXPLORER_VERSION = exports.ApolloServerPluginLandingPageProductionDefault = exports.ApolloServerPluginLandingPageLocalDefault = void 0;\nconst getEmbeddedHTML_js_1 = __webpack_require__(/*! ./getEmbeddedHTML.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/landingPage/default/getEmbeddedHTML.js\");\nconst packageVersion_js_1 = __webpack_require__(/*! ../../../generated/packageVersion.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/generated/packageVersion.js\");\nconst utils_createhash_1 = __webpack_require__(/*! @apollo/utils.createhash */ \"(rsc)/./node_modules/@apollo/utils.createhash/dist/index.js\");\nconst uuid_1 = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\nfunction ApolloServerPluginLandingPageLocalDefault(options = {}) {\n    const { version, __internal_apolloStudioEnv__, ...rest } = {\n        embed: true,\n        ...options,\n    };\n    return ApolloServerPluginLandingPageDefault(version, {\n        isProd: false,\n        apolloStudioEnv: __internal_apolloStudioEnv__,\n        ...rest,\n    });\n}\nexports.ApolloServerPluginLandingPageLocalDefault = ApolloServerPluginLandingPageLocalDefault;\nfunction ApolloServerPluginLandingPageProductionDefault(options = {}) {\n    const { version, __internal_apolloStudioEnv__, ...rest } = options;\n    return ApolloServerPluginLandingPageDefault(version, {\n        isProd: true,\n        apolloStudioEnv: __internal_apolloStudioEnv__,\n        ...rest,\n    });\n}\nexports.ApolloServerPluginLandingPageProductionDefault = ApolloServerPluginLandingPageProductionDefault;\nfunction encodeConfig(config) {\n    return JSON.stringify(encodeURIComponent(JSON.stringify(config)));\n}\nconst getNonEmbeddedLandingPageHTML = (cdnVersion, config, apolloServerVersion, nonce) => {\n    const encodedConfig = encodeConfig(config);\n    return `\n <div class=\"fallback\">\n  <h1>Welcome to Apollo Server</h1>\n  <p>The full landing page cannot be loaded; it appears that you might be offline.</p>\n</div>\n<script nonce=\"${nonce}\">window.landingPage = ${encodedConfig};</script>\n<script nonce=\"${nonce}\" src=\"https://apollo-server-landing-page.cdn.apollographql.com/${encodeURIComponent(cdnVersion)}/static/js/main.js?runtime=${apolloServerVersion}\"></script>`;\n};\nexports.DEFAULT_EMBEDDED_EXPLORER_VERSION = 'v3';\nexports.DEFAULT_EMBEDDED_SANDBOX_VERSION = 'v2';\nexports.DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION = '_latest';\nfunction ApolloServerPluginLandingPageDefault(maybeVersion, config) {\n    const explorerVersion = maybeVersion ?? exports.DEFAULT_EMBEDDED_EXPLORER_VERSION;\n    const sandboxVersion = maybeVersion ?? exports.DEFAULT_EMBEDDED_SANDBOX_VERSION;\n    const apolloServerLandingPageVersion = maybeVersion ?? exports.DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION;\n    const apolloServerVersion = `@apollo/server@${packageVersion_js_1.packageVersion}`;\n    const scriptSafeList = [\n        'https://apollo-server-landing-page.cdn.apollographql.com',\n        'https://embeddable-sandbox.cdn.apollographql.com',\n        'https://embeddable-explorer.cdn.apollographql.com',\n    ].join(' ');\n    const styleSafeList = [\n        'https://apollo-server-landing-page.cdn.apollographql.com',\n        'https://embeddable-sandbox.cdn.apollographql.com',\n        'https://embeddable-explorer.cdn.apollographql.com',\n        'https://fonts.googleapis.com',\n    ].join(' ');\n    const iframeSafeList = [\n        'https://explorer.embed.apollographql.com',\n        'https://sandbox.embed.apollographql.com',\n        'https://embed.apollo.local:3000',\n    ].join(' ');\n    return {\n        __internal_installed_implicitly__: false,\n        async serverWillStart(server) {\n            if (config.precomputedNonce) {\n                server.logger.warn(\"The `precomputedNonce` landing page configuration option is deprecated. Removing this option is strictly an improvement to Apollo Server's landing page Content Security Policy (CSP) implementation for preventing XSS attacks.\");\n            }\n            return {\n                async renderLandingPage() {\n                    const encodedASLandingPageVersion = encodeURIComponent(apolloServerLandingPageVersion);\n                    async function html() {\n                        const nonce = config.precomputedNonce ??\n                            (0, utils_createhash_1.createHash)('sha256').update((0, uuid_1.v4)()).digest('hex');\n                        const scriptCsp = `script-src 'self' 'nonce-${nonce}' ${scriptSafeList}`;\n                        const styleCsp = `style-src 'nonce-${nonce}' ${styleSafeList}`;\n                        const imageCsp = `img-src https://apollo-server-landing-page.cdn.apollographql.com`;\n                        const manifestCsp = `manifest-src https://apollo-server-landing-page.cdn.apollographql.com`;\n                        const frameCsp = `frame-src ${iframeSafeList}`;\n                        return `\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-Security-Policy\" content=\"${scriptCsp}; ${styleCsp}; ${imageCsp}; ${manifestCsp}; ${frameCsp}\" />\n    <link\n      rel=\"icon\"\n      href=\"https://apollo-server-landing-page.cdn.apollographql.com/${encodedASLandingPageVersion}/assets/favicon.png\"\n    />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta name=\"description\" content=\"Apollo server landing page\" />\n    <link\n      rel=\"apple-touch-icon\"\n      href=\"https://apollo-server-landing-page.cdn.apollographql.com/${encodedASLandingPageVersion}/assets/favicon.png\"\n    />\n    <link\n      rel=\"manifest\"\n      href=\"https://apollo-server-landing-page.cdn.apollographql.com/${encodedASLandingPageVersion}/manifest.json\"\n    />\n    <title>Apollo Server</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"react-root\">\n      <style nonce=${nonce}>\n        body {\n          margin: 0;\n          overflow-x: hidden;\n          overflow-y: hidden;\n        }\n        .fallback {\n          opacity: 0;\n          animation: fadeIn 1s 1s;\n          animation-iteration-count: 1;\n          animation-fill-mode: forwards;\n          padding: 1em;\n        }\n        @keyframes fadeIn {\n          0% {opacity:0;}\n          100% {opacity:1; }\n        }\n      </style>\n    ${config.embed\n                            ? 'graphRef' in config && config.graphRef\n                                ? (0, getEmbeddedHTML_js_1.getEmbeddedExplorerHTML)(explorerVersion, config, apolloServerVersion, nonce)\n                                : !('graphRef' in config)\n                                    ? (0, getEmbeddedHTML_js_1.getEmbeddedSandboxHTML)(sandboxVersion, config, apolloServerVersion, nonce)\n                                    : getNonEmbeddedLandingPageHTML(apolloServerLandingPageVersion, config, apolloServerVersion, nonce)\n                            : getNonEmbeddedLandingPageHTML(apolloServerLandingPageVersion, config, apolloServerVersion, nonce)}\n    </div>\n  </body>\n</html>\n          `;\n                    }\n                    return { html };\n                },\n            };\n        },\n    };\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/landingPage/default/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/schemaIsSubgraph.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/schemaIsSubgraph.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.schemaIsSubgraph = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nfunction schemaIsSubgraph(schema) {\n    const serviceType = schema.getType('_Service');\n    if (!(0, graphql_1.isObjectType)(serviceType)) {\n        return false;\n    }\n    const sdlField = serviceType.getFields().sdl;\n    if (!sdlField) {\n        return false;\n    }\n    let sdlFieldType = sdlField.type;\n    if ((0, graphql_1.isNonNullType)(sdlFieldType)) {\n        sdlFieldType = sdlFieldType.ofType;\n    }\n    if (!(0, graphql_1.isScalarType)(sdlFieldType)) {\n        return false;\n    }\n    return sdlFieldType.name == 'String';\n}\nexports.schemaIsSubgraph = schemaIsSubgraph;\n//# sourceMappingURL=schemaIsSubgraph.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL3NjaGVtYUlzU3ViZ3JhcGguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCLGtCQUFrQixtQkFBTyxDQUFDLHVEQUFTO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QjtBQUN4QiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2Nqcy9wbHVnaW4vc2NoZW1hSXNTdWJncmFwaC5qcz9hMGMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5zY2hlbWFJc1N1YmdyYXBoID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5mdW5jdGlvbiBzY2hlbWFJc1N1YmdyYXBoKHNjaGVtYSkge1xuICAgIGNvbnN0IHNlcnZpY2VUeXBlID0gc2NoZW1hLmdldFR5cGUoJ19TZXJ2aWNlJyk7XG4gICAgaWYgKCEoMCwgZ3JhcGhxbF8xLmlzT2JqZWN0VHlwZSkoc2VydmljZVR5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgc2RsRmllbGQgPSBzZXJ2aWNlVHlwZS5nZXRGaWVsZHMoKS5zZGw7XG4gICAgaWYgKCFzZGxGaWVsZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBzZGxGaWVsZFR5cGUgPSBzZGxGaWVsZC50eXBlO1xuICAgIGlmICgoMCwgZ3JhcGhxbF8xLmlzTm9uTnVsbFR5cGUpKHNkbEZpZWxkVHlwZSkpIHtcbiAgICAgICAgc2RsRmllbGRUeXBlID0gc2RsRmllbGRUeXBlLm9mVHlwZTtcbiAgICB9XG4gICAgaWYgKCEoMCwgZ3JhcGhxbF8xLmlzU2NhbGFyVHlwZSkoc2RsRmllbGRUeXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzZGxGaWVsZFR5cGUubmFtZSA9PSAnU3RyaW5nJztcbn1cbmV4cG9ydHMuc2NoZW1hSXNTdWJncmFwaCA9IHNjaGVtYUlzU3ViZ3JhcGg7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zY2hlbWFJc1N1YmdyYXBoLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/schemaIsSubgraph.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/schemaReporting/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/schemaReporting/index.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApolloServerPluginSchemaReporting = void 0;\nconst os_1 = __importDefault(__webpack_require__(/*! os */ \"os\"));\nconst internalPlugin_js_1 = __webpack_require__(/*! ../../internalPlugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/internalPlugin.js\");\nconst uuid_1 = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/index.js\");\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst schemaReporter_js_1 = __webpack_require__(/*! ./schemaReporter.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/schemaReporting/schemaReporter.js\");\nconst schemaIsSubgraph_js_1 = __webpack_require__(/*! ../schemaIsSubgraph.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/schemaIsSubgraph.js\");\nconst packageVersion_js_1 = __webpack_require__(/*! ../../generated/packageVersion.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/generated/packageVersion.js\");\nconst computeCoreSchemaHash_js_1 = __webpack_require__(/*! ../../utils/computeCoreSchemaHash.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/computeCoreSchemaHash.js\");\nfunction ApolloServerPluginSchemaReporting({ initialDelayMaxMs, overrideReportedSchema, endpointUrl, fetcher, } = Object.create(null)) {\n    const bootId = (0, uuid_1.v4)();\n    return (0, internalPlugin_js_1.internalPlugin)({\n        __internal_plugin_id__: 'SchemaReporting',\n        __is_disabled_plugin__: false,\n        async serverWillStart({ apollo, schema, logger }) {\n            const { key, graphRef } = apollo;\n            if (!key) {\n                throw Error('To use ApolloServerPluginSchemaReporting, you must provide an Apollo API ' +\n                    'key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`');\n            }\n            if (!graphRef) {\n                throw Error('To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, ' +\n                    \"'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment \" +\n                    'variable or passing `new ApolloServer({apollo: {graphRef}})`.');\n            }\n            if (overrideReportedSchema) {\n                try {\n                    const validationErrors = (0, graphql_1.validateSchema)((0, graphql_1.buildSchema)(overrideReportedSchema, { noLocation: true }));\n                    if (validationErrors.length) {\n                        throw new Error(validationErrors.map((error) => error.message).join('\\n'));\n                    }\n                }\n                catch (err) {\n                    throw new Error('The schema provided to overrideReportedSchema failed to parse or ' +\n                        `validate: ${err.message}`);\n                }\n            }\n            if ((0, schemaIsSubgraph_js_1.schemaIsSubgraph)(schema)) {\n                throw Error([\n                    'Schema reporting is not yet compatible with Apollo Federation subgraphs.',\n                    \"If you're interested in using schema reporting with subgraphs,\",\n                    'please contact Apollo support. To set up managed federation, see',\n                    'https://go.apollo.dev/s/managed-federation',\n                ].join(' '));\n            }\n            if (endpointUrl !== undefined) {\n                logger.info(`Apollo schema reporting: schema reporting URL override: ${endpointUrl}`);\n            }\n            const baseSchemaReport = {\n                bootId,\n                graphRef,\n                platform: process.env.APOLLO_SERVER_PLATFORM || 'local',\n                runtimeVersion: `node ${process.version}`,\n                userVersion: process.env.APOLLO_SERVER_USER_VERSION,\n                serverId: process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os_1.default.hostname(),\n                libraryVersion: `@apollo/server@${packageVersion_js_1.packageVersion}`,\n            };\n            let currentSchemaReporter;\n            return {\n                schemaDidLoadOrUpdate({ apiSchema, coreSupergraphSdl }) {\n                    if (overrideReportedSchema !== undefined) {\n                        if (currentSchemaReporter) {\n                            return;\n                        }\n                        else {\n                            logger.info('Apollo schema reporting: schema to report has been overridden');\n                        }\n                    }\n                    const coreSchema = overrideReportedSchema ??\n                        coreSupergraphSdl ??\n                        (0, graphql_1.printSchema)(apiSchema);\n                    const coreSchemaHash = (0, computeCoreSchemaHash_js_1.computeCoreSchemaHash)(coreSchema);\n                    const schemaReport = {\n                        ...baseSchemaReport,\n                        coreSchemaHash,\n                    };\n                    currentSchemaReporter?.stop();\n                    currentSchemaReporter = new schemaReporter_js_1.SchemaReporter({\n                        schemaReport,\n                        coreSchema,\n                        apiKey: key,\n                        endpointUrl,\n                        logger,\n                        initialReportingDelayInMs: Math.floor(Math.random() * (initialDelayMaxMs ?? 10000)),\n                        fallbackReportingDelayInMs: 20000,\n                        fetcher,\n                    });\n                    currentSchemaReporter.start();\n                    logger.info('Apollo schema reporting: reporting a new schema to Studio! See your graph at ' +\n                        `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/ with server info ${JSON.stringify(schemaReport)}`);\n                },\n                async serverWillStop() {\n                    currentSchemaReporter?.stop();\n                },\n            };\n        },\n    });\n}\nexports.ApolloServerPluginSchemaReporting = ApolloServerPluginSchemaReporting;\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/schemaReporting/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/schemaReporting/schemaReporter.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/schemaReporting/schemaReporter.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SchemaReporter = exports.schemaReportGql = void 0;\nconst node_fetch_1 = __importDefault(__webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\"));\nconst packageVersion_js_1 = __webpack_require__(/*! ../../generated/packageVersion.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/generated/packageVersion.js\");\nexports.schemaReportGql = `#graphql\n  mutation SchemaReport($report: SchemaReport!, $coreSchema: String) {\n    reportSchema(report: $report, coreSchema: $coreSchema) {\n      __typename\n      ... on ReportSchemaError {\n        message\n        code\n      }\n      ... on ReportSchemaResponse {\n        inSeconds\n        withCoreSchema\n      }\n    }\n  }\n`;\nclass SchemaReporter {\n    constructor(options) {\n        this.headers = {\n            'Content-Type': 'application/json',\n            'x-api-key': options.apiKey,\n            'apollographql-client-name': 'ApolloServerPluginSchemaReporting',\n            'apollographql-client-version': packageVersion_js_1.packageVersion,\n        };\n        this.endpointUrl =\n            options.endpointUrl ||\n                'https://schema-reporting.api.apollographql.com/api/graphql';\n        this.schemaReport = options.schemaReport;\n        this.coreSchema = options.coreSchema;\n        this.isStopped = false;\n        this.logger = options.logger;\n        this.initialReportingDelayInMs = options.initialReportingDelayInMs;\n        this.fallbackReportingDelayInMs = options.fallbackReportingDelayInMs;\n        this.fetcher = options.fetcher ?? node_fetch_1.default;\n    }\n    stopped() {\n        return this.isStopped;\n    }\n    start() {\n        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.initialReportingDelayInMs);\n    }\n    stop() {\n        this.isStopped = true;\n        if (this.pollTimer) {\n            clearTimeout(this.pollTimer);\n            this.pollTimer = undefined;\n        }\n    }\n    async sendOneReportAndScheduleNext(sendNextWithCoreSchema) {\n        this.pollTimer = undefined;\n        if (this.stopped())\n            return;\n        try {\n            const result = await this.reportSchema(sendNextWithCoreSchema);\n            if (!result) {\n                return;\n            }\n            if (!this.stopped()) {\n                this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(result.withCoreSchema), result.inSeconds * 1000);\n            }\n            return;\n        }\n        catch (error) {\n            this.logger.error(`Error reporting server info to Apollo during schema reporting: ${error}`);\n            if (!this.stopped()) {\n                this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.fallbackReportingDelayInMs);\n            }\n        }\n    }\n    async reportSchema(withCoreSchema) {\n        const { data, errors } = await this.apolloQuery({\n            report: this.schemaReport,\n            coreSchema: withCoreSchema ? this.coreSchema : null,\n        });\n        if (errors) {\n            throw new Error(errors.map((x) => x.message).join('\\n'));\n        }\n        function msgForUnexpectedResponse(data) {\n            return [\n                'Unexpected response shape from Apollo when',\n                'reporting schema. If this continues, please reach',\n                'out to support@apollographql.com.',\n                'Received response:',\n                JSON.stringify(data),\n            ].join(' ');\n        }\n        if (!data || !data.reportSchema) {\n            throw new Error(msgForUnexpectedResponse(data));\n        }\n        if (data.reportSchema.__typename === 'ReportSchemaResponse') {\n            return data.reportSchema;\n        }\n        else if (data.reportSchema.__typename === 'ReportSchemaError') {\n            this.logger.error([\n                'Received input validation error from Apollo:',\n                data.reportSchema.message,\n                'Stopping reporting. Please fix the input errors.',\n            ].join(' '));\n            this.stop();\n            return null;\n        }\n        throw new Error(msgForUnexpectedResponse(data));\n    }\n    async apolloQuery(variables) {\n        const request = {\n            query: exports.schemaReportGql,\n            variables,\n        };\n        const httpResponse = await this.fetcher(this.endpointUrl, {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify(request),\n        });\n        if (!httpResponse.ok) {\n            throw new Error([\n                `An unexpected HTTP status code (${httpResponse.status}) was`,\n                'encountered during schema reporting.',\n            ].join(' '));\n        }\n        try {\n            return await httpResponse.json();\n        }\n        catch (error) {\n            throw new Error([\n                \"Couldn't report schema to Apollo.\",\n                'Parsing response as JSON failed.',\n                'If this continues please reach out to support@apollographql.com',\n                error,\n            ].join(' '));\n        }\n    }\n}\nexports.SchemaReporter = SchemaReporter;\n//# sourceMappingURL=schemaReporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/schemaReporting/schemaReporter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/traceTreeBuilder.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/traceTreeBuilder.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.dateToProtoTimestamp = exports.TraceTreeBuilder = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst usage_reporting_protobuf_1 = __webpack_require__(/*! @apollo/usage-reporting-protobuf */ \"(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/cjs/protobuf.js\");\nconst UnreachableCaseError_js_1 = __webpack_require__(/*! ../utils/UnreachableCaseError.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/UnreachableCaseError.js\");\nfunction internalError(message) {\n    return new Error(`[internal apollo-server error] ${message}`);\n}\nclass TraceTreeBuilder {\n    constructor(options) {\n        this.rootNode = new usage_reporting_protobuf_1.Trace.Node();\n        this.trace = new usage_reporting_protobuf_1.Trace({\n            root: this.rootNode,\n            fieldExecutionWeight: 1,\n        });\n        this.stopped = false;\n        this.nodes = new Map([\n            [responsePathAsString(), this.rootNode],\n        ]);\n        const { sendErrors, maskedBy } = options;\n        if (!sendErrors || 'masked' in sendErrors) {\n            this.transformError = () => new graphql_1.GraphQLError('<masked>', {\n                extensions: { maskedBy },\n            });\n        }\n        else if ('transform' in sendErrors) {\n            this.transformError = sendErrors.transform;\n        }\n        else if ('unmodified' in sendErrors) {\n            this.transformError = null;\n        }\n        else {\n            throw new UnreachableCaseError_js_1.UnreachableCaseError(sendErrors);\n        }\n    }\n    startTiming() {\n        if (this.startHrTime) {\n            throw internalError('startTiming called twice!');\n        }\n        if (this.stopped) {\n            throw internalError('startTiming called after stopTiming!');\n        }\n        this.trace.startTime = dateToProtoTimestamp(new Date());\n        this.startHrTime = process.hrtime();\n    }\n    stopTiming() {\n        if (!this.startHrTime) {\n            throw internalError('stopTiming called before startTiming!');\n        }\n        if (this.stopped) {\n            throw internalError('stopTiming called twice!');\n        }\n        this.trace.durationNs = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n        this.trace.endTime = dateToProtoTimestamp(new Date());\n        this.stopped = true;\n    }\n    willResolveField(info) {\n        if (!this.startHrTime) {\n            throw internalError('willResolveField called before startTiming!');\n        }\n        if (this.stopped) {\n            return () => { };\n        }\n        const path = info.path;\n        const node = this.newNode(path);\n        node.type = info.returnType.toString();\n        node.parentType = info.parentType.toString();\n        node.startTime = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n        if (typeof path.key === 'string' && path.key !== info.fieldName) {\n            node.originalFieldName = info.fieldName;\n        }\n        return () => {\n            node.endTime = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n        };\n    }\n    didEncounterErrors(errors) {\n        errors.forEach((err) => {\n            if (err.extensions?.serviceName) {\n                return;\n            }\n            const errorForReporting = this.transformAndNormalizeError(err);\n            if (errorForReporting === null) {\n                return;\n            }\n            this.addProtobufError(errorForReporting.path, errorToProtobufError(errorForReporting));\n        });\n    }\n    addProtobufError(path, error) {\n        if (!this.startHrTime) {\n            throw internalError('addProtobufError called before startTiming!');\n        }\n        if (this.stopped) {\n            throw internalError('addProtobufError called after stopTiming!');\n        }\n        let node = this.rootNode;\n        if (Array.isArray(path)) {\n            const specificNode = this.nodes.get(path.join('.'));\n            if (specificNode) {\n                node = specificNode;\n            }\n            else {\n                const responsePath = responsePathFromArray(path, this.rootNode);\n                if (!responsePath) {\n                    throw internalError('addProtobufError called with invalid path!');\n                }\n                node = this.newNode(responsePath);\n            }\n        }\n        node.error.push(error);\n    }\n    newNode(path) {\n        const node = new usage_reporting_protobuf_1.Trace.Node();\n        const id = path.key;\n        if (typeof id === 'number') {\n            node.index = id;\n        }\n        else {\n            node.responseName = id;\n        }\n        this.nodes.set(responsePathAsString(path), node);\n        const parentNode = this.ensureParentNode(path);\n        parentNode.child.push(node);\n        return node;\n    }\n    ensureParentNode(path) {\n        const parentPath = responsePathAsString(path.prev);\n        const parentNode = this.nodes.get(parentPath);\n        if (parentNode) {\n            return parentNode;\n        }\n        return this.newNode(path.prev);\n    }\n    transformAndNormalizeError(err) {\n        if (this.transformError) {\n            const clonedError = Object.assign(Object.create(Object.getPrototypeOf(err)), err);\n            const rewrittenError = this.transformError(clonedError);\n            if (rewrittenError === null) {\n                return null;\n            }\n            if (!(rewrittenError instanceof graphql_1.GraphQLError)) {\n                return err;\n            }\n            return new graphql_1.GraphQLError(rewrittenError.message, {\n                nodes: err.nodes,\n                source: err.source,\n                positions: err.positions,\n                path: err.path,\n                originalError: err.originalError,\n                extensions: rewrittenError.extensions || err.extensions,\n            });\n        }\n        return err;\n    }\n}\nexports.TraceTreeBuilder = TraceTreeBuilder;\nfunction durationHrTimeToNanos(hrtime) {\n    return hrtime[0] * 1e9 + hrtime[1];\n}\nfunction responsePathAsString(p) {\n    if (p === undefined) {\n        return '';\n    }\n    let res = String(p.key);\n    while ((p = p.prev) !== undefined) {\n        res = `${p.key}.${res}`;\n    }\n    return res;\n}\nfunction responsePathFromArray(path, node) {\n    let responsePath;\n    let nodePtr = node;\n    for (const key of path) {\n        nodePtr = nodePtr?.child?.find((child) => child.responseName === key);\n        responsePath = {\n            key,\n            prev: responsePath,\n            typename: nodePtr?.type ?? undefined,\n        };\n    }\n    return responsePath;\n}\nfunction errorToProtobufError(error) {\n    return new usage_reporting_protobuf_1.Trace.Error({\n        message: error.message,\n        location: (error.locations || []).map(({ line, column }) => new usage_reporting_protobuf_1.Trace.Location({ line, column })),\n        json: JSON.stringify(error),\n    });\n}\nfunction dateToProtoTimestamp(date) {\n    const totalMillis = +date;\n    const millis = totalMillis % 1000;\n    return new usage_reporting_protobuf_1.google.protobuf.Timestamp({\n        seconds: (totalMillis - millis) / 1000,\n        nanos: millis * 1e6,\n    });\n}\nexports.dateToProtoTimestamp = dateToProtoTimestamp;\n//# sourceMappingURL=traceTreeBuilder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL3RyYWNlVHJlZUJ1aWxkZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCLEdBQUcsd0JBQXdCO0FBQ3ZELGtCQUFrQixtQkFBTyxDQUFDLHVEQUFTO0FBQ25DLG1DQUFtQyxtQkFBTyxDQUFDLHlIQUFrQztBQUM3RSxrQ0FBa0MsbUJBQU8sQ0FBQyxvSEFBa0M7QUFDNUU7QUFDQSx1REFBdUQsUUFBUTtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix1QkFBdUI7QUFDdkM7QUFDQTtBQUNBLDhCQUE4QixVQUFVO0FBQ3hDLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLE1BQU0sR0FBRyxJQUFJO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQWlELGNBQWMscURBQXFELGNBQWM7QUFDbEk7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSw0QkFBNEI7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL3RyYWNlVHJlZUJ1aWxkZXIuanM/MmFmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGF0ZVRvUHJvdG9UaW1lc3RhbXAgPSBleHBvcnRzLlRyYWNlVHJlZUJ1aWxkZXIgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IHVzYWdlX3JlcG9ydGluZ19wcm90b2J1Zl8xID0gcmVxdWlyZShcIkBhcG9sbG8vdXNhZ2UtcmVwb3J0aW5nLXByb3RvYnVmXCIpO1xuY29uc3QgVW5yZWFjaGFibGVDYXNlRXJyb3JfanNfMSA9IHJlcXVpcmUoXCIuLi91dGlscy9VbnJlYWNoYWJsZUNhc2VFcnJvci5qc1wiKTtcbmZ1bmN0aW9uIGludGVybmFsRXJyb3IobWVzc2FnZSkge1xuICAgIHJldHVybiBuZXcgRXJyb3IoYFtpbnRlcm5hbCBhcG9sbG8tc2VydmVyIGVycm9yXSAke21lc3NhZ2V9YCk7XG59XG5jbGFzcyBUcmFjZVRyZWVCdWlsZGVyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMucm9vdE5vZGUgPSBuZXcgdXNhZ2VfcmVwb3J0aW5nX3Byb3RvYnVmXzEuVHJhY2UuTm9kZSgpO1xuICAgICAgICB0aGlzLnRyYWNlID0gbmV3IHVzYWdlX3JlcG9ydGluZ19wcm90b2J1Zl8xLlRyYWNlKHtcbiAgICAgICAgICAgIHJvb3Q6IHRoaXMucm9vdE5vZGUsXG4gICAgICAgICAgICBmaWVsZEV4ZWN1dGlvbldlaWdodDogMSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuc3RvcHBlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLm5vZGVzID0gbmV3IE1hcChbXG4gICAgICAgICAgICBbcmVzcG9uc2VQYXRoQXNTdHJpbmcoKSwgdGhpcy5yb290Tm9kZV0sXG4gICAgICAgIF0pO1xuICAgICAgICBjb25zdCB7IHNlbmRFcnJvcnMsIG1hc2tlZEJ5IH0gPSBvcHRpb25zO1xuICAgICAgICBpZiAoIXNlbmRFcnJvcnMgfHwgJ21hc2tlZCcgaW4gc2VuZEVycm9ycykge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1FcnJvciA9ICgpID0+IG5ldyBncmFwaHFsXzEuR3JhcGhRTEVycm9yKCc8bWFza2VkPicsIHtcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zOiB7IG1hc2tlZEJ5IH0sXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICgndHJhbnNmb3JtJyBpbiBzZW5kRXJyb3JzKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybUVycm9yID0gc2VuZEVycm9ycy50cmFuc2Zvcm07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoJ3VubW9kaWZpZWQnIGluIHNlbmRFcnJvcnMpIHtcbiAgICAgICAgICAgIHRoaXMudHJhbnNmb3JtRXJyb3IgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFVucmVhY2hhYmxlQ2FzZUVycm9yX2pzXzEuVW5yZWFjaGFibGVDYXNlRXJyb3Ioc2VuZEVycm9ycyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhcnRUaW1pbmcoKSB7XG4gICAgICAgIGlmICh0aGlzLnN0YXJ0SHJUaW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBpbnRlcm5hbEVycm9yKCdzdGFydFRpbWluZyBjYWxsZWQgdHdpY2UhJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RvcHBlZCkge1xuICAgICAgICAgICAgdGhyb3cgaW50ZXJuYWxFcnJvcignc3RhcnRUaW1pbmcgY2FsbGVkIGFmdGVyIHN0b3BUaW1pbmchJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cmFjZS5zdGFydFRpbWUgPSBkYXRlVG9Qcm90b1RpbWVzdGFtcChuZXcgRGF0ZSgpKTtcbiAgICAgICAgdGhpcy5zdGFydEhyVGltZSA9IHByb2Nlc3MuaHJ0aW1lKCk7XG4gICAgfVxuICAgIHN0b3BUaW1pbmcoKSB7XG4gICAgICAgIGlmICghdGhpcy5zdGFydEhyVGltZSkge1xuICAgICAgICAgICAgdGhyb3cgaW50ZXJuYWxFcnJvcignc3RvcFRpbWluZyBjYWxsZWQgYmVmb3JlIHN0YXJ0VGltaW5nIScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN0b3BwZWQpIHtcbiAgICAgICAgICAgIHRocm93IGludGVybmFsRXJyb3IoJ3N0b3BUaW1pbmcgY2FsbGVkIHR3aWNlIScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudHJhY2UuZHVyYXRpb25OcyA9IGR1cmF0aW9uSHJUaW1lVG9OYW5vcyhwcm9jZXNzLmhydGltZSh0aGlzLnN0YXJ0SHJUaW1lKSk7XG4gICAgICAgIHRoaXMudHJhY2UuZW5kVGltZSA9IGRhdGVUb1Byb3RvVGltZXN0YW1wKG5ldyBEYXRlKCkpO1xuICAgICAgICB0aGlzLnN0b3BwZWQgPSB0cnVlO1xuICAgIH1cbiAgICB3aWxsUmVzb2x2ZUZpZWxkKGluZm8pIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXJ0SHJUaW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBpbnRlcm5hbEVycm9yKCd3aWxsUmVzb2x2ZUZpZWxkIGNhbGxlZCBiZWZvcmUgc3RhcnRUaW1pbmchJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RvcHBlZCkge1xuICAgICAgICAgICAgcmV0dXJuICgpID0+IHsgfTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBwYXRoID0gaW5mby5wYXRoO1xuICAgICAgICBjb25zdCBub2RlID0gdGhpcy5uZXdOb2RlKHBhdGgpO1xuICAgICAgICBub2RlLnR5cGUgPSBpbmZvLnJldHVyblR5cGUudG9TdHJpbmcoKTtcbiAgICAgICAgbm9kZS5wYXJlbnRUeXBlID0gaW5mby5wYXJlbnRUeXBlLnRvU3RyaW5nKCk7XG4gICAgICAgIG5vZGUuc3RhcnRUaW1lID0gZHVyYXRpb25IclRpbWVUb05hbm9zKHByb2Nlc3MuaHJ0aW1lKHRoaXMuc3RhcnRIclRpbWUpKTtcbiAgICAgICAgaWYgKHR5cGVvZiBwYXRoLmtleSA9PT0gJ3N0cmluZycgJiYgcGF0aC5rZXkgIT09IGluZm8uZmllbGROYW1lKSB7XG4gICAgICAgICAgICBub2RlLm9yaWdpbmFsRmllbGROYW1lID0gaW5mby5maWVsZE5hbWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIG5vZGUuZW5kVGltZSA9IGR1cmF0aW9uSHJUaW1lVG9OYW5vcyhwcm9jZXNzLmhydGltZSh0aGlzLnN0YXJ0SHJUaW1lKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGRpZEVuY291bnRlckVycm9ycyhlcnJvcnMpIHtcbiAgICAgICAgZXJyb3JzLmZvckVhY2goKGVycikgPT4ge1xuICAgICAgICAgICAgaWYgKGVyci5leHRlbnNpb25zPy5zZXJ2aWNlTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVycm9yRm9yUmVwb3J0aW5nID0gdGhpcy50cmFuc2Zvcm1BbmROb3JtYWxpemVFcnJvcihlcnIpO1xuICAgICAgICAgICAgaWYgKGVycm9yRm9yUmVwb3J0aW5nID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5hZGRQcm90b2J1ZkVycm9yKGVycm9yRm9yUmVwb3J0aW5nLnBhdGgsIGVycm9yVG9Qcm90b2J1ZkVycm9yKGVycm9yRm9yUmVwb3J0aW5nKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBhZGRQcm90b2J1ZkVycm9yKHBhdGgsIGVycm9yKSB7XG4gICAgICAgIGlmICghdGhpcy5zdGFydEhyVGltZSkge1xuICAgICAgICAgICAgdGhyb3cgaW50ZXJuYWxFcnJvcignYWRkUHJvdG9idWZFcnJvciBjYWxsZWQgYmVmb3JlIHN0YXJ0VGltaW5nIScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnN0b3BwZWQpIHtcbiAgICAgICAgICAgIHRocm93IGludGVybmFsRXJyb3IoJ2FkZFByb3RvYnVmRXJyb3IgY2FsbGVkIGFmdGVyIHN0b3BUaW1pbmchJyk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IG5vZGUgPSB0aGlzLnJvb3ROb2RlO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShwYXRoKSkge1xuICAgICAgICAgICAgY29uc3Qgc3BlY2lmaWNOb2RlID0gdGhpcy5ub2Rlcy5nZXQocGF0aC5qb2luKCcuJykpO1xuICAgICAgICAgICAgaWYgKHNwZWNpZmljTm9kZSkge1xuICAgICAgICAgICAgICAgIG5vZGUgPSBzcGVjaWZpY05vZGU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXNwb25zZVBhdGggPSByZXNwb25zZVBhdGhGcm9tQXJyYXkocGF0aCwgdGhpcy5yb290Tm9kZSk7XG4gICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZVBhdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgaW50ZXJuYWxFcnJvcignYWRkUHJvdG9idWZFcnJvciBjYWxsZWQgd2l0aCBpbnZhbGlkIHBhdGghJyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG5vZGUgPSB0aGlzLm5ld05vZGUocmVzcG9uc2VQYXRoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBub2RlLmVycm9yLnB1c2goZXJyb3IpO1xuICAgIH1cbiAgICBuZXdOb2RlKHBhdGgpIHtcbiAgICAgICAgY29uc3Qgbm9kZSA9IG5ldyB1c2FnZV9yZXBvcnRpbmdfcHJvdG9idWZfMS5UcmFjZS5Ob2RlKCk7XG4gICAgICAgIGNvbnN0IGlkID0gcGF0aC5rZXk7XG4gICAgICAgIGlmICh0eXBlb2YgaWQgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBub2RlLmluZGV4ID0gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBub2RlLnJlc3BvbnNlTmFtZSA9IGlkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubm9kZXMuc2V0KHJlc3BvbnNlUGF0aEFzU3RyaW5nKHBhdGgpLCBub2RlKTtcbiAgICAgICAgY29uc3QgcGFyZW50Tm9kZSA9IHRoaXMuZW5zdXJlUGFyZW50Tm9kZShwYXRoKTtcbiAgICAgICAgcGFyZW50Tm9kZS5jaGlsZC5wdXNoKG5vZGUpO1xuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG4gICAgZW5zdXJlUGFyZW50Tm9kZShwYXRoKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudFBhdGggPSByZXNwb25zZVBhdGhBc1N0cmluZyhwYXRoLnByZXYpO1xuICAgICAgICBjb25zdCBwYXJlbnROb2RlID0gdGhpcy5ub2Rlcy5nZXQocGFyZW50UGF0aCk7XG4gICAgICAgIGlmIChwYXJlbnROb2RlKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5uZXdOb2RlKHBhdGgucHJldik7XG4gICAgfVxuICAgIHRyYW5zZm9ybUFuZE5vcm1hbGl6ZUVycm9yKGVycikge1xuICAgICAgICBpZiAodGhpcy50cmFuc2Zvcm1FcnJvcikge1xuICAgICAgICAgICAgY29uc3QgY2xvbmVkRXJyb3IgPSBPYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKGVycikpLCBlcnIpO1xuICAgICAgICAgICAgY29uc3QgcmV3cml0dGVuRXJyb3IgPSB0aGlzLnRyYW5zZm9ybUVycm9yKGNsb25lZEVycm9yKTtcbiAgICAgICAgICAgIGlmIChyZXdyaXR0ZW5FcnJvciA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCEocmV3cml0dGVuRXJyb3IgaW5zdGFuY2VvZiBncmFwaHFsXzEuR3JhcGhRTEVycm9yKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlcnI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbmV3IGdyYXBocWxfMS5HcmFwaFFMRXJyb3IocmV3cml0dGVuRXJyb3IubWVzc2FnZSwge1xuICAgICAgICAgICAgICAgIG5vZGVzOiBlcnIubm9kZXMsXG4gICAgICAgICAgICAgICAgc291cmNlOiBlcnIuc291cmNlLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uczogZXJyLnBvc2l0aW9ucyxcbiAgICAgICAgICAgICAgICBwYXRoOiBlcnIucGF0aCxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnIub3JpZ2luYWxFcnJvcixcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zOiByZXdyaXR0ZW5FcnJvci5leHRlbnNpb25zIHx8IGVyci5leHRlbnNpb25zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG59XG5leHBvcnRzLlRyYWNlVHJlZUJ1aWxkZXIgPSBUcmFjZVRyZWVCdWlsZGVyO1xuZnVuY3Rpb24gZHVyYXRpb25IclRpbWVUb05hbm9zKGhydGltZSkge1xuICAgIHJldHVybiBocnRpbWVbMF0gKiAxZTkgKyBocnRpbWVbMV07XG59XG5mdW5jdGlvbiByZXNwb25zZVBhdGhBc1N0cmluZyhwKSB7XG4gICAgaWYgKHAgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIGxldCByZXMgPSBTdHJpbmcocC5rZXkpO1xuICAgIHdoaWxlICgocCA9IHAucHJldikgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXMgPSBgJHtwLmtleX0uJHtyZXN9YDtcbiAgICB9XG4gICAgcmV0dXJuIHJlcztcbn1cbmZ1bmN0aW9uIHJlc3BvbnNlUGF0aEZyb21BcnJheShwYXRoLCBub2RlKSB7XG4gICAgbGV0IHJlc3BvbnNlUGF0aDtcbiAgICBsZXQgbm9kZVB0ciA9IG5vZGU7XG4gICAgZm9yIChjb25zdCBrZXkgb2YgcGF0aCkge1xuICAgICAgICBub2RlUHRyID0gbm9kZVB0cj8uY2hpbGQ/LmZpbmQoKGNoaWxkKSA9PiBjaGlsZC5yZXNwb25zZU5hbWUgPT09IGtleSk7XG4gICAgICAgIHJlc3BvbnNlUGF0aCA9IHtcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIHByZXY6IHJlc3BvbnNlUGF0aCxcbiAgICAgICAgICAgIHR5cGVuYW1lOiBub2RlUHRyPy50eXBlID8/IHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlUGF0aDtcbn1cbmZ1bmN0aW9uIGVycm9yVG9Qcm90b2J1ZkVycm9yKGVycm9yKSB7XG4gICAgcmV0dXJuIG5ldyB1c2FnZV9yZXBvcnRpbmdfcHJvdG9idWZfMS5UcmFjZS5FcnJvcih7XG4gICAgICAgIG1lc3NhZ2U6IGVycm9yLm1lc3NhZ2UsXG4gICAgICAgIGxvY2F0aW9uOiAoZXJyb3IubG9jYXRpb25zIHx8IFtdKS5tYXAoKHsgbGluZSwgY29sdW1uIH0pID0+IG5ldyB1c2FnZV9yZXBvcnRpbmdfcHJvdG9idWZfMS5UcmFjZS5Mb2NhdGlvbih7IGxpbmUsIGNvbHVtbiB9KSksXG4gICAgICAgIGpzb246IEpTT04uc3RyaW5naWZ5KGVycm9yKSxcbiAgICB9KTtcbn1cbmZ1bmN0aW9uIGRhdGVUb1Byb3RvVGltZXN0YW1wKGRhdGUpIHtcbiAgICBjb25zdCB0b3RhbE1pbGxpcyA9ICtkYXRlO1xuICAgIGNvbnN0IG1pbGxpcyA9IHRvdGFsTWlsbGlzICUgMTAwMDtcbiAgICByZXR1cm4gbmV3IHVzYWdlX3JlcG9ydGluZ19wcm90b2J1Zl8xLmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAoe1xuICAgICAgICBzZWNvbmRzOiAodG90YWxNaWxsaXMgLSBtaWxsaXMpIC8gMTAwMCxcbiAgICAgICAgbmFub3M6IG1pbGxpcyAqIDFlNixcbiAgICB9KTtcbn1cbmV4cG9ydHMuZGF0ZVRvUHJvdG9UaW1lc3RhbXAgPSBkYXRlVG9Qcm90b1RpbWVzdGFtcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNlVHJlZUJ1aWxkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/traceTreeBuilder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/defaultSendOperationsAsTrace.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/defaultSendOperationsAsTrace.js ***!
  \****************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultSendOperationsAsTrace = void 0;\nconst lru_cache_1 = __importDefault(__webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/@apollo/server/node_modules/lru-cache/index.js\"));\nconst iterateOverTrace_js_1 = __webpack_require__(/*! ./iterateOverTrace.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/iterateOverTrace.js\");\nconst durationHistogram_js_1 = __webpack_require__(/*! ./durationHistogram.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/durationHistogram.js\");\nfunction defaultSendOperationsAsTrace() {\n    const cache = new lru_cache_1.default({\n        maxSize: Math.pow(2, 20),\n        sizeCalculation: (_val, key) => {\n            return (key && Buffer.byteLength(key)) || 0;\n        },\n    });\n    return (trace, statsReportKey) => {\n        const endTimeSeconds = trace.endTime?.seconds;\n        if (endTimeSeconds == null) {\n            throw Error('programming error: endTime not set on trace');\n        }\n        const hasErrors = traceHasErrors(trace);\n        const cacheKey = JSON.stringify([\n            statsReportKey,\n            durationHistogram_js_1.DurationHistogram.durationToBucket(trace.durationNs),\n            Math.floor(endTimeSeconds / 60),\n            hasErrors ? Math.floor(endTimeSeconds / 5) : '',\n        ]);\n        if (cache.get(cacheKey)) {\n            return false;\n        }\n        cache.set(cacheKey, true);\n        return true;\n    };\n}\nexports.defaultSendOperationsAsTrace = defaultSendOperationsAsTrace;\nfunction traceHasErrors(trace) {\n    let hasErrors = false;\n    function traceNodeStats(node) {\n        if ((node.error?.length ?? 0) > 0) {\n            hasErrors = true;\n        }\n        return hasErrors;\n    }\n    (0, iterateOverTrace_js_1.iterateOverTrace)(trace, traceNodeStats, false);\n    return hasErrors;\n}\n//# sourceMappingURL=defaultSendOperationsAsTrace.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL3VzYWdlUmVwb3J0aW5nL2RlZmF1bHRTZW5kT3BlcmF0aW9uc0FzVHJhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0M7QUFDcEMsb0NBQW9DLG1CQUFPLENBQUMsc0ZBQVc7QUFDdkQsOEJBQThCLG1CQUFPLENBQUMscUhBQXVCO0FBQzdELCtCQUErQixtQkFBTyxDQUFDLHVIQUF3QjtBQUMvRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL3VzYWdlUmVwb3J0aW5nL2RlZmF1bHRTZW5kT3BlcmF0aW9uc0FzVHJhY2UuanM/OTc1MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZGVmYXVsdFNlbmRPcGVyYXRpb25zQXNUcmFjZSA9IHZvaWQgMDtcbmNvbnN0IGxydV9jYWNoZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJscnUtY2FjaGVcIikpO1xuY29uc3QgaXRlcmF0ZU92ZXJUcmFjZV9qc18xID0gcmVxdWlyZShcIi4vaXRlcmF0ZU92ZXJUcmFjZS5qc1wiKTtcbmNvbnN0IGR1cmF0aW9uSGlzdG9ncmFtX2pzXzEgPSByZXF1aXJlKFwiLi9kdXJhdGlvbkhpc3RvZ3JhbS5qc1wiKTtcbmZ1bmN0aW9uIGRlZmF1bHRTZW5kT3BlcmF0aW9uc0FzVHJhY2UoKSB7XG4gICAgY29uc3QgY2FjaGUgPSBuZXcgbHJ1X2NhY2hlXzEuZGVmYXVsdCh7XG4gICAgICAgIG1heFNpemU6IE1hdGgucG93KDIsIDIwKSxcbiAgICAgICAgc2l6ZUNhbGN1bGF0aW9uOiAoX3ZhbCwga2V5KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKGtleSAmJiBCdWZmZXIuYnl0ZUxlbmd0aChrZXkpKSB8fCAwO1xuICAgICAgICB9LFxuICAgIH0pO1xuICAgIHJldHVybiAodHJhY2UsIHN0YXRzUmVwb3J0S2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGVuZFRpbWVTZWNvbmRzID0gdHJhY2UuZW5kVGltZT8uc2Vjb25kcztcbiAgICAgICAgaWYgKGVuZFRpbWVTZWNvbmRzID09IG51bGwpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdwcm9ncmFtbWluZyBlcnJvcjogZW5kVGltZSBub3Qgc2V0IG9uIHRyYWNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaGFzRXJyb3JzID0gdHJhY2VIYXNFcnJvcnModHJhY2UpO1xuICAgICAgICBjb25zdCBjYWNoZUtleSA9IEpTT04uc3RyaW5naWZ5KFtcbiAgICAgICAgICAgIHN0YXRzUmVwb3J0S2V5LFxuICAgICAgICAgICAgZHVyYXRpb25IaXN0b2dyYW1fanNfMS5EdXJhdGlvbkhpc3RvZ3JhbS5kdXJhdGlvblRvQnVja2V0KHRyYWNlLmR1cmF0aW9uTnMpLFxuICAgICAgICAgICAgTWF0aC5mbG9vcihlbmRUaW1lU2Vjb25kcyAvIDYwKSxcbiAgICAgICAgICAgIGhhc0Vycm9ycyA/IE1hdGguZmxvb3IoZW5kVGltZVNlY29uZHMgLyA1KSA6ICcnLFxuICAgICAgICBdKTtcbiAgICAgICAgaWYgKGNhY2hlLmdldChjYWNoZUtleSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBjYWNoZS5zZXQoY2FjaGVLZXksIHRydWUpO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9O1xufVxuZXhwb3J0cy5kZWZhdWx0U2VuZE9wZXJhdGlvbnNBc1RyYWNlID0gZGVmYXVsdFNlbmRPcGVyYXRpb25zQXNUcmFjZTtcbmZ1bmN0aW9uIHRyYWNlSGFzRXJyb3JzKHRyYWNlKSB7XG4gICAgbGV0IGhhc0Vycm9ycyA9IGZhbHNlO1xuICAgIGZ1bmN0aW9uIHRyYWNlTm9kZVN0YXRzKG5vZGUpIHtcbiAgICAgICAgaWYgKChub2RlLmVycm9yPy5sZW5ndGggPz8gMCkgPiAwKSB7XG4gICAgICAgICAgICBoYXNFcnJvcnMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXNFcnJvcnM7XG4gICAgfVxuICAgICgwLCBpdGVyYXRlT3ZlclRyYWNlX2pzXzEuaXRlcmF0ZU92ZXJUcmFjZSkodHJhY2UsIHRyYWNlTm9kZVN0YXRzLCBmYWxzZSk7XG4gICAgcmV0dXJuIGhhc0Vycm9ycztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWRlZmF1bHRTZW5kT3BlcmF0aW9uc0FzVHJhY2UuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/defaultSendOperationsAsTrace.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/durationHistogram.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/durationHistogram.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DurationHistogram = void 0;\nclass DurationHistogram {\n    toArray() {\n        let bufferedZeroes = 0;\n        const outputArray = [];\n        for (const value of this.buckets) {\n            if (value === 0) {\n                bufferedZeroes++;\n            }\n            else {\n                if (bufferedZeroes === 1) {\n                    outputArray.push(0);\n                }\n                else if (bufferedZeroes !== 0) {\n                    outputArray.push(-bufferedZeroes);\n                }\n                outputArray.push(Math.floor(value));\n                bufferedZeroes = 0;\n            }\n        }\n        return outputArray;\n    }\n    static durationToBucket(durationNs) {\n        const log = Math.log(durationNs / 1000.0);\n        const unboundedBucket = Math.ceil(log / DurationHistogram.EXPONENT_LOG);\n        return unboundedBucket <= 0 || Number.isNaN(unboundedBucket)\n            ? 0\n            : unboundedBucket >= DurationHistogram.BUCKET_COUNT\n                ? DurationHistogram.BUCKET_COUNT - 1\n                : unboundedBucket;\n    }\n    incrementDuration(durationNs, value = 1) {\n        this.incrementBucket(DurationHistogram.durationToBucket(durationNs), value);\n        return this;\n    }\n    incrementBucket(bucket, value = 1) {\n        if (bucket >= DurationHistogram.BUCKET_COUNT) {\n            throw Error('Bucket is out of bounds of the buckets array');\n        }\n        if (bucket >= this.buckets.length) {\n            const oldLength = this.buckets.length;\n            this.buckets.length = bucket + 1;\n            this.buckets.fill(0, oldLength);\n        }\n        this.buckets[bucket] += value;\n    }\n    combine(otherHistogram) {\n        for (let i = 0; i < otherHistogram.buckets.length; i++) {\n            this.incrementBucket(i, otherHistogram.buckets[i]);\n        }\n    }\n    constructor(options) {\n        const initSize = options?.initSize || 74;\n        const buckets = options?.buckets;\n        const arrayInitSize = Math.max(buckets?.length || 0, initSize);\n        this.buckets = Array(arrayInitSize).fill(0);\n        if (buckets) {\n            buckets.forEach((val, index) => (this.buckets[index] = val));\n        }\n    }\n}\nexports.DurationHistogram = DurationHistogram;\nDurationHistogram.BUCKET_COUNT = 384;\nDurationHistogram.EXPONENT_LOG = Math.log(1.1);\n//# sourceMappingURL=durationHistogram.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL3VzYWdlUmVwb3J0aW5nL2R1cmF0aW9uSGlzdG9ncmFtLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixtQ0FBbUM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvY2pzL3BsdWdpbi91c2FnZVJlcG9ydGluZy9kdXJhdGlvbkhpc3RvZ3JhbS5qcz81MWQ4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EdXJhdGlvbkhpc3RvZ3JhbSA9IHZvaWQgMDtcbmNsYXNzIER1cmF0aW9uSGlzdG9ncmFtIHtcbiAgICB0b0FycmF5KCkge1xuICAgICAgICBsZXQgYnVmZmVyZWRaZXJvZXMgPSAwO1xuICAgICAgICBjb25zdCBvdXRwdXRBcnJheSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMuYnVja2V0cykge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyZWRaZXJvZXMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChidWZmZXJlZFplcm9lcyA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRBcnJheS5wdXNoKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidWZmZXJlZFplcm9lcyAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRBcnJheS5wdXNoKC1idWZmZXJlZFplcm9lcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG91dHB1dEFycmF5LnB1c2goTWF0aC5mbG9vcih2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIGJ1ZmZlcmVkWmVyb2VzID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0QXJyYXk7XG4gICAgfVxuICAgIHN0YXRpYyBkdXJhdGlvblRvQnVja2V0KGR1cmF0aW9uTnMpIHtcbiAgICAgICAgY29uc3QgbG9nID0gTWF0aC5sb2coZHVyYXRpb25OcyAvIDEwMDAuMCk7XG4gICAgICAgIGNvbnN0IHVuYm91bmRlZEJ1Y2tldCA9IE1hdGguY2VpbChsb2cgLyBEdXJhdGlvbkhpc3RvZ3JhbS5FWFBPTkVOVF9MT0cpO1xuICAgICAgICByZXR1cm4gdW5ib3VuZGVkQnVja2V0IDw9IDAgfHwgTnVtYmVyLmlzTmFOKHVuYm91bmRlZEJ1Y2tldClcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiB1bmJvdW5kZWRCdWNrZXQgPj0gRHVyYXRpb25IaXN0b2dyYW0uQlVDS0VUX0NPVU5UXG4gICAgICAgICAgICAgICAgPyBEdXJhdGlvbkhpc3RvZ3JhbS5CVUNLRVRfQ09VTlQgLSAxXG4gICAgICAgICAgICAgICAgOiB1bmJvdW5kZWRCdWNrZXQ7XG4gICAgfVxuICAgIGluY3JlbWVudER1cmF0aW9uKGR1cmF0aW9uTnMsIHZhbHVlID0gMSkge1xuICAgICAgICB0aGlzLmluY3JlbWVudEJ1Y2tldChEdXJhdGlvbkhpc3RvZ3JhbS5kdXJhdGlvblRvQnVja2V0KGR1cmF0aW9uTnMpLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpbmNyZW1lbnRCdWNrZXQoYnVja2V0LCB2YWx1ZSA9IDEpIHtcbiAgICAgICAgaWYgKGJ1Y2tldCA+PSBEdXJhdGlvbkhpc3RvZ3JhbS5CVUNLRVRfQ09VTlQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdCdWNrZXQgaXMgb3V0IG9mIGJvdW5kcyBvZiB0aGUgYnVja2V0cyBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChidWNrZXQgPj0gdGhpcy5idWNrZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgb2xkTGVuZ3RoID0gdGhpcy5idWNrZXRzLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuYnVja2V0cy5sZW5ndGggPSBidWNrZXQgKyAxO1xuICAgICAgICAgICAgdGhpcy5idWNrZXRzLmZpbGwoMCwgb2xkTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1Y2tldHNbYnVja2V0XSArPSB2YWx1ZTtcbiAgICB9XG4gICAgY29tYmluZShvdGhlckhpc3RvZ3JhbSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG90aGVySGlzdG9ncmFtLmJ1Y2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuaW5jcmVtZW50QnVja2V0KGksIG90aGVySGlzdG9ncmFtLmJ1Y2tldHNbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaW5pdFNpemUgPSBvcHRpb25zPy5pbml0U2l6ZSB8fCA3NDtcbiAgICAgICAgY29uc3QgYnVja2V0cyA9IG9wdGlvbnM/LmJ1Y2tldHM7XG4gICAgICAgIGNvbnN0IGFycmF5SW5pdFNpemUgPSBNYXRoLm1heChidWNrZXRzPy5sZW5ndGggfHwgMCwgaW5pdFNpemUpO1xuICAgICAgICB0aGlzLmJ1Y2tldHMgPSBBcnJheShhcnJheUluaXRTaXplKS5maWxsKDApO1xuICAgICAgICBpZiAoYnVja2V0cykge1xuICAgICAgICAgICAgYnVja2V0cy5mb3JFYWNoKCh2YWwsIGluZGV4KSA9PiAodGhpcy5idWNrZXRzW2luZGV4XSA9IHZhbCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5EdXJhdGlvbkhpc3RvZ3JhbSA9IER1cmF0aW9uSGlzdG9ncmFtO1xuRHVyYXRpb25IaXN0b2dyYW0uQlVDS0VUX0NPVU5UID0gMzg0O1xuRHVyYXRpb25IaXN0b2dyYW0uRVhQT05FTlRfTE9HID0gTWF0aC5sb2coMS4xKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWR1cmF0aW9uSGlzdG9ncmFtLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/durationHistogram.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ApolloServerPluginUsageReporting = void 0;\nvar plugin_js_1 = __webpack_require__(/*! ./plugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/plugin.js\");\nObject.defineProperty(exports, \"ApolloServerPluginUsageReporting\", ({ enumerable: true, get: function () { return plugin_js_1.ApolloServerPluginUsageReporting; } }));\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL3VzYWdlUmVwb3J0aW5nL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHdDQUF3QztBQUN4QyxrQkFBa0IsbUJBQU8sQ0FBQyxpR0FBYTtBQUN2QyxvRUFBbUUsRUFBRSxxQ0FBcUMsd0RBQXdELEVBQUM7QUFDbksiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL3VzYWdlUmVwb3J0aW5nL2luZGV4LmpzPzBjMDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkFwb2xsb1NlcnZlclBsdWdpblVzYWdlUmVwb3J0aW5nID0gdm9pZCAwO1xudmFyIHBsdWdpbl9qc18xID0gcmVxdWlyZShcIi4vcGx1Z2luLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQXBvbGxvU2VydmVyUGx1Z2luVXNhZ2VSZXBvcnRpbmdcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHBsdWdpbl9qc18xLkFwb2xsb1NlcnZlclBsdWdpblVzYWdlUmVwb3J0aW5nOyB9IH0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/iterateOverTrace.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/iterateOverTrace.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.iterateOverTrace = void 0;\nfunction iterateOverTrace(trace, f, includePath) {\n    const rootPath = includePath\n        ? new RootCollectingPathsResponseNamePath()\n        : notCollectingPathsResponseNamePath;\n    if (trace.root) {\n        if (iterateOverTraceNode(trace.root, rootPath, f))\n            return;\n    }\n    if (trace.queryPlan) {\n        if (iterateOverQueryPlan(trace.queryPlan, rootPath, f))\n            return;\n    }\n}\nexports.iterateOverTrace = iterateOverTrace;\nfunction iterateOverQueryPlan(node, rootPath, f) {\n    if (!node)\n        return false;\n    if (node.fetch?.trace?.root && node.fetch.serviceName) {\n        return iterateOverTraceNode(node.fetch.trace.root, rootPath.child(`service:${node.fetch.serviceName}`), f);\n    }\n    if (node.flatten?.node) {\n        return iterateOverQueryPlan(node.flatten.node, rootPath, f);\n    }\n    if (node.parallel?.nodes) {\n        return node.parallel.nodes.some((node) => iterateOverQueryPlan(node, rootPath, f));\n    }\n    if (node.sequence?.nodes) {\n        return node.sequence.nodes.some((node) => iterateOverQueryPlan(node, rootPath, f));\n    }\n    return false;\n}\nfunction iterateOverTraceNode(node, path, f) {\n    if (f(node, path)) {\n        return true;\n    }\n    return (node.child?.some((child) => {\n        const childPath = child.responseName\n            ? path.child(child.responseName)\n            : path;\n        return iterateOverTraceNode(child, childPath, f);\n    }) ?? false);\n}\nconst notCollectingPathsResponseNamePath = {\n    toArray() {\n        throw Error('not collecting paths!');\n    },\n    child() {\n        return this;\n    },\n};\nclass RootCollectingPathsResponseNamePath {\n    toArray() {\n        return [];\n    }\n    child(responseName) {\n        return new ChildCollectingPathsResponseNamePath(responseName, this);\n    }\n}\nclass ChildCollectingPathsResponseNamePath {\n    constructor(responseName, prev) {\n        this.responseName = responseName;\n        this.prev = prev;\n    }\n    toArray() {\n        const out = [];\n        let curr = this;\n        while (curr instanceof ChildCollectingPathsResponseNamePath) {\n            out.push(curr.responseName);\n            curr = curr.prev;\n        }\n        return out.reverse();\n    }\n    child(responseName) {\n        return new ChildCollectingPathsResponseNamePath(responseName, this);\n    }\n}\n//# sourceMappingURL=iterateOverTrace.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL3VzYWdlUmVwb3J0aW5nL2l0ZXJhdGVPdmVyVHJhY2UuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUZBQXFGLHVCQUF1QjtBQUM1RztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2Nqcy9wbHVnaW4vdXNhZ2VSZXBvcnRpbmcvaXRlcmF0ZU92ZXJUcmFjZS5qcz9hYzIzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pdGVyYXRlT3ZlclRyYWNlID0gdm9pZCAwO1xuZnVuY3Rpb24gaXRlcmF0ZU92ZXJUcmFjZSh0cmFjZSwgZiwgaW5jbHVkZVBhdGgpIHtcbiAgICBjb25zdCByb290UGF0aCA9IGluY2x1ZGVQYXRoXG4gICAgICAgID8gbmV3IFJvb3RDb2xsZWN0aW5nUGF0aHNSZXNwb25zZU5hbWVQYXRoKClcbiAgICAgICAgOiBub3RDb2xsZWN0aW5nUGF0aHNSZXNwb25zZU5hbWVQYXRoO1xuICAgIGlmICh0cmFjZS5yb290KSB7XG4gICAgICAgIGlmIChpdGVyYXRlT3ZlclRyYWNlTm9kZSh0cmFjZS5yb290LCByb290UGF0aCwgZikpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0cmFjZS5xdWVyeVBsYW4pIHtcbiAgICAgICAgaWYgKGl0ZXJhdGVPdmVyUXVlcnlQbGFuKHRyYWNlLnF1ZXJ5UGxhbiwgcm9vdFBhdGgsIGYpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgIH1cbn1cbmV4cG9ydHMuaXRlcmF0ZU92ZXJUcmFjZSA9IGl0ZXJhdGVPdmVyVHJhY2U7XG5mdW5jdGlvbiBpdGVyYXRlT3ZlclF1ZXJ5UGxhbihub2RlLCByb290UGF0aCwgZikge1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChub2RlLmZldGNoPy50cmFjZT8ucm9vdCAmJiBub2RlLmZldGNoLnNlcnZpY2VOYW1lKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlT3ZlclRyYWNlTm9kZShub2RlLmZldGNoLnRyYWNlLnJvb3QsIHJvb3RQYXRoLmNoaWxkKGBzZXJ2aWNlOiR7bm9kZS5mZXRjaC5zZXJ2aWNlTmFtZX1gKSwgZik7XG4gICAgfVxuICAgIGlmIChub2RlLmZsYXR0ZW4/Lm5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVPdmVyUXVlcnlQbGFuKG5vZGUuZmxhdHRlbi5ub2RlLCByb290UGF0aCwgZik7XG4gICAgfVxuICAgIGlmIChub2RlLnBhcmFsbGVsPy5ub2Rlcykge1xuICAgICAgICByZXR1cm4gbm9kZS5wYXJhbGxlbC5ub2Rlcy5zb21lKChub2RlKSA9PiBpdGVyYXRlT3ZlclF1ZXJ5UGxhbihub2RlLCByb290UGF0aCwgZikpO1xuICAgIH1cbiAgICBpZiAobm9kZS5zZXF1ZW5jZT8ubm9kZXMpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuc2VxdWVuY2Uubm9kZXMuc29tZSgobm9kZSkgPT4gaXRlcmF0ZU92ZXJRdWVyeVBsYW4obm9kZSwgcm9vdFBhdGgsIGYpKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXRlcmF0ZU92ZXJUcmFjZU5vZGUobm9kZSwgcGF0aCwgZikge1xuICAgIGlmIChmKG5vZGUsIHBhdGgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gKG5vZGUuY2hpbGQ/LnNvbWUoKGNoaWxkKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoaWxkUGF0aCA9IGNoaWxkLnJlc3BvbnNlTmFtZVxuICAgICAgICAgICAgPyBwYXRoLmNoaWxkKGNoaWxkLnJlc3BvbnNlTmFtZSlcbiAgICAgICAgICAgIDogcGF0aDtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVPdmVyVHJhY2VOb2RlKGNoaWxkLCBjaGlsZFBhdGgsIGYpO1xuICAgIH0pID8/IGZhbHNlKTtcbn1cbmNvbnN0IG5vdENvbGxlY3RpbmdQYXRoc1Jlc3BvbnNlTmFtZVBhdGggPSB7XG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ25vdCBjb2xsZWN0aW5nIHBhdGhzIScpO1xuICAgIH0sXG4gICAgY2hpbGQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG59O1xuY2xhc3MgUm9vdENvbGxlY3RpbmdQYXRoc1Jlc3BvbnNlTmFtZVBhdGgge1xuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY2hpbGQocmVzcG9uc2VOYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2hpbGRDb2xsZWN0aW5nUGF0aHNSZXNwb25zZU5hbWVQYXRoKHJlc3BvbnNlTmFtZSwgdGhpcyk7XG4gICAgfVxufVxuY2xhc3MgQ2hpbGRDb2xsZWN0aW5nUGF0aHNSZXNwb25zZU5hbWVQYXRoIHtcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZU5hbWUsIHByZXYpIHtcbiAgICAgICAgdGhpcy5yZXNwb25zZU5hbWUgPSByZXNwb25zZU5hbWU7XG4gICAgICAgIHRoaXMucHJldiA9IHByZXY7XG4gICAgfVxuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IFtdO1xuICAgICAgICBsZXQgY3VyciA9IHRoaXM7XG4gICAgICAgIHdoaWxlIChjdXJyIGluc3RhbmNlb2YgQ2hpbGRDb2xsZWN0aW5nUGF0aHNSZXNwb25zZU5hbWVQYXRoKSB7XG4gICAgICAgICAgICBvdXQucHVzaChjdXJyLnJlc3BvbnNlTmFtZSk7XG4gICAgICAgICAgICBjdXJyID0gY3Vyci5wcmV2O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQucmV2ZXJzZSgpO1xuICAgIH1cbiAgICBjaGlsZChyZXNwb25zZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDaGlsZENvbGxlY3RpbmdQYXRoc1Jlc3BvbnNlTmFtZVBhdGgocmVzcG9uc2VOYW1lLCB0aGlzKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRlT3ZlclRyYWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/iterateOverTrace.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/operationDerivedDataCache.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/operationDerivedDataCache.js ***!
  \*************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.operationDerivedDataCacheKey = exports.createOperationDerivedDataCache = void 0;\nconst lru_cache_1 = __importDefault(__webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/@apollo/server/node_modules/lru-cache/index.js\"));\nfunction createOperationDerivedDataCache({ logger, }) {\n    let lastWarn;\n    let lastDisposals = 0;\n    return new lru_cache_1.default({\n        sizeCalculation(obj) {\n            return Buffer.byteLength(JSON.stringify(obj), 'utf8');\n        },\n        maxSize: Math.pow(2, 20) * 10,\n        dispose() {\n            lastDisposals++;\n            if (!lastWarn || new Date().getTime() - lastWarn.getTime() > 60000) {\n                lastWarn = new Date();\n                logger.warn([\n                    'This server is processing a high number of unique operations.  ',\n                    `A total of ${lastDisposals} records have been `,\n                    'ejected from the ApolloServerPluginUsageReporting signature cache in the past ',\n                    'interval.  If you see this warning frequently, please open an ',\n                    'issue on the Apollo Server repository.',\n                ].join(''));\n                lastDisposals = 0;\n            }\n        },\n    });\n}\nexports.createOperationDerivedDataCache = createOperationDerivedDataCache;\nfunction operationDerivedDataCacheKey(queryHash, operationName) {\n    return `${queryHash}${operationName && ':' + operationName}`;\n}\nexports.operationDerivedDataCacheKey = operationDerivedDataCacheKey;\n//# sourceMappingURL=operationDerivedDataCache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL3VzYWdlUmVwb3J0aW5nL29wZXJhdGlvbkRlcml2ZWREYXRhQ2FjaGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQ0FBb0MsR0FBRyx1Q0FBdUM7QUFDOUUsb0NBQW9DLG1CQUFPLENBQUMsc0ZBQVc7QUFDdkQsMkNBQTJDLFNBQVM7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtDQUFrQyxlQUFlO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQSxjQUFjLFVBQVUsRUFBRSxxQ0FBcUM7QUFDL0Q7QUFDQSxvQ0FBb0M7QUFDcEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL3VzYWdlUmVwb3J0aW5nL29wZXJhdGlvbkRlcml2ZWREYXRhQ2FjaGUuanM/NzVhYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMub3BlcmF0aW9uRGVyaXZlZERhdGFDYWNoZUtleSA9IGV4cG9ydHMuY3JlYXRlT3BlcmF0aW9uRGVyaXZlZERhdGFDYWNoZSA9IHZvaWQgMDtcbmNvbnN0IGxydV9jYWNoZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJscnUtY2FjaGVcIikpO1xuZnVuY3Rpb24gY3JlYXRlT3BlcmF0aW9uRGVyaXZlZERhdGFDYWNoZSh7IGxvZ2dlciwgfSkge1xuICAgIGxldCBsYXN0V2FybjtcbiAgICBsZXQgbGFzdERpc3Bvc2FscyA9IDA7XG4gICAgcmV0dXJuIG5ldyBscnVfY2FjaGVfMS5kZWZhdWx0KHtcbiAgICAgICAgc2l6ZUNhbGN1bGF0aW9uKG9iaikge1xuICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5ieXRlTGVuZ3RoKEpTT04uc3RyaW5naWZ5KG9iaiksICd1dGY4Jyk7XG4gICAgICAgIH0sXG4gICAgICAgIG1heFNpemU6IE1hdGgucG93KDIsIDIwKSAqIDEwLFxuICAgICAgICBkaXNwb3NlKCkge1xuICAgICAgICAgICAgbGFzdERpc3Bvc2FscysrO1xuICAgICAgICAgICAgaWYgKCFsYXN0V2FybiB8fCBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIGxhc3RXYXJuLmdldFRpbWUoKSA+IDYwMDAwKSB7XG4gICAgICAgICAgICAgICAgbGFzdFdhcm4gPSBuZXcgRGF0ZSgpO1xuICAgICAgICAgICAgICAgIGxvZ2dlci53YXJuKFtcbiAgICAgICAgICAgICAgICAgICAgJ1RoaXMgc2VydmVyIGlzIHByb2Nlc3NpbmcgYSBoaWdoIG51bWJlciBvZiB1bmlxdWUgb3BlcmF0aW9ucy4gICcsXG4gICAgICAgICAgICAgICAgICAgIGBBIHRvdGFsIG9mICR7bGFzdERpc3Bvc2Fsc30gcmVjb3JkcyBoYXZlIGJlZW4gYCxcbiAgICAgICAgICAgICAgICAgICAgJ2VqZWN0ZWQgZnJvbSB0aGUgQXBvbGxvU2VydmVyUGx1Z2luVXNhZ2VSZXBvcnRpbmcgc2lnbmF0dXJlIGNhY2hlIGluIHRoZSBwYXN0ICcsXG4gICAgICAgICAgICAgICAgICAgICdpbnRlcnZhbC4gIElmIHlvdSBzZWUgdGhpcyB3YXJuaW5nIGZyZXF1ZW50bHksIHBsZWFzZSBvcGVuIGFuICcsXG4gICAgICAgICAgICAgICAgICAgICdpc3N1ZSBvbiB0aGUgQXBvbGxvIFNlcnZlciByZXBvc2l0b3J5LicsXG4gICAgICAgICAgICAgICAgXS5qb2luKCcnKSk7XG4gICAgICAgICAgICAgICAgbGFzdERpc3Bvc2FscyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG5leHBvcnRzLmNyZWF0ZU9wZXJhdGlvbkRlcml2ZWREYXRhQ2FjaGUgPSBjcmVhdGVPcGVyYXRpb25EZXJpdmVkRGF0YUNhY2hlO1xuZnVuY3Rpb24gb3BlcmF0aW9uRGVyaXZlZERhdGFDYWNoZUtleShxdWVyeUhhc2gsIG9wZXJhdGlvbk5hbWUpIHtcbiAgICByZXR1cm4gYCR7cXVlcnlIYXNofSR7b3BlcmF0aW9uTmFtZSAmJiAnOicgKyBvcGVyYXRpb25OYW1lfWA7XG59XG5leHBvcnRzLm9wZXJhdGlvbkRlcml2ZWREYXRhQ2FjaGVLZXkgPSBvcGVyYXRpb25EZXJpdmVkRGF0YUNhY2hlS2V5O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b3BlcmF0aW9uRGVyaXZlZERhdGFDYWNoZS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/operationDerivedDataCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/plugin.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/plugin.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeHTTPRequestHeaders = exports.ApolloServerPluginUsageReporting = void 0;\nconst usage_reporting_protobuf_1 = __webpack_require__(/*! @apollo/usage-reporting-protobuf */ \"(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/cjs/protobuf.js\");\nconst utils_usagereporting_1 = __webpack_require__(/*! @apollo/utils.usagereporting */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/index.js\");\nconst async_retry_1 = __importDefault(__webpack_require__(/*! async-retry */ \"(rsc)/./node_modules/async-retry/lib/index.js\"));\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst node_abort_controller_1 = __webpack_require__(/*! node-abort-controller */ \"(rsc)/./node_modules/node-abort-controller/index.js\");\nconst node_fetch_1 = __importDefault(__webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\"));\nconst os_1 = __importDefault(__webpack_require__(/*! os */ \"os\"));\nconst zlib_1 = __webpack_require__(/*! zlib */ \"zlib\");\nconst internalPlugin_js_1 = __webpack_require__(/*! ../../internalPlugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/internalPlugin.js\");\nconst traceTreeBuilder_js_1 = __webpack_require__(/*! ../traceTreeBuilder.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/traceTreeBuilder.js\");\nconst defaultSendOperationsAsTrace_js_1 = __webpack_require__(/*! ./defaultSendOperationsAsTrace.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/defaultSendOperationsAsTrace.js\");\nconst operationDerivedDataCache_js_1 = __webpack_require__(/*! ./operationDerivedDataCache.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/operationDerivedDataCache.js\");\nconst stats_js_1 = __webpack_require__(/*! ./stats.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/stats.js\");\nconst traceDetails_js_1 = __webpack_require__(/*! ./traceDetails.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/traceDetails.js\");\nconst packageVersion_js_1 = __webpack_require__(/*! ../../generated/packageVersion.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/generated/packageVersion.js\");\nconst computeCoreSchemaHash_js_1 = __webpack_require__(/*! ../../utils/computeCoreSchemaHash.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/computeCoreSchemaHash.js\");\nconst schemaIsSubgraph_js_1 = __webpack_require__(/*! ../schemaIsSubgraph.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/schemaIsSubgraph.js\");\nconst reportHeaderDefaults = {\n    hostname: os_1.default.hostname(),\n    agentVersion: `@apollo/server@${packageVersion_js_1.packageVersion}`,\n    runtimeVersion: `node ${process.version}`,\n    uname: `${os_1.default.platform()}, ${os_1.default.type()}, ${os_1.default.release()}, ${os_1.default.arch()})`,\n};\nfunction ApolloServerPluginUsageReporting(options = Object.create(null)) {\n    const fieldLevelInstrumentationOption = options.fieldLevelInstrumentation;\n    const fieldLevelInstrumentation = typeof fieldLevelInstrumentationOption === 'number'\n        ? async () => Math.random() < fieldLevelInstrumentationOption\n            ? 1 / fieldLevelInstrumentationOption\n            : 0\n        : fieldLevelInstrumentationOption\n            ? fieldLevelInstrumentationOption\n            : async () => true;\n    let requestDidStartHandler = null;\n    return (0, internalPlugin_js_1.internalPlugin)({\n        __internal_plugin_id__: 'UsageReporting',\n        __is_disabled_plugin__: false,\n        async requestDidStart(requestContext) {\n            if (requestDidStartHandler) {\n                return requestDidStartHandler(requestContext);\n            }\n            return {};\n        },\n        async serverWillStart({ logger: serverLogger, apollo, startedInBackground, schema, }) {\n            const logger = options.logger ?? serverLogger;\n            const { key, graphRef } = apollo;\n            if (!(key && graphRef)) {\n                throw new Error(\"You've enabled usage reporting via ApolloServerPluginUsageReporting, \" +\n                    'but you also need to provide your Apollo API key and graph ref, via ' +\n                    'the APOLLO_KEY/APOLLO_GRAPH_REF environment ' +\n                    'variables or via `new ApolloServer({apollo: {key, graphRef})`.');\n            }\n            if ((0, schemaIsSubgraph_js_1.schemaIsSubgraph)(schema)) {\n                if (options.__onlyIfSchemaIsNotSubgraph) {\n                    logger.warn('You have specified an Apollo API key and graph ref but this server appears ' +\n                        'to be a subgraph. Typically usage reports are sent to Apollo by your Router ' +\n                        'or Gateway, not directly from your subgraph; usage reporting is disabled. To ' +\n                        'enable usage reporting anyway, explicitly install `ApolloServerPluginUsageReporting`. ' +\n                        'To disable this warning, install `ApolloServerPluginUsageReportingDisabled`.');\n                    return {};\n                }\n                else {\n                    logger.warn('You have installed `ApolloServerPluginUsageReporting` but this server appears to ' +\n                        'be a subgraph. Typically usage reports are sent to Apollo by your Router ' +\n                        'or Gateway, not directly from your subgraph. If this was unintentional, remove ' +\n                        \"`ApolloServerPluginUsageReporting` from your server's `plugins` array.\");\n                }\n            }\n            logger.info('Apollo usage reporting starting! See your graph at ' +\n                `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/`);\n            const sendReportsImmediately = options.sendReportsImmediately ?? startedInBackground;\n            let operationDerivedDataCache = null;\n            const reportByExecutableSchemaId = new Map();\n            const getReportWhichMustBeUsedImmediately = (executableSchemaId) => {\n                const existing = reportByExecutableSchemaId.get(executableSchemaId);\n                if (existing) {\n                    return existing;\n                }\n                const report = new stats_js_1.OurReport(new usage_reporting_protobuf_1.ReportHeader({\n                    ...reportHeaderDefaults,\n                    executableSchemaId,\n                    graphRef,\n                }));\n                reportByExecutableSchemaId.set(executableSchemaId, report);\n                return report;\n            };\n            const getAndDeleteReport = (executableSchemaId) => {\n                const report = reportByExecutableSchemaId.get(executableSchemaId);\n                if (report) {\n                    reportByExecutableSchemaId.delete(executableSchemaId);\n                    return report;\n                }\n                return null;\n            };\n            const overriddenExecutableSchemaId = options.overrideReportedSchema\n                ? (0, computeCoreSchemaHash_js_1.computeCoreSchemaHash)(options.overrideReportedSchema)\n                : undefined;\n            let lastSeenExecutableSchemaToId;\n            let reportTimer;\n            if (!sendReportsImmediately) {\n                reportTimer = setInterval(() => sendAllReportsAndReportErrors(), options.reportIntervalMs || 10 * 1000);\n            }\n            let sendTraces = options.sendTraces ?? true;\n            const sendOperationAsTrace = options.experimental_sendOperationAsTrace ??\n                (0, defaultSendOperationsAsTrace_js_1.defaultSendOperationsAsTrace)();\n            let stopped = false;\n            function executableSchemaIdForSchema(schema) {\n                if (lastSeenExecutableSchemaToId?.executableSchema === schema) {\n                    return lastSeenExecutableSchemaToId.executableSchemaId;\n                }\n                const id = (0, computeCoreSchemaHash_js_1.computeCoreSchemaHash)((0, graphql_1.printSchema)(schema));\n                lastSeenExecutableSchemaToId = {\n                    executableSchema: schema,\n                    executableSchemaId: id,\n                };\n                return id;\n            }\n            async function sendAllReportsAndReportErrors() {\n                await Promise.all([...reportByExecutableSchemaId.keys()].map((executableSchemaId) => sendReportAndReportErrors(executableSchemaId)));\n            }\n            async function sendReportAndReportErrors(executableSchemaId) {\n                return sendReport(executableSchemaId).catch((err) => {\n                    if (options.reportErrorFunction) {\n                        options.reportErrorFunction(err);\n                    }\n                    else {\n                        logger.error(err.message);\n                    }\n                });\n            }\n            const sendReport = async (executableSchemaId) => {\n                let report = getAndDeleteReport(executableSchemaId);\n                if (!report ||\n                    (Object.keys(report.tracesPerQuery).length === 0 &&\n                        report.operationCount === 0)) {\n                    return;\n                }\n                report.endTime = (0, traceTreeBuilder_js_1.dateToProtoTimestamp)(new Date());\n                report.ensureCountsAreIntegers();\n                const protobufError = usage_reporting_protobuf_1.Report.verify(report);\n                if (protobufError) {\n                    throw new Error(`Error verifying report: ${protobufError}`);\n                }\n                let message = usage_reporting_protobuf_1.Report.encode(report).finish();\n                report = null;\n                if (options.debugPrintReports) {\n                    const decodedReport = usage_reporting_protobuf_1.Report.decode(message);\n                    logger.info(`Apollo usage report: ${JSON.stringify(decodedReport.toJSON())}`);\n                }\n                const compressed = await new Promise((resolve, reject) => {\n                    (0, zlib_1.gzip)(message, (error, result) => {\n                        error ? reject(error) : resolve(result);\n                    });\n                });\n                message = null;\n                const fetcher = options.fetcher ?? node_fetch_1.default;\n                const response = await (0, async_retry_1.default)(async () => {\n                    const controller = new node_abort_controller_1.AbortController();\n                    const abortTimeout = setTimeout(() => {\n                        controller.abort();\n                    }, options.requestTimeoutMs ?? 30000);\n                    let curResponse;\n                    try {\n                        curResponse = await fetcher((options.endpointUrl ||\n                            'https://usage-reporting.api.apollographql.com') +\n                            '/api/ingress/traces', {\n                            method: 'POST',\n                            headers: {\n                                'user-agent': 'ApolloServerPluginUsageReporting',\n                                'x-api-key': key,\n                                'content-encoding': 'gzip',\n                                accept: 'application/json',\n                            },\n                            body: compressed,\n                            signal: controller.signal,\n                        });\n                    }\n                    finally {\n                        clearTimeout(abortTimeout);\n                    }\n                    if (curResponse.status >= 500 && curResponse.status < 600) {\n                        throw new Error(`HTTP status ${curResponse.status}, ${(await curResponse.text()) || '(no body)'}`);\n                    }\n                    else {\n                        return curResponse;\n                    }\n                }, {\n                    retries: (options.maxAttempts || 5) - 1,\n                    minTimeout: options.minimumRetryDelayMs || 100,\n                    factor: 2,\n                }).catch((err) => {\n                    throw new Error(`Error sending report to Apollo servers: ${err.message}`);\n                });\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(`Error sending report to Apollo servers: HTTP status ${response.status}, ${(await response.text()) || '(no body)'}`);\n                }\n                if (sendTraces &&\n                    response.status === 200 &&\n                    response.headers\n                        .get('content-type')\n                        ?.match(/^\\s*application\\/json\\s*(?:;|$)/i)) {\n                    const body = await response.text();\n                    let parsedBody;\n                    try {\n                        parsedBody = JSON.parse(body);\n                    }\n                    catch (e) {\n                        throw new Error(`Error parsing response from Apollo servers: ${e}`);\n                    }\n                    if (parsedBody.tracesIgnored === true) {\n                        logger.debug(\"This graph's organization does not have access to traces; sending all \" +\n                            'subsequent operations as stats.');\n                        sendTraces = false;\n                    }\n                }\n                if (options.debugPrintReports) {\n                    logger.info(`Apollo usage report: status ${response.status}`);\n                }\n            };\n            requestDidStartHandler = ({ metrics, schema, request: { http, variables }, }) => {\n                const treeBuilder = new traceTreeBuilder_js_1.TraceTreeBuilder({\n                    maskedBy: 'ApolloServerPluginUsageReporting',\n                    sendErrors: options.sendErrors,\n                });\n                treeBuilder.startTiming();\n                metrics.startHrTime = treeBuilder.startHrTime;\n                let graphqlValidationFailure = false;\n                let graphqlUnknownOperationName = false;\n                let includeOperationInUsageReporting = null;\n                if (http) {\n                    treeBuilder.trace.http = new usage_reporting_protobuf_1.Trace.HTTP({\n                        method: usage_reporting_protobuf_1.Trace.HTTP.Method[http.method] || usage_reporting_protobuf_1.Trace.HTTP.Method.UNKNOWN,\n                    });\n                    if (options.sendHeaders) {\n                        makeHTTPRequestHeaders(treeBuilder.trace.http, http.headers, options.sendHeaders);\n                    }\n                }\n                async function maybeCallIncludeRequestHook(requestContext) {\n                    if (includeOperationInUsageReporting !== null)\n                        return;\n                    if (typeof options.includeRequest !== 'function') {\n                        includeOperationInUsageReporting = true;\n                        return;\n                    }\n                    includeOperationInUsageReporting =\n                        await options.includeRequest(requestContext);\n                    if (typeof includeOperationInUsageReporting !== 'boolean') {\n                        logger.warn(\"The 'includeRequest' async predicate function must return a boolean value.\");\n                        includeOperationInUsageReporting = true;\n                    }\n                }\n                let didResolveSource = false;\n                return {\n                    async didResolveSource(requestContext) {\n                        didResolveSource = true;\n                        if (metrics.persistedQueryHit) {\n                            treeBuilder.trace.persistedQueryHit = true;\n                        }\n                        if (metrics.persistedQueryRegister) {\n                            treeBuilder.trace.persistedQueryRegister = true;\n                        }\n                        if (variables) {\n                            treeBuilder.trace.details = (0, traceDetails_js_1.makeTraceDetails)(variables, options.sendVariableValues, requestContext.source);\n                        }\n                        const clientInfo = (options.generateClientInfo || defaultGenerateClientInfo)(requestContext);\n                        if (clientInfo) {\n                            const { clientName, clientVersion } = clientInfo;\n                            treeBuilder.trace.clientVersion = clientVersion || '';\n                            treeBuilder.trace.clientName = clientName || '';\n                        }\n                    },\n                    async validationDidStart() {\n                        return async (validationErrors) => {\n                            graphqlValidationFailure = validationErrors\n                                ? validationErrors.length !== 0\n                                : false;\n                        };\n                    },\n                    async didResolveOperation(requestContext) {\n                        graphqlUnknownOperationName =\n                            requestContext.operation === undefined;\n                        await maybeCallIncludeRequestHook(requestContext);\n                        if (includeOperationInUsageReporting &&\n                            !graphqlUnknownOperationName) {\n                            if (metrics.captureTraces === undefined) {\n                                const rawWeight = await fieldLevelInstrumentation(requestContext);\n                                treeBuilder.trace.fieldExecutionWeight =\n                                    typeof rawWeight === 'number' ? rawWeight : rawWeight ? 1 : 0;\n                                metrics.captureTraces =\n                                    !!treeBuilder.trace.fieldExecutionWeight;\n                            }\n                        }\n                    },\n                    async executionDidStart() {\n                        if (!metrics.captureTraces)\n                            return;\n                        return {\n                            willResolveField({ info }) {\n                                return treeBuilder.willResolveField(info);\n                            },\n                        };\n                    },\n                    async didEncounterSubsequentErrors(_requestContext, errors) {\n                        treeBuilder.didEncounterErrors(errors);\n                    },\n                    async willSendSubsequentPayload(requestContext, payload) {\n                        if (!payload.hasNext) {\n                            await operationFinished(requestContext);\n                        }\n                    },\n                    async willSendResponse(requestContext) {\n                        if (!didResolveSource)\n                            return;\n                        if (requestContext.errors) {\n                            treeBuilder.didEncounterErrors(requestContext.errors);\n                        }\n                        if (requestContext.response.body.kind === 'single') {\n                            await operationFinished(requestContext);\n                        }\n                    },\n                };\n                async function operationFinished(requestContext) {\n                    const resolvedOperation = !!requestContext.operation;\n                    await maybeCallIncludeRequestHook(requestContext);\n                    treeBuilder.stopTiming();\n                    const executableSchemaId = overriddenExecutableSchemaId ?? executableSchemaIdForSchema(schema);\n                    if (includeOperationInUsageReporting === false) {\n                        if (resolvedOperation) {\n                            getReportWhichMustBeUsedImmediately(executableSchemaId)\n                                .operationCount++;\n                        }\n                        return;\n                    }\n                    treeBuilder.trace.fullQueryCacheHit = !!metrics.responseCacheHit;\n                    treeBuilder.trace.forbiddenOperation = !!metrics.forbiddenOperation;\n                    treeBuilder.trace.registeredOperation = !!metrics.registeredOperation;\n                    const policyIfCacheable = requestContext.overallCachePolicy.policyIfCacheable();\n                    if (policyIfCacheable) {\n                        treeBuilder.trace.cachePolicy = new usage_reporting_protobuf_1.Trace.CachePolicy({\n                            scope: policyIfCacheable.scope === 'PRIVATE'\n                                ? usage_reporting_protobuf_1.Trace.CachePolicy.Scope.PRIVATE\n                                : policyIfCacheable.scope === 'PUBLIC'\n                                    ? usage_reporting_protobuf_1.Trace.CachePolicy.Scope.PUBLIC\n                                    : usage_reporting_protobuf_1.Trace.CachePolicy.Scope.UNKNOWN,\n                            maxAgeNs: policyIfCacheable.maxAge * 1e9,\n                        });\n                    }\n                    if (metrics.queryPlanTrace) {\n                        treeBuilder.trace.queryPlan = metrics.queryPlanTrace;\n                    }\n                    addTrace().catch(logger.error);\n                    async function addTrace() {\n                        if (stopped) {\n                            return;\n                        }\n                        await new Promise((res) => setImmediate(res));\n                        const executableSchemaId = overriddenExecutableSchemaId ??\n                            executableSchemaIdForSchema(schema);\n                        const { trace } = treeBuilder;\n                        let statsReportKey = undefined;\n                        let referencedFieldsByType;\n                        if (!requestContext.document) {\n                            statsReportKey = `## GraphQLParseFailure\\n`;\n                        }\n                        else if (graphqlValidationFailure) {\n                            statsReportKey = `## GraphQLValidationFailure\\n`;\n                        }\n                        else if (graphqlUnknownOperationName) {\n                            statsReportKey = `## GraphQLUnknownOperationName\\n`;\n                        }\n                        const isExecutable = statsReportKey === undefined;\n                        if (statsReportKey) {\n                            if (options.sendUnexecutableOperationDocuments) {\n                                trace.unexecutedOperationBody = requestContext.source;\n                                trace.unexecutedOperationName =\n                                    requestContext.request.operationName || '';\n                            }\n                            referencedFieldsByType = Object.create(null);\n                        }\n                        else {\n                            const operationDerivedData = getOperationDerivedData();\n                            statsReportKey = `# ${requestContext.operationName || '-'}\\n${operationDerivedData.signature}`;\n                            referencedFieldsByType =\n                                operationDerivedData.referencedFieldsByType;\n                        }\n                        const protobufError = usage_reporting_protobuf_1.Trace.verify(trace);\n                        if (protobufError) {\n                            throw new Error(`Error encoding trace: ${protobufError}`);\n                        }\n                        if (resolvedOperation) {\n                            getReportWhichMustBeUsedImmediately(executableSchemaId)\n                                .operationCount++;\n                        }\n                        getReportWhichMustBeUsedImmediately(executableSchemaId).addTrace({\n                            statsReportKey,\n                            trace,\n                            asTrace: sendTraces &&\n                                (!isExecutable || !!metrics.captureTraces) &&\n                                !metrics.nonFtv1ErrorPaths?.length &&\n                                sendOperationAsTrace(trace, statsReportKey),\n                            referencedFieldsByType,\n                            nonFtv1ErrorPaths: metrics.nonFtv1ErrorPaths ?? [],\n                        });\n                        if (sendReportsImmediately ||\n                            getReportWhichMustBeUsedImmediately(executableSchemaId)\n                                .sizeEstimator.bytes >=\n                                (options.maxUncompressedReportSize || 4 * 1024 * 1024)) {\n                            await sendReportAndReportErrors(executableSchemaId);\n                        }\n                    }\n                    function getOperationDerivedData() {\n                        if (!requestContext.document) {\n                            throw new Error('No document?');\n                        }\n                        const cacheKey = (0, operationDerivedDataCache_js_1.operationDerivedDataCacheKey)(requestContext.queryHash, requestContext.operationName || '');\n                        if (!operationDerivedDataCache ||\n                            operationDerivedDataCache.forSchema !== schema) {\n                            operationDerivedDataCache = {\n                                forSchema: schema,\n                                cache: (0, operationDerivedDataCache_js_1.createOperationDerivedDataCache)({ logger }),\n                            };\n                        }\n                        const cachedOperationDerivedData = operationDerivedDataCache.cache.get(cacheKey);\n                        if (cachedOperationDerivedData) {\n                            return cachedOperationDerivedData;\n                        }\n                        const generatedSignature = (options.calculateSignature || utils_usagereporting_1.usageReportingSignature)(requestContext.document, requestContext.operationName || '');\n                        const generatedOperationDerivedData = {\n                            signature: generatedSignature,\n                            referencedFieldsByType: (0, utils_usagereporting_1.calculateReferencedFieldsByType)({\n                                document: requestContext.document,\n                                schema,\n                                resolvedOperationName: requestContext.operationName ?? null,\n                            }),\n                        };\n                        operationDerivedDataCache.cache.set(cacheKey, generatedOperationDerivedData);\n                        return generatedOperationDerivedData;\n                    }\n                }\n            };\n            return {\n                async serverWillStop() {\n                    if (reportTimer) {\n                        clearInterval(reportTimer);\n                        reportTimer = undefined;\n                    }\n                    stopped = true;\n                    await sendAllReportsAndReportErrors();\n                },\n            };\n        },\n    });\n}\nexports.ApolloServerPluginUsageReporting = ApolloServerPluginUsageReporting;\nfunction makeHTTPRequestHeaders(http, headers, sendHeaders) {\n    if (!sendHeaders ||\n        ('none' in sendHeaders && sendHeaders.none) ||\n        ('all' in sendHeaders && !sendHeaders.all)) {\n        return;\n    }\n    for (const [key, value] of headers) {\n        if (('exceptNames' in sendHeaders &&\n            sendHeaders.exceptNames.some((exceptHeader) => {\n                return exceptHeader.toLowerCase() === key;\n            })) ||\n            ('onlyNames' in sendHeaders &&\n                !sendHeaders.onlyNames.some((header) => {\n                    return header.toLowerCase() === key;\n                }))) {\n            continue;\n        }\n        switch (key) {\n            case 'authorization':\n            case 'cookie':\n            case 'set-cookie':\n                break;\n            default:\n                http.requestHeaders[key] = new usage_reporting_protobuf_1.Trace.HTTP.Values({\n                    value: [value],\n                });\n        }\n    }\n}\nexports.makeHTTPRequestHeaders = makeHTTPRequestHeaders;\nfunction defaultGenerateClientInfo({ request, }) {\n    const clientNameHeaderKey = 'apollographql-client-name';\n    const clientVersionHeaderKey = 'apollographql-client-version';\n    if (request.http?.headers?.get(clientNameHeaderKey) ||\n        request.http?.headers?.get(clientVersionHeaderKey)) {\n        return {\n            clientName: request.http?.headers?.get(clientNameHeaderKey),\n            clientVersion: request.http?.headers?.get(clientVersionHeaderKey),\n        };\n    }\n    else if (request.extensions?.clientInfo) {\n        return request.extensions.clientInfo;\n    }\n    else {\n        return {};\n    }\n}\n//# sourceMappingURL=plugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/plugin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/stats.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/stats.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.OurContextualizedStats = exports.OurReport = exports.SizeEstimator = void 0;\nconst usage_reporting_protobuf_1 = __webpack_require__(/*! @apollo/usage-reporting-protobuf */ \"(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/cjs/protobuf.js\");\nconst durationHistogram_js_1 = __webpack_require__(/*! ./durationHistogram.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/durationHistogram.js\");\nconst iterateOverTrace_js_1 = __webpack_require__(/*! ./iterateOverTrace.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/iterateOverTrace.js\");\nclass SizeEstimator {\n    constructor() {\n        this.bytes = 0;\n    }\n}\nexports.SizeEstimator = SizeEstimator;\nclass OurReport {\n    constructor(header) {\n        this.header = header;\n        this.tracesPreAggregated = false;\n        this.tracesPerQuery = Object.create(null);\n        this.endTime = null;\n        this.operationCount = 0;\n        this.sizeEstimator = new SizeEstimator();\n    }\n    ensureCountsAreIntegers() {\n        for (const tracesAndStats of Object.values(this.tracesPerQuery)) {\n            tracesAndStats.ensureCountsAreIntegers();\n        }\n    }\n    addTrace({ statsReportKey, trace, asTrace, referencedFieldsByType, maxTraceBytes = 10 * 1024 * 1024, nonFtv1ErrorPaths, }) {\n        const tracesAndStats = this.getTracesAndStats({\n            statsReportKey,\n            referencedFieldsByType,\n        });\n        if (asTrace) {\n            const encodedTrace = usage_reporting_protobuf_1.Trace.encode(trace).finish();\n            if (!isNaN(maxTraceBytes) && encodedTrace.length > maxTraceBytes) {\n                tracesAndStats.statsWithContext.addTrace(trace, this.sizeEstimator, nonFtv1ErrorPaths);\n            }\n            else {\n                tracesAndStats.trace.push(encodedTrace);\n                this.sizeEstimator.bytes += 2 + encodedTrace.length;\n            }\n        }\n        else {\n            tracesAndStats.statsWithContext.addTrace(trace, this.sizeEstimator, nonFtv1ErrorPaths);\n        }\n    }\n    getTracesAndStats({ statsReportKey, referencedFieldsByType, }) {\n        const existing = this.tracesPerQuery[statsReportKey];\n        if (existing) {\n            return existing;\n        }\n        this.sizeEstimator.bytes += estimatedBytesForString(statsReportKey);\n        for (const [typeName, referencedFieldsForType] of Object.entries(referencedFieldsByType)) {\n            this.sizeEstimator.bytes += 2 + 2;\n            if (referencedFieldsForType.isInterface) {\n                this.sizeEstimator.bytes += 2;\n            }\n            this.sizeEstimator.bytes += estimatedBytesForString(typeName);\n            for (const fieldName of referencedFieldsForType.fieldNames) {\n                this.sizeEstimator.bytes += estimatedBytesForString(fieldName);\n            }\n        }\n        return (this.tracesPerQuery[statsReportKey] = new OurTracesAndStats(referencedFieldsByType));\n    }\n}\nexports.OurReport = OurReport;\nclass OurTracesAndStats {\n    constructor(referencedFieldsByType) {\n        this.referencedFieldsByType = referencedFieldsByType;\n        this.trace = [];\n        this.statsWithContext = new StatsByContext();\n        this.internalTracesContributingToStats = [];\n    }\n    ensureCountsAreIntegers() {\n        this.statsWithContext.ensureCountsAreIntegers();\n    }\n}\nclass StatsByContext {\n    constructor() {\n        this.map = Object.create(null);\n    }\n    toArray() {\n        return Object.values(this.map);\n    }\n    ensureCountsAreIntegers() {\n        for (const contextualizedStats of Object.values(this.map)) {\n            contextualizedStats.ensureCountsAreIntegers();\n        }\n    }\n    addTrace(trace, sizeEstimator, nonFtv1ErrorPaths) {\n        this.getContextualizedStats(trace, sizeEstimator).addTrace(trace, sizeEstimator, nonFtv1ErrorPaths);\n    }\n    getContextualizedStats(trace, sizeEstimator) {\n        const statsContext = {\n            clientName: trace.clientName,\n            clientVersion: trace.clientVersion,\n        };\n        const statsContextKey = JSON.stringify(statsContext);\n        const existing = this.map[statsContextKey];\n        if (existing) {\n            return existing;\n        }\n        sizeEstimator.bytes +=\n            20 +\n                estimatedBytesForString(trace.clientName) +\n                estimatedBytesForString(trace.clientVersion);\n        const contextualizedStats = new OurContextualizedStats(statsContext);\n        this.map[statsContextKey] = contextualizedStats;\n        return contextualizedStats;\n    }\n}\nclass OurContextualizedStats {\n    constructor(context) {\n        this.context = context;\n        this.queryLatencyStats = new OurQueryLatencyStats();\n        this.perTypeStat = Object.create(null);\n    }\n    ensureCountsAreIntegers() {\n        for (const typeStat of Object.values(this.perTypeStat)) {\n            typeStat.ensureCountsAreIntegers();\n        }\n    }\n    addTrace(trace, sizeEstimator, nonFtv1ErrorPaths = []) {\n        const { fieldExecutionWeight } = trace;\n        if (!fieldExecutionWeight) {\n            this.queryLatencyStats.requestsWithoutFieldInstrumentation++;\n        }\n        this.queryLatencyStats.requestCount++;\n        if (trace.fullQueryCacheHit) {\n            this.queryLatencyStats.cacheLatencyCount.incrementDuration(trace.durationNs);\n            this.queryLatencyStats.cacheHits++;\n        }\n        else {\n            this.queryLatencyStats.latencyCount.incrementDuration(trace.durationNs);\n        }\n        if (!trace.fullQueryCacheHit && trace.cachePolicy?.maxAgeNs != null) {\n            switch (trace.cachePolicy.scope) {\n                case usage_reporting_protobuf_1.Trace.CachePolicy.Scope.PRIVATE:\n                    this.queryLatencyStats.privateCacheTtlCount.incrementDuration(trace.cachePolicy.maxAgeNs);\n                    break;\n                case usage_reporting_protobuf_1.Trace.CachePolicy.Scope.PUBLIC:\n                    this.queryLatencyStats.publicCacheTtlCount.incrementDuration(trace.cachePolicy.maxAgeNs);\n                    break;\n            }\n        }\n        if (trace.persistedQueryHit) {\n            this.queryLatencyStats.persistedQueryHits++;\n        }\n        if (trace.persistedQueryRegister) {\n            this.queryLatencyStats.persistedQueryMisses++;\n        }\n        if (trace.forbiddenOperation) {\n            this.queryLatencyStats.forbiddenOperationCount++;\n        }\n        if (trace.registeredOperation) {\n            this.queryLatencyStats.registeredOperationCount++;\n        }\n        let hasError = false;\n        const errorPathStats = new Set();\n        const traceNodeStats = (node, path) => {\n            if (node.error?.length) {\n                hasError = true;\n                let currPathErrorStats = this.queryLatencyStats.rootErrorStats;\n                path.toArray().forEach((subPath) => {\n                    currPathErrorStats = currPathErrorStats.getChild(subPath, sizeEstimator);\n                });\n                errorPathStats.add(currPathErrorStats);\n                currPathErrorStats.errorsCount += node.error.length;\n            }\n            if (fieldExecutionWeight) {\n                const fieldName = node.originalFieldName || node.responseName;\n                if (node.parentType &&\n                    fieldName &&\n                    node.type &&\n                    node.endTime != null &&\n                    node.startTime != null &&\n                    node.endTime >= node.startTime) {\n                    const typeStat = this.getTypeStat(node.parentType, sizeEstimator);\n                    const fieldStat = typeStat.getFieldStat(fieldName, node.type, sizeEstimator);\n                    fieldStat.errorsCount += node.error?.length ?? 0;\n                    fieldStat.observedExecutionCount++;\n                    fieldStat.estimatedExecutionCount += fieldExecutionWeight;\n                    fieldStat.requestsWithErrorsCount +=\n                        (node.error?.length ?? 0) > 0 ? 1 : 0;\n                    fieldStat.latencyCount.incrementDuration(node.endTime - node.startTime, fieldExecutionWeight);\n                }\n            }\n            return false;\n        };\n        (0, iterateOverTrace_js_1.iterateOverTrace)(trace, traceNodeStats, true);\n        for (const { subgraph, path } of nonFtv1ErrorPaths) {\n            hasError = true;\n            if (path) {\n                let currPathErrorStats = this.queryLatencyStats.rootErrorStats.getChild(`service:${subgraph}`, sizeEstimator);\n                path.forEach((subPath) => {\n                    if (typeof subPath === 'string') {\n                        currPathErrorStats = currPathErrorStats.getChild(subPath, sizeEstimator);\n                    }\n                });\n                errorPathStats.add(currPathErrorStats);\n                currPathErrorStats.errorsCount += 1;\n            }\n        }\n        for (const errorPath of errorPathStats) {\n            errorPath.requestsWithErrorsCount += 1;\n        }\n        if (hasError) {\n            this.queryLatencyStats.requestsWithErrorsCount++;\n        }\n    }\n    getTypeStat(parentType, sizeEstimator) {\n        const existing = this.perTypeStat[parentType];\n        if (existing) {\n            return existing;\n        }\n        sizeEstimator.bytes += estimatedBytesForString(parentType);\n        const typeStat = new OurTypeStat();\n        this.perTypeStat[parentType] = typeStat;\n        return typeStat;\n    }\n}\nexports.OurContextualizedStats = OurContextualizedStats;\nclass OurQueryLatencyStats {\n    constructor() {\n        this.latencyCount = new durationHistogram_js_1.DurationHistogram();\n        this.requestCount = 0;\n        this.requestsWithoutFieldInstrumentation = 0;\n        this.cacheHits = 0;\n        this.persistedQueryHits = 0;\n        this.persistedQueryMisses = 0;\n        this.cacheLatencyCount = new durationHistogram_js_1.DurationHistogram();\n        this.rootErrorStats = new OurPathErrorStats();\n        this.requestsWithErrorsCount = 0;\n        this.publicCacheTtlCount = new durationHistogram_js_1.DurationHistogram();\n        this.privateCacheTtlCount = new durationHistogram_js_1.DurationHistogram();\n        this.registeredOperationCount = 0;\n        this.forbiddenOperationCount = 0;\n    }\n}\nclass OurPathErrorStats {\n    constructor() {\n        this.children = Object.create(null);\n        this.errorsCount = 0;\n        this.requestsWithErrorsCount = 0;\n    }\n    getChild(subPath, sizeEstimator) {\n        const existing = this.children[subPath];\n        if (existing) {\n            return existing;\n        }\n        const child = new OurPathErrorStats();\n        this.children[subPath] = child;\n        sizeEstimator.bytes += estimatedBytesForString(subPath) + 4;\n        return child;\n    }\n}\nclass OurTypeStat {\n    constructor() {\n        this.perFieldStat = Object.create(null);\n    }\n    getFieldStat(fieldName, returnType, sizeEstimator) {\n        const existing = this.perFieldStat[fieldName];\n        if (existing) {\n            return existing;\n        }\n        sizeEstimator.bytes +=\n            estimatedBytesForString(fieldName) +\n                estimatedBytesForString(returnType) +\n                10;\n        const fieldStat = new OurFieldStat(returnType);\n        this.perFieldStat[fieldName] = fieldStat;\n        return fieldStat;\n    }\n    ensureCountsAreIntegers() {\n        for (const fieldStat of Object.values(this.perFieldStat)) {\n            fieldStat.ensureCountsAreIntegers();\n        }\n    }\n}\nclass OurFieldStat {\n    constructor(returnType) {\n        this.returnType = returnType;\n        this.errorsCount = 0;\n        this.observedExecutionCount = 0;\n        this.estimatedExecutionCount = 0;\n        this.requestsWithErrorsCount = 0;\n        this.latencyCount = new durationHistogram_js_1.DurationHistogram();\n    }\n    ensureCountsAreIntegers() {\n        this.estimatedExecutionCount = Math.floor(this.estimatedExecutionCount);\n    }\n}\nfunction estimatedBytesForString(s) {\n    return 2 + Buffer.byteLength(s);\n}\n//# sourceMappingURL=stats.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/stats.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/traceDetails.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/traceDetails.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeTraceDetails = void 0;\nconst usage_reporting_protobuf_1 = __webpack_require__(/*! @apollo/usage-reporting-protobuf */ \"(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/cjs/protobuf.js\");\nfunction makeTraceDetails(variables, sendVariableValues, operationString) {\n    const details = new usage_reporting_protobuf_1.Trace.Details();\n    const variablesToRecord = (() => {\n        if (sendVariableValues && 'transform' in sendVariableValues) {\n            const originalKeys = Object.keys(variables);\n            try {\n                const modifiedVariables = sendVariableValues.transform({\n                    variables: variables,\n                    operationString: operationString,\n                });\n                return cleanModifiedVariables(originalKeys, modifiedVariables);\n            }\n            catch (e) {\n                return handleVariableValueTransformError(originalKeys);\n            }\n        }\n        else {\n            return variables;\n        }\n    })();\n    Object.keys(variablesToRecord).forEach((name) => {\n        if (!sendVariableValues ||\n            ('none' in sendVariableValues && sendVariableValues.none) ||\n            ('all' in sendVariableValues && !sendVariableValues.all) ||\n            ('exceptNames' in sendVariableValues &&\n                sendVariableValues.exceptNames.includes(name)) ||\n            ('onlyNames' in sendVariableValues &&\n                !sendVariableValues.onlyNames.includes(name))) {\n            details.variablesJson[name] = '';\n        }\n        else {\n            try {\n                details.variablesJson[name] =\n                    typeof variablesToRecord[name] === 'undefined'\n                        ? ''\n                        : JSON.stringify(variablesToRecord[name]);\n            }\n            catch (e) {\n                details.variablesJson[name] = JSON.stringify('[Unable to convert value to JSON]');\n            }\n        }\n    });\n    return details;\n}\nexports.makeTraceDetails = makeTraceDetails;\nfunction handleVariableValueTransformError(variableNames) {\n    const modifiedVariables = Object.create(null);\n    variableNames.forEach((name) => {\n        modifiedVariables[name] = '[PREDICATE_FUNCTION_ERROR]';\n    });\n    return modifiedVariables;\n}\nfunction cleanModifiedVariables(originalKeys, modifiedVariables) {\n    const cleanedVariables = Object.create(null);\n    originalKeys.forEach((name) => {\n        cleanedVariables[name] = modifiedVariables[name];\n    });\n    return cleanedVariables;\n}\n//# sourceMappingURL=traceDetails.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcGx1Z2luL3VzYWdlUmVwb3J0aW5nL3RyYWNlRGV0YWlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCx3QkFBd0I7QUFDeEIsbUNBQW1DLG1CQUFPLENBQUMseUhBQWtDO0FBQzdFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx3QkFBd0I7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2Nqcy9wbHVnaW4vdXNhZ2VSZXBvcnRpbmcvdHJhY2VEZXRhaWxzLmpzPzUwN2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1ha2VUcmFjZURldGFpbHMgPSB2b2lkIDA7XG5jb25zdCB1c2FnZV9yZXBvcnRpbmdfcHJvdG9idWZfMSA9IHJlcXVpcmUoXCJAYXBvbGxvL3VzYWdlLXJlcG9ydGluZy1wcm90b2J1ZlwiKTtcbmZ1bmN0aW9uIG1ha2VUcmFjZURldGFpbHModmFyaWFibGVzLCBzZW5kVmFyaWFibGVWYWx1ZXMsIG9wZXJhdGlvblN0cmluZykge1xuICAgIGNvbnN0IGRldGFpbHMgPSBuZXcgdXNhZ2VfcmVwb3J0aW5nX3Byb3RvYnVmXzEuVHJhY2UuRGV0YWlscygpO1xuICAgIGNvbnN0IHZhcmlhYmxlc1RvUmVjb3JkID0gKCgpID0+IHtcbiAgICAgICAgaWYgKHNlbmRWYXJpYWJsZVZhbHVlcyAmJiAndHJhbnNmb3JtJyBpbiBzZW5kVmFyaWFibGVWYWx1ZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IG9yaWdpbmFsS2V5cyA9IE9iamVjdC5rZXlzKHZhcmlhYmxlcyk7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1vZGlmaWVkVmFyaWFibGVzID0gc2VuZFZhcmlhYmxlVmFsdWVzLnRyYW5zZm9ybSh7XG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzLFxuICAgICAgICAgICAgICAgICAgICBvcGVyYXRpb25TdHJpbmc6IG9wZXJhdGlvblN0cmluZyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICByZXR1cm4gY2xlYW5Nb2RpZmllZFZhcmlhYmxlcyhvcmlnaW5hbEtleXMsIG1vZGlmaWVkVmFyaWFibGVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVZhcmlhYmxlVmFsdWVUcmFuc2Zvcm1FcnJvcihvcmlnaW5hbEtleXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZhcmlhYmxlcztcbiAgICAgICAgfVxuICAgIH0pKCk7XG4gICAgT2JqZWN0LmtleXModmFyaWFibGVzVG9SZWNvcmQpLmZvckVhY2goKG5hbWUpID0+IHtcbiAgICAgICAgaWYgKCFzZW5kVmFyaWFibGVWYWx1ZXMgfHxcbiAgICAgICAgICAgICgnbm9uZScgaW4gc2VuZFZhcmlhYmxlVmFsdWVzICYmIHNlbmRWYXJpYWJsZVZhbHVlcy5ub25lKSB8fFxuICAgICAgICAgICAgKCdhbGwnIGluIHNlbmRWYXJpYWJsZVZhbHVlcyAmJiAhc2VuZFZhcmlhYmxlVmFsdWVzLmFsbCkgfHxcbiAgICAgICAgICAgICgnZXhjZXB0TmFtZXMnIGluIHNlbmRWYXJpYWJsZVZhbHVlcyAmJlxuICAgICAgICAgICAgICAgIHNlbmRWYXJpYWJsZVZhbHVlcy5leGNlcHROYW1lcy5pbmNsdWRlcyhuYW1lKSkgfHxcbiAgICAgICAgICAgICgnb25seU5hbWVzJyBpbiBzZW5kVmFyaWFibGVWYWx1ZXMgJiZcbiAgICAgICAgICAgICAgICAhc2VuZFZhcmlhYmxlVmFsdWVzLm9ubHlOYW1lcy5pbmNsdWRlcyhuYW1lKSkpIHtcbiAgICAgICAgICAgIGRldGFpbHMudmFyaWFibGVzSnNvbltuYW1lXSA9ICcnO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBkZXRhaWxzLnZhcmlhYmxlc0pzb25bbmFtZV0gPVxuICAgICAgICAgICAgICAgICAgICB0eXBlb2YgdmFyaWFibGVzVG9SZWNvcmRbbmFtZV0gPT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICAgICAgICAgICAgICA/ICcnXG4gICAgICAgICAgICAgICAgICAgICAgICA6IEpTT04uc3RyaW5naWZ5KHZhcmlhYmxlc1RvUmVjb3JkW25hbWVdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZGV0YWlscy52YXJpYWJsZXNKc29uW25hbWVdID0gSlNPTi5zdHJpbmdpZnkoJ1tVbmFibGUgdG8gY29udmVydCB2YWx1ZSB0byBKU09OXScpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRldGFpbHM7XG59XG5leHBvcnRzLm1ha2VUcmFjZURldGFpbHMgPSBtYWtlVHJhY2VEZXRhaWxzO1xuZnVuY3Rpb24gaGFuZGxlVmFyaWFibGVWYWx1ZVRyYW5zZm9ybUVycm9yKHZhcmlhYmxlTmFtZXMpIHtcbiAgICBjb25zdCBtb2RpZmllZFZhcmlhYmxlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyaWFibGVOYW1lcy5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgIG1vZGlmaWVkVmFyaWFibGVzW25hbWVdID0gJ1tQUkVESUNBVEVfRlVOQ1RJT05fRVJST1JdJztcbiAgICB9KTtcbiAgICByZXR1cm4gbW9kaWZpZWRWYXJpYWJsZXM7XG59XG5mdW5jdGlvbiBjbGVhbk1vZGlmaWVkVmFyaWFibGVzKG9yaWdpbmFsS2V5cywgbW9kaWZpZWRWYXJpYWJsZXMpIHtcbiAgICBjb25zdCBjbGVhbmVkVmFyaWFibGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBvcmlnaW5hbEtleXMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICBjbGVhbmVkVmFyaWFibGVzW25hbWVdID0gbW9kaWZpZWRWYXJpYWJsZXNbbmFtZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGNsZWFuZWRWYXJpYWJsZXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjZURldGFpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/plugin/usageReporting/traceDetails.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/preventCsrf.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/preventCsrf.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.preventCsrf = exports.recommendedCsrfPreventionRequestHeaders = void 0;\nconst whatwg_mimetype_1 = __importDefault(__webpack_require__(/*! whatwg-mimetype */ \"(rsc)/./node_modules/whatwg-mimetype/lib/mime-type.js\"));\nconst internalErrorClasses_js_1 = __webpack_require__(/*! ./internalErrorClasses.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/internalErrorClasses.js\");\nexports.recommendedCsrfPreventionRequestHeaders = [\n    'x-apollo-operation-name',\n    'apollo-require-preflight',\n];\nconst NON_PREFLIGHTED_CONTENT_TYPES = [\n    'application/x-www-form-urlencoded',\n    'multipart/form-data',\n    'text/plain',\n];\nfunction preventCsrf(headers, csrfPreventionRequestHeaders) {\n    const contentType = headers.get('content-type');\n    if (contentType !== undefined) {\n        const contentTypeParsed = whatwg_mimetype_1.default.parse(contentType);\n        if (contentTypeParsed === null) {\n            return;\n        }\n        if (!NON_PREFLIGHTED_CONTENT_TYPES.includes(contentTypeParsed.essence)) {\n            return;\n        }\n    }\n    if (csrfPreventionRequestHeaders.some((header) => {\n        const value = headers.get(header);\n        return value !== undefined && value.length > 0;\n    })) {\n        return;\n    }\n    throw new internalErrorClasses_js_1.BadRequestError(`This operation has been blocked as a potential Cross-Site Request Forgery ` +\n        `(CSRF). Please either specify a 'content-type' header (with a type that ` +\n        `is not one of ${NON_PREFLIGHTED_CONTENT_TYPES.join(', ')}) or provide ` +\n        `a non-empty value for one of the following headers: ${csrfPreventionRequestHeaders.join(', ')}\\n`);\n}\nexports.preventCsrf = preventCsrf;\n//# sourceMappingURL=preventCsrf.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcHJldmVudENzcmYuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYjtBQUNBLDZDQUE2QztBQUM3QztBQUNBLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUIsR0FBRywrQ0FBK0M7QUFDckUsMENBQTBDLG1CQUFPLENBQUMsOEVBQWlCO0FBQ25FLGtDQUFrQyxtQkFBTyxDQUFDLHVHQUEyQjtBQUNyRSwrQ0FBK0M7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIseUNBQXlDO0FBQ2xFLCtEQUErRCx3Q0FBd0M7QUFDdkc7QUFDQSxtQkFBbUI7QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvcHJldmVudENzcmYuanM/NDE5MSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMucHJldmVudENzcmYgPSBleHBvcnRzLnJlY29tbWVuZGVkQ3NyZlByZXZlbnRpb25SZXF1ZXN0SGVhZGVycyA9IHZvaWQgMDtcbmNvbnN0IHdoYXR3Z19taW1ldHlwZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCJ3aGF0d2ctbWltZXR5cGVcIikpO1xuY29uc3QgaW50ZXJuYWxFcnJvckNsYXNzZXNfanNfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsRXJyb3JDbGFzc2VzLmpzXCIpO1xuZXhwb3J0cy5yZWNvbW1lbmRlZENzcmZQcmV2ZW50aW9uUmVxdWVzdEhlYWRlcnMgPSBbXG4gICAgJ3gtYXBvbGxvLW9wZXJhdGlvbi1uYW1lJyxcbiAgICAnYXBvbGxvLXJlcXVpcmUtcHJlZmxpZ2h0Jyxcbl07XG5jb25zdCBOT05fUFJFRkxJR0hURURfQ09OVEVOVF9UWVBFUyA9IFtcbiAgICAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyxcbiAgICAnbXVsdGlwYXJ0L2Zvcm0tZGF0YScsXG4gICAgJ3RleHQvcGxhaW4nLFxuXTtcbmZ1bmN0aW9uIHByZXZlbnRDc3JmKGhlYWRlcnMsIGNzcmZQcmV2ZW50aW9uUmVxdWVzdEhlYWRlcnMpIHtcbiAgICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgICBpZiAoY29udGVudFR5cGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBjb250ZW50VHlwZVBhcnNlZCA9IHdoYXR3Z19taW1ldHlwZV8xLmRlZmF1bHQucGFyc2UoY29udGVudFR5cGUpO1xuICAgICAgICBpZiAoY29udGVudFR5cGVQYXJzZWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIU5PTl9QUkVGTElHSFRFRF9DT05URU5UX1RZUEVTLmluY2x1ZGVzKGNvbnRlbnRUeXBlUGFyc2VkLmVzc2VuY2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNzcmZQcmV2ZW50aW9uUmVxdWVzdEhlYWRlcnMuc29tZSgoaGVhZGVyKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaGVhZGVycy5nZXQoaGVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUubGVuZ3RoID4gMDtcbiAgICB9KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBpbnRlcm5hbEVycm9yQ2xhc3Nlc19qc18xLkJhZFJlcXVlc3RFcnJvcihgVGhpcyBvcGVyYXRpb24gaGFzIGJlZW4gYmxvY2tlZCBhcyBhIHBvdGVudGlhbCBDcm9zcy1TaXRlIFJlcXVlc3QgRm9yZ2VyeSBgICtcbiAgICAgICAgYChDU1JGKS4gUGxlYXNlIGVpdGhlciBzcGVjaWZ5IGEgJ2NvbnRlbnQtdHlwZScgaGVhZGVyICh3aXRoIGEgdHlwZSB0aGF0IGAgK1xuICAgICAgICBgaXMgbm90IG9uZSBvZiAke05PTl9QUkVGTElHSFRFRF9DT05URU5UX1RZUEVTLmpvaW4oJywgJyl9KSBvciBwcm92aWRlIGAgK1xuICAgICAgICBgYSBub24tZW1wdHkgdmFsdWUgZm9yIG9uZSBvZiB0aGUgZm9sbG93aW5nIGhlYWRlcnM6ICR7Y3NyZlByZXZlbnRpb25SZXF1ZXN0SGVhZGVycy5qb2luKCcsICcpfVxcbmApO1xufVxuZXhwb3J0cy5wcmV2ZW50Q3NyZiA9IHByZXZlbnRDc3JmO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJldmVudENzcmYuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/preventCsrf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/requestPipeline.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/requestPipeline.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.processGraphQLRequest = exports.APQ_CACHE_PREFIX = void 0;\nconst utils_createhash_1 = __webpack_require__(/*! @apollo/utils.createhash */ \"(rsc)/./node_modules/@apollo/utils.createhash/dist/index.js\");\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst schemaInstrumentation_js_1 = __webpack_require__(/*! ./utils/schemaInstrumentation.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/schemaInstrumentation.js\");\nconst internalErrorClasses_js_1 = __webpack_require__(/*! ./internalErrorClasses.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/internalErrorClasses.js\");\nconst errorNormalize_js_1 = __webpack_require__(/*! ./errorNormalize.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/errorNormalize.js\");\nconst invokeHooks_js_1 = __webpack_require__(/*! ./utils/invokeHooks.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/invokeHooks.js\");\nconst makeGatewayGraphQLRequestContext_js_1 = __webpack_require__(/*! ./utils/makeGatewayGraphQLRequestContext.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/makeGatewayGraphQLRequestContext.js\");\nconst runHttpQuery_js_1 = __webpack_require__(/*! ./runHttpQuery.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/runHttpQuery.js\");\nconst isDefined_js_1 = __webpack_require__(/*! ./utils/isDefined.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/isDefined.js\");\nconst incrementalDeliveryPolyfill_js_1 = __webpack_require__(/*! ./incrementalDeliveryPolyfill.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/incrementalDeliveryPolyfill.js\");\nconst HeaderMap_js_1 = __webpack_require__(/*! ./utils/HeaderMap.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/HeaderMap.js\");\nexports.APQ_CACHE_PREFIX = 'apq:';\nfunction computeQueryHash(query) {\n    return (0, utils_createhash_1.createHash)('sha256').update(query).digest('hex');\n}\nfunction isBadUserInputGraphQLError(error) {\n    return (error.nodes?.length === 1 &&\n        error.nodes[0].kind === graphql_1.Kind.VARIABLE_DEFINITION &&\n        (error.message.startsWith(`Variable \"$${error.nodes[0].variable.name.value}\" got invalid value `) ||\n            error.message.startsWith(`Variable \"$${error.nodes[0].variable.name.value}\" of required type `) ||\n            error.message.startsWith(`Variable \"$${error.nodes[0].variable.name.value}\" of non-null type `)));\n}\nasync function processGraphQLRequest(schemaDerivedData, server, internals, requestContext) {\n    const requestListeners = (await Promise.all(internals.plugins.map((p) => p.requestDidStart?.(requestContext)))).filter(isDefined_js_1.isDefined);\n    const request = requestContext.request;\n    let { query, extensions } = request;\n    let queryHash;\n    requestContext.metrics.persistedQueryHit = false;\n    requestContext.metrics.persistedQueryRegister = false;\n    if (extensions?.persistedQuery) {\n        if (!internals.persistedQueries) {\n            return await sendErrorResponse([new internalErrorClasses_js_1.PersistedQueryNotSupportedError()]);\n        }\n        else if (extensions.persistedQuery.version !== 1) {\n            return await sendErrorResponse([\n                new graphql_1.GraphQLError('Unsupported persisted query version', {\n                    extensions: { http: (0, runHttpQuery_js_1.newHTTPGraphQLHead)(400) },\n                }),\n            ]);\n        }\n        queryHash = extensions.persistedQuery.sha256Hash;\n        if (query === undefined) {\n            query = await internals.persistedQueries.cache.get(queryHash);\n            if (query) {\n                requestContext.metrics.persistedQueryHit = true;\n            }\n            else {\n                return await sendErrorResponse([new internalErrorClasses_js_1.PersistedQueryNotFoundError()]);\n            }\n        }\n        else {\n            const computedQueryHash = computeQueryHash(query);\n            if (queryHash !== computedQueryHash) {\n                return await sendErrorResponse([\n                    new graphql_1.GraphQLError('provided sha does not match query', {\n                        extensions: { http: (0, runHttpQuery_js_1.newHTTPGraphQLHead)(400) },\n                    }),\n                ]);\n            }\n            requestContext.metrics.persistedQueryRegister = true;\n        }\n    }\n    else if (query) {\n        queryHash = computeQueryHash(query);\n    }\n    else {\n        return await sendErrorResponse([\n            new internalErrorClasses_js_1.BadRequestError('GraphQL operations must contain a non-empty `query` or a `persistedQuery` extension.'),\n        ]);\n    }\n    requestContext.queryHash = queryHash;\n    requestContext.source = query;\n    await Promise.all(requestListeners.map((l) => l.didResolveSource?.(requestContext)));\n    if (schemaDerivedData.documentStore) {\n        try {\n            requestContext.document = await schemaDerivedData.documentStore.get(schemaDerivedData.documentStoreKeyPrefix + queryHash);\n        }\n        catch (err) {\n            server.logger.warn('An error occurred while attempting to read from the documentStore. ' +\n                (0, errorNormalize_js_1.ensureError)(err).message);\n        }\n    }\n    if (!requestContext.document) {\n        const parsingDidEnd = await (0, invokeHooks_js_1.invokeDidStartHook)(requestListeners, async (l) => l.parsingDidStart?.(requestContext));\n        try {\n            requestContext.document = (0, graphql_1.parse)(query, internals.parseOptions);\n        }\n        catch (syntaxMaybeError) {\n            const error = (0, errorNormalize_js_1.ensureError)(syntaxMaybeError);\n            await parsingDidEnd(error);\n            return await sendErrorResponse([\n                new internalErrorClasses_js_1.SyntaxError((0, errorNormalize_js_1.ensureGraphQLError)(error)),\n            ]);\n        }\n        await parsingDidEnd();\n        if (internals.dangerouslyDisableValidation !== true) {\n            const validationDidEnd = await (0, invokeHooks_js_1.invokeDidStartHook)(requestListeners, async (l) => l.validationDidStart?.(requestContext));\n            const validationErrors = (0, graphql_1.validate)(schemaDerivedData.schema, requestContext.document, [...graphql_1.specifiedRules, ...internals.validationRules]);\n            if (validationErrors.length === 0) {\n                await validationDidEnd();\n            }\n            else {\n                await validationDidEnd(validationErrors);\n                return await sendErrorResponse(validationErrors.map((error) => new internalErrorClasses_js_1.ValidationError(error)));\n            }\n        }\n        if (schemaDerivedData.documentStore) {\n            Promise.resolve(schemaDerivedData.documentStore.set(schemaDerivedData.documentStoreKeyPrefix + queryHash, requestContext.document)).catch((err) => server.logger.warn('Could not store validated document. ' + err?.message || 0));\n        }\n    }\n    const operation = (0, graphql_1.getOperationAST)(requestContext.document, request.operationName);\n    requestContext.operation = operation || undefined;\n    requestContext.operationName = operation?.name?.value || null;\n    if (request.http?.method === 'GET' &&\n        operation?.operation &&\n        operation.operation !== 'query') {\n        return await sendErrorResponse([\n            new internalErrorClasses_js_1.BadRequestError(`GET requests only support query operations, not ${operation.operation} operations`, {\n                extensions: {\n                    http: { status: 405, headers: new HeaderMap_js_1.HeaderMap([['allow', 'POST']]) },\n                },\n            }),\n        ]);\n    }\n    try {\n        await Promise.all(requestListeners.map((l) => l.didResolveOperation?.(requestContext)));\n    }\n    catch (err) {\n        return await sendErrorResponse([(0, errorNormalize_js_1.ensureGraphQLError)(err)]);\n    }\n    if (requestContext.metrics.persistedQueryRegister &&\n        internals.persistedQueries) {\n        const ttl = internals.persistedQueries?.ttl;\n        Promise.resolve(internals.persistedQueries.cache.set(queryHash, query, ttl !== undefined\n            ? { ttl: internals.persistedQueries?.ttl }\n            : undefined)).catch(server.logger.warn);\n    }\n    const responseFromPlugin = await (0, invokeHooks_js_1.invokeHooksUntilDefinedAndNonNull)(requestListeners, async (l) => await l.responseForOperation?.(requestContext));\n    if (responseFromPlugin !== null) {\n        requestContext.response.body = responseFromPlugin.body;\n        (0, runHttpQuery_js_1.mergeHTTPGraphQLHead)(requestContext.response.http, responseFromPlugin.http);\n    }\n    else {\n        const executionListeners = (await Promise.all(requestListeners.map((l) => l.executionDidStart?.(requestContext)))).filter(isDefined_js_1.isDefined);\n        executionListeners.reverse();\n        if (executionListeners.some((l) => l.willResolveField)) {\n            const invokeWillResolveField = (...args) => (0, invokeHooks_js_1.invokeSyncDidStartHook)(executionListeners, (l) => l.willResolveField?.(...args));\n            Object.defineProperty(requestContext.contextValue, schemaInstrumentation_js_1.symbolExecutionDispatcherWillResolveField, { value: invokeWillResolveField });\n            if (internals.fieldResolver) {\n                Object.defineProperty(requestContext.contextValue, schemaInstrumentation_js_1.symbolUserFieldResolver, {\n                    value: internals.fieldResolver,\n                });\n            }\n            (0, schemaInstrumentation_js_1.enablePluginsForSchemaResolvers)(schemaDerivedData.schema);\n        }\n        try {\n            const fullResult = await execute(requestContext);\n            const result = 'singleResult' in fullResult\n                ? fullResult.singleResult\n                : fullResult.initialResult;\n            if (!requestContext.operation) {\n                if (!result.errors?.length) {\n                    throw new Error('Unexpected error: Apollo Server did not resolve an operation but execute did not return errors');\n                }\n                throw new internalErrorClasses_js_1.OperationResolutionError(result.errors[0]);\n            }\n            const resultErrors = result.errors?.map((e) => {\n                if (isBadUserInputGraphQLError(e) && e.extensions?.code == null) {\n                    return new internalErrorClasses_js_1.UserInputError(e);\n                }\n                return e;\n            });\n            if (resultErrors) {\n                await didEncounterErrors(resultErrors);\n            }\n            const { formattedErrors, httpFromErrors } = resultErrors\n                ? formatErrors(resultErrors)\n                : { formattedErrors: undefined, httpFromErrors: (0, runHttpQuery_js_1.newHTTPGraphQLHead)() };\n            if (internals.status400ForVariableCoercionErrors &&\n                resultErrors?.length &&\n                result.data === undefined &&\n                !httpFromErrors.status) {\n                httpFromErrors.status = 400;\n            }\n            (0, runHttpQuery_js_1.mergeHTTPGraphQLHead)(requestContext.response.http, httpFromErrors);\n            if ('singleResult' in fullResult) {\n                requestContext.response.body = {\n                    kind: 'single',\n                    singleResult: {\n                        ...result,\n                        errors: formattedErrors,\n                    },\n                };\n            }\n            else {\n                requestContext.response.body = {\n                    kind: 'incremental',\n                    initialResult: {\n                        ...fullResult.initialResult,\n                        errors: formattedErrors,\n                    },\n                    subsequentResults: fullResult.subsequentResults,\n                };\n            }\n        }\n        catch (executionMaybeError) {\n            const executionError = (0, errorNormalize_js_1.ensureError)(executionMaybeError);\n            await Promise.all(executionListeners.map((l) => l.executionDidEnd?.(executionError)));\n            return await sendErrorResponse([(0, errorNormalize_js_1.ensureGraphQLError)(executionError)]);\n        }\n        await Promise.all(executionListeners.map((l) => l.executionDidEnd?.()));\n    }\n    await invokeWillSendResponse();\n    if (!requestContext.response.body) {\n        throw Error('got to end of processGraphQLRequest without setting body?');\n    }\n    return requestContext.response;\n    async function execute(requestContext) {\n        const { request, document } = requestContext;\n        if (internals.__testing_incrementalExecutionResults) {\n            return internals.__testing_incrementalExecutionResults;\n        }\n        else if (internals.gatewayExecutor) {\n            const result = await internals.gatewayExecutor((0, makeGatewayGraphQLRequestContext_js_1.makeGatewayGraphQLRequestContext)(requestContext, server, internals));\n            return { singleResult: result };\n        }\n        else {\n            const resultOrResults = await (0, incrementalDeliveryPolyfill_js_1.executeIncrementally)({\n                schema: schemaDerivedData.schema,\n                document,\n                rootValue: typeof internals.rootValue === 'function'\n                    ? internals.rootValue(document)\n                    : internals.rootValue,\n                contextValue: requestContext.contextValue,\n                variableValues: request.variables,\n                operationName: request.operationName,\n                fieldResolver: internals.fieldResolver,\n            });\n            if ('initialResult' in resultOrResults) {\n                return {\n                    initialResult: resultOrResults.initialResult,\n                    subsequentResults: formatErrorsInSubsequentResults(resultOrResults.subsequentResults),\n                };\n            }\n            else {\n                return { singleResult: resultOrResults };\n            }\n        }\n    }\n    async function* formatErrorsInSubsequentResults(results) {\n        for await (const result of results) {\n            const payload = result.incremental\n                ? {\n                    ...result,\n                    incremental: await seriesAsyncMap(result.incremental, async (incrementalResult) => {\n                        const { errors } = incrementalResult;\n                        if (errors) {\n                            await Promise.all(requestListeners.map((l) => l.didEncounterSubsequentErrors?.(requestContext, errors)));\n                            return {\n                                ...incrementalResult,\n                                errors: formatErrors(errors).formattedErrors,\n                            };\n                        }\n                        return incrementalResult;\n                    }),\n                }\n                : result;\n            await Promise.all(requestListeners.map((l) => l.willSendSubsequentPayload?.(requestContext, payload)));\n            yield payload;\n        }\n    }\n    async function invokeWillSendResponse() {\n        await Promise.all(requestListeners.map((l) => l.willSendResponse?.(requestContext)));\n    }\n    async function didEncounterErrors(errors) {\n        requestContext.errors = errors;\n        return await Promise.all(requestListeners.map((l) => l.didEncounterErrors?.(requestContext)));\n    }\n    async function sendErrorResponse(errors) {\n        await didEncounterErrors(errors);\n        const { formattedErrors, httpFromErrors } = formatErrors(errors);\n        requestContext.response.body = {\n            kind: 'single',\n            singleResult: {\n                errors: formattedErrors,\n            },\n        };\n        (0, runHttpQuery_js_1.mergeHTTPGraphQLHead)(requestContext.response.http, httpFromErrors);\n        if (!requestContext.response.http.status) {\n            requestContext.response.http.status = 500;\n        }\n        await invokeWillSendResponse();\n        return requestContext.response;\n    }\n    function formatErrors(errors) {\n        return (0, errorNormalize_js_1.normalizeAndFormatErrors)(errors, {\n            formatError: internals.formatError,\n            includeStacktraceInErrorResponses: internals.includeStacktraceInErrorResponses,\n        });\n    }\n}\nexports.processGraphQLRequest = processGraphQLRequest;\nasync function seriesAsyncMap(ts, fn) {\n    const us = [];\n    for (const t of ts) {\n        const u = await fn(t);\n        us.push(u);\n    }\n    return us;\n}\n//# sourceMappingURL=requestPipeline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/requestPipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/runHttpQuery.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/runHttpQuery.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeHTTPGraphQLHead = exports.newHTTPGraphQLHead = exports.prettyJSONStringify = exports.runHttpQuery = void 0;\nconst ApolloServer_js_1 = __webpack_require__(/*! ./ApolloServer.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/ApolloServer.js\");\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst internalErrorClasses_js_1 = __webpack_require__(/*! ./internalErrorClasses.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/internalErrorClasses.js\");\nconst negotiator_1 = __importDefault(__webpack_require__(/*! negotiator */ \"(rsc)/./node_modules/negotiator/index.js\"));\nconst HeaderMap_js_1 = __webpack_require__(/*! ./utils/HeaderMap.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/HeaderMap.js\");\nfunction fieldIfString(o, fieldName) {\n    const value = o[fieldName];\n    if (typeof value === 'string') {\n        return value;\n    }\n    return undefined;\n}\nfunction searchParamIfSpecifiedOnce(searchParams, paramName) {\n    const values = searchParams.getAll(paramName);\n    switch (values.length) {\n        case 0:\n            return undefined;\n        case 1:\n            return values[0];\n        default:\n            throw new internalErrorClasses_js_1.BadRequestError(`The '${paramName}' search parameter may only be specified once.`);\n    }\n}\nfunction jsonParsedSearchParamIfSpecifiedOnce(searchParams, fieldName) {\n    const value = searchParamIfSpecifiedOnce(searchParams, fieldName);\n    if (value === undefined) {\n        return undefined;\n    }\n    let hopefullyRecord;\n    try {\n        hopefullyRecord = JSON.parse(value);\n    }\n    catch {\n        throw new internalErrorClasses_js_1.BadRequestError(`The ${fieldName} search parameter contains invalid JSON.`);\n    }\n    if (!isStringRecord(hopefullyRecord)) {\n        throw new internalErrorClasses_js_1.BadRequestError(`The ${fieldName} search parameter should contain a JSON-encoded object.`);\n    }\n    return hopefullyRecord;\n}\nfunction fieldIfRecord(o, fieldName) {\n    const value = o[fieldName];\n    if (isStringRecord(value)) {\n        return value;\n    }\n    return undefined;\n}\nfunction isStringRecord(o) {\n    return (!!o && typeof o === 'object' && !Buffer.isBuffer(o) && !Array.isArray(o));\n}\nfunction isNonEmptyStringRecord(o) {\n    return isStringRecord(o) && Object.keys(o).length > 0;\n}\nfunction ensureQueryIsStringOrMissing(query) {\n    if (!query || typeof query === 'string') {\n        return;\n    }\n    if (query.kind === graphql_1.Kind.DOCUMENT) {\n        throw new internalErrorClasses_js_1.BadRequestError(\"GraphQL queries must be strings. It looks like you're sending the \" +\n            'internal graphql-js representation of a parsed query in your ' +\n            'request instead of a request in the GraphQL query language. You ' +\n            'can convert an AST to a string using the `print` function from ' +\n            '`graphql`, or use a client like `apollo-client` which converts ' +\n            'the internal representation to a string for you.');\n    }\n    else {\n        throw new internalErrorClasses_js_1.BadRequestError('GraphQL queries must be strings.');\n    }\n}\nasync function runHttpQuery({ server, httpRequest, contextValue, schemaDerivedData, internals, sharedResponseHTTPGraphQLHead, }) {\n    let graphQLRequest;\n    switch (httpRequest.method) {\n        case 'POST': {\n            if (!isNonEmptyStringRecord(httpRequest.body)) {\n                throw new internalErrorClasses_js_1.BadRequestError('POST body missing, invalid Content-Type, or JSON object has no keys.');\n            }\n            ensureQueryIsStringOrMissing(httpRequest.body.query);\n            if (typeof httpRequest.body.variables === 'string') {\n                throw new internalErrorClasses_js_1.BadRequestError('`variables` in a POST body should be provided as an object, not a recursively JSON-encoded string.');\n            }\n            if (typeof httpRequest.body.extensions === 'string') {\n                throw new internalErrorClasses_js_1.BadRequestError('`extensions` in a POST body should be provided as an object, not a recursively JSON-encoded string.');\n            }\n            if ('extensions' in httpRequest.body &&\n                httpRequest.body.extensions !== null &&\n                !isStringRecord(httpRequest.body.extensions)) {\n                throw new internalErrorClasses_js_1.BadRequestError('`extensions` in a POST body must be an object if provided.');\n            }\n            if ('variables' in httpRequest.body &&\n                httpRequest.body.variables !== null &&\n                !isStringRecord(httpRequest.body.variables)) {\n                throw new internalErrorClasses_js_1.BadRequestError('`variables` in a POST body must be an object if provided.');\n            }\n            if ('operationName' in httpRequest.body &&\n                httpRequest.body.operationName !== null &&\n                typeof httpRequest.body.operationName !== 'string') {\n                throw new internalErrorClasses_js_1.BadRequestError('`operationName` in a POST body must be a string if provided.');\n            }\n            graphQLRequest = {\n                query: fieldIfString(httpRequest.body, 'query'),\n                operationName: fieldIfString(httpRequest.body, 'operationName'),\n                variables: fieldIfRecord(httpRequest.body, 'variables'),\n                extensions: fieldIfRecord(httpRequest.body, 'extensions'),\n                http: httpRequest,\n            };\n            break;\n        }\n        case 'GET': {\n            const searchParams = new URLSearchParams(httpRequest.search);\n            graphQLRequest = {\n                query: searchParamIfSpecifiedOnce(searchParams, 'query'),\n                operationName: searchParamIfSpecifiedOnce(searchParams, 'operationName'),\n                variables: jsonParsedSearchParamIfSpecifiedOnce(searchParams, 'variables'),\n                extensions: jsonParsedSearchParamIfSpecifiedOnce(searchParams, 'extensions'),\n                http: httpRequest,\n            };\n            break;\n        }\n        default:\n            throw new internalErrorClasses_js_1.BadRequestError('Apollo Server supports only GET/POST requests.', {\n                extensions: {\n                    http: {\n                        status: 405,\n                        headers: new HeaderMap_js_1.HeaderMap([['allow', 'GET, POST']]),\n                    },\n                },\n            });\n    }\n    const graphQLResponse = await (0, ApolloServer_js_1.internalExecuteOperation)({\n        server,\n        graphQLRequest,\n        internals,\n        schemaDerivedData,\n        sharedResponseHTTPGraphQLHead,\n    }, { contextValue });\n    if (graphQLResponse.body.kind === 'single') {\n        if (!graphQLResponse.http.headers.get('content-type')) {\n            const contentType = (0, ApolloServer_js_1.chooseContentTypeForSingleResultResponse)(httpRequest);\n            if (contentType === null) {\n                throw new internalErrorClasses_js_1.BadRequestError(`An 'accept' header was provided for this request which does not accept ` +\n                    `${ApolloServer_js_1.MEDIA_TYPES.APPLICATION_JSON} or ${ApolloServer_js_1.MEDIA_TYPES.APPLICATION_GRAPHQL_RESPONSE_JSON}`, { extensions: { http: { status: 406 } } });\n            }\n            graphQLResponse.http.headers.set('content-type', contentType);\n        }\n        return {\n            ...graphQLResponse.http,\n            body: {\n                kind: 'complete',\n                string: await internals.stringifyResult(orderExecutionResultFields(graphQLResponse.body.singleResult)),\n            },\n        };\n    }\n    const acceptHeader = httpRequest.headers.get('accept');\n    if (!(acceptHeader &&\n        new negotiator_1.default({\n            headers: { accept: httpRequest.headers.get('accept') },\n        }).mediaType([\n            ApolloServer_js_1.MEDIA_TYPES.MULTIPART_MIXED_NO_DEFER_SPEC,\n            ApolloServer_js_1.MEDIA_TYPES.MULTIPART_MIXED_EXPERIMENTAL,\n        ]) === ApolloServer_js_1.MEDIA_TYPES.MULTIPART_MIXED_EXPERIMENTAL)) {\n        throw new internalErrorClasses_js_1.BadRequestError('Apollo server received an operation that uses incremental delivery ' +\n            '(@defer or @stream), but the client does not accept multipart/mixed ' +\n            'HTTP responses. To enable incremental delivery support, add the HTTP ' +\n            \"header 'Accept: multipart/mixed; deferSpec=20220824'.\", { extensions: { http: { status: 406 } } });\n    }\n    graphQLResponse.http.headers.set('content-type', 'multipart/mixed; boundary=\"-\"; deferSpec=20220824');\n    return {\n        ...graphQLResponse.http,\n        body: {\n            kind: 'chunked',\n            asyncIterator: writeMultipartBody(graphQLResponse.body.initialResult, graphQLResponse.body.subsequentResults),\n        },\n    };\n}\nexports.runHttpQuery = runHttpQuery;\nasync function* writeMultipartBody(initialResult, subsequentResults) {\n    yield `\\r\\n---\\r\\ncontent-type: application/json; charset=utf-8\\r\\n\\r\\n${JSON.stringify(orderInitialIncrementalExecutionResultFields(initialResult))}\\r\\n---${initialResult.hasNext ? '' : '--'}\\r\\n`;\n    for await (const result of subsequentResults) {\n        yield `content-type: application/json; charset=utf-8\\r\\n\\r\\n${JSON.stringify(orderSubsequentIncrementalExecutionResultFields(result))}\\r\\n---${result.hasNext ? '' : '--'}\\r\\n`;\n    }\n}\nfunction orderExecutionResultFields(result) {\n    return {\n        errors: result.errors,\n        data: result.data,\n        extensions: result.extensions,\n    };\n}\nfunction orderInitialIncrementalExecutionResultFields(result) {\n    return {\n        hasNext: result.hasNext,\n        errors: result.errors,\n        data: result.data,\n        incremental: orderIncrementalResultFields(result.incremental),\n        extensions: result.extensions,\n    };\n}\nfunction orderSubsequentIncrementalExecutionResultFields(result) {\n    return {\n        hasNext: result.hasNext,\n        incremental: orderIncrementalResultFields(result.incremental),\n        extensions: result.extensions,\n    };\n}\nfunction orderIncrementalResultFields(incremental) {\n    return incremental?.map((i) => ({\n        hasNext: i.hasNext,\n        errors: i.errors,\n        path: i.path,\n        label: i.label,\n        data: i.data,\n        items: i.items,\n        extensions: i.extensions,\n    }));\n}\nfunction prettyJSONStringify(value) {\n    return JSON.stringify(value) + '\\n';\n}\nexports.prettyJSONStringify = prettyJSONStringify;\nfunction newHTTPGraphQLHead(status) {\n    return {\n        status,\n        headers: new HeaderMap_js_1.HeaderMap(),\n    };\n}\nexports.newHTTPGraphQLHead = newHTTPGraphQLHead;\nfunction mergeHTTPGraphQLHead(target, source) {\n    if (source.status) {\n        target.status = source.status;\n    }\n    if (source.headers) {\n        for (const [name, value] of source.headers) {\n            target.headers.set(name, value);\n        }\n    }\n}\nexports.mergeHTTPGraphQLHead = mergeHTTPGraphQLHead;\n//# sourceMappingURL=runHttpQuery.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/runHttpQuery.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/utils/HeaderMap.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/utils/HeaderMap.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HeaderMap = void 0;\nclass HeaderMap extends Map {\n    constructor() {\n        super(...arguments);\n        this.__identity = Symbol('HeaderMap');\n    }\n    set(key, value) {\n        return super.set(key.toLowerCase(), value);\n    }\n    get(key) {\n        return super.get(key.toLowerCase());\n    }\n    delete(key) {\n        return super.delete(key.toLowerCase());\n    }\n    has(key) {\n        return super.has(key.toLowerCase());\n    }\n}\nexports.HeaderMap = HeaderMap;\n//# sourceMappingURL=HeaderMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvdXRpbHMvSGVhZGVyTWFwLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvdXRpbHMvSGVhZGVyTWFwLmpzPzU1ZTQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkhlYWRlck1hcCA9IHZvaWQgMDtcbmNsYXNzIEhlYWRlck1hcCBleHRlbmRzIE1hcCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKC4uLmFyZ3VtZW50cyk7XG4gICAgICAgIHRoaXMuX19pZGVudGl0eSA9IFN5bWJvbCgnSGVhZGVyTWFwJyk7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBzdXBlci5zZXQoa2V5LnRvTG93ZXJDYXNlKCksIHZhbHVlKTtcbiAgICB9XG4gICAgZ2V0KGtleSkge1xuICAgICAgICByZXR1cm4gc3VwZXIuZ2V0KGtleS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG4gICAgZGVsZXRlKGtleSkge1xuICAgICAgICByZXR1cm4gc3VwZXIuZGVsZXRlKGtleS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgICByZXR1cm4gc3VwZXIuaGFzKGtleS50b0xvd2VyQ2FzZSgpKTtcbiAgICB9XG59XG5leHBvcnRzLkhlYWRlck1hcCA9IEhlYWRlck1hcDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhlYWRlck1hcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/utils/HeaderMap.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/utils/UnreachableCaseError.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/utils/UnreachableCaseError.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UnreachableCaseError = void 0;\nclass UnreachableCaseError extends Error {\n    constructor(val) {\n        super(`Unreachable case: ${val}`);\n    }\n}\nexports.UnreachableCaseError = UnreachableCaseError;\n//# sourceMappingURL=UnreachableCaseError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvdXRpbHMvVW5yZWFjaGFibGVDYXNlRXJyb3IuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCO0FBQ0E7QUFDQSxtQ0FBbUMsSUFBSTtBQUN2QztBQUNBO0FBQ0EsNEJBQTRCO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvY2pzL3V0aWxzL1VucmVhY2hhYmxlQ2FzZUVycm9yLmpzPzE3NmUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlVucmVhY2hhYmxlQ2FzZUVycm9yID0gdm9pZCAwO1xuY2xhc3MgVW5yZWFjaGFibGVDYXNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IodmFsKSB7XG4gICAgICAgIHN1cGVyKGBVbnJlYWNoYWJsZSBjYXNlOiAke3ZhbH1gKTtcbiAgICB9XG59XG5leHBvcnRzLlVucmVhY2hhYmxlQ2FzZUVycm9yID0gVW5yZWFjaGFibGVDYXNlRXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnJlYWNoYWJsZUNhc2VFcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/utils/UnreachableCaseError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/utils/computeCoreSchemaHash.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/utils/computeCoreSchemaHash.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.computeCoreSchemaHash = void 0;\nconst utils_createhash_1 = __webpack_require__(/*! @apollo/utils.createhash */ \"(rsc)/./node_modules/@apollo/utils.createhash/dist/index.js\");\nfunction computeCoreSchemaHash(schema) {\n    return (0, utils_createhash_1.createHash)('sha256').update(schema).digest('hex');\n}\nexports.computeCoreSchemaHash = computeCoreSchemaHash;\n//# sourceMappingURL=computeCoreSchemaHash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvdXRpbHMvY29tcHV0ZUNvcmVTY2hlbWFIYXNoLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDZCQUE2QjtBQUM3QiwyQkFBMkIsbUJBQU8sQ0FBQyw2RkFBMEI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0EsNkJBQTZCO0FBQzdCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvY2pzL3V0aWxzL2NvbXB1dGVDb3JlU2NoZW1hSGFzaC5qcz9hZTY1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jb21wdXRlQ29yZVNjaGVtYUhhc2ggPSB2b2lkIDA7XG5jb25zdCB1dGlsc19jcmVhdGVoYXNoXzEgPSByZXF1aXJlKFwiQGFwb2xsby91dGlscy5jcmVhdGVoYXNoXCIpO1xuZnVuY3Rpb24gY29tcHV0ZUNvcmVTY2hlbWFIYXNoKHNjaGVtYSkge1xuICAgIHJldHVybiAoMCwgdXRpbHNfY3JlYXRlaGFzaF8xLmNyZWF0ZUhhc2gpKCdzaGEyNTYnKS51cGRhdGUoc2NoZW1hKS5kaWdlc3QoJ2hleCcpO1xufVxuZXhwb3J0cy5jb21wdXRlQ29yZVNjaGVtYUhhc2ggPSBjb21wdXRlQ29yZVNjaGVtYUhhc2g7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wdXRlQ29yZVNjaGVtYUhhc2guanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/utils/computeCoreSchemaHash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/utils/invokeHooks.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/utils/invokeHooks.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.invokeHooksUntilDefinedAndNonNull = exports.invokeSyncDidStartHook = exports.invokeDidStartHook = void 0;\nconst isDefined_js_1 = __webpack_require__(/*! ./isDefined.js */ \"(rsc)/./node_modules/@apollo/server/dist/cjs/utils/isDefined.js\");\nasync function invokeDidStartHook(targets, hook) {\n    const didEndHooks = (await Promise.all(targets.map((target) => hook(target)))).filter(isDefined_js_1.isDefined);\n    didEndHooks.reverse();\n    return async (...args) => {\n        for (const didEndHook of didEndHooks) {\n            didEndHook(...args);\n        }\n    };\n}\nexports.invokeDidStartHook = invokeDidStartHook;\nfunction invokeSyncDidStartHook(targets, hook) {\n    const didEndHooks = targets\n        .map((target) => hook(target))\n        .filter(isDefined_js_1.isDefined);\n    didEndHooks.reverse();\n    return (...args) => {\n        for (const didEndHook of didEndHooks) {\n            didEndHook(...args);\n        }\n    };\n}\nexports.invokeSyncDidStartHook = invokeSyncDidStartHook;\nasync function invokeHooksUntilDefinedAndNonNull(targets, hook) {\n    for (const target of targets) {\n        const value = await hook(target);\n        if (value != null) {\n            return value;\n        }\n    }\n    return null;\n}\nexports.invokeHooksUntilDefinedAndNonNull = invokeHooksUntilDefinedAndNonNull;\n//# sourceMappingURL=invokeHooks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvdXRpbHMvaW52b2tlSG9va3MuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QseUNBQXlDLEdBQUcsOEJBQThCLEdBQUcsMEJBQTBCO0FBQ3ZHLHVCQUF1QixtQkFBTyxDQUFDLHVGQUFnQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhCQUE4QjtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUM7QUFDekMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvdXRpbHMvaW52b2tlSG9va3MuanM/MDM1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuaW52b2tlSG9va3NVbnRpbERlZmluZWRBbmROb25OdWxsID0gZXhwb3J0cy5pbnZva2VTeW5jRGlkU3RhcnRIb29rID0gZXhwb3J0cy5pbnZva2VEaWRTdGFydEhvb2sgPSB2b2lkIDA7XG5jb25zdCBpc0RlZmluZWRfanNfMSA9IHJlcXVpcmUoXCIuL2lzRGVmaW5lZC5qc1wiKTtcbmFzeW5jIGZ1bmN0aW9uIGludm9rZURpZFN0YXJ0SG9vayh0YXJnZXRzLCBob29rKSB7XG4gICAgY29uc3QgZGlkRW5kSG9va3MgPSAoYXdhaXQgUHJvbWlzZS5hbGwodGFyZ2V0cy5tYXAoKHRhcmdldCkgPT4gaG9vayh0YXJnZXQpKSkpLmZpbHRlcihpc0RlZmluZWRfanNfMS5pc0RlZmluZWQpO1xuICAgIGRpZEVuZEhvb2tzLnJldmVyc2UoKTtcbiAgICByZXR1cm4gYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBkaWRFbmRIb29rIG9mIGRpZEVuZEhvb2tzKSB7XG4gICAgICAgICAgICBkaWRFbmRIb29rKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydHMuaW52b2tlRGlkU3RhcnRIb29rID0gaW52b2tlRGlkU3RhcnRIb29rO1xuZnVuY3Rpb24gaW52b2tlU3luY0RpZFN0YXJ0SG9vayh0YXJnZXRzLCBob29rKSB7XG4gICAgY29uc3QgZGlkRW5kSG9va3MgPSB0YXJnZXRzXG4gICAgICAgIC5tYXAoKHRhcmdldCkgPT4gaG9vayh0YXJnZXQpKVxuICAgICAgICAuZmlsdGVyKGlzRGVmaW5lZF9qc18xLmlzRGVmaW5lZCk7XG4gICAgZGlkRW5kSG9va3MucmV2ZXJzZSgpO1xuICAgIHJldHVybiAoLi4uYXJncykgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGRpZEVuZEhvb2sgb2YgZGlkRW5kSG9va3MpIHtcbiAgICAgICAgICAgIGRpZEVuZEhvb2soLi4uYXJncyk7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZXhwb3J0cy5pbnZva2VTeW5jRGlkU3RhcnRIb29rID0gaW52b2tlU3luY0RpZFN0YXJ0SG9vaztcbmFzeW5jIGZ1bmN0aW9uIGludm9rZUhvb2tzVW50aWxEZWZpbmVkQW5kTm9uTnVsbCh0YXJnZXRzLCBob29rKSB7XG4gICAgZm9yIChjb25zdCB0YXJnZXQgb2YgdGFyZ2V0cykge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGF3YWl0IGhvb2sodGFyZ2V0KTtcbiAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbnVsbDtcbn1cbmV4cG9ydHMuaW52b2tlSG9va3NVbnRpbERlZmluZWRBbmROb25OdWxsID0gaW52b2tlSG9va3NVbnRpbERlZmluZWRBbmROb25OdWxsO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW52b2tlSG9va3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/utils/invokeHooks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/utils/isDefined.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/utils/isDefined.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.isDefined = void 0;\nfunction isDefined(t) {\n    return t != null;\n}\nexports.isDefined = isDefined;\n//# sourceMappingURL=isDefined.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvdXRpbHMvaXNEZWZpbmVkLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvdXRpbHMvaXNEZWZpbmVkLmpzPzExZDkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmlzRGVmaW5lZCA9IHZvaWQgMDtcbmZ1bmN0aW9uIGlzRGVmaW5lZCh0KSB7XG4gICAgcmV0dXJuIHQgIT0gbnVsbDtcbn1cbmV4cG9ydHMuaXNEZWZpbmVkID0gaXNEZWZpbmVkO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNEZWZpbmVkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/utils/isDefined.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/utils/makeGatewayGraphQLRequestContext.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/utils/makeGatewayGraphQLRequestContext.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeGatewayGraphQLRequestContext = void 0;\nfunction makeGatewayGraphQLRequestContext(as4RequestContext, server, internals) {\n    const request = {};\n    if ('query' in as4RequestContext.request) {\n        request.query = as4RequestContext.request.query;\n    }\n    if ('operationName' in as4RequestContext.request) {\n        request.operationName = as4RequestContext.request.operationName;\n    }\n    if ('variables' in as4RequestContext.request) {\n        request.variables = as4RequestContext.request.variables;\n    }\n    if ('extensions' in as4RequestContext.request) {\n        request.extensions = as4RequestContext.request.extensions;\n    }\n    if (as4RequestContext.request.http) {\n        const as4http = as4RequestContext.request.http;\n        const needQuestion = as4http.search !== '' && !as4http.search.startsWith('?');\n        request.http = {\n            method: as4http.method,\n            url: `https://unknown-url.invalid/${needQuestion ? '?' : ''}${as4http.search}`,\n            headers: new FetcherHeadersForHeaderMap(as4http.headers),\n        };\n    }\n    const response = {\n        http: {\n            headers: new FetcherHeadersForHeaderMap(as4RequestContext.response.http.headers),\n            get status() {\n                return as4RequestContext.response.http.status;\n            },\n            set status(newStatus) {\n                as4RequestContext.response.http.status = newStatus;\n            },\n        },\n    };\n    return {\n        request,\n        response,\n        logger: server.logger,\n        schema: as4RequestContext.schema,\n        schemaHash: 'schemaHash no longer exists in Apollo Server 4',\n        context: as4RequestContext.contextValue,\n        cache: server.cache,\n        queryHash: as4RequestContext.queryHash,\n        document: as4RequestContext.document,\n        source: as4RequestContext.source,\n        operationName: as4RequestContext.operationName,\n        operation: as4RequestContext.operation,\n        errors: as4RequestContext.errors,\n        metrics: as4RequestContext.metrics,\n        debug: internals.includeStacktraceInErrorResponses,\n        overallCachePolicy: as4RequestContext.overallCachePolicy,\n        requestIsBatched: as4RequestContext.requestIsBatched,\n    };\n}\nexports.makeGatewayGraphQLRequestContext = makeGatewayGraphQLRequestContext;\nclass FetcherHeadersForHeaderMap {\n    constructor(map) {\n        this.map = map;\n    }\n    append(name, value) {\n        if (this.map.has(name)) {\n            this.map.set(name, this.map.get(name) + ', ' + value);\n        }\n        else {\n            this.map.set(name, value);\n        }\n    }\n    delete(name) {\n        this.map.delete(name);\n    }\n    get(name) {\n        return this.map.get(name) ?? null;\n    }\n    has(name) {\n        return this.map.has(name);\n    }\n    set(name, value) {\n        this.map.set(name, value);\n    }\n    entries() {\n        return this.map.entries();\n    }\n    keys() {\n        return this.map.keys();\n    }\n    values() {\n        return this.map.values();\n    }\n    [Symbol.iterator]() {\n        return this.map.entries();\n    }\n}\n//# sourceMappingURL=makeGatewayGraphQLRequestContext.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvdXRpbHMvbWFrZUdhdGV3YXlHcmFwaFFMUmVxdWVzdENvbnRleHQuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELHdCQUF3QixFQUFFLGVBQWU7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3Q0FBd0M7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2Nqcy91dGlscy9tYWtlR2F0ZXdheUdyYXBoUUxSZXF1ZXN0Q29udGV4dC5qcz8zOWUxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tYWtlR2F0ZXdheUdyYXBoUUxSZXF1ZXN0Q29udGV4dCA9IHZvaWQgMDtcbmZ1bmN0aW9uIG1ha2VHYXRld2F5R3JhcGhRTFJlcXVlc3RDb250ZXh0KGFzNFJlcXVlc3RDb250ZXh0LCBzZXJ2ZXIsIGludGVybmFscykge1xuICAgIGNvbnN0IHJlcXVlc3QgPSB7fTtcbiAgICBpZiAoJ3F1ZXJ5JyBpbiBhczRSZXF1ZXN0Q29udGV4dC5yZXF1ZXN0KSB7XG4gICAgICAgIHJlcXVlc3QucXVlcnkgPSBhczRSZXF1ZXN0Q29udGV4dC5yZXF1ZXN0LnF1ZXJ5O1xuICAgIH1cbiAgICBpZiAoJ29wZXJhdGlvbk5hbWUnIGluIGFzNFJlcXVlc3RDb250ZXh0LnJlcXVlc3QpIHtcbiAgICAgICAgcmVxdWVzdC5vcGVyYXRpb25OYW1lID0gYXM0UmVxdWVzdENvbnRleHQucmVxdWVzdC5vcGVyYXRpb25OYW1lO1xuICAgIH1cbiAgICBpZiAoJ3ZhcmlhYmxlcycgaW4gYXM0UmVxdWVzdENvbnRleHQucmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0LnZhcmlhYmxlcyA9IGFzNFJlcXVlc3RDb250ZXh0LnJlcXVlc3QudmFyaWFibGVzO1xuICAgIH1cbiAgICBpZiAoJ2V4dGVuc2lvbnMnIGluIGFzNFJlcXVlc3RDb250ZXh0LnJlcXVlc3QpIHtcbiAgICAgICAgcmVxdWVzdC5leHRlbnNpb25zID0gYXM0UmVxdWVzdENvbnRleHQucmVxdWVzdC5leHRlbnNpb25zO1xuICAgIH1cbiAgICBpZiAoYXM0UmVxdWVzdENvbnRleHQucmVxdWVzdC5odHRwKSB7XG4gICAgICAgIGNvbnN0IGFzNGh0dHAgPSBhczRSZXF1ZXN0Q29udGV4dC5yZXF1ZXN0Lmh0dHA7XG4gICAgICAgIGNvbnN0IG5lZWRRdWVzdGlvbiA9IGFzNGh0dHAuc2VhcmNoICE9PSAnJyAmJiAhYXM0aHR0cC5zZWFyY2guc3RhcnRzV2l0aCgnPycpO1xuICAgICAgICByZXF1ZXN0Lmh0dHAgPSB7XG4gICAgICAgICAgICBtZXRob2Q6IGFzNGh0dHAubWV0aG9kLFxuICAgICAgICAgICAgdXJsOiBgaHR0cHM6Ly91bmtub3duLXVybC5pbnZhbGlkLyR7bmVlZFF1ZXN0aW9uID8gJz8nIDogJyd9JHthczRodHRwLnNlYXJjaH1gLFxuICAgICAgICAgICAgaGVhZGVyczogbmV3IEZldGNoZXJIZWFkZXJzRm9ySGVhZGVyTWFwKGFzNGh0dHAuaGVhZGVycyksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBodHRwOiB7XG4gICAgICAgICAgICBoZWFkZXJzOiBuZXcgRmV0Y2hlckhlYWRlcnNGb3JIZWFkZXJNYXAoYXM0UmVxdWVzdENvbnRleHQucmVzcG9uc2UuaHR0cC5oZWFkZXJzKSxcbiAgICAgICAgICAgIGdldCBzdGF0dXMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFzNFJlcXVlc3RDb250ZXh0LnJlc3BvbnNlLmh0dHAuc3RhdHVzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCBzdGF0dXMobmV3U3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgYXM0UmVxdWVzdENvbnRleHQucmVzcG9uc2UuaHR0cC5zdGF0dXMgPSBuZXdTdGF0dXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgIGxvZ2dlcjogc2VydmVyLmxvZ2dlcixcbiAgICAgICAgc2NoZW1hOiBhczRSZXF1ZXN0Q29udGV4dC5zY2hlbWEsXG4gICAgICAgIHNjaGVtYUhhc2g6ICdzY2hlbWFIYXNoIG5vIGxvbmdlciBleGlzdHMgaW4gQXBvbGxvIFNlcnZlciA0JyxcbiAgICAgICAgY29udGV4dDogYXM0UmVxdWVzdENvbnRleHQuY29udGV4dFZhbHVlLFxuICAgICAgICBjYWNoZTogc2VydmVyLmNhY2hlLFxuICAgICAgICBxdWVyeUhhc2g6IGFzNFJlcXVlc3RDb250ZXh0LnF1ZXJ5SGFzaCxcbiAgICAgICAgZG9jdW1lbnQ6IGFzNFJlcXVlc3RDb250ZXh0LmRvY3VtZW50LFxuICAgICAgICBzb3VyY2U6IGFzNFJlcXVlc3RDb250ZXh0LnNvdXJjZSxcbiAgICAgICAgb3BlcmF0aW9uTmFtZTogYXM0UmVxdWVzdENvbnRleHQub3BlcmF0aW9uTmFtZSxcbiAgICAgICAgb3BlcmF0aW9uOiBhczRSZXF1ZXN0Q29udGV4dC5vcGVyYXRpb24sXG4gICAgICAgIGVycm9yczogYXM0UmVxdWVzdENvbnRleHQuZXJyb3JzLFxuICAgICAgICBtZXRyaWNzOiBhczRSZXF1ZXN0Q29udGV4dC5tZXRyaWNzLFxuICAgICAgICBkZWJ1ZzogaW50ZXJuYWxzLmluY2x1ZGVTdGFja3RyYWNlSW5FcnJvclJlc3BvbnNlcyxcbiAgICAgICAgb3ZlcmFsbENhY2hlUG9saWN5OiBhczRSZXF1ZXN0Q29udGV4dC5vdmVyYWxsQ2FjaGVQb2xpY3ksXG4gICAgICAgIHJlcXVlc3RJc0JhdGNoZWQ6IGFzNFJlcXVlc3RDb250ZXh0LnJlcXVlc3RJc0JhdGNoZWQsXG4gICAgfTtcbn1cbmV4cG9ydHMubWFrZUdhdGV3YXlHcmFwaFFMUmVxdWVzdENvbnRleHQgPSBtYWtlR2F0ZXdheUdyYXBoUUxSZXF1ZXN0Q29udGV4dDtcbmNsYXNzIEZldGNoZXJIZWFkZXJzRm9ySGVhZGVyTWFwIHtcbiAgICBjb25zdHJ1Y3RvcihtYXApIHtcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgfVxuICAgIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5tYXAuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5zZXQobmFtZSwgdGhpcy5tYXAuZ2V0KG5hbWUpICsgJywgJyArIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWFwLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVsZXRlKG5hbWUpIHtcbiAgICAgICAgdGhpcy5tYXAuZGVsZXRlKG5hbWUpO1xuICAgIH1cbiAgICBnZXQobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KG5hbWUpID8/IG51bGw7XG4gICAgfVxuICAgIGhhcyhuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5oYXMobmFtZSk7XG4gICAgfVxuICAgIHNldChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLm1hcC5zZXQobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgICBlbnRyaWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuZW50cmllcygpO1xuICAgIH1cbiAgICBrZXlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAua2V5cygpO1xuICAgIH1cbiAgICB2YWx1ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC52YWx1ZXMoKTtcbiAgICB9XG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5lbnRyaWVzKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFrZUdhdGV3YXlHcmFwaFFMUmVxdWVzdENvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/utils/makeGatewayGraphQLRequestContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/utils/resolvable.js":
/*!******************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/utils/resolvable.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports[\"default\"] = () => {\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject) => {\n        resolve = _resolve;\n        reject = _reject;\n    });\n    promise.resolve = resolve;\n    promise.reject = reject;\n    return promise;\n};\n//# sourceMappingURL=resolvable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvdXRpbHMvcmVzb2x2YWJsZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxrQkFBZTtBQUNmO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2Nqcy91dGlscy9yZXNvbHZhYmxlLmpzPzI3ODciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHQgPSAoKSA9PiB7XG4gICAgbGV0IHJlc29sdmU7XG4gICAgbGV0IHJlamVjdDtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKF9yZXNvbHZlLCBfcmVqZWN0KSA9PiB7XG4gICAgICAgIHJlc29sdmUgPSBfcmVzb2x2ZTtcbiAgICAgICAgcmVqZWN0ID0gX3JlamVjdDtcbiAgICB9KTtcbiAgICBwcm9taXNlLnJlc29sdmUgPSByZXNvbHZlO1xuICAgIHByb21pc2UucmVqZWN0ID0gcmVqZWN0O1xuICAgIHJldHVybiBwcm9taXNlO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmFibGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/utils/resolvable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/utils/schemaInstrumentation.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/utils/schemaInstrumentation.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.whenResultIsFinished = exports.pluginsEnabledForSchemaResolvers = exports.enablePluginsForSchemaResolvers = exports.symbolUserFieldResolver = exports.symbolExecutionDispatcherWillResolveField = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nexports.symbolExecutionDispatcherWillResolveField = Symbol('apolloServerExecutionDispatcherWillResolveField');\nexports.symbolUserFieldResolver = Symbol('apolloServerUserFieldResolver');\nconst symbolPluginsEnabled = Symbol('apolloServerPluginsEnabled');\nfunction enablePluginsForSchemaResolvers(schema) {\n    if (pluginsEnabledForSchemaResolvers(schema)) {\n        return schema;\n    }\n    Object.defineProperty(schema, symbolPluginsEnabled, {\n        value: true,\n    });\n    const typeMap = schema.getTypeMap();\n    Object.values(typeMap).forEach((type) => {\n        if (!(0, graphql_1.getNamedType)(type).name.startsWith('__') &&\n            type instanceof graphql_1.GraphQLObjectType) {\n            const fields = type.getFields();\n            Object.values(fields).forEach((field) => {\n                wrapField(field);\n            });\n        }\n    });\n    return schema;\n}\nexports.enablePluginsForSchemaResolvers = enablePluginsForSchemaResolvers;\nfunction pluginsEnabledForSchemaResolvers(schema) {\n    return !!schema[symbolPluginsEnabled];\n}\nexports.pluginsEnabledForSchemaResolvers = pluginsEnabledForSchemaResolvers;\nfunction wrapField(field) {\n    const originalFieldResolve = field.resolve;\n    field.resolve = (source, args, contextValue, info) => {\n        const willResolveField = contextValue?.[exports.symbolExecutionDispatcherWillResolveField];\n        const userFieldResolver = contextValue?.[exports.symbolUserFieldResolver];\n        const didResolveField = typeof willResolveField === 'function' &&\n            willResolveField({ source, args, contextValue, info });\n        const fieldResolver = originalFieldResolve || userFieldResolver || graphql_1.defaultFieldResolver;\n        try {\n            const result = fieldResolver(source, args, contextValue, info);\n            if (typeof didResolveField === 'function') {\n                whenResultIsFinished(result, didResolveField);\n            }\n            return result;\n        }\n        catch (error) {\n            if (typeof didResolveField === 'function') {\n                didResolveField(error);\n            }\n            throw error;\n        }\n    };\n}\nfunction isPromise(x) {\n    return x && typeof x.then === 'function';\n}\nfunction whenResultIsFinished(result, callback) {\n    if (isPromise(result)) {\n        result.then((r) => whenResultIsFinished(r, callback), (err) => callback(err));\n    }\n    else if (Array.isArray(result)) {\n        if (result.some(isPromise)) {\n            Promise.all(result).then((r) => callback(null, r), (err) => callback(err));\n        }\n        else {\n            callback(null, result);\n        }\n    }\n    else {\n        callback(null, result);\n    }\n}\nexports.whenResultIsFinished = whenResultIsFinished;\n//# sourceMappingURL=schemaInstrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvdXRpbHMvc2NoZW1hSW5zdHJ1bWVudGF0aW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELDRCQUE0QixHQUFHLHdDQUF3QyxHQUFHLHVDQUF1QyxHQUFHLCtCQUErQixHQUFHLGlEQUFpRDtBQUN2TSxrQkFBa0IsbUJBQU8sQ0FBQyx1REFBUztBQUNuQyxpREFBaUQ7QUFDakQsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLCtCQUErQixrQ0FBa0M7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QjtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2Nqcy91dGlscy9zY2hlbWFJbnN0cnVtZW50YXRpb24uanM/YmE0ZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMud2hlblJlc3VsdElzRmluaXNoZWQgPSBleHBvcnRzLnBsdWdpbnNFbmFibGVkRm9yU2NoZW1hUmVzb2x2ZXJzID0gZXhwb3J0cy5lbmFibGVQbHVnaW5zRm9yU2NoZW1hUmVzb2x2ZXJzID0gZXhwb3J0cy5zeW1ib2xVc2VyRmllbGRSZXNvbHZlciA9IGV4cG9ydHMuc3ltYm9sRXhlY3V0aW9uRGlzcGF0Y2hlcldpbGxSZXNvbHZlRmllbGQgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmV4cG9ydHMuc3ltYm9sRXhlY3V0aW9uRGlzcGF0Y2hlcldpbGxSZXNvbHZlRmllbGQgPSBTeW1ib2woJ2Fwb2xsb1NlcnZlckV4ZWN1dGlvbkRpc3BhdGNoZXJXaWxsUmVzb2x2ZUZpZWxkJyk7XG5leHBvcnRzLnN5bWJvbFVzZXJGaWVsZFJlc29sdmVyID0gU3ltYm9sKCdhcG9sbG9TZXJ2ZXJVc2VyRmllbGRSZXNvbHZlcicpO1xuY29uc3Qgc3ltYm9sUGx1Z2luc0VuYWJsZWQgPSBTeW1ib2woJ2Fwb2xsb1NlcnZlclBsdWdpbnNFbmFibGVkJyk7XG5mdW5jdGlvbiBlbmFibGVQbHVnaW5zRm9yU2NoZW1hUmVzb2x2ZXJzKHNjaGVtYSkge1xuICAgIGlmIChwbHVnaW5zRW5hYmxlZEZvclNjaGVtYVJlc29sdmVycyhzY2hlbWEpKSB7XG4gICAgICAgIHJldHVybiBzY2hlbWE7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShzY2hlbWEsIHN5bWJvbFBsdWdpbnNFbmFibGVkLCB7XG4gICAgICAgIHZhbHVlOiB0cnVlLFxuICAgIH0pO1xuICAgIGNvbnN0IHR5cGVNYXAgPSBzY2hlbWEuZ2V0VHlwZU1hcCgpO1xuICAgIE9iamVjdC52YWx1ZXModHlwZU1hcCkuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgICAgICBpZiAoISgwLCBncmFwaHFsXzEuZ2V0TmFtZWRUeXBlKSh0eXBlKS5uYW1lLnN0YXJ0c1dpdGgoJ19fJykgJiZcbiAgICAgICAgICAgIHR5cGUgaW5zdGFuY2VvZiBncmFwaHFsXzEuR3JhcGhRTE9iamVjdFR5cGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IHR5cGUuZ2V0RmllbGRzKCk7XG4gICAgICAgICAgICBPYmplY3QudmFsdWVzKGZpZWxkcykuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgICAgICAgICAgICAgICB3cmFwRmllbGQoZmllbGQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gc2NoZW1hO1xufVxuZXhwb3J0cy5lbmFibGVQbHVnaW5zRm9yU2NoZW1hUmVzb2x2ZXJzID0gZW5hYmxlUGx1Z2luc0ZvclNjaGVtYVJlc29sdmVycztcbmZ1bmN0aW9uIHBsdWdpbnNFbmFibGVkRm9yU2NoZW1hUmVzb2x2ZXJzKHNjaGVtYSkge1xuICAgIHJldHVybiAhIXNjaGVtYVtzeW1ib2xQbHVnaW5zRW5hYmxlZF07XG59XG5leHBvcnRzLnBsdWdpbnNFbmFibGVkRm9yU2NoZW1hUmVzb2x2ZXJzID0gcGx1Z2luc0VuYWJsZWRGb3JTY2hlbWFSZXNvbHZlcnM7XG5mdW5jdGlvbiB3cmFwRmllbGQoZmllbGQpIHtcbiAgICBjb25zdCBvcmlnaW5hbEZpZWxkUmVzb2x2ZSA9IGZpZWxkLnJlc29sdmU7XG4gICAgZmllbGQucmVzb2x2ZSA9IChzb3VyY2UsIGFyZ3MsIGNvbnRleHRWYWx1ZSwgaW5mbykgPT4ge1xuICAgICAgICBjb25zdCB3aWxsUmVzb2x2ZUZpZWxkID0gY29udGV4dFZhbHVlPy5bZXhwb3J0cy5zeW1ib2xFeGVjdXRpb25EaXNwYXRjaGVyV2lsbFJlc29sdmVGaWVsZF07XG4gICAgICAgIGNvbnN0IHVzZXJGaWVsZFJlc29sdmVyID0gY29udGV4dFZhbHVlPy5bZXhwb3J0cy5zeW1ib2xVc2VyRmllbGRSZXNvbHZlcl07XG4gICAgICAgIGNvbnN0IGRpZFJlc29sdmVGaWVsZCA9IHR5cGVvZiB3aWxsUmVzb2x2ZUZpZWxkID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICB3aWxsUmVzb2x2ZUZpZWxkKHsgc291cmNlLCBhcmdzLCBjb250ZXh0VmFsdWUsIGluZm8gfSk7XG4gICAgICAgIGNvbnN0IGZpZWxkUmVzb2x2ZXIgPSBvcmlnaW5hbEZpZWxkUmVzb2x2ZSB8fCB1c2VyRmllbGRSZXNvbHZlciB8fCBncmFwaHFsXzEuZGVmYXVsdEZpZWxkUmVzb2x2ZXI7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBmaWVsZFJlc29sdmVyKHNvdXJjZSwgYXJncywgY29udGV4dFZhbHVlLCBpbmZvKTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGlkUmVzb2x2ZUZpZWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgd2hlblJlc3VsdElzRmluaXNoZWQocmVzdWx0LCBkaWRSZXNvbHZlRmllbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgZGlkUmVzb2x2ZUZpZWxkID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgZGlkUmVzb2x2ZUZpZWxkKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGlzUHJvbWlzZSh4KSB7XG4gICAgcmV0dXJuIHggJiYgdHlwZW9mIHgudGhlbiA9PT0gJ2Z1bmN0aW9uJztcbn1cbmZ1bmN0aW9uIHdoZW5SZXN1bHRJc0ZpbmlzaGVkKHJlc3VsdCwgY2FsbGJhY2spIHtcbiAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgcmVzdWx0LnRoZW4oKHIpID0+IHdoZW5SZXN1bHRJc0ZpbmlzaGVkKHIsIGNhbGxiYWNrKSwgKGVycikgPT4gY2FsbGJhY2soZXJyKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgICAgICBpZiAocmVzdWx0LnNvbWUoaXNQcm9taXNlKSkge1xuICAgICAgICAgICAgUHJvbWlzZS5hbGwocmVzdWx0KS50aGVuKChyKSA9PiBjYWxsYmFjayhudWxsLCByKSwgKGVycikgPT4gY2FsbGJhY2soZXJyKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgIH1cbn1cbmV4cG9ydHMud2hlblJlc3VsdElzRmluaXNoZWQgPSB3aGVuUmVzdWx0SXNGaW5pc2hlZDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtYUluc3RydW1lbnRhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/utils/schemaInstrumentation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/cjs/utils/schemaManager.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/cjs/utils/schemaManager.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SchemaManager = void 0;\nclass SchemaManager {\n    constructor(options) {\n        this.onSchemaLoadOrUpdateListeners = new Set();\n        this.isStopped = false;\n        this.logger = options.logger;\n        this.schemaDerivedDataProvider = options.schemaDerivedDataProvider;\n        if ('gateway' in options) {\n            this.modeSpecificState = {\n                mode: 'gateway',\n                gateway: options.gateway,\n                apolloConfig: options.apolloConfig,\n            };\n        }\n        else {\n            this.modeSpecificState = {\n                mode: 'schema',\n                apiSchema: options.apiSchema,\n                schemaDerivedData: options.schemaDerivedDataProvider(options.apiSchema),\n            };\n        }\n    }\n    async start() {\n        if (this.modeSpecificState.mode === 'gateway') {\n            const gateway = this.modeSpecificState.gateway;\n            if (gateway.onSchemaLoadOrUpdate) {\n                this.modeSpecificState.unsubscribeFromGateway =\n                    gateway.onSchemaLoadOrUpdate((schemaContext) => {\n                        this.processSchemaLoadOrUpdateEvent(schemaContext);\n                    });\n            }\n            else {\n                throw new Error(\"Unexpectedly couldn't find onSchemaLoadOrUpdate on gateway\");\n            }\n            const config = await this.modeSpecificState.gateway.load({\n                apollo: this.modeSpecificState.apolloConfig,\n            });\n            return config.executor;\n        }\n        else {\n            this.processSchemaLoadOrUpdateEvent({\n                apiSchema: this.modeSpecificState.apiSchema,\n            }, this.modeSpecificState.schemaDerivedData);\n            return null;\n        }\n    }\n    onSchemaLoadOrUpdate(callback) {\n        if (!this.schemaContext) {\n            throw new Error('You must call start() before onSchemaLoadOrUpdate()');\n        }\n        if (!this.isStopped) {\n            try {\n                callback(this.schemaContext);\n            }\n            catch (e) {\n                throw new Error(`An error was thrown from an 'onSchemaLoadOrUpdate' listener: ${e.message}`);\n            }\n        }\n        this.onSchemaLoadOrUpdateListeners.add(callback);\n        return () => {\n            this.onSchemaLoadOrUpdateListeners.delete(callback);\n        };\n    }\n    getSchemaDerivedData() {\n        if (!this.schemaDerivedData) {\n            throw new Error('You must call start() before getSchemaDerivedData()');\n        }\n        return this.schemaDerivedData;\n    }\n    async stop() {\n        this.isStopped = true;\n        if (this.modeSpecificState.mode === 'gateway') {\n            this.modeSpecificState.unsubscribeFromGateway?.();\n            await this.modeSpecificState.gateway.stop?.();\n        }\n    }\n    processSchemaLoadOrUpdateEvent(schemaContext, schemaDerivedData) {\n        if (!this.isStopped) {\n            this.schemaDerivedData =\n                schemaDerivedData ??\n                    this.schemaDerivedDataProvider(schemaContext.apiSchema);\n            this.schemaContext = schemaContext;\n            this.onSchemaLoadOrUpdateListeners.forEach((listener) => {\n                try {\n                    listener(schemaContext);\n                }\n                catch (e) {\n                    this.logger.error(\"An error was thrown from an 'onSchemaLoadOrUpdate' listener\");\n                    this.logger.error(e);\n                }\n            });\n        }\n    }\n}\nexports.SchemaManager = SchemaManager;\n//# sourceMappingURL=schemaManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9janMvdXRpbHMvc2NoZW1hTWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0dBQWdHLFVBQVU7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvY2pzL3V0aWxzL3NjaGVtYU1hbmFnZXIuanM/ZWNjNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2NoZW1hTWFuYWdlciA9IHZvaWQgMDtcbmNsYXNzIFNjaGVtYU1hbmFnZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5vblNjaGVtYUxvYWRPclVwZGF0ZUxpc3RlbmVycyA9IG5ldyBTZXQoKTtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5sb2dnZXIgPSBvcHRpb25zLmxvZ2dlcjtcbiAgICAgICAgdGhpcy5zY2hlbWFEZXJpdmVkRGF0YVByb3ZpZGVyID0gb3B0aW9ucy5zY2hlbWFEZXJpdmVkRGF0YVByb3ZpZGVyO1xuICAgICAgICBpZiAoJ2dhdGV3YXknIGluIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIHRoaXMubW9kZVNwZWNpZmljU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgbW9kZTogJ2dhdGV3YXknLFxuICAgICAgICAgICAgICAgIGdhdGV3YXk6IG9wdGlvbnMuZ2F0ZXdheSxcbiAgICAgICAgICAgICAgICBhcG9sbG9Db25maWc6IG9wdGlvbnMuYXBvbGxvQ29uZmlnLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubW9kZVNwZWNpZmljU3RhdGUgPSB7XG4gICAgICAgICAgICAgICAgbW9kZTogJ3NjaGVtYScsXG4gICAgICAgICAgICAgICAgYXBpU2NoZW1hOiBvcHRpb25zLmFwaVNjaGVtYSxcbiAgICAgICAgICAgICAgICBzY2hlbWFEZXJpdmVkRGF0YTogb3B0aW9ucy5zY2hlbWFEZXJpdmVkRGF0YVByb3ZpZGVyKG9wdGlvbnMuYXBpU2NoZW1hKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG4gICAgYXN5bmMgc3RhcnQoKSB7XG4gICAgICAgIGlmICh0aGlzLm1vZGVTcGVjaWZpY1N0YXRlLm1vZGUgPT09ICdnYXRld2F5Jykge1xuICAgICAgICAgICAgY29uc3QgZ2F0ZXdheSA9IHRoaXMubW9kZVNwZWNpZmljU3RhdGUuZ2F0ZXdheTtcbiAgICAgICAgICAgIGlmIChnYXRld2F5Lm9uU2NoZW1hTG9hZE9yVXBkYXRlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tb2RlU3BlY2lmaWNTdGF0ZS51bnN1YnNjcmliZUZyb21HYXRld2F5ID1cbiAgICAgICAgICAgICAgICAgICAgZ2F0ZXdheS5vblNjaGVtYUxvYWRPclVwZGF0ZSgoc2NoZW1hQ29udGV4dCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5wcm9jZXNzU2NoZW1hTG9hZE9yVXBkYXRlRXZlbnQoc2NoZW1hQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVW5leHBlY3RlZGx5IGNvdWxkbid0IGZpbmQgb25TY2hlbWFMb2FkT3JVcGRhdGUgb24gZ2F0ZXdheVwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNvbmZpZyA9IGF3YWl0IHRoaXMubW9kZVNwZWNpZmljU3RhdGUuZ2F0ZXdheS5sb2FkKHtcbiAgICAgICAgICAgICAgICBhcG9sbG86IHRoaXMubW9kZVNwZWNpZmljU3RhdGUuYXBvbGxvQ29uZmlnLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXR1cm4gY29uZmlnLmV4ZWN1dG9yO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5wcm9jZXNzU2NoZW1hTG9hZE9yVXBkYXRlRXZlbnQoe1xuICAgICAgICAgICAgICAgIGFwaVNjaGVtYTogdGhpcy5tb2RlU3BlY2lmaWNTdGF0ZS5hcGlTY2hlbWEsXG4gICAgICAgICAgICB9LCB0aGlzLm1vZGVTcGVjaWZpY1N0YXRlLnNjaGVtYURlcml2ZWREYXRhKTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9uU2NoZW1hTG9hZE9yVXBkYXRlKGNhbGxiYWNrKSB7XG4gICAgICAgIGlmICghdGhpcy5zY2hlbWFDb250ZXh0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IGNhbGwgc3RhcnQoKSBiZWZvcmUgb25TY2hlbWFMb2FkT3JVcGRhdGUoKScpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgY2FsbGJhY2sodGhpcy5zY2hlbWFDb250ZXh0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBbiBlcnJvciB3YXMgdGhyb3duIGZyb20gYW4gJ29uU2NoZW1hTG9hZE9yVXBkYXRlJyBsaXN0ZW5lcjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vblNjaGVtYUxvYWRPclVwZGF0ZUxpc3RlbmVycy5hZGQoY2FsbGJhY2spO1xuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5vblNjaGVtYUxvYWRPclVwZGF0ZUxpc3RlbmVycy5kZWxldGUoY2FsbGJhY2spO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBnZXRTY2hlbWFEZXJpdmVkRGF0YSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNjaGVtYURlcml2ZWREYXRhKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtdXN0IGNhbGwgc3RhcnQoKSBiZWZvcmUgZ2V0U2NoZW1hRGVyaXZlZERhdGEoKScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLnNjaGVtYURlcml2ZWREYXRhO1xuICAgIH1cbiAgICBhc3luYyBzdG9wKCkge1xuICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgIGlmICh0aGlzLm1vZGVTcGVjaWZpY1N0YXRlLm1vZGUgPT09ICdnYXRld2F5Jykge1xuICAgICAgICAgICAgdGhpcy5tb2RlU3BlY2lmaWNTdGF0ZS51bnN1YnNjcmliZUZyb21HYXRld2F5Py4oKTtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMubW9kZVNwZWNpZmljU3RhdGUuZ2F0ZXdheS5zdG9wPy4oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwcm9jZXNzU2NoZW1hTG9hZE9yVXBkYXRlRXZlbnQoc2NoZW1hQ29udGV4dCwgc2NoZW1hRGVyaXZlZERhdGEpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgdGhpcy5zY2hlbWFEZXJpdmVkRGF0YSA9XG4gICAgICAgICAgICAgICAgc2NoZW1hRGVyaXZlZERhdGEgPz9cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlbWFEZXJpdmVkRGF0YVByb3ZpZGVyKHNjaGVtYUNvbnRleHQuYXBpU2NoZW1hKTtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hQ29udGV4dCA9IHNjaGVtYUNvbnRleHQ7XG4gICAgICAgICAgICB0aGlzLm9uU2NoZW1hTG9hZE9yVXBkYXRlTGlzdGVuZXJzLmZvckVhY2goKGxpc3RlbmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXIoc2NoZW1hQ29udGV4dCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKFwiQW4gZXJyb3Igd2FzIHRocm93biBmcm9tIGFuICdvblNjaGVtYUxvYWRPclVwZGF0ZScgbGlzdGVuZXJcIik7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMubG9nZ2VyLmVycm9yKGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5TY2hlbWFNYW5hZ2VyID0gU2NoZW1hTWFuYWdlcjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtYU1hbmFnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/cjs/utils/schemaManager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/extensions.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/extensions.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.applyExtensions = exports.mergeExtensions = exports.extractExtensionsFromSchema = void 0;\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nvar utils_2 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nObject.defineProperty(exports, \"extractExtensionsFromSchema\", ({ enumerable: true, get: function () { return utils_2.extractExtensionsFromSchema; } }));\nfunction mergeExtensions(extensions) {\n    return (0, utils_1.mergeDeep)(extensions);\n}\nexports.mergeExtensions = mergeExtensions;\nfunction applyExtensionObject(obj, extensions) {\n    if (!obj) {\n        return;\n    }\n    obj.extensions = (0, utils_1.mergeDeep)([obj.extensions || {}, extensions || {}]);\n}\nfunction applyExtensions(schema, extensions) {\n    applyExtensionObject(schema, extensions.schemaExtensions);\n    for (const [typeName, data] of Object.entries(extensions.types || {})) {\n        const type = schema.getType(typeName);\n        if (type) {\n            applyExtensionObject(type, data.extensions);\n            if (data.type === 'object' || data.type === 'interface') {\n                for (const [fieldName, fieldData] of Object.entries(data.fields)) {\n                    const field = type.getFields()[fieldName];\n                    if (field) {\n                        applyExtensionObject(field, fieldData.extensions);\n                        for (const [arg, argData] of Object.entries(fieldData.arguments)) {\n                            applyExtensionObject(field.args.find(a => a.name === arg), argData);\n                        }\n                    }\n                }\n            }\n            else if (data.type === 'input') {\n                for (const [fieldName, fieldData] of Object.entries(data.fields)) {\n                    const field = type.getFields()[fieldName];\n                    applyExtensionObject(field, fieldData.extensions);\n                }\n            }\n            else if (data.type === 'enum') {\n                for (const [valueName, valueData] of Object.entries(data.values)) {\n                    const value = type.getValue(valueName);\n                    applyExtensionObject(value, valueData);\n                }\n            }\n        }\n    }\n    return schema;\n}\nexports.applyExtensions = applyExtensions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy9leHRlbnNpb25zLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QixHQUFHLHVCQUF1QixHQUFHLG1DQUFtQztBQUN2RixnQkFBZ0IsbUJBQU8sQ0FBQyxvRkFBc0I7QUFDOUMsY0FBYyxtQkFBTyxDQUFDLG9GQUFzQjtBQUM1QywrREFBOEQsRUFBRSxxQ0FBcUMsK0NBQStDLEVBQUM7QUFDcko7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUVBQWlFLGtCQUFrQjtBQUNuRjtBQUNBO0FBQ0E7QUFDQSx3RUFBd0U7QUFDeEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9tZXJnZS9janMvZXh0ZW5zaW9ucy5qcz9jOGQ2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hcHBseUV4dGVuc2lvbnMgPSBleHBvcnRzLm1lcmdlRXh0ZW5zaW9ucyA9IGV4cG9ydHMuZXh0cmFjdEV4dGVuc2lvbnNGcm9tU2NoZW1hID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAZ3JhcGhxbC10b29scy91dGlsc1wiKTtcbnZhciB1dGlsc18yID0gcmVxdWlyZShcIkBncmFwaHFsLXRvb2xzL3V0aWxzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZXh0cmFjdEV4dGVuc2lvbnNGcm9tU2NoZW1hXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18yLmV4dHJhY3RFeHRlbnNpb25zRnJvbVNjaGVtYTsgfSB9KTtcbmZ1bmN0aW9uIG1lcmdlRXh0ZW5zaW9ucyhleHRlbnNpb25zKSB7XG4gICAgcmV0dXJuICgwLCB1dGlsc18xLm1lcmdlRGVlcCkoZXh0ZW5zaW9ucyk7XG59XG5leHBvcnRzLm1lcmdlRXh0ZW5zaW9ucyA9IG1lcmdlRXh0ZW5zaW9ucztcbmZ1bmN0aW9uIGFwcGx5RXh0ZW5zaW9uT2JqZWN0KG9iaiwgZXh0ZW5zaW9ucykge1xuICAgIGlmICghb2JqKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgb2JqLmV4dGVuc2lvbnMgPSAoMCwgdXRpbHNfMS5tZXJnZURlZXApKFtvYmouZXh0ZW5zaW9ucyB8fCB7fSwgZXh0ZW5zaW9ucyB8fCB7fV0pO1xufVxuZnVuY3Rpb24gYXBwbHlFeHRlbnNpb25zKHNjaGVtYSwgZXh0ZW5zaW9ucykge1xuICAgIGFwcGx5RXh0ZW5zaW9uT2JqZWN0KHNjaGVtYSwgZXh0ZW5zaW9ucy5zY2hlbWFFeHRlbnNpb25zKTtcbiAgICBmb3IgKGNvbnN0IFt0eXBlTmFtZSwgZGF0YV0gb2YgT2JqZWN0LmVudHJpZXMoZXh0ZW5zaW9ucy50eXBlcyB8fCB7fSkpIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHNjaGVtYS5nZXRUeXBlKHR5cGVOYW1lKTtcbiAgICAgICAgaWYgKHR5cGUpIHtcbiAgICAgICAgICAgIGFwcGx5RXh0ZW5zaW9uT2JqZWN0KHR5cGUsIGRhdGEuZXh0ZW5zaW9ucyk7XG4gICAgICAgICAgICBpZiAoZGF0YS50eXBlID09PSAnb2JqZWN0JyB8fCBkYXRhLnR5cGUgPT09ICdpbnRlcmZhY2UnKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbZmllbGROYW1lLCBmaWVsZERhdGFdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEuZmllbGRzKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBmaWVsZCA9IHR5cGUuZ2V0RmllbGRzKClbZmllbGROYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBhcHBseUV4dGVuc2lvbk9iamVjdChmaWVsZCwgZmllbGREYXRhLmV4dGVuc2lvbnMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBbYXJnLCBhcmdEYXRhXSBvZiBPYmplY3QuZW50cmllcyhmaWVsZERhdGEuYXJndW1lbnRzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5RXh0ZW5zaW9uT2JqZWN0KGZpZWxkLmFyZ3MuZmluZChhID0+IGEubmFtZSA9PT0gYXJnKSwgYXJnRGF0YSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChkYXRhLnR5cGUgPT09ICdpbnB1dCcpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtmaWVsZE5hbWUsIGZpZWxkRGF0YV0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YS5maWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gdHlwZS5nZXRGaWVsZHMoKVtmaWVsZE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBhcHBseUV4dGVuc2lvbk9iamVjdChmaWVsZCwgZmllbGREYXRhLmV4dGVuc2lvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gJ2VudW0nKSB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBbdmFsdWVOYW1lLCB2YWx1ZURhdGFdIG9mIE9iamVjdC5lbnRyaWVzKGRhdGEudmFsdWVzKSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHR5cGUuZ2V0VmFsdWUodmFsdWVOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYXBwbHlFeHRlbnNpb25PYmplY3QodmFsdWUsIHZhbHVlRGF0YSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzY2hlbWE7XG59XG5leHBvcnRzLmFwcGx5RXh0ZW5zaW9ucyA9IGFwcGx5RXh0ZW5zaW9ucztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/extensions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/index.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\ntslib_1.__exportStar(__webpack_require__(/*! ./merge-resolvers.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/merge-resolvers.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./typedefs-mergers/index.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/index.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./extensions.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/extensions.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxnQkFBZ0IsbUJBQU8sQ0FBQyx1REFBTztBQUMvQixxQkFBcUIsbUJBQU8sQ0FBQywwSEFBc0I7QUFDbkQscUJBQXFCLG1CQUFPLENBQUMsd0lBQTZCO0FBQzFELHFCQUFxQixtQkFBTyxDQUFDLGdIQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvY2pzL2luZGV4LmpzPzdmNDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWVyZ2UtcmVzb2x2ZXJzLmpzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVkZWZzLW1lcmdlcnMvaW5kZXguanNcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZXh0ZW5zaW9ucy5qc1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/merge-resolvers.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/merge-resolvers.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeResolvers = void 0;\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\n/**\n * Deep merges multiple resolver definition objects into a single definition.\n * @param resolversDefinitions Resolver definitions to be merged\n * @param options Additional options\n *\n * ```js\n * const { mergeResolvers } = require('@graphql-tools/merge');\n * const clientResolver = require('./clientResolver');\n * const productResolver = require('./productResolver');\n *\n * const resolvers = mergeResolvers([\n *  clientResolver,\n *  productResolver,\n * ]);\n * ```\n *\n * If you don't want to manually create the array of resolver objects, you can\n * also use this function along with loadFiles:\n *\n * ```js\n * const path = require('path');\n * const { mergeResolvers } = require('@graphql-tools/merge');\n * const { loadFilesSync } = require('@graphql-tools/load-files');\n *\n * const resolversArray = loadFilesSync(path.join(__dirname, './resolvers'));\n *\n * const resolvers = mergeResolvers(resolversArray)\n * ```\n */\nfunction mergeResolvers(resolversDefinitions, options) {\n    if (!resolversDefinitions || (Array.isArray(resolversDefinitions) && resolversDefinitions.length === 0)) {\n        return {};\n    }\n    if (!Array.isArray(resolversDefinitions)) {\n        return resolversDefinitions;\n    }\n    if (resolversDefinitions.length === 1) {\n        return resolversDefinitions[0] || {};\n    }\n    const resolvers = new Array();\n    for (let resolversDefinition of resolversDefinitions) {\n        if (Array.isArray(resolversDefinition)) {\n            resolversDefinition = mergeResolvers(resolversDefinition);\n        }\n        if (typeof resolversDefinition === 'object' && resolversDefinition) {\n            resolvers.push(resolversDefinition);\n        }\n    }\n    const result = (0, utils_1.mergeDeep)(resolvers, true);\n    if (options === null || options === void 0 ? void 0 : options.exclusions) {\n        for (const exclusion of options.exclusions) {\n            const [typeName, fieldName] = exclusion.split('.');\n            if (!fieldName || fieldName === '*') {\n                delete result[typeName];\n            }\n            else if (result[typeName]) {\n                delete result[typeName][fieldName];\n            }\n        }\n    }\n    return result;\n}\nexports.mergeResolvers = mergeResolvers;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy9tZXJnZS1yZXNvbHZlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCLGdCQUFnQixtQkFBTyxDQUFDLG9GQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGlCQUFpQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUIsV0FBVyxnQkFBZ0I7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9tZXJnZS9janMvbWVyZ2UtcmVzb2x2ZXJzLmpzPzM0ZjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlUmVzb2x2ZXJzID0gdm9pZCAwO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAZ3JhcGhxbC10b29scy91dGlsc1wiKTtcbi8qKlxuICogRGVlcCBtZXJnZXMgbXVsdGlwbGUgcmVzb2x2ZXIgZGVmaW5pdGlvbiBvYmplY3RzIGludG8gYSBzaW5nbGUgZGVmaW5pdGlvbi5cbiAqIEBwYXJhbSByZXNvbHZlcnNEZWZpbml0aW9ucyBSZXNvbHZlciBkZWZpbml0aW9ucyB0byBiZSBtZXJnZWRcbiAqIEBwYXJhbSBvcHRpb25zIEFkZGl0aW9uYWwgb3B0aW9uc1xuICpcbiAqIGBgYGpzXG4gKiBjb25zdCB7IG1lcmdlUmVzb2x2ZXJzIH0gPSByZXF1aXJlKCdAZ3JhcGhxbC10b29scy9tZXJnZScpO1xuICogY29uc3QgY2xpZW50UmVzb2x2ZXIgPSByZXF1aXJlKCcuL2NsaWVudFJlc29sdmVyJyk7XG4gKiBjb25zdCBwcm9kdWN0UmVzb2x2ZXIgPSByZXF1aXJlKCcuL3Byb2R1Y3RSZXNvbHZlcicpO1xuICpcbiAqIGNvbnN0IHJlc29sdmVycyA9IG1lcmdlUmVzb2x2ZXJzKFtcbiAqICBjbGllbnRSZXNvbHZlcixcbiAqICBwcm9kdWN0UmVzb2x2ZXIsXG4gKiBdKTtcbiAqIGBgYFxuICpcbiAqIElmIHlvdSBkb24ndCB3YW50IHRvIG1hbnVhbGx5IGNyZWF0ZSB0aGUgYXJyYXkgb2YgcmVzb2x2ZXIgb2JqZWN0cywgeW91IGNhblxuICogYWxzbyB1c2UgdGhpcyBmdW5jdGlvbiBhbG9uZyB3aXRoIGxvYWRGaWxlczpcbiAqXG4gKiBgYGBqc1xuICogY29uc3QgcGF0aCA9IHJlcXVpcmUoJ3BhdGgnKTtcbiAqIGNvbnN0IHsgbWVyZ2VSZXNvbHZlcnMgfSA9IHJlcXVpcmUoJ0BncmFwaHFsLXRvb2xzL21lcmdlJyk7XG4gKiBjb25zdCB7IGxvYWRGaWxlc1N5bmMgfSA9IHJlcXVpcmUoJ0BncmFwaHFsLXRvb2xzL2xvYWQtZmlsZXMnKTtcbiAqXG4gKiBjb25zdCByZXNvbHZlcnNBcnJheSA9IGxvYWRGaWxlc1N5bmMocGF0aC5qb2luKF9fZGlybmFtZSwgJy4vcmVzb2x2ZXJzJykpO1xuICpcbiAqIGNvbnN0IHJlc29sdmVycyA9IG1lcmdlUmVzb2x2ZXJzKHJlc29sdmVyc0FycmF5KVxuICogYGBgXG4gKi9cbmZ1bmN0aW9uIG1lcmdlUmVzb2x2ZXJzKHJlc29sdmVyc0RlZmluaXRpb25zLCBvcHRpb25zKSB7XG4gICAgaWYgKCFyZXNvbHZlcnNEZWZpbml0aW9ucyB8fCAoQXJyYXkuaXNBcnJheShyZXNvbHZlcnNEZWZpbml0aW9ucykgJiYgcmVzb2x2ZXJzRGVmaW5pdGlvbnMubGVuZ3RoID09PSAwKSkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShyZXNvbHZlcnNEZWZpbml0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVyc0RlZmluaXRpb25zO1xuICAgIH1cbiAgICBpZiAocmVzb2x2ZXJzRGVmaW5pdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlcnNEZWZpbml0aW9uc1swXSB8fCB7fTtcbiAgICB9XG4gICAgY29uc3QgcmVzb2x2ZXJzID0gbmV3IEFycmF5KCk7XG4gICAgZm9yIChsZXQgcmVzb2x2ZXJzRGVmaW5pdGlvbiBvZiByZXNvbHZlcnNEZWZpbml0aW9ucykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXNvbHZlcnNEZWZpbml0aW9uKSkge1xuICAgICAgICAgICAgcmVzb2x2ZXJzRGVmaW5pdGlvbiA9IG1lcmdlUmVzb2x2ZXJzKHJlc29sdmVyc0RlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcmVzb2x2ZXJzRGVmaW5pdGlvbiA9PT0gJ29iamVjdCcgJiYgcmVzb2x2ZXJzRGVmaW5pdGlvbikge1xuICAgICAgICAgICAgcmVzb2x2ZXJzLnB1c2gocmVzb2x2ZXJzRGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gKDAsIHV0aWxzXzEubWVyZ2VEZWVwKShyZXNvbHZlcnMsIHRydWUpO1xuICAgIGlmIChvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuZXhjbHVzaW9ucykge1xuICAgICAgICBmb3IgKGNvbnN0IGV4Y2x1c2lvbiBvZiBvcHRpb25zLmV4Y2x1c2lvbnMpIHtcbiAgICAgICAgICAgIGNvbnN0IFt0eXBlTmFtZSwgZmllbGROYW1lXSA9IGV4Y2x1c2lvbi5zcGxpdCgnLicpO1xuICAgICAgICAgICAgaWYgKCFmaWVsZE5hbWUgfHwgZmllbGROYW1lID09PSAnKicpIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0W3R5cGVOYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlc3VsdFt0eXBlTmFtZV0pIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgcmVzdWx0W3R5cGVOYW1lXVtmaWVsZE5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLm1lcmdlUmVzb2x2ZXJzID0gbWVyZ2VSZXNvbHZlcnM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/merge-resolvers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/arguments.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/arguments.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeArguments = void 0;\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nfunction mergeArguments(args1, args2, config) {\n    const result = deduplicateArguments([...args2, ...args1].filter(utils_1.isSome), config);\n    if (config && config.sort) {\n        result.sort(utils_1.compareNodes);\n    }\n    return result;\n}\nexports.mergeArguments = mergeArguments;\nfunction deduplicateArguments(args, config) {\n    return args.reduce((acc, current) => {\n        const dupIndex = acc.findIndex(arg => arg.name.value === current.name.value);\n        if (dupIndex === -1) {\n            return acc.concat([current]);\n        }\n        else if (!(config === null || config === void 0 ? void 0 : config.reverseArguments)) {\n            acc[dupIndex] = current;\n        }\n        return acc;\n    }, []);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL2FyZ3VtZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsZ0JBQWdCLG1CQUFPLENBQUMsb0ZBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9tZXJnZS9janMvdHlwZWRlZnMtbWVyZ2Vycy9hcmd1bWVudHMuanM/NGNlOCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2VBcmd1bWVudHMgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBncmFwaHFsLXRvb2xzL3V0aWxzXCIpO1xuZnVuY3Rpb24gbWVyZ2VBcmd1bWVudHMoYXJnczEsIGFyZ3MyLCBjb25maWcpIHtcbiAgICBjb25zdCByZXN1bHQgPSBkZWR1cGxpY2F0ZUFyZ3VtZW50cyhbLi4uYXJnczIsIC4uLmFyZ3MxXS5maWx0ZXIodXRpbHNfMS5pc1NvbWUpLCBjb25maWcpO1xuICAgIGlmIChjb25maWcgJiYgY29uZmlnLnNvcnQpIHtcbiAgICAgICAgcmVzdWx0LnNvcnQodXRpbHNfMS5jb21wYXJlTm9kZXMpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5tZXJnZUFyZ3VtZW50cyA9IG1lcmdlQXJndW1lbnRzO1xuZnVuY3Rpb24gZGVkdXBsaWNhdGVBcmd1bWVudHMoYXJncywgY29uZmlnKSB7XG4gICAgcmV0dXJuIGFyZ3MucmVkdWNlKChhY2MsIGN1cnJlbnQpID0+IHtcbiAgICAgICAgY29uc3QgZHVwSW5kZXggPSBhY2MuZmluZEluZGV4KGFyZyA9PiBhcmcubmFtZS52YWx1ZSA9PT0gY3VycmVudC5uYW1lLnZhbHVlKTtcbiAgICAgICAgaWYgKGR1cEluZGV4ID09PSAtMSkge1xuICAgICAgICAgICAgcmV0dXJuIGFjYy5jb25jYXQoW2N1cnJlbnRdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICghKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5yZXZlcnNlQXJndW1lbnRzKSkge1xuICAgICAgICAgICAgYWNjW2R1cEluZGV4XSA9IGN1cnJlbnQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjYztcbiAgICB9LCBbXSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/arguments.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeDirective = exports.mergeDirectives = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nfunction directiveAlreadyExists(directivesArr, otherDirective) {\n    return !!directivesArr.find(directive => directive.name.value === otherDirective.name.value);\n}\nfunction isRepeatableDirective(directive, directives) {\n    var _a;\n    return !!((_a = directives === null || directives === void 0 ? void 0 : directives[directive.name.value]) === null || _a === void 0 ? void 0 : _a.repeatable);\n}\nfunction nameAlreadyExists(name, namesArr) {\n    return namesArr.some(({ value }) => value === name.value);\n}\nfunction mergeArguments(a1, a2) {\n    const result = [...a2];\n    for (const argument of a1) {\n        const existingIndex = result.findIndex(a => a.name.value === argument.name.value);\n        if (existingIndex > -1) {\n            const existingArg = result[existingIndex];\n            if (existingArg.value.kind === 'ListValue') {\n                const source = existingArg.value.values;\n                const target = argument.value.values;\n                // merge values of two lists\n                existingArg.value.values = deduplicateLists(source, target, (targetVal, source) => {\n                    const value = targetVal.value;\n                    return !value || !source.some((sourceVal) => sourceVal.value === value);\n                });\n            }\n            else {\n                existingArg.value = argument.value;\n            }\n        }\n        else {\n            result.push(argument);\n        }\n    }\n    return result;\n}\nfunction deduplicateDirectives(directives, definitions) {\n    return directives\n        .map((directive, i, all) => {\n        const firstAt = all.findIndex(d => d.name.value === directive.name.value);\n        if (firstAt !== i && !isRepeatableDirective(directive, definitions)) {\n            const dup = all[firstAt];\n            directive.arguments = mergeArguments(directive.arguments, dup.arguments);\n            return null;\n        }\n        return directive;\n    })\n        .filter(utils_1.isSome);\n}\nfunction mergeDirectives(d1 = [], d2 = [], config, directives) {\n    const reverseOrder = config && config.reverseDirectives;\n    const asNext = reverseOrder ? d1 : d2;\n    const asFirst = reverseOrder ? d2 : d1;\n    const result = deduplicateDirectives([...asNext], directives);\n    for (const directive of asFirst) {\n        if (directiveAlreadyExists(result, directive) && !isRepeatableDirective(directive, directives)) {\n            const existingDirectiveIndex = result.findIndex(d => d.name.value === directive.name.value);\n            const existingDirective = result[existingDirectiveIndex];\n            result[existingDirectiveIndex].arguments = mergeArguments(directive.arguments || [], existingDirective.arguments || []);\n        }\n        else {\n            result.push(directive);\n        }\n    }\n    return result;\n}\nexports.mergeDirectives = mergeDirectives;\nfunction validateInputs(node, existingNode) {\n    const printedNode = (0, graphql_1.print)({\n        ...node,\n        description: undefined,\n    });\n    const printedExistingNode = (0, graphql_1.print)({\n        ...existingNode,\n        description: undefined,\n    });\n    // eslint-disable-next-line\n    const leaveInputs = new RegExp('(directive @w*d*)|( on .*$)', 'g');\n    const sameArguments = printedNode.replace(leaveInputs, '') === printedExistingNode.replace(leaveInputs, '');\n    if (!sameArguments) {\n        throw new Error(`Unable to merge GraphQL directive \"${node.name.value}\". \\nExisting directive:  \\n\\t${printedExistingNode} \\nReceived directive: \\n\\t${printedNode}`);\n    }\n}\nfunction mergeDirective(node, existingNode) {\n    if (existingNode) {\n        validateInputs(node, existingNode);\n        return {\n            ...node,\n            locations: [\n                ...existingNode.locations,\n                ...node.locations.filter(name => !nameAlreadyExists(name, existingNode.locations)),\n            ],\n        };\n    }\n    return node;\n}\nexports.mergeDirective = mergeDirective;\nfunction deduplicateLists(source, target, filterFn) {\n    return source.concat(target.filter(val => filterFn(val, source)));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL2RpcmVjdGl2ZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCLEdBQUcsdUJBQXVCO0FBQ2hELGtCQUFrQixtQkFBTyxDQUFDLHVEQUFTO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLG9GQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLE9BQU87QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUI7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELGdCQUFnQixnQ0FBZ0MscUJBQXFCLDRCQUE0QixZQUFZO0FBQzNLO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL2RpcmVjdGl2ZXMuanM/M2Y0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2VEaXJlY3RpdmUgPSBleHBvcnRzLm1lcmdlRGlyZWN0aXZlcyA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAZ3JhcGhxbC10b29scy91dGlsc1wiKTtcbmZ1bmN0aW9uIGRpcmVjdGl2ZUFscmVhZHlFeGlzdHMoZGlyZWN0aXZlc0Fyciwgb3RoZXJEaXJlY3RpdmUpIHtcbiAgICByZXR1cm4gISFkaXJlY3RpdmVzQXJyLmZpbmQoZGlyZWN0aXZlID0+IGRpcmVjdGl2ZS5uYW1lLnZhbHVlID09PSBvdGhlckRpcmVjdGl2ZS5uYW1lLnZhbHVlKTtcbn1cbmZ1bmN0aW9uIGlzUmVwZWF0YWJsZURpcmVjdGl2ZShkaXJlY3RpdmUsIGRpcmVjdGl2ZXMpIHtcbiAgICB2YXIgX2E7XG4gICAgcmV0dXJuICEhKChfYSA9IGRpcmVjdGl2ZXMgPT09IG51bGwgfHwgZGlyZWN0aXZlcyA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGlyZWN0aXZlc1tkaXJlY3RpdmUubmFtZS52YWx1ZV0pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5yZXBlYXRhYmxlKTtcbn1cbmZ1bmN0aW9uIG5hbWVBbHJlYWR5RXhpc3RzKG5hbWUsIG5hbWVzQXJyKSB7XG4gICAgcmV0dXJuIG5hbWVzQXJyLnNvbWUoKHsgdmFsdWUgfSkgPT4gdmFsdWUgPT09IG5hbWUudmFsdWUpO1xufVxuZnVuY3Rpb24gbWVyZ2VBcmd1bWVudHMoYTEsIGEyKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gWy4uLmEyXTtcbiAgICBmb3IgKGNvbnN0IGFyZ3VtZW50IG9mIGExKSB7XG4gICAgICAgIGNvbnN0IGV4aXN0aW5nSW5kZXggPSByZXN1bHQuZmluZEluZGV4KGEgPT4gYS5uYW1lLnZhbHVlID09PSBhcmd1bWVudC5uYW1lLnZhbHVlKTtcbiAgICAgICAgaWYgKGV4aXN0aW5nSW5kZXggPiAtMSkge1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdBcmcgPSByZXN1bHRbZXhpc3RpbmdJbmRleF07XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmdBcmcudmFsdWUua2luZCA9PT0gJ0xpc3RWYWx1ZScpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBzb3VyY2UgPSBleGlzdGluZ0FyZy52YWx1ZS52YWx1ZXM7XG4gICAgICAgICAgICAgICAgY29uc3QgdGFyZ2V0ID0gYXJndW1lbnQudmFsdWUudmFsdWVzO1xuICAgICAgICAgICAgICAgIC8vIG1lcmdlIHZhbHVlcyBvZiB0d28gbGlzdHNcbiAgICAgICAgICAgICAgICBleGlzdGluZ0FyZy52YWx1ZS52YWx1ZXMgPSBkZWR1cGxpY2F0ZUxpc3RzKHNvdXJjZSwgdGFyZ2V0LCAodGFyZ2V0VmFsLCBzb3VyY2UpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdmFsdWUgPSB0YXJnZXRWYWwudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAhdmFsdWUgfHwgIXNvdXJjZS5zb21lKChzb3VyY2VWYWwpID0+IHNvdXJjZVZhbC52YWx1ZSA9PT0gdmFsdWUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdBcmcudmFsdWUgPSBhcmd1bWVudC52YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFyZ3VtZW50KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gZGVkdXBsaWNhdGVEaXJlY3RpdmVzKGRpcmVjdGl2ZXMsIGRlZmluaXRpb25zKSB7XG4gICAgcmV0dXJuIGRpcmVjdGl2ZXNcbiAgICAgICAgLm1hcCgoZGlyZWN0aXZlLCBpLCBhbGwpID0+IHtcbiAgICAgICAgY29uc3QgZmlyc3RBdCA9IGFsbC5maW5kSW5kZXgoZCA9PiBkLm5hbWUudmFsdWUgPT09IGRpcmVjdGl2ZS5uYW1lLnZhbHVlKTtcbiAgICAgICAgaWYgKGZpcnN0QXQgIT09IGkgJiYgIWlzUmVwZWF0YWJsZURpcmVjdGl2ZShkaXJlY3RpdmUsIGRlZmluaXRpb25zKSkge1xuICAgICAgICAgICAgY29uc3QgZHVwID0gYWxsW2ZpcnN0QXRdO1xuICAgICAgICAgICAgZGlyZWN0aXZlLmFyZ3VtZW50cyA9IG1lcmdlQXJndW1lbnRzKGRpcmVjdGl2ZS5hcmd1bWVudHMsIGR1cC5hcmd1bWVudHMpO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpcmVjdGl2ZTtcbiAgICB9KVxuICAgICAgICAuZmlsdGVyKHV0aWxzXzEuaXNTb21lKTtcbn1cbmZ1bmN0aW9uIG1lcmdlRGlyZWN0aXZlcyhkMSA9IFtdLCBkMiA9IFtdLCBjb25maWcsIGRpcmVjdGl2ZXMpIHtcbiAgICBjb25zdCByZXZlcnNlT3JkZXIgPSBjb25maWcgJiYgY29uZmlnLnJldmVyc2VEaXJlY3RpdmVzO1xuICAgIGNvbnN0IGFzTmV4dCA9IHJldmVyc2VPcmRlciA/IGQxIDogZDI7XG4gICAgY29uc3QgYXNGaXJzdCA9IHJldmVyc2VPcmRlciA/IGQyIDogZDE7XG4gICAgY29uc3QgcmVzdWx0ID0gZGVkdXBsaWNhdGVEaXJlY3RpdmVzKFsuLi5hc05leHRdLCBkaXJlY3RpdmVzKTtcbiAgICBmb3IgKGNvbnN0IGRpcmVjdGl2ZSBvZiBhc0ZpcnN0KSB7XG4gICAgICAgIGlmIChkaXJlY3RpdmVBbHJlYWR5RXhpc3RzKHJlc3VsdCwgZGlyZWN0aXZlKSAmJiAhaXNSZXBlYXRhYmxlRGlyZWN0aXZlKGRpcmVjdGl2ZSwgZGlyZWN0aXZlcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4aXN0aW5nRGlyZWN0aXZlSW5kZXggPSByZXN1bHQuZmluZEluZGV4KGQgPT4gZC5uYW1lLnZhbHVlID09PSBkaXJlY3RpdmUubmFtZS52YWx1ZSk7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0RpcmVjdGl2ZSA9IHJlc3VsdFtleGlzdGluZ0RpcmVjdGl2ZUluZGV4XTtcbiAgICAgICAgICAgIHJlc3VsdFtleGlzdGluZ0RpcmVjdGl2ZUluZGV4XS5hcmd1bWVudHMgPSBtZXJnZUFyZ3VtZW50cyhkaXJlY3RpdmUuYXJndW1lbnRzIHx8IFtdLCBleGlzdGluZ0RpcmVjdGl2ZS5hcmd1bWVudHMgfHwgW10pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goZGlyZWN0aXZlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5tZXJnZURpcmVjdGl2ZXMgPSBtZXJnZURpcmVjdGl2ZXM7XG5mdW5jdGlvbiB2YWxpZGF0ZUlucHV0cyhub2RlLCBleGlzdGluZ05vZGUpIHtcbiAgICBjb25zdCBwcmludGVkTm9kZSA9ICgwLCBncmFwaHFsXzEucHJpbnQpKHtcbiAgICAgICAgLi4ubm9kZSxcbiAgICAgICAgZGVzY3JpcHRpb246IHVuZGVmaW5lZCxcbiAgICB9KTtcbiAgICBjb25zdCBwcmludGVkRXhpc3RpbmdOb2RlID0gKDAsIGdyYXBocWxfMS5wcmludCkoe1xuICAgICAgICAuLi5leGlzdGluZ05vZGUsXG4gICAgICAgIGRlc2NyaXB0aW9uOiB1bmRlZmluZWQsXG4gICAgfSk7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gICAgY29uc3QgbGVhdmVJbnB1dHMgPSBuZXcgUmVnRXhwKCcoZGlyZWN0aXZlIEB3KmQqKXwoIG9uIC4qJCknLCAnZycpO1xuICAgIGNvbnN0IHNhbWVBcmd1bWVudHMgPSBwcmludGVkTm9kZS5yZXBsYWNlKGxlYXZlSW5wdXRzLCAnJykgPT09IHByaW50ZWRFeGlzdGluZ05vZGUucmVwbGFjZShsZWF2ZUlucHV0cywgJycpO1xuICAgIGlmICghc2FtZUFyZ3VtZW50cykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBtZXJnZSBHcmFwaFFMIGRpcmVjdGl2ZSBcIiR7bm9kZS5uYW1lLnZhbHVlfVwiLiBcXG5FeGlzdGluZyBkaXJlY3RpdmU6ICBcXG5cXHQke3ByaW50ZWRFeGlzdGluZ05vZGV9IFxcblJlY2VpdmVkIGRpcmVjdGl2ZTogXFxuXFx0JHtwcmludGVkTm9kZX1gKTtcbiAgICB9XG59XG5mdW5jdGlvbiBtZXJnZURpcmVjdGl2ZShub2RlLCBleGlzdGluZ05vZGUpIHtcbiAgICBpZiAoZXhpc3RpbmdOb2RlKSB7XG4gICAgICAgIHZhbGlkYXRlSW5wdXRzKG5vZGUsIGV4aXN0aW5nTm9kZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5ub2RlLFxuICAgICAgICAgICAgbG9jYXRpb25zOiBbXG4gICAgICAgICAgICAgICAgLi4uZXhpc3RpbmdOb2RlLmxvY2F0aW9ucyxcbiAgICAgICAgICAgICAgICAuLi5ub2RlLmxvY2F0aW9ucy5maWx0ZXIobmFtZSA9PiAhbmFtZUFscmVhZHlFeGlzdHMobmFtZSwgZXhpc3RpbmdOb2RlLmxvY2F0aW9ucykpLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG59XG5leHBvcnRzLm1lcmdlRGlyZWN0aXZlID0gbWVyZ2VEaXJlY3RpdmU7XG5mdW5jdGlvbiBkZWR1cGxpY2F0ZUxpc3RzKHNvdXJjZSwgdGFyZ2V0LCBmaWx0ZXJGbikge1xuICAgIHJldHVybiBzb3VyY2UuY29uY2F0KHRhcmdldC5maWx0ZXIodmFsID0+IGZpbHRlckZuKHZhbCwgc291cmNlKSkpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum-values.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum-values.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeEnumValues = void 0;\nconst directives_js_1 = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js\");\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nfunction mergeEnumValues(first, second, config, directives) {\n    if (config === null || config === void 0 ? void 0 : config.consistentEnumMerge) {\n        const reversed = [];\n        if (first) {\n            reversed.push(...first);\n        }\n        first = second;\n        second = reversed;\n    }\n    const enumValueMap = new Map();\n    if (first) {\n        for (const firstValue of first) {\n            enumValueMap.set(firstValue.name.value, firstValue);\n        }\n    }\n    if (second) {\n        for (const secondValue of second) {\n            const enumValue = secondValue.name.value;\n            if (enumValueMap.has(enumValue)) {\n                const firstValue = enumValueMap.get(enumValue);\n                firstValue.description = secondValue.description || firstValue.description;\n                firstValue.directives = (0, directives_js_1.mergeDirectives)(secondValue.directives, firstValue.directives, directives);\n            }\n            else {\n                enumValueMap.set(enumValue, secondValue);\n            }\n        }\n    }\n    const result = [...enumValueMap.values()];\n    if (config && config.sort) {\n        result.sort(utils_1.compareNodes);\n    }\n    return result;\n}\nexports.mergeEnumValues = mergeEnumValues;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL2VudW0tdmFsdWVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHVCQUF1QjtBQUN2Qix3QkFBd0IsbUJBQU8sQ0FBQyxpSUFBaUI7QUFDakQsZ0JBQWdCLG1CQUFPLENBQUMsb0ZBQXNCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9tZXJnZS9janMvdHlwZWRlZnMtbWVyZ2Vycy9lbnVtLXZhbHVlcy5qcz8xZDMyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZUVudW1WYWx1ZXMgPSB2b2lkIDA7XG5jb25zdCBkaXJlY3RpdmVzX2pzXzEgPSByZXF1aXJlKFwiLi9kaXJlY3RpdmVzLmpzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAZ3JhcGhxbC10b29scy91dGlsc1wiKTtcbmZ1bmN0aW9uIG1lcmdlRW51bVZhbHVlcyhmaXJzdCwgc2Vjb25kLCBjb25maWcsIGRpcmVjdGl2ZXMpIHtcbiAgICBpZiAoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmNvbnNpc3RlbnRFbnVtTWVyZ2UpIHtcbiAgICAgICAgY29uc3QgcmV2ZXJzZWQgPSBbXTtcbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICByZXZlcnNlZC5wdXNoKC4uLmZpcnN0KTtcbiAgICAgICAgfVxuICAgICAgICBmaXJzdCA9IHNlY29uZDtcbiAgICAgICAgc2Vjb25kID0gcmV2ZXJzZWQ7XG4gICAgfVxuICAgIGNvbnN0IGVudW1WYWx1ZU1hcCA9IG5ldyBNYXAoKTtcbiAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgZm9yIChjb25zdCBmaXJzdFZhbHVlIG9mIGZpcnN0KSB7XG4gICAgICAgICAgICBlbnVtVmFsdWVNYXAuc2V0KGZpcnN0VmFsdWUubmFtZS52YWx1ZSwgZmlyc3RWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNlY29uZCkge1xuICAgICAgICBmb3IgKGNvbnN0IHNlY29uZFZhbHVlIG9mIHNlY29uZCkge1xuICAgICAgICAgICAgY29uc3QgZW51bVZhbHVlID0gc2Vjb25kVmFsdWUubmFtZS52YWx1ZTtcbiAgICAgICAgICAgIGlmIChlbnVtVmFsdWVNYXAuaGFzKGVudW1WYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFZhbHVlID0gZW51bVZhbHVlTWFwLmdldChlbnVtVmFsdWUpO1xuICAgICAgICAgICAgICAgIGZpcnN0VmFsdWUuZGVzY3JpcHRpb24gPSBzZWNvbmRWYWx1ZS5kZXNjcmlwdGlvbiB8fCBmaXJzdFZhbHVlLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIGZpcnN0VmFsdWUuZGlyZWN0aXZlcyA9ICgwLCBkaXJlY3RpdmVzX2pzXzEubWVyZ2VEaXJlY3RpdmVzKShzZWNvbmRWYWx1ZS5kaXJlY3RpdmVzLCBmaXJzdFZhbHVlLmRpcmVjdGl2ZXMsIGRpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW51bVZhbHVlTWFwLnNldChlbnVtVmFsdWUsIHNlY29uZFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBbLi4uZW51bVZhbHVlTWFwLnZhbHVlcygpXTtcbiAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5zb3J0KSB7XG4gICAgICAgIHJlc3VsdC5zb3J0KHV0aWxzXzEuY29tcGFyZU5vZGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmV4cG9ydHMubWVyZ2VFbnVtVmFsdWVzID0gbWVyZ2VFbnVtVmFsdWVzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum-values.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeEnum = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst directives_js_1 = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js\");\nconst enum_values_js_1 = __webpack_require__(/*! ./enum-values.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum-values.js\");\nfunction mergeEnum(e1, e2, config, directives) {\n    if (e2) {\n        return {\n            name: e1.name,\n            description: e1['description'] || e2['description'],\n            kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) || e1.kind === 'EnumTypeDefinition' || e2.kind === 'EnumTypeDefinition'\n                ? 'EnumTypeDefinition'\n                : 'EnumTypeExtension',\n            loc: e1.loc,\n            directives: (0, directives_js_1.mergeDirectives)(e1.directives, e2.directives, config, directives),\n            values: (0, enum_values_js_1.mergeEnumValues)(e1.values, e2.values, config),\n        };\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...e1,\n            kind: graphql_1.Kind.ENUM_TYPE_DEFINITION,\n        }\n        : e1;\n}\nexports.mergeEnum = mergeEnum;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL2VudW0uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLGtCQUFrQixtQkFBTyxDQUFDLHVEQUFTO0FBQ25DLHdCQUF3QixtQkFBTyxDQUFDLGlJQUFpQjtBQUNqRCx5QkFBeUIsbUJBQU8sQ0FBQyxtSUFBa0I7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvY2pzL3R5cGVkZWZzLW1lcmdlcnMvZW51bS5qcz80MTAwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZUVudW0gPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IGRpcmVjdGl2ZXNfanNfMSA9IHJlcXVpcmUoXCIuL2RpcmVjdGl2ZXMuanNcIik7XG5jb25zdCBlbnVtX3ZhbHVlc19qc18xID0gcmVxdWlyZShcIi4vZW51bS12YWx1ZXMuanNcIik7XG5mdW5jdGlvbiBtZXJnZUVudW0oZTEsIGUyLCBjb25maWcsIGRpcmVjdGl2ZXMpIHtcbiAgICBpZiAoZTIpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IGUxLm5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZTFbJ2Rlc2NyaXB0aW9uJ10gfHwgZTJbJ2Rlc2NyaXB0aW9uJ10sXG4gICAgICAgICAgICBraW5kOiAoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmNvbnZlcnRFeHRlbnNpb25zKSB8fCBlMS5raW5kID09PSAnRW51bVR5cGVEZWZpbml0aW9uJyB8fCBlMi5raW5kID09PSAnRW51bVR5cGVEZWZpbml0aW9uJ1xuICAgICAgICAgICAgICAgID8gJ0VudW1UeXBlRGVmaW5pdGlvbidcbiAgICAgICAgICAgICAgICA6ICdFbnVtVHlwZUV4dGVuc2lvbicsXG4gICAgICAgICAgICBsb2M6IGUxLmxvYyxcbiAgICAgICAgICAgIGRpcmVjdGl2ZXM6ICgwLCBkaXJlY3RpdmVzX2pzXzEubWVyZ2VEaXJlY3RpdmVzKShlMS5kaXJlY3RpdmVzLCBlMi5kaXJlY3RpdmVzLCBjb25maWcsIGRpcmVjdGl2ZXMpLFxuICAgICAgICAgICAgdmFsdWVzOiAoMCwgZW51bV92YWx1ZXNfanNfMS5tZXJnZUVudW1WYWx1ZXMpKGUxLnZhbHVlcywgZTIudmFsdWVzLCBjb25maWcpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5jb252ZXJ0RXh0ZW5zaW9ucylcbiAgICAgICAgPyB7XG4gICAgICAgICAgICAuLi5lMSxcbiAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLkVOVU1fVFlQRV9ERUZJTklUSU9OLFxuICAgICAgICB9XG4gICAgICAgIDogZTE7XG59XG5leHBvcnRzLm1lcmdlRW51bSA9IG1lcmdlRW51bTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/fields.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/fields.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeFields = void 0;\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/utils.js\");\nconst directives_js_1 = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js\");\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nconst arguments_js_1 = __webpack_require__(/*! ./arguments.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/arguments.js\");\nfunction fieldAlreadyExists(fieldsArr, otherField) {\n    const resultIndex = fieldsArr.findIndex(field => field.name.value === otherField.name.value);\n    return [resultIndex > -1 ? fieldsArr[resultIndex] : null, resultIndex];\n}\nfunction mergeFields(type, f1, f2, config, directives) {\n    const result = [];\n    if (f2 != null) {\n        result.push(...f2);\n    }\n    if (f1 != null) {\n        for (const field of f1) {\n            const [existing, existingIndex] = fieldAlreadyExists(result, field);\n            if (existing && !(config === null || config === void 0 ? void 0 : config.ignoreFieldConflicts)) {\n                const newField = ((config === null || config === void 0 ? void 0 : config.onFieldTypeConflict) && config.onFieldTypeConflict(existing, field, type, config === null || config === void 0 ? void 0 : config.throwOnConflict)) ||\n                    preventConflicts(type, existing, field, config === null || config === void 0 ? void 0 : config.throwOnConflict);\n                newField.arguments = (0, arguments_js_1.mergeArguments)(field['arguments'] || [], existing['arguments'] || [], config);\n                newField.directives = (0, directives_js_1.mergeDirectives)(field.directives, existing.directives, config, directives);\n                newField.description = field.description || existing.description;\n                result[existingIndex] = newField;\n            }\n            else {\n                result.push(field);\n            }\n        }\n    }\n    if (config && config.sort) {\n        result.sort(utils_1.compareNodes);\n    }\n    if (config && config.exclusions) {\n        const exclusions = config.exclusions;\n        return result.filter(field => !exclusions.includes(`${type.name.value}.${field.name.value}`));\n    }\n    return result;\n}\nexports.mergeFields = mergeFields;\nfunction preventConflicts(type, a, b, ignoreNullability = false) {\n    const aType = (0, utils_js_1.printTypeNode)(a.type);\n    const bType = (0, utils_js_1.printTypeNode)(b.type);\n    if (aType !== bType) {\n        const t1 = (0, utils_js_1.extractType)(a.type);\n        const t2 = (0, utils_js_1.extractType)(b.type);\n        if (t1.name.value !== t2.name.value) {\n            throw new Error(`Field \"${b.name.value}\" already defined with a different type. Declared as \"${t1.name.value}\", but you tried to override with \"${t2.name.value}\"`);\n        }\n        if (!safeChangeForFieldType(a.type, b.type, !ignoreNullability)) {\n            throw new Error(`Field '${type.name.value}.${a.name.value}' changed type from '${aType}' to '${bType}'`);\n        }\n    }\n    if ((0, utils_js_1.isNonNullTypeNode)(b.type) && !(0, utils_js_1.isNonNullTypeNode)(a.type)) {\n        a.type = b.type;\n    }\n    return a;\n}\nfunction safeChangeForFieldType(oldType, newType, ignoreNullability = false) {\n    // both are named\n    if (!(0, utils_js_1.isWrappingTypeNode)(oldType) && !(0, utils_js_1.isWrappingTypeNode)(newType)) {\n        return oldType.toString() === newType.toString();\n    }\n    // new is non-null\n    if ((0, utils_js_1.isNonNullTypeNode)(newType)) {\n        const ofType = (0, utils_js_1.isNonNullTypeNode)(oldType) ? oldType.type : oldType;\n        return safeChangeForFieldType(ofType, newType.type);\n    }\n    // old is non-null\n    if ((0, utils_js_1.isNonNullTypeNode)(oldType)) {\n        return safeChangeForFieldType(newType, oldType, ignoreNullability);\n    }\n    // old is list\n    if ((0, utils_js_1.isListTypeNode)(oldType)) {\n        return (((0, utils_js_1.isListTypeNode)(newType) && safeChangeForFieldType(oldType.type, newType.type)) ||\n            ((0, utils_js_1.isNonNullTypeNode)(newType) && safeChangeForFieldType(oldType, newType['type'])));\n    }\n    return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL2ZpZWxkcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsbUJBQW1CLG1CQUFPLENBQUMsdUhBQVk7QUFDdkMsd0JBQXdCLG1CQUFPLENBQUMsaUlBQWlCO0FBQ2pELGdCQUFnQixtQkFBTyxDQUFDLG9GQUFzQjtBQUM5Qyx1QkFBdUIsbUJBQU8sQ0FBQywrSEFBZ0I7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQThELGdCQUFnQixHQUFHLGlCQUFpQjtBQUNsRztBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQ0FBc0MsYUFBYSx3REFBd0QsY0FBYyxxQ0FBcUMsY0FBYztBQUM1SztBQUNBO0FBQ0Esc0NBQXNDLGdCQUFnQixHQUFHLGFBQWEsdUJBQXVCLE1BQU0sUUFBUSxNQUFNO0FBQ2pIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9tZXJnZS9janMvdHlwZWRlZnMtbWVyZ2Vycy9maWVsZHMuanM/NzE5YiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2VGaWVsZHMgPSB2b2lkIDA7XG5jb25zdCB1dGlsc19qc18xID0gcmVxdWlyZShcIi4vdXRpbHMuanNcIik7XG5jb25zdCBkaXJlY3RpdmVzX2pzXzEgPSByZXF1aXJlKFwiLi9kaXJlY3RpdmVzLmpzXCIpO1xuY29uc3QgdXRpbHNfMSA9IHJlcXVpcmUoXCJAZ3JhcGhxbC10b29scy91dGlsc1wiKTtcbmNvbnN0IGFyZ3VtZW50c19qc18xID0gcmVxdWlyZShcIi4vYXJndW1lbnRzLmpzXCIpO1xuZnVuY3Rpb24gZmllbGRBbHJlYWR5RXhpc3RzKGZpZWxkc0Fyciwgb3RoZXJGaWVsZCkge1xuICAgIGNvbnN0IHJlc3VsdEluZGV4ID0gZmllbGRzQXJyLmZpbmRJbmRleChmaWVsZCA9PiBmaWVsZC5uYW1lLnZhbHVlID09PSBvdGhlckZpZWxkLm5hbWUudmFsdWUpO1xuICAgIHJldHVybiBbcmVzdWx0SW5kZXggPiAtMSA/IGZpZWxkc0FycltyZXN1bHRJbmRleF0gOiBudWxsLCByZXN1bHRJbmRleF07XG59XG5mdW5jdGlvbiBtZXJnZUZpZWxkcyh0eXBlLCBmMSwgZjIsIGNvbmZpZywgZGlyZWN0aXZlcykge1xuICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xuICAgIGlmIChmMiAhPSBudWxsKSB7XG4gICAgICAgIHJlc3VsdC5wdXNoKC4uLmYyKTtcbiAgICB9XG4gICAgaWYgKGYxICE9IG51bGwpIHtcbiAgICAgICAgZm9yIChjb25zdCBmaWVsZCBvZiBmMSkge1xuICAgICAgICAgICAgY29uc3QgW2V4aXN0aW5nLCBleGlzdGluZ0luZGV4XSA9IGZpZWxkQWxyZWFkeUV4aXN0cyhyZXN1bHQsIGZpZWxkKTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZyAmJiAhKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5pZ25vcmVGaWVsZENvbmZsaWN0cykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBuZXdGaWVsZCA9ICgoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLm9uRmllbGRUeXBlQ29uZmxpY3QpICYmIGNvbmZpZy5vbkZpZWxkVHlwZUNvbmZsaWN0KGV4aXN0aW5nLCBmaWVsZCwgdHlwZSwgY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLnRocm93T25Db25mbGljdCkpIHx8XG4gICAgICAgICAgICAgICAgICAgIHByZXZlbnRDb25mbGljdHModHlwZSwgZXhpc3RpbmcsIGZpZWxkLCBjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcudGhyb3dPbkNvbmZsaWN0KTtcbiAgICAgICAgICAgICAgICBuZXdGaWVsZC5hcmd1bWVudHMgPSAoMCwgYXJndW1lbnRzX2pzXzEubWVyZ2VBcmd1bWVudHMpKGZpZWxkWydhcmd1bWVudHMnXSB8fCBbXSwgZXhpc3RpbmdbJ2FyZ3VtZW50cyddIHx8IFtdLCBjb25maWcpO1xuICAgICAgICAgICAgICAgIG5ld0ZpZWxkLmRpcmVjdGl2ZXMgPSAoMCwgZGlyZWN0aXZlc19qc18xLm1lcmdlRGlyZWN0aXZlcykoZmllbGQuZGlyZWN0aXZlcywgZXhpc3RpbmcuZGlyZWN0aXZlcywgY29uZmlnLCBkaXJlY3RpdmVzKTtcbiAgICAgICAgICAgICAgICBuZXdGaWVsZC5kZXNjcmlwdGlvbiA9IGZpZWxkLmRlc2NyaXB0aW9uIHx8IGV4aXN0aW5nLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIHJlc3VsdFtleGlzdGluZ0luZGV4XSA9IG5ld0ZpZWxkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goZmllbGQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjb25maWcgJiYgY29uZmlnLnNvcnQpIHtcbiAgICAgICAgcmVzdWx0LnNvcnQodXRpbHNfMS5jb21wYXJlTm9kZXMpO1xuICAgIH1cbiAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5leGNsdXNpb25zKSB7XG4gICAgICAgIGNvbnN0IGV4Y2x1c2lvbnMgPSBjb25maWcuZXhjbHVzaW9ucztcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5maWx0ZXIoZmllbGQgPT4gIWV4Y2x1c2lvbnMuaW5jbHVkZXMoYCR7dHlwZS5uYW1lLnZhbHVlfS4ke2ZpZWxkLm5hbWUudmFsdWV9YCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZXhwb3J0cy5tZXJnZUZpZWxkcyA9IG1lcmdlRmllbGRzO1xuZnVuY3Rpb24gcHJldmVudENvbmZsaWN0cyh0eXBlLCBhLCBiLCBpZ25vcmVOdWxsYWJpbGl0eSA9IGZhbHNlKSB7XG4gICAgY29uc3QgYVR5cGUgPSAoMCwgdXRpbHNfanNfMS5wcmludFR5cGVOb2RlKShhLnR5cGUpO1xuICAgIGNvbnN0IGJUeXBlID0gKDAsIHV0aWxzX2pzXzEucHJpbnRUeXBlTm9kZSkoYi50eXBlKTtcbiAgICBpZiAoYVR5cGUgIT09IGJUeXBlKSB7XG4gICAgICAgIGNvbnN0IHQxID0gKDAsIHV0aWxzX2pzXzEuZXh0cmFjdFR5cGUpKGEudHlwZSk7XG4gICAgICAgIGNvbnN0IHQyID0gKDAsIHV0aWxzX2pzXzEuZXh0cmFjdFR5cGUpKGIudHlwZSk7XG4gICAgICAgIGlmICh0MS5uYW1lLnZhbHVlICE9PSB0Mi5uYW1lLnZhbHVlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpZWxkIFwiJHtiLm5hbWUudmFsdWV9XCIgYWxyZWFkeSBkZWZpbmVkIHdpdGggYSBkaWZmZXJlbnQgdHlwZS4gRGVjbGFyZWQgYXMgXCIke3QxLm5hbWUudmFsdWV9XCIsIGJ1dCB5b3UgdHJpZWQgdG8gb3ZlcnJpZGUgd2l0aCBcIiR7dDIubmFtZS52YWx1ZX1cImApO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2FmZUNoYW5nZUZvckZpZWxkVHlwZShhLnR5cGUsIGIudHlwZSwgIWlnbm9yZU51bGxhYmlsaXR5KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGaWVsZCAnJHt0eXBlLm5hbWUudmFsdWV9LiR7YS5uYW1lLnZhbHVlfScgY2hhbmdlZCB0eXBlIGZyb20gJyR7YVR5cGV9JyB0byAnJHtiVHlwZX0nYCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKCgwLCB1dGlsc19qc18xLmlzTm9uTnVsbFR5cGVOb2RlKShiLnR5cGUpICYmICEoMCwgdXRpbHNfanNfMS5pc05vbk51bGxUeXBlTm9kZSkoYS50eXBlKSkge1xuICAgICAgICBhLnR5cGUgPSBiLnR5cGU7XG4gICAgfVxuICAgIHJldHVybiBhO1xufVxuZnVuY3Rpb24gc2FmZUNoYW5nZUZvckZpZWxkVHlwZShvbGRUeXBlLCBuZXdUeXBlLCBpZ25vcmVOdWxsYWJpbGl0eSA9IGZhbHNlKSB7XG4gICAgLy8gYm90aCBhcmUgbmFtZWRcbiAgICBpZiAoISgwLCB1dGlsc19qc18xLmlzV3JhcHBpbmdUeXBlTm9kZSkob2xkVHlwZSkgJiYgISgwLCB1dGlsc19qc18xLmlzV3JhcHBpbmdUeXBlTm9kZSkobmV3VHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIG9sZFR5cGUudG9TdHJpbmcoKSA9PT0gbmV3VHlwZS50b1N0cmluZygpO1xuICAgIH1cbiAgICAvLyBuZXcgaXMgbm9uLW51bGxcbiAgICBpZiAoKDAsIHV0aWxzX2pzXzEuaXNOb25OdWxsVHlwZU5vZGUpKG5ld1R5cGUpKSB7XG4gICAgICAgIGNvbnN0IG9mVHlwZSA9ICgwLCB1dGlsc19qc18xLmlzTm9uTnVsbFR5cGVOb2RlKShvbGRUeXBlKSA/IG9sZFR5cGUudHlwZSA6IG9sZFR5cGU7XG4gICAgICAgIHJldHVybiBzYWZlQ2hhbmdlRm9yRmllbGRUeXBlKG9mVHlwZSwgbmV3VHlwZS50eXBlKTtcbiAgICB9XG4gICAgLy8gb2xkIGlzIG5vbi1udWxsXG4gICAgaWYgKCgwLCB1dGlsc19qc18xLmlzTm9uTnVsbFR5cGVOb2RlKShvbGRUeXBlKSkge1xuICAgICAgICByZXR1cm4gc2FmZUNoYW5nZUZvckZpZWxkVHlwZShuZXdUeXBlLCBvbGRUeXBlLCBpZ25vcmVOdWxsYWJpbGl0eSk7XG4gICAgfVxuICAgIC8vIG9sZCBpcyBsaXN0XG4gICAgaWYgKCgwLCB1dGlsc19qc18xLmlzTGlzdFR5cGVOb2RlKShvbGRUeXBlKSkge1xuICAgICAgICByZXR1cm4gKCgoMCwgdXRpbHNfanNfMS5pc0xpc3RUeXBlTm9kZSkobmV3VHlwZSkgJiYgc2FmZUNoYW5nZUZvckZpZWxkVHlwZShvbGRUeXBlLnR5cGUsIG5ld1R5cGUudHlwZSkpIHx8XG4gICAgICAgICAgICAoKDAsIHV0aWxzX2pzXzEuaXNOb25OdWxsVHlwZU5vZGUpKG5ld1R5cGUpICYmIHNhZmVDaGFuZ2VGb3JGaWVsZFR5cGUob2xkVHlwZSwgbmV3VHlwZVsndHlwZSddKSkpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/fields.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/index.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/index.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\ntslib_1.__exportStar(__webpack_require__(/*! ./arguments.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/arguments.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./enum-values.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum-values.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./enum.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./fields.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/fields.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./input-type.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/input-type.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./interface.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/interface.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./merge-named-type-array.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-named-type-array.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./merge-nodes.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-nodes.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./merge-typedefs.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-typedefs.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./scalar.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/scalar.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./type.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/type.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./union.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/union.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/utils.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGdCQUFnQixtQkFBTyxDQUFDLHVEQUFPO0FBQy9CLHFCQUFxQixtQkFBTyxDQUFDLCtIQUFnQjtBQUM3QyxxQkFBcUIsbUJBQU8sQ0FBQyxpSUFBaUI7QUFDOUMscUJBQXFCLG1CQUFPLENBQUMsbUlBQWtCO0FBQy9DLHFCQUFxQixtQkFBTyxDQUFDLHFIQUFXO0FBQ3hDLHFCQUFxQixtQkFBTyxDQUFDLHlIQUFhO0FBQzFDLHFCQUFxQixtQkFBTyxDQUFDLGlJQUFpQjtBQUM5QyxxQkFBcUIsbUJBQU8sQ0FBQywrSEFBZ0I7QUFDN0MscUJBQXFCLG1CQUFPLENBQUMseUpBQTZCO0FBQzFELHFCQUFxQixtQkFBTyxDQUFDLG1JQUFrQjtBQUMvQyxxQkFBcUIsbUJBQU8sQ0FBQyx5SUFBcUI7QUFDbEQscUJBQXFCLG1CQUFPLENBQUMseUhBQWE7QUFDMUMscUJBQXFCLG1CQUFPLENBQUMscUhBQVc7QUFDeEMscUJBQXFCLG1CQUFPLENBQUMsdUhBQVk7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsdUhBQVkiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL2luZGV4LmpzPzU4OWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCB0c2xpYl8xID0gcmVxdWlyZShcInRzbGliXCIpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXJndW1lbnRzLmpzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2RpcmVjdGl2ZXMuanNcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW51bS12YWx1ZXMuanNcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vZW51bS5qc1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9maWVsZHMuanNcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vaW5wdXQtdHlwZS5qc1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9pbnRlcmZhY2UuanNcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbWVyZ2UtbmFtZWQtdHlwZS1hcnJheS5qc1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9tZXJnZS1ub2Rlcy5qc1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9tZXJnZS10eXBlZGVmcy5qc1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9zY2FsYXIuanNcIiksIGV4cG9ydHMpO1xudHNsaWJfMS5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vdHlwZS5qc1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91bmlvbi5qc1wiKSwgZXhwb3J0cyk7XG50c2xpYl8xLl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi91dGlscy5qc1wiKSwgZXhwb3J0cyk7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/input-type.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/input-type.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeInputType = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst fields_js_1 = __webpack_require__(/*! ./fields.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/fields.js\");\nconst directives_js_1 = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js\");\nfunction mergeInputType(node, existingNode, config, directives) {\n    if (existingNode) {\n        try {\n            return {\n                name: node.name,\n                description: node['description'] || existingNode['description'],\n                kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) ||\n                    node.kind === 'InputObjectTypeDefinition' ||\n                    existingNode.kind === 'InputObjectTypeDefinition'\n                    ? 'InputObjectTypeDefinition'\n                    : 'InputObjectTypeExtension',\n                loc: node.loc,\n                fields: (0, fields_js_1.mergeFields)(node, node.fields, existingNode.fields, config),\n                directives: (0, directives_js_1.mergeDirectives)(node.directives, existingNode.directives, config, directives),\n            };\n        }\n        catch (e) {\n            throw new Error(`Unable to merge GraphQL input type \"${node.name.value}\": ${e.message}`);\n        }\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        }\n        : node;\n}\nexports.mergeInputType = mergeInputType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL2lucHV0LXR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCLGtCQUFrQixtQkFBTyxDQUFDLHVEQUFTO0FBQ25DLG9CQUFvQixtQkFBTyxDQUFDLHlIQUFhO0FBQ3pDLHdCQUF3QixtQkFBTyxDQUFDLGlJQUFpQjtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUVBQW1FLGdCQUFnQixLQUFLLFVBQVU7QUFDbEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9tZXJnZS9janMvdHlwZWRlZnMtbWVyZ2Vycy9pbnB1dC10eXBlLmpzP2MyNDgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlSW5wdXRUeXBlID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5jb25zdCBmaWVsZHNfanNfMSA9IHJlcXVpcmUoXCIuL2ZpZWxkcy5qc1wiKTtcbmNvbnN0IGRpcmVjdGl2ZXNfanNfMSA9IHJlcXVpcmUoXCIuL2RpcmVjdGl2ZXMuanNcIik7XG5mdW5jdGlvbiBtZXJnZUlucHV0VHlwZShub2RlLCBleGlzdGluZ05vZGUsIGNvbmZpZywgZGlyZWN0aXZlcykge1xuICAgIGlmIChleGlzdGluZ05vZGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBub2RlWydkZXNjcmlwdGlvbiddIHx8IGV4aXN0aW5nTm9kZVsnZGVzY3JpcHRpb24nXSxcbiAgICAgICAgICAgICAgICBraW5kOiAoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmNvbnZlcnRFeHRlbnNpb25zKSB8fFxuICAgICAgICAgICAgICAgICAgICBub2RlLmtpbmQgPT09ICdJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uJyB8fFxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZ05vZGUua2luZCA9PT0gJ0lucHV0T2JqZWN0VHlwZURlZmluaXRpb24nXG4gICAgICAgICAgICAgICAgICAgID8gJ0lucHV0T2JqZWN0VHlwZURlZmluaXRpb24nXG4gICAgICAgICAgICAgICAgICAgIDogJ0lucHV0T2JqZWN0VHlwZUV4dGVuc2lvbicsXG4gICAgICAgICAgICAgICAgbG9jOiBub2RlLmxvYyxcbiAgICAgICAgICAgICAgICBmaWVsZHM6ICgwLCBmaWVsZHNfanNfMS5tZXJnZUZpZWxkcykobm9kZSwgbm9kZS5maWVsZHMsIGV4aXN0aW5nTm9kZS5maWVsZHMsIGNvbmZpZyksXG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlczogKDAsIGRpcmVjdGl2ZXNfanNfMS5tZXJnZURpcmVjdGl2ZXMpKG5vZGUuZGlyZWN0aXZlcywgZXhpc3RpbmdOb2RlLmRpcmVjdGl2ZXMsIGNvbmZpZywgZGlyZWN0aXZlcyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBtZXJnZSBHcmFwaFFMIGlucHV0IHR5cGUgXCIke25vZGUubmFtZS52YWx1ZX1cIjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuY29udmVydEV4dGVuc2lvbnMpXG4gICAgICAgID8ge1xuICAgICAgICAgICAgLi4ubm9kZSxcbiAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLklOUFVUX09CSkVDVF9UWVBFX0RFRklOSVRJT04sXG4gICAgICAgIH1cbiAgICAgICAgOiBub2RlO1xufVxuZXhwb3J0cy5tZXJnZUlucHV0VHlwZSA9IG1lcmdlSW5wdXRUeXBlO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/input-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/interface.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/interface.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeInterface = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst fields_js_1 = __webpack_require__(/*! ./fields.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/fields.js\");\nconst directives_js_1 = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js\");\nconst merge_named_type_array_js_1 = __webpack_require__(/*! ./merge-named-type-array.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-named-type-array.js\");\nfunction mergeInterface(node, existingNode, config, directives) {\n    if (existingNode) {\n        try {\n            return {\n                name: node.name,\n                description: node['description'] || existingNode['description'],\n                kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) ||\n                    node.kind === 'InterfaceTypeDefinition' ||\n                    existingNode.kind === 'InterfaceTypeDefinition'\n                    ? 'InterfaceTypeDefinition'\n                    : 'InterfaceTypeExtension',\n                loc: node.loc,\n                fields: (0, fields_js_1.mergeFields)(node, node.fields, existingNode.fields, config),\n                directives: (0, directives_js_1.mergeDirectives)(node.directives, existingNode.directives, config, directives),\n                interfaces: node['interfaces']\n                    ? (0, merge_named_type_array_js_1.mergeNamedTypeArray)(node['interfaces'], existingNode['interfaces'], config)\n                    : undefined,\n            };\n        }\n        catch (e) {\n            throw new Error(`Unable to merge GraphQL interface \"${node.name.value}\": ${e.message}`);\n        }\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: graphql_1.Kind.INTERFACE_TYPE_DEFINITION,\n        }\n        : node;\n}\nexports.mergeInterface = mergeInterface;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL2ludGVyZmFjZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxzQkFBc0I7QUFDdEIsa0JBQWtCLG1CQUFPLENBQUMsdURBQVM7QUFDbkMsb0JBQW9CLG1CQUFPLENBQUMseUhBQWE7QUFDekMsd0JBQXdCLG1CQUFPLENBQUMsaUlBQWlCO0FBQ2pELG9DQUFvQyxtQkFBTyxDQUFDLHlKQUE2QjtBQUN6RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0VBQWtFLGdCQUFnQixLQUFLLFVBQVU7QUFDakc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9tZXJnZS9janMvdHlwZWRlZnMtbWVyZ2Vycy9pbnRlcmZhY2UuanM/NDZmMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2VJbnRlcmZhY2UgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IGZpZWxkc19qc18xID0gcmVxdWlyZShcIi4vZmllbGRzLmpzXCIpO1xuY29uc3QgZGlyZWN0aXZlc19qc18xID0gcmVxdWlyZShcIi4vZGlyZWN0aXZlcy5qc1wiKTtcbmNvbnN0IG1lcmdlX25hbWVkX3R5cGVfYXJyYXlfanNfMSA9IHJlcXVpcmUoXCIuL21lcmdlLW5hbWVkLXR5cGUtYXJyYXkuanNcIik7XG5mdW5jdGlvbiBtZXJnZUludGVyZmFjZShub2RlLCBleGlzdGluZ05vZGUsIGNvbmZpZywgZGlyZWN0aXZlcykge1xuICAgIGlmIChleGlzdGluZ05vZGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBub2RlWydkZXNjcmlwdGlvbiddIHx8IGV4aXN0aW5nTm9kZVsnZGVzY3JpcHRpb24nXSxcbiAgICAgICAgICAgICAgICBraW5kOiAoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmNvbnZlcnRFeHRlbnNpb25zKSB8fFxuICAgICAgICAgICAgICAgICAgICBub2RlLmtpbmQgPT09ICdJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdOb2RlLmtpbmQgPT09ICdJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyAnSW50ZXJmYWNlVHlwZURlZmluaXRpb24nXG4gICAgICAgICAgICAgICAgICAgIDogJ0ludGVyZmFjZVR5cGVFeHRlbnNpb24nLFxuICAgICAgICAgICAgICAgIGxvYzogbm9kZS5sb2MsXG4gICAgICAgICAgICAgICAgZmllbGRzOiAoMCwgZmllbGRzX2pzXzEubWVyZ2VGaWVsZHMpKG5vZGUsIG5vZGUuZmllbGRzLCBleGlzdGluZ05vZGUuZmllbGRzLCBjb25maWcpLFxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6ICgwLCBkaXJlY3RpdmVzX2pzXzEubWVyZ2VEaXJlY3RpdmVzKShub2RlLmRpcmVjdGl2ZXMsIGV4aXN0aW5nTm9kZS5kaXJlY3RpdmVzLCBjb25maWcsIGRpcmVjdGl2ZXMpLFxuICAgICAgICAgICAgICAgIGludGVyZmFjZXM6IG5vZGVbJ2ludGVyZmFjZXMnXVxuICAgICAgICAgICAgICAgICAgICA/ICgwLCBtZXJnZV9uYW1lZF90eXBlX2FycmF5X2pzXzEubWVyZ2VOYW1lZFR5cGVBcnJheSkobm9kZVsnaW50ZXJmYWNlcyddLCBleGlzdGluZ05vZGVbJ2ludGVyZmFjZXMnXSwgY29uZmlnKVxuICAgICAgICAgICAgICAgICAgICA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIG1lcmdlIEdyYXBoUUwgaW50ZXJmYWNlIFwiJHtub2RlLm5hbWUudmFsdWV9XCI6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiAoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmNvbnZlcnRFeHRlbnNpb25zKVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIC4uLm5vZGUsXG4gICAgICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5JTlRFUkZBQ0VfVFlQRV9ERUZJTklUSU9OLFxuICAgICAgICB9XG4gICAgICAgIDogbm9kZTtcbn1cbmV4cG9ydHMubWVyZ2VJbnRlcmZhY2UgPSBtZXJnZUludGVyZmFjZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/interface.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-named-type-array.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-named-type-array.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeNamedTypeArray = void 0;\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nfunction alreadyExists(arr, other) {\n    return !!arr.find(i => i.name.value === other.name.value);\n}\nfunction mergeNamedTypeArray(first = [], second = [], config = {}) {\n    const result = [...second, ...first.filter(d => !alreadyExists(second, d))];\n    if (config && config.sort) {\n        result.sort(utils_1.compareNodes);\n    }\n    return result;\n}\nexports.mergeNamedTypeArray = mergeNamedTypeArray;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL21lcmdlLW5hbWVkLXR5cGUtYXJyYXkuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsMkJBQTJCO0FBQzNCLGdCQUFnQixtQkFBTyxDQUFDLG9GQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQSxpRUFBaUU7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkJBQTJCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9tZXJnZS9janMvdHlwZWRlZnMtbWVyZ2Vycy9tZXJnZS1uYW1lZC10eXBlLWFycmF5LmpzP2ZkODgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlTmFtZWRUeXBlQXJyYXkgPSB2b2lkIDA7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIkBncmFwaHFsLXRvb2xzL3V0aWxzXCIpO1xuZnVuY3Rpb24gYWxyZWFkeUV4aXN0cyhhcnIsIG90aGVyKSB7XG4gICAgcmV0dXJuICEhYXJyLmZpbmQoaSA9PiBpLm5hbWUudmFsdWUgPT09IG90aGVyLm5hbWUudmFsdWUpO1xufVxuZnVuY3Rpb24gbWVyZ2VOYW1lZFR5cGVBcnJheShmaXJzdCA9IFtdLCBzZWNvbmQgPSBbXSwgY29uZmlnID0ge30pIHtcbiAgICBjb25zdCByZXN1bHQgPSBbLi4uc2Vjb25kLCAuLi5maXJzdC5maWx0ZXIoZCA9PiAhYWxyZWFkeUV4aXN0cyhzZWNvbmQsIGQpKV07XG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcuc29ydCkge1xuICAgICAgICByZXN1bHQuc29ydCh1dGlsc18xLmNvbXBhcmVOb2Rlcyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5leHBvcnRzLm1lcmdlTmFtZWRUeXBlQXJyYXkgPSBtZXJnZU5hbWVkVHlwZUFycmF5O1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-named-type-array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-nodes.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-nodes.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeGraphQLNodes = exports.isNamedDefinitionNode = exports.schemaDefSymbol = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst type_js_1 = __webpack_require__(/*! ./type.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/type.js\");\nconst enum_js_1 = __webpack_require__(/*! ./enum.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/enum.js\");\nconst scalar_js_1 = __webpack_require__(/*! ./scalar.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/scalar.js\");\nconst union_js_1 = __webpack_require__(/*! ./union.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/union.js\");\nconst input_type_js_1 = __webpack_require__(/*! ./input-type.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/input-type.js\");\nconst interface_js_1 = __webpack_require__(/*! ./interface.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/interface.js\");\nconst directives_js_1 = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js\");\nconst schema_def_js_1 = __webpack_require__(/*! ./schema-def.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/schema-def.js\");\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nexports.schemaDefSymbol = 'SCHEMA_DEF_SYMBOL';\nfunction isNamedDefinitionNode(definitionNode) {\n    return 'name' in definitionNode;\n}\nexports.isNamedDefinitionNode = isNamedDefinitionNode;\nfunction mergeGraphQLNodes(nodes, config, directives = {}) {\n    var _a, _b, _c;\n    const mergedResultMap = directives;\n    for (const nodeDefinition of nodes) {\n        if (isNamedDefinitionNode(nodeDefinition)) {\n            const name = (_a = nodeDefinition.name) === null || _a === void 0 ? void 0 : _a.value;\n            if (config === null || config === void 0 ? void 0 : config.commentDescriptions) {\n                (0, utils_1.collectComment)(nodeDefinition);\n            }\n            if (name == null) {\n                continue;\n            }\n            if (((_b = config === null || config === void 0 ? void 0 : config.exclusions) === null || _b === void 0 ? void 0 : _b.includes(name + '.*')) || ((_c = config === null || config === void 0 ? void 0 : config.exclusions) === null || _c === void 0 ? void 0 : _c.includes(name))) {\n                delete mergedResultMap[name];\n            }\n            else {\n                switch (nodeDefinition.kind) {\n                    case graphql_1.Kind.OBJECT_TYPE_DEFINITION:\n                    case graphql_1.Kind.OBJECT_TYPE_EXTENSION:\n                        mergedResultMap[name] = (0, type_js_1.mergeType)(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case graphql_1.Kind.ENUM_TYPE_DEFINITION:\n                    case graphql_1.Kind.ENUM_TYPE_EXTENSION:\n                        mergedResultMap[name] = (0, enum_js_1.mergeEnum)(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case graphql_1.Kind.UNION_TYPE_DEFINITION:\n                    case graphql_1.Kind.UNION_TYPE_EXTENSION:\n                        mergedResultMap[name] = (0, union_js_1.mergeUnion)(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case graphql_1.Kind.SCALAR_TYPE_DEFINITION:\n                    case graphql_1.Kind.SCALAR_TYPE_EXTENSION:\n                        mergedResultMap[name] = (0, scalar_js_1.mergeScalar)(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case graphql_1.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n                    case graphql_1.Kind.INPUT_OBJECT_TYPE_EXTENSION:\n                        mergedResultMap[name] = (0, input_type_js_1.mergeInputType)(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case graphql_1.Kind.INTERFACE_TYPE_DEFINITION:\n                    case graphql_1.Kind.INTERFACE_TYPE_EXTENSION:\n                        mergedResultMap[name] = (0, interface_js_1.mergeInterface)(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case graphql_1.Kind.DIRECTIVE_DEFINITION:\n                        mergedResultMap[name] = (0, directives_js_1.mergeDirective)(nodeDefinition, mergedResultMap[name]);\n                        break;\n                }\n            }\n        }\n        else if (nodeDefinition.kind === graphql_1.Kind.SCHEMA_DEFINITION || nodeDefinition.kind === graphql_1.Kind.SCHEMA_EXTENSION) {\n            mergedResultMap[exports.schemaDefSymbol] = (0, schema_def_js_1.mergeSchemaDefs)(nodeDefinition, mergedResultMap[exports.schemaDefSymbol], config);\n        }\n    }\n    return mergedResultMap;\n}\nexports.mergeGraphQLNodes = mergeGraphQLNodes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL21lcmdlLW5vZGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELHlCQUF5QixHQUFHLDZCQUE2QixHQUFHLHVCQUF1QjtBQUNuRixrQkFBa0IsbUJBQU8sQ0FBQyx1REFBUztBQUNuQyxrQkFBa0IsbUJBQU8sQ0FBQyxxSEFBVztBQUNyQyxrQkFBa0IsbUJBQU8sQ0FBQyxxSEFBVztBQUNyQyxvQkFBb0IsbUJBQU8sQ0FBQyx5SEFBYTtBQUN6QyxtQkFBbUIsbUJBQU8sQ0FBQyx1SEFBWTtBQUN2Qyx3QkFBd0IsbUJBQU8sQ0FBQyxpSUFBaUI7QUFDakQsdUJBQXVCLG1CQUFPLENBQUMsK0hBQWdCO0FBQy9DLHdCQUF3QixtQkFBTyxDQUFDLGlJQUFpQjtBQUNqRCx3QkFBd0IsbUJBQU8sQ0FBQyxpSUFBaUI7QUFDakQsZ0JBQWdCLG1CQUFPLENBQUMsb0ZBQXNCO0FBQzlDLHVCQUF1QjtBQUN2QjtBQUNBO0FBQ0E7QUFDQSw2QkFBNkI7QUFDN0IseURBQXlEO0FBQ3pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9tZXJnZS9janMvdHlwZWRlZnMtbWVyZ2Vycy9tZXJnZS1ub2Rlcy5qcz9hZTNhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZUdyYXBoUUxOb2RlcyA9IGV4cG9ydHMuaXNOYW1lZERlZmluaXRpb25Ob2RlID0gZXhwb3J0cy5zY2hlbWFEZWZTeW1ib2wgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IHR5cGVfanNfMSA9IHJlcXVpcmUoXCIuL3R5cGUuanNcIik7XG5jb25zdCBlbnVtX2pzXzEgPSByZXF1aXJlKFwiLi9lbnVtLmpzXCIpO1xuY29uc3Qgc2NhbGFyX2pzXzEgPSByZXF1aXJlKFwiLi9zY2FsYXIuanNcIik7XG5jb25zdCB1bmlvbl9qc18xID0gcmVxdWlyZShcIi4vdW5pb24uanNcIik7XG5jb25zdCBpbnB1dF90eXBlX2pzXzEgPSByZXF1aXJlKFwiLi9pbnB1dC10eXBlLmpzXCIpO1xuY29uc3QgaW50ZXJmYWNlX2pzXzEgPSByZXF1aXJlKFwiLi9pbnRlcmZhY2UuanNcIik7XG5jb25zdCBkaXJlY3RpdmVzX2pzXzEgPSByZXF1aXJlKFwiLi9kaXJlY3RpdmVzLmpzXCIpO1xuY29uc3Qgc2NoZW1hX2RlZl9qc18xID0gcmVxdWlyZShcIi4vc2NoZW1hLWRlZi5qc1wiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQGdyYXBocWwtdG9vbHMvdXRpbHNcIik7XG5leHBvcnRzLnNjaGVtYURlZlN5bWJvbCA9ICdTQ0hFTUFfREVGX1NZTUJPTCc7XG5mdW5jdGlvbiBpc05hbWVkRGVmaW5pdGlvbk5vZGUoZGVmaW5pdGlvbk5vZGUpIHtcbiAgICByZXR1cm4gJ25hbWUnIGluIGRlZmluaXRpb25Ob2RlO1xufVxuZXhwb3J0cy5pc05hbWVkRGVmaW5pdGlvbk5vZGUgPSBpc05hbWVkRGVmaW5pdGlvbk5vZGU7XG5mdW5jdGlvbiBtZXJnZUdyYXBoUUxOb2Rlcyhub2RlcywgY29uZmlnLCBkaXJlY3RpdmVzID0ge30pIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICBjb25zdCBtZXJnZWRSZXN1bHRNYXAgPSBkaXJlY3RpdmVzO1xuICAgIGZvciAoY29uc3Qgbm9kZURlZmluaXRpb24gb2Ygbm9kZXMpIHtcbiAgICAgICAgaWYgKGlzTmFtZWREZWZpbml0aW9uTm9kZShub2RlRGVmaW5pdGlvbikpIHtcbiAgICAgICAgICAgIGNvbnN0IG5hbWUgPSAoX2EgPSBub2RlRGVmaW5pdGlvbi5uYW1lKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudmFsdWU7XG4gICAgICAgICAgICBpZiAoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmNvbW1lbnREZXNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgICAgICAoMCwgdXRpbHNfMS5jb2xsZWN0Q29tbWVudCkobm9kZURlZmluaXRpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5hbWUgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCgoX2IgPSBjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuZXhjbHVzaW9ucykgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmluY2x1ZGVzKG5hbWUgKyAnLionKSkgfHwgKChfYyA9IGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5leGNsdXNpb25zKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MuaW5jbHVkZXMobmFtZSkpKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIG1lcmdlZFJlc3VsdE1hcFtuYW1lXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHN3aXRjaCAobm9kZURlZmluaXRpb24ua2luZCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGdyYXBocWxfMS5LaW5kLk9CSkVDVF9UWVBFX0RFRklOSVRJT046XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZ3JhcGhxbF8xLktpbmQuT0JKRUNUX1RZUEVfRVhURU5TSU9OOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VkUmVzdWx0TWFwW25hbWVdID0gKDAsIHR5cGVfanNfMS5tZXJnZVR5cGUpKG5vZGVEZWZpbml0aW9uLCBtZXJnZWRSZXN1bHRNYXBbbmFtZV0sIGNvbmZpZywgZGlyZWN0aXZlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5FTlVNX1RZUEVfREVGSU5JVElPTjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5FTlVNX1RZUEVfRVhURU5TSU9OOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VkUmVzdWx0TWFwW25hbWVdID0gKDAsIGVudW1fanNfMS5tZXJnZUVudW0pKG5vZGVEZWZpbml0aW9uLCBtZXJnZWRSZXN1bHRNYXBbbmFtZV0sIGNvbmZpZywgZGlyZWN0aXZlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5VTklPTl9UWVBFX0RFRklOSVRJT046XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZ3JhcGhxbF8xLktpbmQuVU5JT05fVFlQRV9FWFRFTlNJT046XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZWRSZXN1bHRNYXBbbmFtZV0gPSAoMCwgdW5pb25fanNfMS5tZXJnZVVuaW9uKShub2RlRGVmaW5pdGlvbiwgbWVyZ2VkUmVzdWx0TWFwW25hbWVdLCBjb25maWcsIGRpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgZ3JhcGhxbF8xLktpbmQuU0NBTEFSX1RZUEVfREVGSU5JVElPTjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5TQ0FMQVJfVFlQRV9FWFRFTlNJT046XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZWRSZXN1bHRNYXBbbmFtZV0gPSAoMCwgc2NhbGFyX2pzXzEubWVyZ2VTY2FsYXIpKG5vZGVEZWZpbml0aW9uLCBtZXJnZWRSZXN1bHRNYXBbbmFtZV0sIGNvbmZpZywgZGlyZWN0aXZlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIGdyYXBocWxfMS5LaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlZFJlc3VsdE1hcFtuYW1lXSA9ICgwLCBpbnB1dF90eXBlX2pzXzEubWVyZ2VJbnB1dFR5cGUpKG5vZGVEZWZpbml0aW9uLCBtZXJnZWRSZXN1bHRNYXBbbmFtZV0sIGNvbmZpZywgZGlyZWN0aXZlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBncmFwaHFsXzEuS2luZC5JTlRFUkZBQ0VfVFlQRV9ERUZJTklUSU9OOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIGdyYXBocWxfMS5LaW5kLklOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlZFJlc3VsdE1hcFtuYW1lXSA9ICgwLCBpbnRlcmZhY2VfanNfMS5tZXJnZUludGVyZmFjZSkobm9kZURlZmluaXRpb24sIG1lcmdlZFJlc3VsdE1hcFtuYW1lXSwgY29uZmlnLCBkaXJlY3RpdmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIGdyYXBocWxfMS5LaW5kLkRJUkVDVElWRV9ERUZJTklUSU9OOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VkUmVzdWx0TWFwW25hbWVdID0gKDAsIGRpcmVjdGl2ZXNfanNfMS5tZXJnZURpcmVjdGl2ZSkobm9kZURlZmluaXRpb24sIG1lcmdlZFJlc3VsdE1hcFtuYW1lXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobm9kZURlZmluaXRpb24ua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuU0NIRU1BX0RFRklOSVRJT04gfHwgbm9kZURlZmluaXRpb24ua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuU0NIRU1BX0VYVEVOU0lPTikge1xuICAgICAgICAgICAgbWVyZ2VkUmVzdWx0TWFwW2V4cG9ydHMuc2NoZW1hRGVmU3ltYm9sXSA9ICgwLCBzY2hlbWFfZGVmX2pzXzEubWVyZ2VTY2hlbWFEZWZzKShub2RlRGVmaW5pdGlvbiwgbWVyZ2VkUmVzdWx0TWFwW2V4cG9ydHMuc2NoZW1hRGVmU3ltYm9sXSwgY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbWVyZ2VkUmVzdWx0TWFwO1xufVxuZXhwb3J0cy5tZXJnZUdyYXBoUUxOb2RlcyA9IG1lcmdlR3JhcGhRTE5vZGVzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-nodes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-typedefs.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-typedefs.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeGraphQLTypes = exports.mergeTypeDefs = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst utils_js_1 = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/utils.js\");\nconst merge_nodes_js_1 = __webpack_require__(/*! ./merge-nodes.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-nodes.js\");\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nconst schema_def_js_1 = __webpack_require__(/*! ./schema-def.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/schema-def.js\");\nfunction mergeTypeDefs(typeSource, config) {\n    (0, utils_1.resetComments)();\n    const doc = {\n        kind: graphql_1.Kind.DOCUMENT,\n        definitions: mergeGraphQLTypes(typeSource, {\n            useSchemaDefinition: true,\n            forceSchemaDefinition: false,\n            throwOnConflict: false,\n            commentDescriptions: false,\n            ...config,\n        }),\n    };\n    let result;\n    if (config === null || config === void 0 ? void 0 : config.commentDescriptions) {\n        result = (0, utils_1.printWithComments)(doc);\n    }\n    else {\n        result = doc;\n    }\n    (0, utils_1.resetComments)();\n    return result;\n}\nexports.mergeTypeDefs = mergeTypeDefs;\nfunction visitTypeSources(typeSource, options, allDirectives = [], allNodes = [], visitedTypeSources = new Set()) {\n    if (typeSource && !visitedTypeSources.has(typeSource)) {\n        visitedTypeSources.add(typeSource);\n        if (typeof typeSource === 'function') {\n            visitTypeSources(typeSource(), options, allDirectives, allNodes, visitedTypeSources);\n        }\n        else if (Array.isArray(typeSource)) {\n            for (const type of typeSource) {\n                visitTypeSources(type, options, allDirectives, allNodes, visitedTypeSources);\n            }\n        }\n        else if ((0, graphql_1.isSchema)(typeSource)) {\n            const documentNode = (0, utils_1.getDocumentNodeFromSchema)(typeSource, options);\n            visitTypeSources(documentNode.definitions, options, allDirectives, allNodes, visitedTypeSources);\n        }\n        else if ((0, utils_js_1.isStringTypes)(typeSource) || (0, utils_js_1.isSourceTypes)(typeSource)) {\n            const documentNode = (0, graphql_1.parse)(typeSource, options);\n            visitTypeSources(documentNode.definitions, options, allDirectives, allNodes, visitedTypeSources);\n        }\n        else if (typeof typeSource === 'object' && (0, graphql_1.isDefinitionNode)(typeSource)) {\n            if (typeSource.kind === graphql_1.Kind.DIRECTIVE_DEFINITION) {\n                allDirectives.push(typeSource);\n            }\n            else {\n                allNodes.push(typeSource);\n            }\n        }\n        else if ((0, utils_1.isDocumentNode)(typeSource)) {\n            visitTypeSources(typeSource.definitions, options, allDirectives, allNodes, visitedTypeSources);\n        }\n        else {\n            throw new Error(`typeDefs must contain only strings, documents, schemas, or functions, got ${typeof typeSource}`);\n        }\n    }\n    return { allDirectives, allNodes };\n}\nfunction mergeGraphQLTypes(typeSource, config) {\n    var _a, _b, _c;\n    (0, utils_1.resetComments)();\n    const { allDirectives, allNodes } = visitTypeSources(typeSource, config);\n    const mergedDirectives = (0, merge_nodes_js_1.mergeGraphQLNodes)(allDirectives, config);\n    const mergedNodes = (0, merge_nodes_js_1.mergeGraphQLNodes)(allNodes, config, mergedDirectives);\n    if (config === null || config === void 0 ? void 0 : config.useSchemaDefinition) {\n        // XXX: right now we don't handle multiple schema definitions\n        const schemaDef = mergedNodes[merge_nodes_js_1.schemaDefSymbol] || {\n            kind: graphql_1.Kind.SCHEMA_DEFINITION,\n            operationTypes: [],\n        };\n        const operationTypes = schemaDef.operationTypes;\n        for (const opTypeDefNodeType in schema_def_js_1.DEFAULT_OPERATION_TYPE_NAME_MAP) {\n            const opTypeDefNode = operationTypes.find(operationType => operationType.operation === opTypeDefNodeType);\n            if (!opTypeDefNode) {\n                const possibleRootTypeName = schema_def_js_1.DEFAULT_OPERATION_TYPE_NAME_MAP[opTypeDefNodeType];\n                const existingPossibleRootType = mergedNodes[possibleRootTypeName];\n                if (existingPossibleRootType != null && existingPossibleRootType.name != null) {\n                    operationTypes.push({\n                        kind: graphql_1.Kind.OPERATION_TYPE_DEFINITION,\n                        type: {\n                            kind: graphql_1.Kind.NAMED_TYPE,\n                            name: existingPossibleRootType.name,\n                        },\n                        operation: opTypeDefNodeType,\n                    });\n                }\n            }\n        }\n        if (((_a = schemaDef === null || schemaDef === void 0 ? void 0 : schemaDef.operationTypes) === null || _a === void 0 ? void 0 : _a.length) != null && schemaDef.operationTypes.length > 0) {\n            mergedNodes[merge_nodes_js_1.schemaDefSymbol] = schemaDef;\n        }\n    }\n    if ((config === null || config === void 0 ? void 0 : config.forceSchemaDefinition) && !((_c = (_b = mergedNodes[merge_nodes_js_1.schemaDefSymbol]) === null || _b === void 0 ? void 0 : _b.operationTypes) === null || _c === void 0 ? void 0 : _c.length)) {\n        mergedNodes[merge_nodes_js_1.schemaDefSymbol] = {\n            kind: graphql_1.Kind.SCHEMA_DEFINITION,\n            operationTypes: [\n                {\n                    kind: graphql_1.Kind.OPERATION_TYPE_DEFINITION,\n                    operation: 'query',\n                    type: {\n                        kind: graphql_1.Kind.NAMED_TYPE,\n                        name: {\n                            kind: graphql_1.Kind.NAME,\n                            value: 'Query',\n                        },\n                    },\n                },\n            ],\n        };\n    }\n    const mergedNodeDefinitions = Object.values(mergedNodes);\n    if (config === null || config === void 0 ? void 0 : config.sort) {\n        const sortFn = typeof config.sort === 'function' ? config.sort : utils_js_1.defaultStringComparator;\n        mergedNodeDefinitions.sort((a, b) => { var _a, _b; return sortFn((_a = a.name) === null || _a === void 0 ? void 0 : _a.value, (_b = b.name) === null || _b === void 0 ? void 0 : _b.value); });\n    }\n    return mergedNodeDefinitions;\n}\nexports.mergeGraphQLTypes = mergeGraphQLTypes;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-typedefs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/scalar.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/scalar.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeScalar = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst directives_js_1 = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js\");\nfunction mergeScalar(node, existingNode, config, directives) {\n    if (existingNode) {\n        return {\n            name: node.name,\n            description: node['description'] || existingNode['description'],\n            kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) ||\n                node.kind === 'ScalarTypeDefinition' ||\n                existingNode.kind === 'ScalarTypeDefinition'\n                ? 'ScalarTypeDefinition'\n                : 'ScalarTypeExtension',\n            loc: node.loc,\n            directives: (0, directives_js_1.mergeDirectives)(node.directives, existingNode.directives, config, directives),\n        };\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: graphql_1.Kind.SCALAR_TYPE_DEFINITION,\n        }\n        : node;\n}\nexports.mergeScalar = mergeScalar;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL3NjYWxhci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxtQkFBbUI7QUFDbkIsa0JBQWtCLG1CQUFPLENBQUMsdURBQVM7QUFDbkMsd0JBQXdCLG1CQUFPLENBQUMsaUlBQWlCO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvY2pzL3R5cGVkZWZzLW1lcmdlcnMvc2NhbGFyLmpzPzgyNjkiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlU2NhbGFyID0gdm9pZCAwO1xuY29uc3QgZ3JhcGhxbF8xID0gcmVxdWlyZShcImdyYXBocWxcIik7XG5jb25zdCBkaXJlY3RpdmVzX2pzXzEgPSByZXF1aXJlKFwiLi9kaXJlY3RpdmVzLmpzXCIpO1xuZnVuY3Rpb24gbWVyZ2VTY2FsYXIobm9kZSwgZXhpc3RpbmdOb2RlLCBjb25maWcsIGRpcmVjdGl2ZXMpIHtcbiAgICBpZiAoZXhpc3RpbmdOb2RlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBub2RlLm5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogbm9kZVsnZGVzY3JpcHRpb24nXSB8fCBleGlzdGluZ05vZGVbJ2Rlc2NyaXB0aW9uJ10sXG4gICAgICAgICAgICBraW5kOiAoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmNvbnZlcnRFeHRlbnNpb25zKSB8fFxuICAgICAgICAgICAgICAgIG5vZGUua2luZCA9PT0gJ1NjYWxhclR5cGVEZWZpbml0aW9uJyB8fFxuICAgICAgICAgICAgICAgIGV4aXN0aW5nTm9kZS5raW5kID09PSAnU2NhbGFyVHlwZURlZmluaXRpb24nXG4gICAgICAgICAgICAgICAgPyAnU2NhbGFyVHlwZURlZmluaXRpb24nXG4gICAgICAgICAgICAgICAgOiAnU2NhbGFyVHlwZUV4dGVuc2lvbicsXG4gICAgICAgICAgICBsb2M6IG5vZGUubG9jLFxuICAgICAgICAgICAgZGlyZWN0aXZlczogKDAsIGRpcmVjdGl2ZXNfanNfMS5tZXJnZURpcmVjdGl2ZXMpKG5vZGUuZGlyZWN0aXZlcywgZXhpc3RpbmdOb2RlLmRpcmVjdGl2ZXMsIGNvbmZpZywgZGlyZWN0aXZlcyksXG4gICAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiAoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmNvbnZlcnRFeHRlbnNpb25zKVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIC4uLm5vZGUsXG4gICAgICAgICAgICBraW5kOiBncmFwaHFsXzEuS2luZC5TQ0FMQVJfVFlQRV9ERUZJTklUSU9OLFxuICAgICAgICB9XG4gICAgICAgIDogbm9kZTtcbn1cbmV4cG9ydHMubWVyZ2VTY2FsYXIgPSBtZXJnZVNjYWxhcjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/scalar.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/schema-def.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/schema-def.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeSchemaDefs = exports.DEFAULT_OPERATION_TYPE_NAME_MAP = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst directives_js_1 = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js\");\nexports.DEFAULT_OPERATION_TYPE_NAME_MAP = {\n    query: 'Query',\n    mutation: 'Mutation',\n    subscription: 'Subscription',\n};\nfunction mergeOperationTypes(opNodeList = [], existingOpNodeList = []) {\n    const finalOpNodeList = [];\n    for (const opNodeType in exports.DEFAULT_OPERATION_TYPE_NAME_MAP) {\n        const opNode = opNodeList.find(n => n.operation === opNodeType) || existingOpNodeList.find(n => n.operation === opNodeType);\n        if (opNode) {\n            finalOpNodeList.push(opNode);\n        }\n    }\n    return finalOpNodeList;\n}\nfunction mergeSchemaDefs(node, existingNode, config, directives) {\n    if (existingNode) {\n        return {\n            kind: node.kind === graphql_1.Kind.SCHEMA_DEFINITION || existingNode.kind === graphql_1.Kind.SCHEMA_DEFINITION\n                ? graphql_1.Kind.SCHEMA_DEFINITION\n                : graphql_1.Kind.SCHEMA_EXTENSION,\n            description: node['description'] || existingNode['description'],\n            directives: (0, directives_js_1.mergeDirectives)(node.directives, existingNode.directives, config, directives),\n            operationTypes: mergeOperationTypes(node.operationTypes, existingNode.operationTypes),\n        };\n    }\n    return ((config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: graphql_1.Kind.SCHEMA_DEFINITION,\n        }\n        : node);\n}\nexports.mergeSchemaDefs = mergeSchemaDefs;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL3NjaGVtYS1kZWYuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsdUJBQXVCLEdBQUcsdUNBQXVDO0FBQ2pFLGtCQUFrQixtQkFBTyxDQUFDLHVEQUFTO0FBQ25DLHdCQUF3QixtQkFBTyxDQUFDLGlJQUFpQjtBQUNqRCx1Q0FBdUM7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvY2pzL3R5cGVkZWZzLW1lcmdlcnMvc2NoZW1hLWRlZi5qcz81YThjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5tZXJnZVNjaGVtYURlZnMgPSBleHBvcnRzLkRFRkFVTFRfT1BFUkFUSU9OX1RZUEVfTkFNRV9NQVAgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IGRpcmVjdGl2ZXNfanNfMSA9IHJlcXVpcmUoXCIuL2RpcmVjdGl2ZXMuanNcIik7XG5leHBvcnRzLkRFRkFVTFRfT1BFUkFUSU9OX1RZUEVfTkFNRV9NQVAgPSB7XG4gICAgcXVlcnk6ICdRdWVyeScsXG4gICAgbXV0YXRpb246ICdNdXRhdGlvbicsXG4gICAgc3Vic2NyaXB0aW9uOiAnU3Vic2NyaXB0aW9uJyxcbn07XG5mdW5jdGlvbiBtZXJnZU9wZXJhdGlvblR5cGVzKG9wTm9kZUxpc3QgPSBbXSwgZXhpc3RpbmdPcE5vZGVMaXN0ID0gW10pIHtcbiAgICBjb25zdCBmaW5hbE9wTm9kZUxpc3QgPSBbXTtcbiAgICBmb3IgKGNvbnN0IG9wTm9kZVR5cGUgaW4gZXhwb3J0cy5ERUZBVUxUX09QRVJBVElPTl9UWVBFX05BTUVfTUFQKSB7XG4gICAgICAgIGNvbnN0IG9wTm9kZSA9IG9wTm9kZUxpc3QuZmluZChuID0+IG4ub3BlcmF0aW9uID09PSBvcE5vZGVUeXBlKSB8fCBleGlzdGluZ09wTm9kZUxpc3QuZmluZChuID0+IG4ub3BlcmF0aW9uID09PSBvcE5vZGVUeXBlKTtcbiAgICAgICAgaWYgKG9wTm9kZSkge1xuICAgICAgICAgICAgZmluYWxPcE5vZGVMaXN0LnB1c2gob3BOb2RlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZmluYWxPcE5vZGVMaXN0O1xufVxuZnVuY3Rpb24gbWVyZ2VTY2hlbWFEZWZzKG5vZGUsIGV4aXN0aW5nTm9kZSwgY29uZmlnLCBkaXJlY3RpdmVzKSB7XG4gICAgaWYgKGV4aXN0aW5nTm9kZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAga2luZDogbm9kZS5raW5kID09PSBncmFwaHFsXzEuS2luZC5TQ0hFTUFfREVGSU5JVElPTiB8fCBleGlzdGluZ05vZGUua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuU0NIRU1BX0RFRklOSVRJT05cbiAgICAgICAgICAgICAgICA/IGdyYXBocWxfMS5LaW5kLlNDSEVNQV9ERUZJTklUSU9OXG4gICAgICAgICAgICAgICAgOiBncmFwaHFsXzEuS2luZC5TQ0hFTUFfRVhURU5TSU9OLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IG5vZGVbJ2Rlc2NyaXB0aW9uJ10gfHwgZXhpc3RpbmdOb2RlWydkZXNjcmlwdGlvbiddLFxuICAgICAgICAgICAgZGlyZWN0aXZlczogKDAsIGRpcmVjdGl2ZXNfanNfMS5tZXJnZURpcmVjdGl2ZXMpKG5vZGUuZGlyZWN0aXZlcywgZXhpc3RpbmdOb2RlLmRpcmVjdGl2ZXMsIGNvbmZpZywgZGlyZWN0aXZlcyksXG4gICAgICAgICAgICBvcGVyYXRpb25UeXBlczogbWVyZ2VPcGVyYXRpb25UeXBlcyhub2RlLm9wZXJhdGlvblR5cGVzLCBleGlzdGluZ05vZGUub3BlcmF0aW9uVHlwZXMpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gKChjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuY29udmVydEV4dGVuc2lvbnMpXG4gICAgICAgID8ge1xuICAgICAgICAgICAgLi4ubm9kZSxcbiAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLlNDSEVNQV9ERUZJTklUSU9OLFxuICAgICAgICB9XG4gICAgICAgIDogbm9kZSk7XG59XG5leHBvcnRzLm1lcmdlU2NoZW1hRGVmcyA9IG1lcmdlU2NoZW1hRGVmcztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/schema-def.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/type.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/type.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeType = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst fields_js_1 = __webpack_require__(/*! ./fields.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/fields.js\");\nconst directives_js_1 = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js\");\nconst merge_named_type_array_js_1 = __webpack_require__(/*! ./merge-named-type-array.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-named-type-array.js\");\nfunction mergeType(node, existingNode, config, directives) {\n    if (existingNode) {\n        try {\n            return {\n                name: node.name,\n                description: node['description'] || existingNode['description'],\n                kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) ||\n                    node.kind === 'ObjectTypeDefinition' ||\n                    existingNode.kind === 'ObjectTypeDefinition'\n                    ? 'ObjectTypeDefinition'\n                    : 'ObjectTypeExtension',\n                loc: node.loc,\n                fields: (0, fields_js_1.mergeFields)(node, node.fields, existingNode.fields, config),\n                directives: (0, directives_js_1.mergeDirectives)(node.directives, existingNode.directives, config, directives),\n                interfaces: (0, merge_named_type_array_js_1.mergeNamedTypeArray)(node.interfaces, existingNode.interfaces, config),\n            };\n        }\n        catch (e) {\n            throw new Error(`Unable to merge GraphQL type \"${node.name.value}\": ${e.message}`);\n        }\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: graphql_1.Kind.OBJECT_TYPE_DEFINITION,\n        }\n        : node;\n}\nexports.mergeType = mergeType;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL3R5cGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsaUJBQWlCO0FBQ2pCLGtCQUFrQixtQkFBTyxDQUFDLHVEQUFTO0FBQ25DLG9CQUFvQixtQkFBTyxDQUFDLHlIQUFhO0FBQ3pDLHdCQUF3QixtQkFBTyxDQUFDLGlJQUFpQjtBQUNqRCxvQ0FBb0MsbUJBQU8sQ0FBQyx5SkFBNkI7QUFDekU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZELGdCQUFnQixLQUFLLFVBQVU7QUFDNUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9tZXJnZS9janMvdHlwZWRlZnMtbWVyZ2Vycy90eXBlLmpzPzA4ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlVHlwZSA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3QgZmllbGRzX2pzXzEgPSByZXF1aXJlKFwiLi9maWVsZHMuanNcIik7XG5jb25zdCBkaXJlY3RpdmVzX2pzXzEgPSByZXF1aXJlKFwiLi9kaXJlY3RpdmVzLmpzXCIpO1xuY29uc3QgbWVyZ2VfbmFtZWRfdHlwZV9hcnJheV9qc18xID0gcmVxdWlyZShcIi4vbWVyZ2UtbmFtZWQtdHlwZS1hcnJheS5qc1wiKTtcbmZ1bmN0aW9uIG1lcmdlVHlwZShub2RlLCBleGlzdGluZ05vZGUsIGNvbmZpZywgZGlyZWN0aXZlcykge1xuICAgIGlmIChleGlzdGluZ05vZGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBub2RlWydkZXNjcmlwdGlvbiddIHx8IGV4aXN0aW5nTm9kZVsnZGVzY3JpcHRpb24nXSxcbiAgICAgICAgICAgICAgICBraW5kOiAoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmNvbnZlcnRFeHRlbnNpb25zKSB8fFxuICAgICAgICAgICAgICAgICAgICBub2RlLmtpbmQgPT09ICdPYmplY3RUeXBlRGVmaW5pdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdOb2RlLmtpbmQgPT09ICdPYmplY3RUeXBlRGVmaW5pdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyAnT2JqZWN0VHlwZURlZmluaXRpb24nXG4gICAgICAgICAgICAgICAgICAgIDogJ09iamVjdFR5cGVFeHRlbnNpb24nLFxuICAgICAgICAgICAgICAgIGxvYzogbm9kZS5sb2MsXG4gICAgICAgICAgICAgICAgZmllbGRzOiAoMCwgZmllbGRzX2pzXzEubWVyZ2VGaWVsZHMpKG5vZGUsIG5vZGUuZmllbGRzLCBleGlzdGluZ05vZGUuZmllbGRzLCBjb25maWcpLFxuICAgICAgICAgICAgICAgIGRpcmVjdGl2ZXM6ICgwLCBkaXJlY3RpdmVzX2pzXzEubWVyZ2VEaXJlY3RpdmVzKShub2RlLmRpcmVjdGl2ZXMsIGV4aXN0aW5nTm9kZS5kaXJlY3RpdmVzLCBjb25maWcsIGRpcmVjdGl2ZXMpLFxuICAgICAgICAgICAgICAgIGludGVyZmFjZXM6ICgwLCBtZXJnZV9uYW1lZF90eXBlX2FycmF5X2pzXzEubWVyZ2VOYW1lZFR5cGVBcnJheSkobm9kZS5pbnRlcmZhY2VzLCBleGlzdGluZ05vZGUuaW50ZXJmYWNlcywgY29uZmlnKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIG1lcmdlIEdyYXBoUUwgdHlwZSBcIiR7bm9kZS5uYW1lLnZhbHVlfVwiOiAke2UubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5jb252ZXJ0RXh0ZW5zaW9ucylcbiAgICAgICAgPyB7XG4gICAgICAgICAgICAuLi5ub2RlLFxuICAgICAgICAgICAga2luZDogZ3JhcGhxbF8xLktpbmQuT0JKRUNUX1RZUEVfREVGSU5JVElPTixcbiAgICAgICAgfVxuICAgICAgICA6IG5vZGU7XG59XG5leHBvcnRzLm1lcmdlVHlwZSA9IG1lcmdlVHlwZTtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/union.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/union.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeUnion = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst directives_js_1 = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/directives.js\");\nconst merge_named_type_array_js_1 = __webpack_require__(/*! ./merge-named-type-array.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/merge-named-type-array.js\");\nfunction mergeUnion(first, second, config, directives) {\n    if (second) {\n        return {\n            name: first.name,\n            description: first['description'] || second['description'],\n            // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n            directives: (0, directives_js_1.mergeDirectives)(first.directives, second.directives, config, directives),\n            kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) || first.kind === 'UnionTypeDefinition' || second.kind === 'UnionTypeDefinition'\n                ? graphql_1.Kind.UNION_TYPE_DEFINITION\n                : graphql_1.Kind.UNION_TYPE_EXTENSION,\n            loc: first.loc,\n            types: (0, merge_named_type_array_js_1.mergeNamedTypeArray)(first.types, second.types, config),\n        };\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...first,\n            kind: graphql_1.Kind.UNION_TYPE_DEFINITION,\n        }\n        : first;\n}\nexports.mergeUnion = mergeUnion;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL3VuaW9uLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELGtCQUFrQjtBQUNsQixrQkFBa0IsbUJBQU8sQ0FBQyx1REFBUztBQUNuQyx3QkFBd0IsbUJBQU8sQ0FBQyxpSUFBaUI7QUFDakQsb0NBQW9DLG1CQUFPLENBQUMseUpBQTZCO0FBQ3pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvY2pzL3R5cGVkZWZzLW1lcmdlcnMvdW5pb24uanM/NjJmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWVyZ2VVbmlvbiA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuY29uc3QgZGlyZWN0aXZlc19qc18xID0gcmVxdWlyZShcIi4vZGlyZWN0aXZlcy5qc1wiKTtcbmNvbnN0IG1lcmdlX25hbWVkX3R5cGVfYXJyYXlfanNfMSA9IHJlcXVpcmUoXCIuL21lcmdlLW5hbWVkLXR5cGUtYXJyYXkuanNcIik7XG5mdW5jdGlvbiBtZXJnZVVuaW9uKGZpcnN0LCBzZWNvbmQsIGNvbmZpZywgZGlyZWN0aXZlcykge1xuICAgIGlmIChzZWNvbmQpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IGZpcnN0Lm5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogZmlyc3RbJ2Rlc2NyaXB0aW9uJ10gfHwgc2Vjb25kWydkZXNjcmlwdGlvbiddLFxuICAgICAgICAgICAgLy8gQ29uc3RYTm9kZSBoYXMgYmVlbiBpbnRyb2R1Y2VkIGluIHYxNiBidXQgaXQgaXMgbm90IGNvbXBhdGlibGUgd2l0aCBYTm9kZSBzbyB3ZSBkbyBgYXMgYW55YCBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcbiAgICAgICAgICAgIGRpcmVjdGl2ZXM6ICgwLCBkaXJlY3RpdmVzX2pzXzEubWVyZ2VEaXJlY3RpdmVzKShmaXJzdC5kaXJlY3RpdmVzLCBzZWNvbmQuZGlyZWN0aXZlcywgY29uZmlnLCBkaXJlY3RpdmVzKSxcbiAgICAgICAgICAgIGtpbmQ6IChjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuY29udmVydEV4dGVuc2lvbnMpIHx8IGZpcnN0LmtpbmQgPT09ICdVbmlvblR5cGVEZWZpbml0aW9uJyB8fCBzZWNvbmQua2luZCA9PT0gJ1VuaW9uVHlwZURlZmluaXRpb24nXG4gICAgICAgICAgICAgICAgPyBncmFwaHFsXzEuS2luZC5VTklPTl9UWVBFX0RFRklOSVRJT05cbiAgICAgICAgICAgICAgICA6IGdyYXBocWxfMS5LaW5kLlVOSU9OX1RZUEVfRVhURU5TSU9OLFxuICAgICAgICAgICAgbG9jOiBmaXJzdC5sb2MsXG4gICAgICAgICAgICB0eXBlczogKDAsIG1lcmdlX25hbWVkX3R5cGVfYXJyYXlfanNfMS5tZXJnZU5hbWVkVHlwZUFycmF5KShmaXJzdC50eXBlcywgc2Vjb25kLnR5cGVzLCBjb25maWcpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5jb252ZXJ0RXh0ZW5zaW9ucylcbiAgICAgICAgPyB7XG4gICAgICAgICAgICAuLi5maXJzdCxcbiAgICAgICAgICAgIGtpbmQ6IGdyYXBocWxfMS5LaW5kLlVOSU9OX1RZUEVfREVGSU5JVElPTixcbiAgICAgICAgfVxuICAgICAgICA6IGZpcnN0O1xufVxuZXhwb3J0cy5tZXJnZVVuaW9uID0gbWVyZ2VVbmlvbjtcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/union.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/utils.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/utils.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.defaultStringComparator = exports.CompareVal = exports.printTypeNode = exports.isNonNullTypeNode = exports.isListTypeNode = exports.isWrappingTypeNode = exports.extractType = exports.isSourceTypes = exports.isStringTypes = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nfunction isStringTypes(types) {\n    return typeof types === 'string';\n}\nexports.isStringTypes = isStringTypes;\nfunction isSourceTypes(types) {\n    return types instanceof graphql_1.Source;\n}\nexports.isSourceTypes = isSourceTypes;\nfunction extractType(type) {\n    let visitedType = type;\n    while (visitedType.kind === graphql_1.Kind.LIST_TYPE || visitedType.kind === 'NonNullType') {\n        visitedType = visitedType.type;\n    }\n    return visitedType;\n}\nexports.extractType = extractType;\nfunction isWrappingTypeNode(type) {\n    return type.kind !== graphql_1.Kind.NAMED_TYPE;\n}\nexports.isWrappingTypeNode = isWrappingTypeNode;\nfunction isListTypeNode(type) {\n    return type.kind === graphql_1.Kind.LIST_TYPE;\n}\nexports.isListTypeNode = isListTypeNode;\nfunction isNonNullTypeNode(type) {\n    return type.kind === graphql_1.Kind.NON_NULL_TYPE;\n}\nexports.isNonNullTypeNode = isNonNullTypeNode;\nfunction printTypeNode(type) {\n    if (isListTypeNode(type)) {\n        return `[${printTypeNode(type.type)}]`;\n    }\n    if (isNonNullTypeNode(type)) {\n        return `${printTypeNode(type.type)}!`;\n    }\n    return type.name.value;\n}\nexports.printTypeNode = printTypeNode;\nvar CompareVal;\n(function (CompareVal) {\n    CompareVal[CompareVal[\"A_SMALLER_THAN_B\"] = -1] = \"A_SMALLER_THAN_B\";\n    CompareVal[CompareVal[\"A_EQUALS_B\"] = 0] = \"A_EQUALS_B\";\n    CompareVal[CompareVal[\"A_GREATER_THAN_B\"] = 1] = \"A_GREATER_THAN_B\";\n})(CompareVal = exports.CompareVal || (exports.CompareVal = {}));\nfunction defaultStringComparator(a, b) {\n    if (a == null && b == null) {\n        return CompareVal.A_EQUALS_B;\n    }\n    if (a == null) {\n        return CompareVal.A_SMALLER_THAN_B;\n    }\n    if (b == null) {\n        return CompareVal.A_GREATER_THAN_B;\n    }\n    if (a < b)\n        return CompareVal.A_SMALLER_THAN_B;\n    if (a > b)\n        return CompareVal.A_GREATER_THAN_B;\n    return CompareVal.A_EQUALS_B;\n}\nexports.defaultStringComparator = defaultStringComparator;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELCtCQUErQixHQUFHLGtCQUFrQixHQUFHLHFCQUFxQixHQUFHLHlCQUF5QixHQUFHLHNCQUFzQixHQUFHLDBCQUEwQixHQUFHLG1CQUFtQixHQUFHLHFCQUFxQixHQUFHLHFCQUFxQjtBQUNwTyxrQkFBa0IsbUJBQU8sQ0FBQyx1REFBUztBQUNuQztBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0EscUJBQXFCO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CO0FBQ25CO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQSxzQkFBc0I7QUFDdEI7QUFDQTtBQUNBO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0E7QUFDQSxtQkFBbUIseUJBQXlCO0FBQzVDO0FBQ0E7QUFDQSxrQkFBa0IseUJBQXlCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQyxzQ0FBc0Msa0JBQWtCLEtBQUs7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2Nqcy90eXBlZGVmcy1tZXJnZXJzL3V0aWxzLmpzPzFjMzQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmRlZmF1bHRTdHJpbmdDb21wYXJhdG9yID0gZXhwb3J0cy5Db21wYXJlVmFsID0gZXhwb3J0cy5wcmludFR5cGVOb2RlID0gZXhwb3J0cy5pc05vbk51bGxUeXBlTm9kZSA9IGV4cG9ydHMuaXNMaXN0VHlwZU5vZGUgPSBleHBvcnRzLmlzV3JhcHBpbmdUeXBlTm9kZSA9IGV4cG9ydHMuZXh0cmFjdFR5cGUgPSBleHBvcnRzLmlzU291cmNlVHlwZXMgPSBleHBvcnRzLmlzU3RyaW5nVHlwZXMgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmZ1bmN0aW9uIGlzU3RyaW5nVHlwZXModHlwZXMpIHtcbiAgICByZXR1cm4gdHlwZW9mIHR5cGVzID09PSAnc3RyaW5nJztcbn1cbmV4cG9ydHMuaXNTdHJpbmdUeXBlcyA9IGlzU3RyaW5nVHlwZXM7XG5mdW5jdGlvbiBpc1NvdXJjZVR5cGVzKHR5cGVzKSB7XG4gICAgcmV0dXJuIHR5cGVzIGluc3RhbmNlb2YgZ3JhcGhxbF8xLlNvdXJjZTtcbn1cbmV4cG9ydHMuaXNTb3VyY2VUeXBlcyA9IGlzU291cmNlVHlwZXM7XG5mdW5jdGlvbiBleHRyYWN0VHlwZSh0eXBlKSB7XG4gICAgbGV0IHZpc2l0ZWRUeXBlID0gdHlwZTtcbiAgICB3aGlsZSAodmlzaXRlZFR5cGUua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuTElTVF9UWVBFIHx8IHZpc2l0ZWRUeXBlLmtpbmQgPT09ICdOb25OdWxsVHlwZScpIHtcbiAgICAgICAgdmlzaXRlZFR5cGUgPSB2aXNpdGVkVHlwZS50eXBlO1xuICAgIH1cbiAgICByZXR1cm4gdmlzaXRlZFR5cGU7XG59XG5leHBvcnRzLmV4dHJhY3RUeXBlID0gZXh0cmFjdFR5cGU7XG5mdW5jdGlvbiBpc1dyYXBwaW5nVHlwZU5vZGUodHlwZSkge1xuICAgIHJldHVybiB0eXBlLmtpbmQgIT09IGdyYXBocWxfMS5LaW5kLk5BTUVEX1RZUEU7XG59XG5leHBvcnRzLmlzV3JhcHBpbmdUeXBlTm9kZSA9IGlzV3JhcHBpbmdUeXBlTm9kZTtcbmZ1bmN0aW9uIGlzTGlzdFR5cGVOb2RlKHR5cGUpIHtcbiAgICByZXR1cm4gdHlwZS5raW5kID09PSBncmFwaHFsXzEuS2luZC5MSVNUX1RZUEU7XG59XG5leHBvcnRzLmlzTGlzdFR5cGVOb2RlID0gaXNMaXN0VHlwZU5vZGU7XG5mdW5jdGlvbiBpc05vbk51bGxUeXBlTm9kZSh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUua2luZCA9PT0gZ3JhcGhxbF8xLktpbmQuTk9OX05VTExfVFlQRTtcbn1cbmV4cG9ydHMuaXNOb25OdWxsVHlwZU5vZGUgPSBpc05vbk51bGxUeXBlTm9kZTtcbmZ1bmN0aW9uIHByaW50VHlwZU5vZGUodHlwZSkge1xuICAgIGlmIChpc0xpc3RUeXBlTm9kZSh0eXBlKSkge1xuICAgICAgICByZXR1cm4gYFske3ByaW50VHlwZU5vZGUodHlwZS50eXBlKX1dYDtcbiAgICB9XG4gICAgaWYgKGlzTm9uTnVsbFR5cGVOb2RlKHR5cGUpKSB7XG4gICAgICAgIHJldHVybiBgJHtwcmludFR5cGVOb2RlKHR5cGUudHlwZSl9IWA7XG4gICAgfVxuICAgIHJldHVybiB0eXBlLm5hbWUudmFsdWU7XG59XG5leHBvcnRzLnByaW50VHlwZU5vZGUgPSBwcmludFR5cGVOb2RlO1xudmFyIENvbXBhcmVWYWw7XG4oZnVuY3Rpb24gKENvbXBhcmVWYWwpIHtcbiAgICBDb21wYXJlVmFsW0NvbXBhcmVWYWxbXCJBX1NNQUxMRVJfVEhBTl9CXCJdID0gLTFdID0gXCJBX1NNQUxMRVJfVEhBTl9CXCI7XG4gICAgQ29tcGFyZVZhbFtDb21wYXJlVmFsW1wiQV9FUVVBTFNfQlwiXSA9IDBdID0gXCJBX0VRVUFMU19CXCI7XG4gICAgQ29tcGFyZVZhbFtDb21wYXJlVmFsW1wiQV9HUkVBVEVSX1RIQU5fQlwiXSA9IDFdID0gXCJBX0dSRUFURVJfVEhBTl9CXCI7XG59KShDb21wYXJlVmFsID0gZXhwb3J0cy5Db21wYXJlVmFsIHx8IChleHBvcnRzLkNvbXBhcmVWYWwgPSB7fSkpO1xuZnVuY3Rpb24gZGVmYXVsdFN0cmluZ0NvbXBhcmF0b3IoYSwgYikge1xuICAgIGlmIChhID09IG51bGwgJiYgYiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBDb21wYXJlVmFsLkFfRVFVQUxTX0I7XG4gICAgfVxuICAgIGlmIChhID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIENvbXBhcmVWYWwuQV9TTUFMTEVSX1RIQU5fQjtcbiAgICB9XG4gICAgaWYgKGIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gQ29tcGFyZVZhbC5BX0dSRUFURVJfVEhBTl9CO1xuICAgIH1cbiAgICBpZiAoYSA8IGIpXG4gICAgICAgIHJldHVybiBDb21wYXJlVmFsLkFfU01BTExFUl9USEFOX0I7XG4gICAgaWYgKGEgPiBiKVxuICAgICAgICByZXR1cm4gQ29tcGFyZVZhbC5BX0dSRUFURVJfVEhBTl9CO1xuICAgIHJldHVybiBDb21wYXJlVmFsLkFfRVFVQUxTX0I7XG59XG5leHBvcnRzLmRlZmF1bHRTdHJpbmdDb21wYXJhdG9yID0gZGVmYXVsdFN0cmluZ0NvbXBhcmF0b3I7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/typedefs-mergers/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/addResolversToSchema.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/addResolversToSchema.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.addResolversToSchema = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nconst checkForResolveTypeResolver_js_1 = __webpack_require__(/*! ./checkForResolveTypeResolver.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/checkForResolveTypeResolver.js\");\nconst extendResolversFromInterfaces_js_1 = __webpack_require__(/*! ./extendResolversFromInterfaces.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/extendResolversFromInterfaces.js\");\nfunction addResolversToSchema({ schema, resolvers: inputResolvers, defaultFieldResolver, resolverValidationOptions = {}, inheritResolversFromInterfaces = false, updateResolversInPlace = false, }) {\n    const { requireResolversToMatchSchema = 'error', requireResolversForResolveType } = resolverValidationOptions;\n    const resolvers = inheritResolversFromInterfaces\n        ? (0, extendResolversFromInterfaces_js_1.extendResolversFromInterfaces)(schema, inputResolvers)\n        : inputResolvers;\n    for (const typeName in resolvers) {\n        const resolverValue = resolvers[typeName];\n        const resolverType = typeof resolverValue;\n        if (resolverType !== 'object') {\n            throw new Error(`\"${typeName}\" defined in resolvers, but has invalid value \"${resolverValue}\". The resolver's value must be of type object.`);\n        }\n        const type = schema.getType(typeName);\n        if (type == null) {\n            if (requireResolversToMatchSchema === 'ignore') {\n                continue;\n            }\n            throw new Error(`\"${typeName}\" defined in resolvers, but not in schema`);\n        }\n        else if ((0, graphql_1.isSpecifiedScalarType)(type)) {\n            // allow -- without recommending -- overriding of specified scalar types\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n                else {\n                    type[fieldName] = resolverValue[fieldName];\n                }\n            }\n        }\n        else if ((0, graphql_1.isEnumType)(type)) {\n            const values = type.getValues();\n            for (const fieldName in resolverValue) {\n                if (!fieldName.startsWith('__') &&\n                    !values.some(value => value.name === fieldName) &&\n                    requireResolversToMatchSchema &&\n                    requireResolversToMatchSchema !== 'ignore') {\n                    throw new Error(`${type.name}.${fieldName} was defined in resolvers, but not present within ${type.name}`);\n                }\n            }\n        }\n        else if ((0, graphql_1.isUnionType)(type)) {\n            for (const fieldName in resolverValue) {\n                if (!fieldName.startsWith('__') &&\n                    requireResolversToMatchSchema &&\n                    requireResolversToMatchSchema !== 'ignore') {\n                    throw new Error(`${type.name}.${fieldName} was defined in resolvers, but ${type.name} is not an object or interface type`);\n                }\n            }\n        }\n        else if ((0, graphql_1.isObjectType)(type) || (0, graphql_1.isInterfaceType)(type)) {\n            for (const fieldName in resolverValue) {\n                if (!fieldName.startsWith('__')) {\n                    const fields = type.getFields();\n                    const field = fields[fieldName];\n                    if (field == null) {\n                        // Field present in resolver but not in schema\n                        if (requireResolversToMatchSchema && requireResolversToMatchSchema !== 'ignore') {\n                            throw new Error(`${typeName}.${fieldName} defined in resolvers, but not in schema`);\n                        }\n                    }\n                    else {\n                        // Field present in both the resolver and schema\n                        const fieldResolve = resolverValue[fieldName];\n                        if (typeof fieldResolve !== 'function' && typeof fieldResolve !== 'object') {\n                            throw new Error(`Resolver ${typeName}.${fieldName} must be object or function`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    schema = updateResolversInPlace\n        ? addResolversToExistingSchema(schema, resolvers, defaultFieldResolver)\n        : createNewSchemaWithResolvers(schema, resolvers, defaultFieldResolver);\n    if (requireResolversForResolveType && requireResolversForResolveType !== 'ignore') {\n        (0, checkForResolveTypeResolver_js_1.checkForResolveTypeResolver)(schema, requireResolversForResolveType);\n    }\n    return schema;\n}\nexports.addResolversToSchema = addResolversToSchema;\nfunction addResolversToExistingSchema(schema, resolvers, defaultFieldResolver) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    const typeMap = schema.getTypeMap();\n    for (const typeName in resolvers) {\n        const type = schema.getType(typeName);\n        const resolverValue = resolvers[typeName];\n        if ((0, graphql_1.isScalarType)(type)) {\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n                else if (fieldName === 'astNode' && type.astNode != null) {\n                    type.astNode = {\n                        ...type.astNode,\n                        description: (_b = (_a = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : type.astNode.description,\n                        directives: ((_c = type.astNode.directives) !== null && _c !== void 0 ? _c : []).concat((_e = (_d = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d === void 0 ? void 0 : _d.directives) !== null && _e !== void 0 ? _e : []),\n                    };\n                }\n                else if (fieldName === 'extensionASTNodes' && type.extensionASTNodes != null) {\n                    type.extensionASTNodes = type.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);\n                }\n                else if (fieldName === 'extensions' &&\n                    type.extensions != null &&\n                    resolverValue.extensions != null) {\n                    type.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                }\n                else {\n                    type[fieldName] = resolverValue[fieldName];\n                }\n            }\n        }\n        else if ((0, graphql_1.isEnumType)(type)) {\n            const config = type.toConfig();\n            const enumValueConfigMap = config.values;\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    config[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n                else if (fieldName === 'astNode' && config.astNode != null) {\n                    config.astNode = {\n                        ...config.astNode,\n                        description: (_h = (_g = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _g === void 0 ? void 0 : _g.description) !== null && _h !== void 0 ? _h : config.astNode.description,\n                        directives: ((_j = config.astNode.directives) !== null && _j !== void 0 ? _j : []).concat((_l = (_k = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _k === void 0 ? void 0 : _k.directives) !== null && _l !== void 0 ? _l : []),\n                    };\n                }\n                else if (fieldName === 'extensionASTNodes' && config.extensionASTNodes != null) {\n                    config.extensionASTNodes = config.extensionASTNodes.concat((_m = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _m !== void 0 ? _m : []);\n                }\n                else if (fieldName === 'extensions' &&\n                    type.extensions != null &&\n                    resolverValue.extensions != null) {\n                    type.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                }\n                else if (enumValueConfigMap[fieldName]) {\n                    enumValueConfigMap[fieldName].value = resolverValue[fieldName];\n                }\n            }\n            typeMap[typeName] = new graphql_1.GraphQLEnumType(config);\n        }\n        else if ((0, graphql_1.isUnionType)(type)) {\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n            }\n        }\n        else if ((0, graphql_1.isObjectType)(type) || (0, graphql_1.isInterfaceType)(type)) {\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    // this is for isTypeOf and resolveType and all the other stuff.\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                    continue;\n                }\n                const fields = type.getFields();\n                const field = fields[fieldName];\n                if (field != null) {\n                    const fieldResolve = resolverValue[fieldName];\n                    if (typeof fieldResolve === 'function') {\n                        // for convenience. Allows shorter syntax in resolver definition file\n                        field.resolve = fieldResolve.bind(resolverValue);\n                    }\n                    else {\n                        setFieldProperties(field, fieldResolve);\n                    }\n                }\n            }\n        }\n    }\n    // serialize all default values prior to healing fields with new scalar/enum types.\n    (0, utils_1.forEachDefaultValue)(schema, utils_1.serializeInputValue);\n    // schema may have new scalar/enum types that require healing\n    (0, utils_1.healSchema)(schema);\n    // reparse all default values with new parsing functions.\n    (0, utils_1.forEachDefaultValue)(schema, utils_1.parseInputValue);\n    if (defaultFieldResolver != null) {\n        (0, utils_1.forEachField)(schema, field => {\n            if (!field.resolve) {\n                field.resolve = defaultFieldResolver;\n            }\n        });\n    }\n    return schema;\n}\nfunction createNewSchemaWithResolvers(schema, resolvers, defaultFieldResolver) {\n    schema = (0, utils_1.mapSchema)(schema, {\n        [utils_1.MapperKind.SCALAR_TYPE]: type => {\n            var _a, _b, _c, _d, _e, _f;\n            const config = type.toConfig();\n            const resolverValue = resolvers[type.name];\n            if (!(0, graphql_1.isSpecifiedScalarType)(type) && resolverValue != null) {\n                for (const fieldName in resolverValue) {\n                    if (fieldName.startsWith('__')) {\n                        config[fieldName.substring(2)] = resolverValue[fieldName];\n                    }\n                    else if (fieldName === 'astNode' && config.astNode != null) {\n                        config.astNode = {\n                            ...config.astNode,\n                            description: (_b = (_a = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : config.astNode.description,\n                            directives: ((_c = config.astNode.directives) !== null && _c !== void 0 ? _c : []).concat((_e = (_d = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d === void 0 ? void 0 : _d.directives) !== null && _e !== void 0 ? _e : []),\n                        };\n                    }\n                    else if (fieldName === 'extensionASTNodes' && config.extensionASTNodes != null) {\n                        config.extensionASTNodes = config.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);\n                    }\n                    else if (fieldName === 'extensions' &&\n                        config.extensions != null &&\n                        resolverValue.extensions != null) {\n                        config.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                    }\n                    else {\n                        config[fieldName] = resolverValue[fieldName];\n                    }\n                }\n                return new graphql_1.GraphQLScalarType(config);\n            }\n        },\n        [utils_1.MapperKind.ENUM_TYPE]: type => {\n            var _a, _b, _c, _d, _e, _f;\n            const resolverValue = resolvers[type.name];\n            const config = type.toConfig();\n            const enumValueConfigMap = config.values;\n            if (resolverValue != null) {\n                for (const fieldName in resolverValue) {\n                    if (fieldName.startsWith('__')) {\n                        config[fieldName.substring(2)] = resolverValue[fieldName];\n                    }\n                    else if (fieldName === 'astNode' && config.astNode != null) {\n                        config.astNode = {\n                            ...config.astNode,\n                            description: (_b = (_a = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : config.astNode.description,\n                            directives: ((_c = config.astNode.directives) !== null && _c !== void 0 ? _c : []).concat((_e = (_d = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d === void 0 ? void 0 : _d.directives) !== null && _e !== void 0 ? _e : []),\n                        };\n                    }\n                    else if (fieldName === 'extensionASTNodes' && config.extensionASTNodes != null) {\n                        config.extensionASTNodes = config.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);\n                    }\n                    else if (fieldName === 'extensions' &&\n                        config.extensions != null &&\n                        resolverValue.extensions != null) {\n                        config.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                    }\n                    else if (enumValueConfigMap[fieldName]) {\n                        enumValueConfigMap[fieldName].value = resolverValue[fieldName];\n                    }\n                }\n                return new graphql_1.GraphQLEnumType(config);\n            }\n        },\n        [utils_1.MapperKind.UNION_TYPE]: type => {\n            const resolverValue = resolvers[type.name];\n            if (resolverValue != null) {\n                const config = type.toConfig();\n                if (resolverValue['__resolveType']) {\n                    config.resolveType = resolverValue['__resolveType'];\n                }\n                return new graphql_1.GraphQLUnionType(config);\n            }\n        },\n        [utils_1.MapperKind.OBJECT_TYPE]: type => {\n            const resolverValue = resolvers[type.name];\n            if (resolverValue != null) {\n                const config = type.toConfig();\n                if (resolverValue['__isTypeOf']) {\n                    config.isTypeOf = resolverValue['__isTypeOf'];\n                }\n                return new graphql_1.GraphQLObjectType(config);\n            }\n        },\n        [utils_1.MapperKind.INTERFACE_TYPE]: type => {\n            const resolverValue = resolvers[type.name];\n            if (resolverValue != null) {\n                const config = type.toConfig();\n                if (resolverValue['__resolveType']) {\n                    config.resolveType = resolverValue['__resolveType'];\n                }\n                return new graphql_1.GraphQLInterfaceType(config);\n            }\n        },\n        [utils_1.MapperKind.COMPOSITE_FIELD]: (fieldConfig, fieldName, typeName) => {\n            const resolverValue = resolvers[typeName];\n            if (resolverValue != null) {\n                const fieldResolve = resolverValue[fieldName];\n                if (fieldResolve != null) {\n                    const newFieldConfig = { ...fieldConfig };\n                    if (typeof fieldResolve === 'function') {\n                        // for convenience. Allows shorter syntax in resolver definition file\n                        newFieldConfig.resolve = fieldResolve.bind(resolverValue);\n                    }\n                    else {\n                        setFieldProperties(newFieldConfig, fieldResolve);\n                    }\n                    return newFieldConfig;\n                }\n            }\n        },\n    });\n    if (defaultFieldResolver != null) {\n        schema = (0, utils_1.mapSchema)(schema, {\n            [utils_1.MapperKind.OBJECT_FIELD]: fieldConfig => ({\n                ...fieldConfig,\n                resolve: fieldConfig.resolve != null ? fieldConfig.resolve : defaultFieldResolver,\n            }),\n        });\n    }\n    return schema;\n}\nfunction setFieldProperties(field, propertiesObj) {\n    for (const propertyName in propertiesObj) {\n        field[propertyName] = propertiesObj[propertyName];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/addResolversToSchema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/assertResolversPresent.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/assertResolversPresent.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.assertResolversPresent = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nfunction assertResolversPresent(schema, resolverValidationOptions = {}) {\n    const { requireResolversForArgs, requireResolversForNonScalar, requireResolversForAllFields } = resolverValidationOptions;\n    if (requireResolversForAllFields && (requireResolversForArgs || requireResolversForNonScalar)) {\n        throw new TypeError('requireResolversForAllFields takes precedence over the more specific assertions. ' +\n            'Please configure either requireResolversForAllFields or requireResolversForArgs / ' +\n            'requireResolversForNonScalar, but not a combination of them.');\n    }\n    (0, utils_1.forEachField)(schema, (field, typeName, fieldName) => {\n        // requires a resolver for *every* field.\n        if (requireResolversForAllFields) {\n            expectResolver('requireResolversForAllFields', requireResolversForAllFields, field, typeName, fieldName);\n        }\n        // requires a resolver on every field that has arguments\n        if (requireResolversForArgs && field.args.length > 0) {\n            expectResolver('requireResolversForArgs', requireResolversForArgs, field, typeName, fieldName);\n        }\n        // requires a resolver on every field that returns a non-scalar type\n        if (requireResolversForNonScalar !== 'ignore' && !(0, graphql_1.isScalarType)((0, graphql_1.getNamedType)(field.type))) {\n            expectResolver('requireResolversForNonScalar', requireResolversForNonScalar, field, typeName, fieldName);\n        }\n    });\n}\nexports.assertResolversPresent = assertResolversPresent;\nfunction expectResolver(validator, behavior, field, typeName, fieldName) {\n    if (!field.resolve) {\n        const message = `Resolver missing for \"${typeName}.${fieldName}\".\nTo disable this validator, use:\n  resolverValidationOptions: {\n    ${validator}: 'ignore'\n  }`;\n        if (behavior === 'error') {\n            throw new Error(message);\n        }\n        if (behavior === 'warn') {\n            console.warn(message);\n        }\n        return;\n    }\n    if (typeof field.resolve !== 'function') {\n        throw new Error(`Resolver \"${typeName}.${fieldName}\" must be a function`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9janMvYXNzZXJ0UmVzb2x2ZXJzUHJlc2VudC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCw4QkFBOEI7QUFDOUIsa0JBQWtCLG1CQUFPLENBQUMsdURBQVM7QUFDbkMsZ0JBQWdCLG1CQUFPLENBQUMsb0ZBQXNCO0FBQzlDLHNFQUFzRTtBQUN0RSxZQUFZLHNGQUFzRjtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSw4QkFBOEI7QUFDOUI7QUFDQTtBQUNBLGlEQUFpRCxTQUFTLEdBQUcsVUFBVTtBQUN2RTtBQUNBO0FBQ0EsTUFBTSxVQUFVO0FBQ2hCLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsU0FBUyxHQUFHLFVBQVU7QUFDM0Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvc2NoZW1hL2Nqcy9hc3NlcnRSZXNvbHZlcnNQcmVzZW50LmpzP2QzNWQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmFzc2VydFJlc29sdmVyc1ByZXNlbnQgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQGdyYXBocWwtdG9vbHMvdXRpbHNcIik7XG5mdW5jdGlvbiBhc3NlcnRSZXNvbHZlcnNQcmVzZW50KHNjaGVtYSwgcmVzb2x2ZXJWYWxpZGF0aW9uT3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyByZXF1aXJlUmVzb2x2ZXJzRm9yQXJncywgcmVxdWlyZVJlc29sdmVyc0Zvck5vblNjYWxhciwgcmVxdWlyZVJlc29sdmVyc0ZvckFsbEZpZWxkcyB9ID0gcmVzb2x2ZXJWYWxpZGF0aW9uT3B0aW9ucztcbiAgICBpZiAocmVxdWlyZVJlc29sdmVyc0ZvckFsbEZpZWxkcyAmJiAocmVxdWlyZVJlc29sdmVyc0ZvckFyZ3MgfHwgcmVxdWlyZVJlc29sdmVyc0Zvck5vblNjYWxhcikpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVxdWlyZVJlc29sdmVyc0ZvckFsbEZpZWxkcyB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgdGhlIG1vcmUgc3BlY2lmaWMgYXNzZXJ0aW9ucy4gJyArXG4gICAgICAgICAgICAnUGxlYXNlIGNvbmZpZ3VyZSBlaXRoZXIgcmVxdWlyZVJlc29sdmVyc0ZvckFsbEZpZWxkcyBvciByZXF1aXJlUmVzb2x2ZXJzRm9yQXJncyAvICcgK1xuICAgICAgICAgICAgJ3JlcXVpcmVSZXNvbHZlcnNGb3JOb25TY2FsYXIsIGJ1dCBub3QgYSBjb21iaW5hdGlvbiBvZiB0aGVtLicpO1xuICAgIH1cbiAgICAoMCwgdXRpbHNfMS5mb3JFYWNoRmllbGQpKHNjaGVtYSwgKGZpZWxkLCB0eXBlTmFtZSwgZmllbGROYW1lKSA9PiB7XG4gICAgICAgIC8vIHJlcXVpcmVzIGEgcmVzb2x2ZXIgZm9yICpldmVyeSogZmllbGQuXG4gICAgICAgIGlmIChyZXF1aXJlUmVzb2x2ZXJzRm9yQWxsRmllbGRzKSB7XG4gICAgICAgICAgICBleHBlY3RSZXNvbHZlcigncmVxdWlyZVJlc29sdmVyc0ZvckFsbEZpZWxkcycsIHJlcXVpcmVSZXNvbHZlcnNGb3JBbGxGaWVsZHMsIGZpZWxkLCB0eXBlTmFtZSwgZmllbGROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZXF1aXJlcyBhIHJlc29sdmVyIG9uIGV2ZXJ5IGZpZWxkIHRoYXQgaGFzIGFyZ3VtZW50c1xuICAgICAgICBpZiAocmVxdWlyZVJlc29sdmVyc0ZvckFyZ3MgJiYgZmllbGQuYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBleHBlY3RSZXNvbHZlcigncmVxdWlyZVJlc29sdmVyc0ZvckFyZ3MnLCByZXF1aXJlUmVzb2x2ZXJzRm9yQXJncywgZmllbGQsIHR5cGVOYW1lLCBmaWVsZE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlcXVpcmVzIGEgcmVzb2x2ZXIgb24gZXZlcnkgZmllbGQgdGhhdCByZXR1cm5zIGEgbm9uLXNjYWxhciB0eXBlXG4gICAgICAgIGlmIChyZXF1aXJlUmVzb2x2ZXJzRm9yTm9uU2NhbGFyICE9PSAnaWdub3JlJyAmJiAhKDAsIGdyYXBocWxfMS5pc1NjYWxhclR5cGUpKCgwLCBncmFwaHFsXzEuZ2V0TmFtZWRUeXBlKShmaWVsZC50eXBlKSkpIHtcbiAgICAgICAgICAgIGV4cGVjdFJlc29sdmVyKCdyZXF1aXJlUmVzb2x2ZXJzRm9yTm9uU2NhbGFyJywgcmVxdWlyZVJlc29sdmVyc0Zvck5vblNjYWxhciwgZmllbGQsIHR5cGVOYW1lLCBmaWVsZE5hbWUpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5leHBvcnRzLmFzc2VydFJlc29sdmVyc1ByZXNlbnQgPSBhc3NlcnRSZXNvbHZlcnNQcmVzZW50O1xuZnVuY3Rpb24gZXhwZWN0UmVzb2x2ZXIodmFsaWRhdG9yLCBiZWhhdmlvciwgZmllbGQsIHR5cGVOYW1lLCBmaWVsZE5hbWUpIHtcbiAgICBpZiAoIWZpZWxkLnJlc29sdmUpIHtcbiAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBSZXNvbHZlciBtaXNzaW5nIGZvciBcIiR7dHlwZU5hbWV9LiR7ZmllbGROYW1lfVwiLlxuVG8gZGlzYWJsZSB0aGlzIHZhbGlkYXRvciwgdXNlOlxuICByZXNvbHZlclZhbGlkYXRpb25PcHRpb25zOiB7XG4gICAgJHt2YWxpZGF0b3J9OiAnaWdub3JlJ1xuICB9YDtcbiAgICAgICAgaWYgKGJlaGF2aW9yID09PSAnZXJyb3InKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGJlaGF2aW9yID09PSAnd2FybicpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZmllbGQucmVzb2x2ZSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFJlc29sdmVyIFwiJHt0eXBlTmFtZX0uJHtmaWVsZE5hbWV9XCIgbXVzdCBiZSBhIGZ1bmN0aW9uYCk7XG4gICAgfVxufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/assertResolversPresent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/chainResolvers.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/chainResolvers.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.chainResolvers = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nfunction chainResolvers(resolvers) {\n    return (root, args, ctx, info) => resolvers.reduce((prev, curResolver) => {\n        if (curResolver != null) {\n            return curResolver(prev, args, ctx, info);\n        }\n        return (0, graphql_1.defaultFieldResolver)(prev, args, ctx, info);\n    }, root);\n}\nexports.chainResolvers = chainResolvers;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9janMvY2hhaW5SZXNvbHZlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0Qsc0JBQXNCO0FBQ3RCLGtCQUFrQixtQkFBTyxDQUFDLHVEQUFTO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLHNCQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvc2NoZW1hL2Nqcy9jaGFpblJlc29sdmVycy5qcz9iYzZhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5jaGFpblJlc29sdmVycyA9IHZvaWQgMDtcbmNvbnN0IGdyYXBocWxfMSA9IHJlcXVpcmUoXCJncmFwaHFsXCIpO1xuZnVuY3Rpb24gY2hhaW5SZXNvbHZlcnMocmVzb2x2ZXJzKSB7XG4gICAgcmV0dXJuIChyb290LCBhcmdzLCBjdHgsIGluZm8pID0+IHJlc29sdmVycy5yZWR1Y2UoKHByZXYsIGN1clJlc29sdmVyKSA9PiB7XG4gICAgICAgIGlmIChjdXJSZXNvbHZlciAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gY3VyUmVzb2x2ZXIocHJldiwgYXJncywgY3R4LCBpbmZvKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKDAsIGdyYXBocWxfMS5kZWZhdWx0RmllbGRSZXNvbHZlcikocHJldiwgYXJncywgY3R4LCBpbmZvKTtcbiAgICB9LCByb290KTtcbn1cbmV4cG9ydHMuY2hhaW5SZXNvbHZlcnMgPSBjaGFpblJlc29sdmVycztcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/chainResolvers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/checkForResolveTypeResolver.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/checkForResolveTypeResolver.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.checkForResolveTypeResolver = void 0;\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\n// If we have any union or interface types throw if no there is no resolveType resolver\nfunction checkForResolveTypeResolver(schema, requireResolversForResolveType) {\n    (0, utils_1.mapSchema)(schema, {\n        [utils_1.MapperKind.ABSTRACT_TYPE]: type => {\n            if (!type.resolveType) {\n                const message = `Type \"${type.name}\" is missing a \"__resolveType\" resolver. Pass 'ignore' into ` +\n                    '\"resolverValidationOptions.requireResolversForResolveType\" to disable this error.';\n                if (requireResolversForResolveType === 'error') {\n                    throw new Error(message);\n                }\n                if (requireResolversForResolveType === 'warn') {\n                    console.warn(message);\n                }\n            }\n            return undefined;\n        },\n    });\n}\nexports.checkForResolveTypeResolver = checkForResolveTypeResolver;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9janMvY2hlY2tGb3JSZXNvbHZlVHlwZVJlc29sdmVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2IsOENBQTZDLEVBQUUsYUFBYSxFQUFDO0FBQzdELG1DQUFtQztBQUNuQyxnQkFBZ0IsbUJBQU8sQ0FBQyxvRkFBc0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlDQUF5QyxVQUFVO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSxtQ0FBbUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9janMvY2hlY2tGb3JSZXNvbHZlVHlwZVJlc29sdmVyLmpzPzQwYTIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmNoZWNrRm9yUmVzb2x2ZVR5cGVSZXNvbHZlciA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQGdyYXBocWwtdG9vbHMvdXRpbHNcIik7XG4vLyBJZiB3ZSBoYXZlIGFueSB1bmlvbiBvciBpbnRlcmZhY2UgdHlwZXMgdGhyb3cgaWYgbm8gdGhlcmUgaXMgbm8gcmVzb2x2ZVR5cGUgcmVzb2x2ZXJcbmZ1bmN0aW9uIGNoZWNrRm9yUmVzb2x2ZVR5cGVSZXNvbHZlcihzY2hlbWEsIHJlcXVpcmVSZXNvbHZlcnNGb3JSZXNvbHZlVHlwZSkge1xuICAgICgwLCB1dGlsc18xLm1hcFNjaGVtYSkoc2NoZW1hLCB7XG4gICAgICAgIFt1dGlsc18xLk1hcHBlcktpbmQuQUJTVFJBQ1RfVFlQRV06IHR5cGUgPT4ge1xuICAgICAgICAgICAgaWYgKCF0eXBlLnJlc29sdmVUeXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBUeXBlIFwiJHt0eXBlLm5hbWV9XCIgaXMgbWlzc2luZyBhIFwiX19yZXNvbHZlVHlwZVwiIHJlc29sdmVyLiBQYXNzICdpZ25vcmUnIGludG8gYCArXG4gICAgICAgICAgICAgICAgICAgICdcInJlc29sdmVyVmFsaWRhdGlvbk9wdGlvbnMucmVxdWlyZVJlc29sdmVyc0ZvclJlc29sdmVUeXBlXCIgdG8gZGlzYWJsZSB0aGlzIGVycm9yLic7XG4gICAgICAgICAgICAgICAgaWYgKHJlcXVpcmVSZXNvbHZlcnNGb3JSZXNvbHZlVHlwZSA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZXF1aXJlUmVzb2x2ZXJzRm9yUmVzb2x2ZVR5cGUgPT09ICd3YXJuJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbmV4cG9ydHMuY2hlY2tGb3JSZXNvbHZlVHlwZVJlc29sdmVyID0gY2hlY2tGb3JSZXNvbHZlVHlwZVJlc29sdmVyO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/checkForResolveTypeResolver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/extendResolversFromInterfaces.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/extendResolversFromInterfaces.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.extendResolversFromInterfaces = void 0;\nfunction extendResolversFromInterfaces(schema, resolvers) {\n    const extendedResolvers = {};\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        const type = typeMap[typeName];\n        if ('getInterfaces' in type) {\n            extendedResolvers[typeName] = {};\n            for (const iFace of type.getInterfaces()) {\n                if (resolvers[iFace.name]) {\n                    for (const fieldName in resolvers[iFace.name]) {\n                        if (fieldName === '__isTypeOf' || !fieldName.startsWith('__')) {\n                            extendedResolvers[typeName][fieldName] = resolvers[iFace.name][fieldName];\n                        }\n                    }\n                }\n            }\n            const typeResolvers = resolvers[typeName];\n            extendedResolvers[typeName] = {\n                ...extendedResolvers[typeName],\n                ...typeResolvers,\n            };\n        }\n        else {\n            const typeResolvers = resolvers[typeName];\n            if (typeResolvers != null) {\n                extendedResolvers[typeName] = typeResolvers;\n            }\n        }\n    }\n    return extendedResolvers;\n}\nexports.extendResolversFromInterfaces = extendResolversFromInterfaces;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9janMvZXh0ZW5kUmVzb2x2ZXJzRnJvbUludGVyZmFjZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9zY2hlbWEvY2pzL2V4dGVuZFJlc29sdmVyc0Zyb21JbnRlcmZhY2VzLmpzP2E1ZDYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4dGVuZFJlc29sdmVyc0Zyb21JbnRlcmZhY2VzID0gdm9pZCAwO1xuZnVuY3Rpb24gZXh0ZW5kUmVzb2x2ZXJzRnJvbUludGVyZmFjZXMoc2NoZW1hLCByZXNvbHZlcnMpIHtcbiAgICBjb25zdCBleHRlbmRlZFJlc29sdmVycyA9IHt9O1xuICAgIGNvbnN0IHR5cGVNYXAgPSBzY2hlbWEuZ2V0VHlwZU1hcCgpO1xuICAgIGZvciAoY29uc3QgdHlwZU5hbWUgaW4gdHlwZU1hcCkge1xuICAgICAgICBjb25zdCB0eXBlID0gdHlwZU1hcFt0eXBlTmFtZV07XG4gICAgICAgIGlmICgnZ2V0SW50ZXJmYWNlcycgaW4gdHlwZSkge1xuICAgICAgICAgICAgZXh0ZW5kZWRSZXNvbHZlcnNbdHlwZU5hbWVdID0ge307XG4gICAgICAgICAgICBmb3IgKGNvbnN0IGlGYWNlIG9mIHR5cGUuZ2V0SW50ZXJmYWNlcygpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHJlc29sdmVyc1tpRmFjZS5uYW1lXSkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IGZpZWxkTmFtZSBpbiByZXNvbHZlcnNbaUZhY2UubmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWVsZE5hbWUgPT09ICdfX2lzVHlwZU9mJyB8fCAhZmllbGROYW1lLnN0YXJ0c1dpdGgoJ19fJykpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRlbmRlZFJlc29sdmVyc1t0eXBlTmFtZV1bZmllbGROYW1lXSA9IHJlc29sdmVyc1tpRmFjZS5uYW1lXVtmaWVsZE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdHlwZVJlc29sdmVycyA9IHJlc29sdmVyc1t0eXBlTmFtZV07XG4gICAgICAgICAgICBleHRlbmRlZFJlc29sdmVyc1t0eXBlTmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgLi4uZXh0ZW5kZWRSZXNvbHZlcnNbdHlwZU5hbWVdLFxuICAgICAgICAgICAgICAgIC4uLnR5cGVSZXNvbHZlcnMsXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgdHlwZVJlc29sdmVycyA9IHJlc29sdmVyc1t0eXBlTmFtZV07XG4gICAgICAgICAgICBpZiAodHlwZVJlc29sdmVycyAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZXh0ZW5kZWRSZXNvbHZlcnNbdHlwZU5hbWVdID0gdHlwZVJlc29sdmVycztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZXh0ZW5kZWRSZXNvbHZlcnM7XG59XG5leHBvcnRzLmV4dGVuZFJlc29sdmVyc0Zyb21JbnRlcmZhY2VzID0gZXh0ZW5kUmVzb2x2ZXJzRnJvbUludGVyZmFjZXM7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/extendResolversFromInterfaces.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/index.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/index.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.extractExtensionsFromSchema = exports.extendResolversFromInterfaces = exports.checkForResolveTypeResolver = exports.addResolversToSchema = exports.chainResolvers = exports.assertResolversPresent = void 0;\nconst tslib_1 = __webpack_require__(/*! tslib */ \"(rsc)/./node_modules/tslib/tslib.es6.mjs\");\nvar assertResolversPresent_js_1 = __webpack_require__(/*! ./assertResolversPresent.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/assertResolversPresent.js\");\nObject.defineProperty(exports, \"assertResolversPresent\", ({ enumerable: true, get: function () { return assertResolversPresent_js_1.assertResolversPresent; } }));\nvar chainResolvers_js_1 = __webpack_require__(/*! ./chainResolvers.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/chainResolvers.js\");\nObject.defineProperty(exports, \"chainResolvers\", ({ enumerable: true, get: function () { return chainResolvers_js_1.chainResolvers; } }));\nvar addResolversToSchema_js_1 = __webpack_require__(/*! ./addResolversToSchema.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/addResolversToSchema.js\");\nObject.defineProperty(exports, \"addResolversToSchema\", ({ enumerable: true, get: function () { return addResolversToSchema_js_1.addResolversToSchema; } }));\nvar checkForResolveTypeResolver_js_1 = __webpack_require__(/*! ./checkForResolveTypeResolver.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/checkForResolveTypeResolver.js\");\nObject.defineProperty(exports, \"checkForResolveTypeResolver\", ({ enumerable: true, get: function () { return checkForResolveTypeResolver_js_1.checkForResolveTypeResolver; } }));\nvar extendResolversFromInterfaces_js_1 = __webpack_require__(/*! ./extendResolversFromInterfaces.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/extendResolversFromInterfaces.js\");\nObject.defineProperty(exports, \"extendResolversFromInterfaces\", ({ enumerable: true, get: function () { return extendResolversFromInterfaces_js_1.extendResolversFromInterfaces; } }));\ntslib_1.__exportStar(__webpack_require__(/*! ./makeExecutableSchema.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/makeExecutableSchema.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./types.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/types.js\"), exports);\ntslib_1.__exportStar(__webpack_require__(/*! ./merge-schemas.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/merge-schemas.js\"), exports);\nvar utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nObject.defineProperty(exports, \"extractExtensionsFromSchema\", ({ enumerable: true, get: function () { return utils_1.extractExtensionsFromSchema; } }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9janMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsbUNBQW1DLEdBQUcscUNBQXFDLEdBQUcsbUNBQW1DLEdBQUcsNEJBQTRCLEdBQUcsc0JBQXNCLEdBQUcsOEJBQThCO0FBQzFNLGdCQUFnQixtQkFBTyxDQUFDLHVEQUFPO0FBQy9CLGtDQUFrQyxtQkFBTyxDQUFDLHlJQUE2QjtBQUN2RSwwREFBeUQsRUFBRSxxQ0FBcUMsOERBQThELEVBQUM7QUFDL0osMEJBQTBCLG1CQUFPLENBQUMseUhBQXFCO0FBQ3ZELGtEQUFpRCxFQUFFLHFDQUFxQyw4Q0FBOEMsRUFBQztBQUN2SSxnQ0FBZ0MsbUJBQU8sQ0FBQyxxSUFBMkI7QUFDbkUsd0RBQXVELEVBQUUscUNBQXFDLDBEQUEwRCxFQUFDO0FBQ3pKLHVDQUF1QyxtQkFBTyxDQUFDLG1KQUFrQztBQUNqRiwrREFBOEQsRUFBRSxxQ0FBcUMsd0VBQXdFLEVBQUM7QUFDOUsseUNBQXlDLG1CQUFPLENBQUMsdUpBQW9DO0FBQ3JGLGlFQUFnRSxFQUFFLHFDQUFxQyw0RUFBNEUsRUFBQztBQUNwTCxxQkFBcUIsbUJBQU8sQ0FBQyxxSUFBMkI7QUFDeEQscUJBQXFCLG1CQUFPLENBQUMsdUdBQVk7QUFDekMscUJBQXFCLG1CQUFPLENBQUMsdUhBQW9CO0FBQ2pELGNBQWMsbUJBQU8sQ0FBQyxvRkFBc0I7QUFDNUMsK0RBQThELEVBQUUscUNBQXFDLCtDQUErQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9zY2hlbWEvY2pzL2luZGV4LmpzP2MwZDAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmV4dHJhY3RFeHRlbnNpb25zRnJvbVNjaGVtYSA9IGV4cG9ydHMuZXh0ZW5kUmVzb2x2ZXJzRnJvbUludGVyZmFjZXMgPSBleHBvcnRzLmNoZWNrRm9yUmVzb2x2ZVR5cGVSZXNvbHZlciA9IGV4cG9ydHMuYWRkUmVzb2x2ZXJzVG9TY2hlbWEgPSBleHBvcnRzLmNoYWluUmVzb2x2ZXJzID0gZXhwb3J0cy5hc3NlcnRSZXNvbHZlcnNQcmVzZW50ID0gdm9pZCAwO1xuY29uc3QgdHNsaWJfMSA9IHJlcXVpcmUoXCJ0c2xpYlwiKTtcbnZhciBhc3NlcnRSZXNvbHZlcnNQcmVzZW50X2pzXzEgPSByZXF1aXJlKFwiLi9hc3NlcnRSZXNvbHZlcnNQcmVzZW50LmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYXNzZXJ0UmVzb2x2ZXJzUHJlc2VudFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gYXNzZXJ0UmVzb2x2ZXJzUHJlc2VudF9qc18xLmFzc2VydFJlc29sdmVyc1ByZXNlbnQ7IH0gfSk7XG52YXIgY2hhaW5SZXNvbHZlcnNfanNfMSA9IHJlcXVpcmUoXCIuL2NoYWluUmVzb2x2ZXJzLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2hhaW5SZXNvbHZlcnNcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNoYWluUmVzb2x2ZXJzX2pzXzEuY2hhaW5SZXNvbHZlcnM7IH0gfSk7XG52YXIgYWRkUmVzb2x2ZXJzVG9TY2hlbWFfanNfMSA9IHJlcXVpcmUoXCIuL2FkZFJlc29sdmVyc1RvU2NoZW1hLmpzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYWRkUmVzb2x2ZXJzVG9TY2hlbWFcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGFkZFJlc29sdmVyc1RvU2NoZW1hX2pzXzEuYWRkUmVzb2x2ZXJzVG9TY2hlbWE7IH0gfSk7XG52YXIgY2hlY2tGb3JSZXNvbHZlVHlwZVJlc29sdmVyX2pzXzEgPSByZXF1aXJlKFwiLi9jaGVja0ZvclJlc29sdmVUeXBlUmVzb2x2ZXIuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjaGVja0ZvclJlc29sdmVUeXBlUmVzb2x2ZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNoZWNrRm9yUmVzb2x2ZVR5cGVSZXNvbHZlcl9qc18xLmNoZWNrRm9yUmVzb2x2ZVR5cGVSZXNvbHZlcjsgfSB9KTtcbnZhciBleHRlbmRSZXNvbHZlcnNGcm9tSW50ZXJmYWNlc19qc18xID0gcmVxdWlyZShcIi4vZXh0ZW5kUmVzb2x2ZXJzRnJvbUludGVyZmFjZXMuanNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJleHRlbmRSZXNvbHZlcnNGcm9tSW50ZXJmYWNlc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZXh0ZW5kUmVzb2x2ZXJzRnJvbUludGVyZmFjZXNfanNfMS5leHRlbmRSZXNvbHZlcnNGcm9tSW50ZXJmYWNlczsgfSB9KTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL21ha2VFeGVjdXRhYmxlU2NoZW1hLmpzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL3R5cGVzLmpzXCIpLCBleHBvcnRzKTtcbnRzbGliXzEuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL21lcmdlLXNjaGVtYXMuanNcIiksIGV4cG9ydHMpO1xudmFyIHV0aWxzXzEgPSByZXF1aXJlKFwiQGdyYXBocWwtdG9vbHMvdXRpbHNcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJleHRyYWN0RXh0ZW5zaW9uc0Zyb21TY2hlbWFcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzEuZXh0cmFjdEV4dGVuc2lvbnNGcm9tU2NoZW1hOyB9IH0pO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/makeExecutableSchema.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/makeExecutableSchema.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.makeExecutableSchema = void 0;\nconst graphql_1 = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\");\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nconst addResolversToSchema_js_1 = __webpack_require__(/*! ./addResolversToSchema.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/addResolversToSchema.js\");\nconst assertResolversPresent_js_1 = __webpack_require__(/*! ./assertResolversPresent.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/assertResolversPresent.js\");\nconst merge_1 = __webpack_require__(/*! @graphql-tools/merge */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/cjs/index.js\");\n/**\n * Builds a schema from the provided type definitions and resolvers.\n *\n * The type definitions are written using Schema Definition Language (SDL). They\n * can be provided as a string, a `DocumentNode`, a function, or an array of any\n * of these. If a function is provided, it will be passed no arguments and\n * should return an array of strings or `DocumentNode`s.\n *\n * Note: You can use GraphQL magic comment provide additional syntax\n * highlighting in your editor (with the appropriate editor plugin).\n *\n * ```js\n * const typeDefs = /* GraphQL *\\/ `\n *   type Query {\n *     posts: [Post]\n *     author(id: Int!): Author\n *   }\n * `;\n * ```\n *\n * The `resolvers` object should be a map of type names to nested object, which\n * themselves map the type's fields to their appropriate resolvers.\n * See the [Resolvers](/docs/resolvers) section of the documentation for more details.\n *\n * ```js\n * const resolvers = {\n *   Query: {\n *     posts: (obj, args, ctx, info) => getAllPosts(),\n *     author: (obj, args, ctx, info) => getAuthorById(args.id)\n *   }\n * };\n * ```\n *\n * Once you've defined both the `typeDefs` and `resolvers`, you can create your\n * schema:\n *\n * ```js\n * const schema = makeExecutableSchema({\n *   typeDefs,\n *   resolvers,\n * })\n * ```\n */\nfunction makeExecutableSchema({ typeDefs, resolvers = {}, resolverValidationOptions = {}, inheritResolversFromInterfaces = false, updateResolversInPlace = false, schemaExtensions, ...otherOptions }) {\n    // Validate and clean up arguments\n    if (typeof resolverValidationOptions !== 'object') {\n        throw new Error('Expected `resolverValidationOptions` to be an object');\n    }\n    if (!typeDefs) {\n        throw new Error('Must provide typeDefs');\n    }\n    let schema;\n    if ((0, graphql_1.isSchema)(typeDefs)) {\n        schema = typeDefs;\n    }\n    else if (otherOptions === null || otherOptions === void 0 ? void 0 : otherOptions.commentDescriptions) {\n        const mergedTypeDefs = (0, merge_1.mergeTypeDefs)(typeDefs, {\n            ...otherOptions,\n            commentDescriptions: true,\n        });\n        schema = (0, graphql_1.buildSchema)(mergedTypeDefs, otherOptions);\n    }\n    else {\n        const mergedTypeDefs = (0, merge_1.mergeTypeDefs)(typeDefs, otherOptions);\n        schema = (0, graphql_1.buildASTSchema)(mergedTypeDefs, otherOptions);\n    }\n    // We allow passing in an array of resolver maps, in which case we merge them\n    schema = (0, addResolversToSchema_js_1.addResolversToSchema)({\n        schema,\n        resolvers: (0, merge_1.mergeResolvers)(resolvers),\n        resolverValidationOptions,\n        inheritResolversFromInterfaces,\n        updateResolversInPlace,\n    });\n    if (Object.keys(resolverValidationOptions).length > 0) {\n        (0, assertResolversPresent_js_1.assertResolversPresent)(schema, resolverValidationOptions);\n    }\n    if (schemaExtensions) {\n        schemaExtensions = (0, merge_1.mergeExtensions)((0, utils_1.asArray)(schemaExtensions));\n        (0, merge_1.applyExtensions)(schema, schemaExtensions);\n    }\n    return schema;\n}\nexports.makeExecutableSchema = makeExecutableSchema;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9janMvbWFrZUV4ZWN1dGFibGVTY2hlbWEuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYiw4Q0FBNkMsRUFBRSxhQUFhLEVBQUM7QUFDN0QsNEJBQTRCO0FBQzVCLGtCQUFrQixtQkFBTyxDQUFDLHVEQUFTO0FBQ25DLGdCQUFnQixtQkFBTyxDQUFDLG9GQUFzQjtBQUM5QyxrQ0FBa0MsbUJBQU8sQ0FBQyxxSUFBMkI7QUFDckUsb0NBQW9DLG1CQUFPLENBQUMseUlBQTZCO0FBQ3pFLGdCQUFnQixtQkFBTyxDQUFDLGdIQUFzQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsZ0NBQWdDLHdCQUF3QixnQ0FBZ0MsNkdBQTZHO0FBQ3JNO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9janMvbWFrZUV4ZWN1dGFibGVTY2hlbWEuanM/ZDIzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMubWFrZUV4ZWN1dGFibGVTY2hlbWEgPSB2b2lkIDA7XG5jb25zdCBncmFwaHFsXzEgPSByZXF1aXJlKFwiZ3JhcGhxbFwiKTtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQGdyYXBocWwtdG9vbHMvdXRpbHNcIik7XG5jb25zdCBhZGRSZXNvbHZlcnNUb1NjaGVtYV9qc18xID0gcmVxdWlyZShcIi4vYWRkUmVzb2x2ZXJzVG9TY2hlbWEuanNcIik7XG5jb25zdCBhc3NlcnRSZXNvbHZlcnNQcmVzZW50X2pzXzEgPSByZXF1aXJlKFwiLi9hc3NlcnRSZXNvbHZlcnNQcmVzZW50LmpzXCIpO1xuY29uc3QgbWVyZ2VfMSA9IHJlcXVpcmUoXCJAZ3JhcGhxbC10b29scy9tZXJnZVwiKTtcbi8qKlxuICogQnVpbGRzIGEgc2NoZW1hIGZyb20gdGhlIHByb3ZpZGVkIHR5cGUgZGVmaW5pdGlvbnMgYW5kIHJlc29sdmVycy5cbiAqXG4gKiBUaGUgdHlwZSBkZWZpbml0aW9ucyBhcmUgd3JpdHRlbiB1c2luZyBTY2hlbWEgRGVmaW5pdGlvbiBMYW5ndWFnZSAoU0RMKS4gVGhleVxuICogY2FuIGJlIHByb3ZpZGVkIGFzIGEgc3RyaW5nLCBhIGBEb2N1bWVudE5vZGVgLCBhIGZ1bmN0aW9uLCBvciBhbiBhcnJheSBvZiBhbnlcbiAqIG9mIHRoZXNlLiBJZiBhIGZ1bmN0aW9uIGlzIHByb3ZpZGVkLCBpdCB3aWxsIGJlIHBhc3NlZCBubyBhcmd1bWVudHMgYW5kXG4gKiBzaG91bGQgcmV0dXJuIGFuIGFycmF5IG9mIHN0cmluZ3Mgb3IgYERvY3VtZW50Tm9kZWBzLlxuICpcbiAqIE5vdGU6IFlvdSBjYW4gdXNlIEdyYXBoUUwgbWFnaWMgY29tbWVudCBwcm92aWRlIGFkZGl0aW9uYWwgc3ludGF4XG4gKiBoaWdobGlnaHRpbmcgaW4geW91ciBlZGl0b3IgKHdpdGggdGhlIGFwcHJvcHJpYXRlIGVkaXRvciBwbHVnaW4pLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCB0eXBlRGVmcyA9IC8qIEdyYXBoUUwgKlxcLyBgXG4gKiAgIHR5cGUgUXVlcnkge1xuICogICAgIHBvc3RzOiBbUG9zdF1cbiAqICAgICBhdXRob3IoaWQ6IEludCEpOiBBdXRob3JcbiAqICAgfVxuICogYDtcbiAqIGBgYFxuICpcbiAqIFRoZSBgcmVzb2x2ZXJzYCBvYmplY3Qgc2hvdWxkIGJlIGEgbWFwIG9mIHR5cGUgbmFtZXMgdG8gbmVzdGVkIG9iamVjdCwgd2hpY2hcbiAqIHRoZW1zZWx2ZXMgbWFwIHRoZSB0eXBlJ3MgZmllbGRzIHRvIHRoZWlyIGFwcHJvcHJpYXRlIHJlc29sdmVycy5cbiAqIFNlZSB0aGUgW1Jlc29sdmVyc10oL2RvY3MvcmVzb2x2ZXJzKSBzZWN0aW9uIG9mIHRoZSBkb2N1bWVudGF0aW9uIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHJlc29sdmVycyA9IHtcbiAqICAgUXVlcnk6IHtcbiAqICAgICBwb3N0czogKG9iaiwgYXJncywgY3R4LCBpbmZvKSA9PiBnZXRBbGxQb3N0cygpLFxuICogICAgIGF1dGhvcjogKG9iaiwgYXJncywgY3R4LCBpbmZvKSA9PiBnZXRBdXRob3JCeUlkKGFyZ3MuaWQpXG4gKiAgIH1cbiAqIH07XG4gKiBgYGBcbiAqXG4gKiBPbmNlIHlvdSd2ZSBkZWZpbmVkIGJvdGggdGhlIGB0eXBlRGVmc2AgYW5kIGByZXNvbHZlcnNgLCB5b3UgY2FuIGNyZWF0ZSB5b3VyXG4gKiBzY2hlbWE6XG4gKlxuICogYGBganNcbiAqIGNvbnN0IHNjaGVtYSA9IG1ha2VFeGVjdXRhYmxlU2NoZW1hKHtcbiAqICAgdHlwZURlZnMsXG4gKiAgIHJlc29sdmVycyxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuZnVuY3Rpb24gbWFrZUV4ZWN1dGFibGVTY2hlbWEoeyB0eXBlRGVmcywgcmVzb2x2ZXJzID0ge30sIHJlc29sdmVyVmFsaWRhdGlvbk9wdGlvbnMgPSB7fSwgaW5oZXJpdFJlc29sdmVyc0Zyb21JbnRlcmZhY2VzID0gZmFsc2UsIHVwZGF0ZVJlc29sdmVyc0luUGxhY2UgPSBmYWxzZSwgc2NoZW1hRXh0ZW5zaW9ucywgLi4ub3RoZXJPcHRpb25zIH0pIHtcbiAgICAvLyBWYWxpZGF0ZSBhbmQgY2xlYW4gdXAgYXJndW1lbnRzXG4gICAgaWYgKHR5cGVvZiByZXNvbHZlclZhbGlkYXRpb25PcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIGByZXNvbHZlclZhbGlkYXRpb25PcHRpb25zYCB0byBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgaWYgKCF0eXBlRGVmcykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgcHJvdmlkZSB0eXBlRGVmcycpO1xuICAgIH1cbiAgICBsZXQgc2NoZW1hO1xuICAgIGlmICgoMCwgZ3JhcGhxbF8xLmlzU2NoZW1hKSh0eXBlRGVmcykpIHtcbiAgICAgICAgc2NoZW1hID0gdHlwZURlZnM7XG4gICAgfVxuICAgIGVsc2UgaWYgKG90aGVyT3B0aW9ucyA9PT0gbnVsbCB8fCBvdGhlck9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG90aGVyT3B0aW9ucy5jb21tZW50RGVzY3JpcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IG1lcmdlZFR5cGVEZWZzID0gKDAsIG1lcmdlXzEubWVyZ2VUeXBlRGVmcykodHlwZURlZnMsIHtcbiAgICAgICAgICAgIC4uLm90aGVyT3B0aW9ucyxcbiAgICAgICAgICAgIGNvbW1lbnREZXNjcmlwdGlvbnM6IHRydWUsXG4gICAgICAgIH0pO1xuICAgICAgICBzY2hlbWEgPSAoMCwgZ3JhcGhxbF8xLmJ1aWxkU2NoZW1hKShtZXJnZWRUeXBlRGVmcywgb3RoZXJPcHRpb25zKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGNvbnN0IG1lcmdlZFR5cGVEZWZzID0gKDAsIG1lcmdlXzEubWVyZ2VUeXBlRGVmcykodHlwZURlZnMsIG90aGVyT3B0aW9ucyk7XG4gICAgICAgIHNjaGVtYSA9ICgwLCBncmFwaHFsXzEuYnVpbGRBU1RTY2hlbWEpKG1lcmdlZFR5cGVEZWZzLCBvdGhlck9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyBXZSBhbGxvdyBwYXNzaW5nIGluIGFuIGFycmF5IG9mIHJlc29sdmVyIG1hcHMsIGluIHdoaWNoIGNhc2Ugd2UgbWVyZ2UgdGhlbVxuICAgIHNjaGVtYSA9ICgwLCBhZGRSZXNvbHZlcnNUb1NjaGVtYV9qc18xLmFkZFJlc29sdmVyc1RvU2NoZW1hKSh7XG4gICAgICAgIHNjaGVtYSxcbiAgICAgICAgcmVzb2x2ZXJzOiAoMCwgbWVyZ2VfMS5tZXJnZVJlc29sdmVycykocmVzb2x2ZXJzKSxcbiAgICAgICAgcmVzb2x2ZXJWYWxpZGF0aW9uT3B0aW9ucyxcbiAgICAgICAgaW5oZXJpdFJlc29sdmVyc0Zyb21JbnRlcmZhY2VzLFxuICAgICAgICB1cGRhdGVSZXNvbHZlcnNJblBsYWNlLFxuICAgIH0pO1xuICAgIGlmIChPYmplY3Qua2V5cyhyZXNvbHZlclZhbGlkYXRpb25PcHRpb25zKS5sZW5ndGggPiAwKSB7XG4gICAgICAgICgwLCBhc3NlcnRSZXNvbHZlcnNQcmVzZW50X2pzXzEuYXNzZXJ0UmVzb2x2ZXJzUHJlc2VudCkoc2NoZW1hLCByZXNvbHZlclZhbGlkYXRpb25PcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKHNjaGVtYUV4dGVuc2lvbnMpIHtcbiAgICAgICAgc2NoZW1hRXh0ZW5zaW9ucyA9ICgwLCBtZXJnZV8xLm1lcmdlRXh0ZW5zaW9ucykoKDAsIHV0aWxzXzEuYXNBcnJheSkoc2NoZW1hRXh0ZW5zaW9ucykpO1xuICAgICAgICAoMCwgbWVyZ2VfMS5hcHBseUV4dGVuc2lvbnMpKHNjaGVtYSwgc2NoZW1hRXh0ZW5zaW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBzY2hlbWE7XG59XG5leHBvcnRzLm1ha2VFeGVjdXRhYmxlU2NoZW1hID0gbWFrZUV4ZWN1dGFibGVTY2hlbWE7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/makeExecutableSchema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/merge-schemas.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/merge-schemas.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.mergeSchemas = void 0;\nconst utils_1 = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/cjs/index.js\");\nconst makeExecutableSchema_js_1 = __webpack_require__(/*! ./makeExecutableSchema.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/makeExecutableSchema.js\");\n/**\n * Synchronously merges multiple schemas, typeDefinitions and/or resolvers into a single schema.\n * @param config Configuration object\n */\nfunction mergeSchemas(config) {\n    const extractedTypeDefs = [];\n    const extractedResolvers = [];\n    const extractedSchemaExtensions = [];\n    if (config.schemas != null) {\n        for (const schema of config.schemas) {\n            extractedTypeDefs.push(schema);\n            extractedResolvers.push((0, utils_1.getResolversFromSchema)(schema));\n            extractedSchemaExtensions.push((0, utils_1.extractExtensionsFromSchema)(schema));\n        }\n    }\n    if (config.typeDefs != null) {\n        extractedTypeDefs.push(config.typeDefs);\n    }\n    if (config.resolvers != null) {\n        const additionalResolvers = (0, utils_1.asArray)(config.resolvers);\n        extractedResolvers.push(...additionalResolvers);\n    }\n    if (config.schemaExtensions != null) {\n        const additionalSchemaExtensions = (0, utils_1.asArray)(config.schemaExtensions);\n        extractedSchemaExtensions.push(...additionalSchemaExtensions);\n    }\n    return (0, makeExecutableSchema_js_1.makeExecutableSchema)({\n        ...config,\n        typeDefs: extractedTypeDefs,\n        resolvers: extractedResolvers,\n        schemaExtensions: extractedSchemaExtensions,\n    });\n}\nexports.mergeSchemas = mergeSchemas;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9janMvbWVyZ2Utc2NoZW1hcy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiLDhDQUE2QyxFQUFFLGFBQWEsRUFBQztBQUM3RCxvQkFBb0I7QUFDcEIsZ0JBQWdCLG1CQUFPLENBQUMsb0ZBQXNCO0FBQzlDLGtDQUFrQyxtQkFBTyxDQUFDLHFJQUEyQjtBQUNyRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLG9CQUFvQiIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvc2NoZW1hL2Nqcy9tZXJnZS1zY2hlbWFzLmpzP2MzNmYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm1lcmdlU2NoZW1hcyA9IHZvaWQgMDtcbmNvbnN0IHV0aWxzXzEgPSByZXF1aXJlKFwiQGdyYXBocWwtdG9vbHMvdXRpbHNcIik7XG5jb25zdCBtYWtlRXhlY3V0YWJsZVNjaGVtYV9qc18xID0gcmVxdWlyZShcIi4vbWFrZUV4ZWN1dGFibGVTY2hlbWEuanNcIik7XG4vKipcbiAqIFN5bmNocm9ub3VzbHkgbWVyZ2VzIG11bHRpcGxlIHNjaGVtYXMsIHR5cGVEZWZpbml0aW9ucyBhbmQvb3IgcmVzb2x2ZXJzIGludG8gYSBzaW5nbGUgc2NoZW1hLlxuICogQHBhcmFtIGNvbmZpZyBDb25maWd1cmF0aW9uIG9iamVjdFxuICovXG5mdW5jdGlvbiBtZXJnZVNjaGVtYXMoY29uZmlnKSB7XG4gICAgY29uc3QgZXh0cmFjdGVkVHlwZURlZnMgPSBbXTtcbiAgICBjb25zdCBleHRyYWN0ZWRSZXNvbHZlcnMgPSBbXTtcbiAgICBjb25zdCBleHRyYWN0ZWRTY2hlbWFFeHRlbnNpb25zID0gW107XG4gICAgaWYgKGNvbmZpZy5zY2hlbWFzICE9IG51bGwpIHtcbiAgICAgICAgZm9yIChjb25zdCBzY2hlbWEgb2YgY29uZmlnLnNjaGVtYXMpIHtcbiAgICAgICAgICAgIGV4dHJhY3RlZFR5cGVEZWZzLnB1c2goc2NoZW1hKTtcbiAgICAgICAgICAgIGV4dHJhY3RlZFJlc29sdmVycy5wdXNoKCgwLCB1dGlsc18xLmdldFJlc29sdmVyc0Zyb21TY2hlbWEpKHNjaGVtYSkpO1xuICAgICAgICAgICAgZXh0cmFjdGVkU2NoZW1hRXh0ZW5zaW9ucy5wdXNoKCgwLCB1dGlsc18xLmV4dHJhY3RFeHRlbnNpb25zRnJvbVNjaGVtYSkoc2NoZW1hKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbmZpZy50eXBlRGVmcyAhPSBudWxsKSB7XG4gICAgICAgIGV4dHJhY3RlZFR5cGVEZWZzLnB1c2goY29uZmlnLnR5cGVEZWZzKTtcbiAgICB9XG4gICAgaWYgKGNvbmZpZy5yZXNvbHZlcnMgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBhZGRpdGlvbmFsUmVzb2x2ZXJzID0gKDAsIHV0aWxzXzEuYXNBcnJheSkoY29uZmlnLnJlc29sdmVycyk7XG4gICAgICAgIGV4dHJhY3RlZFJlc29sdmVycy5wdXNoKC4uLmFkZGl0aW9uYWxSZXNvbHZlcnMpO1xuICAgIH1cbiAgICBpZiAoY29uZmlnLnNjaGVtYUV4dGVuc2lvbnMgIT0gbnVsbCkge1xuICAgICAgICBjb25zdCBhZGRpdGlvbmFsU2NoZW1hRXh0ZW5zaW9ucyA9ICgwLCB1dGlsc18xLmFzQXJyYXkpKGNvbmZpZy5zY2hlbWFFeHRlbnNpb25zKTtcbiAgICAgICAgZXh0cmFjdGVkU2NoZW1hRXh0ZW5zaW9ucy5wdXNoKC4uLmFkZGl0aW9uYWxTY2hlbWFFeHRlbnNpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuICgwLCBtYWtlRXhlY3V0YWJsZVNjaGVtYV9qc18xLm1ha2VFeGVjdXRhYmxlU2NoZW1hKSh7XG4gICAgICAgIC4uLmNvbmZpZyxcbiAgICAgICAgdHlwZURlZnM6IGV4dHJhY3RlZFR5cGVEZWZzLFxuICAgICAgICByZXNvbHZlcnM6IGV4dHJhY3RlZFJlc29sdmVycyxcbiAgICAgICAgc2NoZW1hRXh0ZW5zaW9uczogZXh0cmFjdGVkU2NoZW1hRXh0ZW5zaW9ucyxcbiAgICB9KTtcbn1cbmV4cG9ydHMubWVyZ2VTY2hlbWFzID0gbWVyZ2VTY2hlbWFzO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/merge-schemas.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/types.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/cjs/types.js ***!
  \*************************************************************************************/
/***/ (() => {



/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/lru-cache/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/lru-cache/index.js ***!
  \*********************************************************************/
/***/ ((module) => {

eval("const perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst hasAbortController = typeof AbortController === 'function'\n\n// minimal backwards-compatibility polyfill\n// this doesn't have nearly all the checks and whatnot that\n// actual AbortController/Signal has, but it's enough for\n// our purposes, and if used properly, behaves the same.\nconst AC = hasAbortController\n  ? AbortController\n  : class AbortController {\n      constructor() {\n        this.signal = new AS()\n      }\n      abort(reason = new Error('This operation was aborted')) {\n        this.signal.reason = this.signal.reason || reason\n        this.signal.aborted = true\n        this.signal.dispatchEvent({\n          type: 'abort',\n          target: this.signal,\n        })\n      }\n    }\n\nconst hasAbortSignal = typeof AbortSignal === 'function'\n// Some polyfills put this on the AC class, not global\nconst hasACAbortSignal = typeof AC.AbortSignal === 'function'\nconst AS = hasAbortSignal\n  ? AbortSignal\n  : hasACAbortSignal\n  ? AC.AbortController\n  : class AbortSignal {\n      constructor() {\n        this.reason = undefined\n        this.aborted = false\n        this._listeners = []\n      }\n      dispatchEvent(e) {\n        if (e.type === 'abort') {\n          this.aborted = true\n          this.onabort(e)\n          this._listeners.forEach(f => f(e), this)\n        }\n      }\n      onabort() {}\n      addEventListener(ev, fn) {\n        if (ev === 'abort') {\n          this._listeners.push(fn)\n        }\n      }\n      removeEventListener(ev, fn) {\n        if (ev === 'abort') {\n          this._listeners = this._listeners.filter(f => f !== fn)\n        }\n      }\n    }\n\nconst warned = new Set()\nconst deprecatedOption = (opt, instead) => {\n  const code = `LRU_CACHE_OPTION_${opt}`\n  if (shouldWarn(code)) {\n    warn(code, `${opt} option`, `options.${instead}`, LRUCache)\n  }\n}\nconst deprecatedMethod = (method, instead) => {\n  const code = `LRU_CACHE_METHOD_${method}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, method)\n    warn(code, `${method} method`, `cache.${instead}()`, get)\n  }\n}\nconst deprecatedProperty = (field, instead) => {\n  const code = `LRU_CACHE_PROPERTY_${field}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, field)\n    warn(code, `${field} property`, `cache.${instead}`, get)\n  }\n}\n\nconst emitWarning = (...a) => {\n  typeof process === 'object' &&\n  process &&\n  typeof process.emitWarning === 'function'\n    ? process.emitWarning(...a)\n    : console.error(...a)\n}\n\nconst shouldWarn = code => !warned.has(code)\n\nconst warn = (code, what, instead, fn) => {\n  warned.add(code)\n  const msg = `The ${what} is deprecated. Please use ${instead} instead.`\n  emitWarning(msg, 'DeprecationWarning', code, fn)\n}\n\nconst isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n)\n\n/* istanbul ignore next - This is a little bit ridiculous, tbh.\n * The maximum array length is 2^32-1 or thereabouts on most JS impls.\n * And well before that point, you're caching the entire world, I mean,\n * that's ~32GB of just integers for the next/prev links, plus whatever\n * else to hold that many keys and values.  Just filling the memory with\n * zeroes at init time is brutal when you get that big.\n * But why not be complete?\n * Maybe in the future, these limits will have expanded. */\nconst getUintArray = max =>\n  !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n    ? Uint8Array\n    : max <= Math.pow(2, 16)\n    ? Uint16Array\n    : max <= Math.pow(2, 32)\n    ? Uint32Array\n    : max <= Number.MAX_SAFE_INTEGER\n    ? ZeroArray\n    : null\n\nclass ZeroArray extends Array {\n  constructor(size) {\n    super(size)\n    this.fill(0)\n  }\n}\n\nclass Stack {\n  constructor(max) {\n    if (max === 0) {\n      return []\n    }\n    const UintArray = getUintArray(max)\n    this.heap = new UintArray(max)\n    this.length = 0\n  }\n  push(n) {\n    this.heap[this.length++] = n\n  }\n  pop() {\n    return this.heap[--this.length]\n  }\n}\n\nclass LRUCache {\n  constructor(options = {}) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      fetchContext,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n    } = options\n\n    // deprecated options, don't trigger a warning for getting them if\n    // the thing being passed in is another LRUCache we're copying.\n    const { length, maxAge, stale } =\n      options instanceof LRUCache ? {} : options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.max = max\n    this.maxSize = maxSize\n    this.maxEntrySize = maxEntrySize || this.maxSize\n    this.sizeCalculation = sizeCalculation || length\n    if (this.sizeCalculation) {\n      if (!this.maxSize && !this.maxEntrySize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize or maxEntrySize'\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    this.fetchMethod = fetchMethod || null\n    if (this.fetchMethod && typeof this.fetchMethod !== 'function') {\n      throw new TypeError(\n        'fetchMethod must be a function if specified'\n      )\n    }\n\n    this.fetchContext = fetchContext\n    if (!this.fetchMethod && fetchContext !== undefined) {\n      throw new TypeError(\n        'cannot set fetchContext without fetchMethod'\n      )\n    }\n\n    this.keyMap = new Map()\n    this.keyList = new Array(max).fill(null)\n    this.valList = new Array(max).fill(null)\n    this.next = new UintArray(max)\n    this.prev = new UintArray(max)\n    this.head = 0\n    this.tail = 0\n    this.free = new Stack(max)\n    this.initialFill = 1\n    this.size = 0\n\n    if (typeof dispose === 'function') {\n      this.dispose = dispose\n    }\n    if (typeof disposeAfter === 'function') {\n      this.disposeAfter = disposeAfter\n      this.disposed = []\n    } else {\n      this.disposeAfter = null\n      this.disposed = null\n    }\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort\n    this.ignoreFetchAbort = !!ignoreFetchAbort\n\n    // NB: maxEntrySize is set to maxSize if it's set\n    if (this.maxEntrySize !== 0) {\n      if (this.maxSize !== 0) {\n        if (!isPosInt(this.maxSize)) {\n          throw new TypeError(\n            'maxSize must be a positive integer if specified'\n          )\n        }\n      }\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError(\n          'maxEntrySize must be a positive integer if specified'\n        )\n      }\n      this.initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale || !!stale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0\n        ? ttlResolution\n        : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || maxAge || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified'\n        )\n      }\n      this.initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required'\n      )\n    }\n    if (!this.ttlAutopurge && !this.max && !this.maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n\n    if (stale) {\n      deprecatedOption('stale', 'allowStale')\n    }\n    if (maxAge) {\n      deprecatedOption('maxAge', 'ttl')\n    }\n    if (length) {\n      deprecatedOption('length', 'sizeCalculation')\n    }\n  }\n\n  getRemainingTTL(key) {\n    return this.has(key, { updateAgeOnHas: false }) ? Infinity : 0\n  }\n\n  initializeTTLTracking() {\n    this.ttls = new ZeroArray(this.max)\n    this.starts = new ZeroArray(this.max)\n\n    this.setItemTTL = (index, ttl, start = perf.now()) => {\n      this.starts[index] = ttl !== 0 ? start : 0\n      this.ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.isStale(index)) {\n            this.delete(this.keyList[index])\n          }\n        }, ttl + 1)\n        /* istanbul ignore else - unref() not supported on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n    }\n\n    this.updateItemAge = index => {\n      this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    this.statusTTL = (status, index) => {\n      if (status) {\n        status.ttl = this.ttls[index]\n        status.start = this.starts[index]\n        status.now = cachedNow || getNow()\n        status.remainingTTL = status.now + status.ttl - status.start\n      }\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution\n        )\n        /* istanbul ignore else - not available on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      return this.ttls[index] === 0 || this.starts[index] === 0\n        ? Infinity\n        : this.starts[index] +\n            this.ttls[index] -\n            (cachedNow || getNow())\n    }\n\n    this.isStale = index => {\n      return (\n        this.ttls[index] !== 0 &&\n        this.starts[index] !== 0 &&\n        (cachedNow || getNow()) - this.starts[index] >\n          this.ttls[index]\n      )\n    }\n  }\n  updateItemAge(_index) {}\n  statusTTL(_status, _index) {}\n  setItemTTL(_index, _ttl, _start) {}\n  isStale(_index) {\n    return false\n  }\n\n  initializeSizeTracking() {\n    this.calculatedSize = 0\n    this.sizes = new ZeroArray(this.max)\n    this.removeItemSize = index => {\n      this.calculatedSize -= this.sizes[index]\n      this.sizes[index] = 0\n    }\n    this.requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.isBackgroundFetch(v)) {\n        return 0\n      }\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)'\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer). ' +\n              'When maxSize or maxEntrySize is used, sizeCalculation or size ' +\n              'must be set.'\n          )\n        }\n      }\n      return size\n    }\n    this.addItemSize = (index, size, status) => {\n      this.sizes[index] = size\n      if (this.maxSize) {\n        const maxSize = this.maxSize - this.sizes[index]\n        while (this.calculatedSize > maxSize) {\n          this.evict(true)\n        }\n      }\n      this.calculatedSize += this.sizes[index]\n      if (status) {\n        status.entrySize = size\n        status.totalCalculatedSize = this.calculatedSize\n      }\n    }\n  }\n  removeItemSize(_index) {}\n  addItemSize(_index, _size) {}\n  requireSize(_k, _v, size, sizeCalculation) {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize or maxEntrySize on cache'\n      )\n    }\n  }\n\n  *indexes({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.tail; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.head) {\n          break\n        } else {\n          i = this.prev[i]\n        }\n      }\n    }\n  }\n\n  *rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.head; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.tail) {\n          break\n        } else {\n          i = this.next[i]\n        }\n      }\n    }\n  }\n\n  isValidIndex(index) {\n    return (\n      index !== undefined &&\n      this.keyMap.get(this.keyList[index]) === index\n    )\n  }\n\n  *entries() {\n    for (const i of this.indexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield [this.keyList[i], this.valList[i]]\n      }\n    }\n  }\n  *rentries() {\n    for (const i of this.rindexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield [this.keyList[i], this.valList[i]]\n      }\n    }\n  }\n\n  *keys() {\n    for (const i of this.indexes()) {\n      if (\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.keyList[i]\n      }\n    }\n  }\n  *rkeys() {\n    for (const i of this.rindexes()) {\n      if (\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.keyList[i]\n      }\n    }\n  }\n\n  *values() {\n    for (const i of this.indexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.valList[i]\n      }\n    }\n  }\n  *rvalues() {\n    for (const i of this.rindexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.valList[i]\n      }\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  find(fn, getOptions) {\n    for (const i of this.indexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      if (fn(value, this.keyList[i], this)) {\n        return this.get(this.keyList[i], getOptions)\n      }\n    }\n  }\n\n  forEach(fn, thisp = this) {\n    for (const i of this.indexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.keyList[i], this)\n    }\n  }\n\n  rforEach(fn, thisp = this) {\n    for (const i of this.rindexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.keyList[i], this)\n    }\n  }\n\n  get prune() {\n    deprecatedMethod('prune', 'purgeStale')\n    return this.purgeStale\n  }\n\n  purgeStale() {\n    let deleted = false\n    for (const i of this.rindexes({ allowStale: true })) {\n      if (this.isStale(i)) {\n        this.delete(this.keyList[i])\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  dump() {\n    const arr = []\n    for (const i of this.indexes({ allowStale: true })) {\n      const key = this.keyList[i]\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      const entry = { value }\n      if (this.ttls) {\n        entry.ttl = this.ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - this.starts[i]\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.sizes) {\n        entry.size = this.sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  load(arr) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset.\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  dispose(_v, _k, _reason) {}\n\n  set(\n    k,\n    v,\n    {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      status,\n    } = {}\n  ) {\n    size = this.requireSize(k, v, size, sizeCalculation)\n    // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss'\n        status.maxEntrySizeExceeded = true\n      }\n      // have to delete, in case a background fetch is there already.\n      // in non-async cases, this is a no-op\n      this.delete(k)\n      return this\n    }\n    let index = this.size === 0 ? undefined : this.keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = this.newIndex()\n      this.keyList[index] = k\n      this.valList[index] = v\n      this.keyMap.set(k, index)\n      this.next[this.tail] = index\n      this.prev[index] = this.tail\n      this.tail = index\n      this.size++\n      this.addItemSize(index, size, status)\n      if (status) {\n        status.set = 'add'\n      }\n      noUpdateTTL = false\n    } else {\n      // update\n      this.moveToTail(index)\n      const oldVal = this.valList[index]\n      if (v !== oldVal) {\n        if (this.isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'))\n        } else {\n          if (!noDisposeOnSet) {\n            this.dispose(oldVal, k, 'set')\n            if (this.disposeAfter) {\n              this.disposed.push([oldVal, k, 'set'])\n            }\n          }\n        }\n        this.removeItemSize(index)\n        this.valList[index] = v\n        this.addItemSize(index, size, status)\n        if (status) {\n          status.set = 'replace'\n          const oldValue =\n            oldVal && this.isBackgroundFetch(oldVal)\n              ? oldVal.__staleWhileFetching\n              : oldVal\n          if (oldValue !== undefined) status.oldValue = oldValue\n        }\n      } else if (status) {\n        status.set = 'update'\n      }\n    }\n    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {\n      this.initializeTTLTracking()\n    }\n    if (!noUpdateTTL) {\n      this.setItemTTL(index, ttl, start)\n    }\n    this.statusTTL(status, index)\n    if (this.disposeAfter) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return this\n  }\n\n  newIndex() {\n    if (this.size === 0) {\n      return this.tail\n    }\n    if (this.size === this.max && this.max !== 0) {\n      return this.evict(false)\n    }\n    if (this.free.length !== 0) {\n      return this.free.pop()\n    }\n    // initial fill, just keep writing down the list\n    return this.initialFill++\n  }\n\n  pop() {\n    if (this.size) {\n      const val = this.valList[this.head]\n      this.evict(true)\n      return val\n    }\n  }\n\n  evict(free) {\n    const head = this.head\n    const k = this.keyList[head]\n    const v = this.valList[head]\n    if (this.isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'))\n    } else {\n      this.dispose(v, k, 'evict')\n      if (this.disposeAfter) {\n        this.disposed.push([v, k, 'evict'])\n      }\n    }\n    this.removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.keyList[head] = null\n      this.valList[head] = null\n      this.free.push(head)\n    }\n    this.head = this.next[head]\n    this.keyMap.delete(k)\n    this.size--\n    return head\n  }\n\n  has(k, { updateAgeOnHas = this.updateAgeOnHas, status } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined) {\n      if (!this.isStale(index)) {\n        if (updateAgeOnHas) {\n          this.updateItemAge(index)\n        }\n        if (status) status.has = 'hit'\n        this.statusTTL(status, index)\n        return true\n      } else if (status) {\n        status.has = 'stale'\n        this.statusTTL(status, index)\n      }\n    } else if (status) {\n      status.has = 'miss'\n    }\n    return false\n  }\n\n  // like get(), but without any LRU updating or TTL expiration\n  peek(k, { allowStale = this.allowStale } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined && (allowStale || !this.isStale(index))) {\n      const v = this.valList[index]\n      // either stale and allowed, or forcing a refresh of non-stale value\n      return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v\n    }\n  }\n\n  backgroundFetch(k, index, options, context) {\n    const v = index === undefined ? undefined : this.valList[index]\n    if (this.isBackgroundFetch(v)) {\n      return v\n    }\n    const ac = new AC()\n    if (options.signal) {\n      options.signal.addEventListener('abort', () =>\n        ac.abort(options.signal.reason)\n      )\n    }\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n    const cb = (v, updateCache = false) => {\n      const { aborted } = ac.signal\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true\n          options.status.fetchError = ac.signal.reason\n          if (ignoreAbort) options.status.fetchAbortIgnored = true\n        } else {\n          options.status.fetchResolved = true\n        }\n      }\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason)\n      }\n      // either we didn't abort, and are still here, or we did, and ignored\n      if (this.valList[index] === p) {\n        if (v === undefined) {\n          if (p.__staleWhileFetching) {\n            this.valList[index] = p.__staleWhileFetching\n          } else {\n            this.delete(k)\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true\n          this.set(k, v, fetchOpts.options)\n        }\n      }\n      return v\n    }\n    const eb = er => {\n      if (options.status) {\n        options.status.fetchRejected = true\n        options.status.fetchError = er\n      }\n      return fetchFail(er)\n    }\n    const fetchFail = er => {\n      const { aborted } = ac.signal\n      const allowStaleAborted =\n        aborted && options.allowStaleOnFetchAbort\n      const allowStale =\n        allowStaleAborted || options.allowStaleOnFetchRejection\n      const noDelete = allowStale || options.noDeleteOnFetchRejection\n      if (this.valList[index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || p.__staleWhileFetching === undefined\n        if (del) {\n          this.delete(k)\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.valList[index] = p.__staleWhileFetching\n        }\n      }\n      if (allowStale) {\n        if (options.status && p.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true\n        }\n        return p.__staleWhileFetching\n      } else if (p.__returned === p) {\n        throw er\n      }\n    }\n    const pcall = (res, rej) => {\n      this.fetchMethod(k, v, fetchOpts).then(v => res(v), rej)\n      // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n      ac.signal.addEventListener('abort', () => {\n        if (\n          !options.ignoreFetchAbort ||\n          options.allowStaleOnFetchAbort\n        ) {\n          res()\n          // when it eventually resolves, update the cache.\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true)\n          }\n        }\n      })\n    }\n    if (options.status) options.status.fetchDispatched = true\n    const p = new Promise(pcall).then(cb, eb)\n    p.__abortController = ac\n    p.__staleWhileFetching = v\n    p.__returned = null\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, p, { ...fetchOpts.options, status: undefined })\n      index = this.keyMap.get(k)\n    } else {\n      this.valList[index] = p\n    }\n    return p\n  }\n\n  isBackgroundFetch(p) {\n    return (\n      p &&\n      typeof p === 'object' &&\n      typeof p.then === 'function' &&\n      Object.prototype.hasOwnProperty.call(\n        p,\n        '__staleWhileFetching'\n      ) &&\n      Object.prototype.hasOwnProperty.call(p, '__returned') &&\n      (p.__returned === p || p.__returned === null)\n    )\n  }\n\n  // this takes the union of get() and set() opts, because it does both\n  async fetch(\n    k,\n    {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      fetchContext = this.fetchContext,\n      forceRefresh = false,\n      status,\n      signal,\n    } = {}\n  ) {\n    if (!this.fetchMethod) {\n      if (status) status.fetch = 'get'\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal,\n    }\n\n    let index = this.keyMap.get(k)\n    if (index === undefined) {\n      if (status) status.fetch = 'miss'\n      const p = this.backgroundFetch(k, index, options, fetchContext)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        const stale =\n          allowStale && v.__staleWhileFetching !== undefined\n        if (status) {\n          status.fetch = 'inflight'\n          if (stale) status.returnedStale = true\n        }\n        return stale ? v.__staleWhileFetching : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      const isStale = this.isStale(index)\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit'\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        this.statusTTL(status, index)\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.backgroundFetch(k, index, options, fetchContext)\n      const hasStale = p.__staleWhileFetching !== undefined\n      const staleVal = hasStale && allowStale\n      if (status) {\n        status.fetch = hasStale && isStale ? 'stale' : 'refresh'\n        if (staleVal && isStale) status.returnedStale = true\n      }\n      return staleVal ? p.__staleWhileFetching : (p.__returned = p)\n    }\n  }\n\n  get(\n    k,\n    {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status,\n    } = {}\n  ) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.valList[index]\n      const fetching = this.isBackgroundFetch(value)\n      this.statusTTL(status, index)\n      if (this.isStale(index)) {\n        if (status) status.get = 'stale'\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.delete(k)\n          }\n          if (status) status.returnedStale = allowStale\n          return allowStale ? value : undefined\n        } else {\n          if (status) {\n            status.returnedStale =\n              allowStale && value.__staleWhileFetching !== undefined\n          }\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        if (status) status.get = 'hit'\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n        if (fetching) {\n          return value.__staleWhileFetching\n        }\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        return value\n      }\n    } else if (status) {\n      status.get = 'miss'\n    }\n  }\n\n  connect(p, n) {\n    this.prev[n] = p\n    this.next[p] = n\n  }\n\n  moveToTail(index) {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.tail) {\n      if (index === this.head) {\n        this.head = this.next[index]\n      } else {\n        this.connect(this.prev[index], this.next[index])\n      }\n      this.connect(this.tail, index)\n      this.tail = index\n    }\n  }\n\n  get del() {\n    deprecatedMethod('del', 'delete')\n    return this.delete\n  }\n\n  delete(k) {\n    let deleted = false\n    if (this.size !== 0) {\n      const index = this.keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.size === 1) {\n          this.clear()\n        } else {\n          this.removeItemSize(index)\n          const v = this.valList[index]\n          if (this.isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'))\n          } else {\n            this.dispose(v, k, 'delete')\n            if (this.disposeAfter) {\n              this.disposed.push([v, k, 'delete'])\n            }\n          }\n          this.keyMap.delete(k)\n          this.keyList[index] = null\n          this.valList[index] = null\n          if (index === this.tail) {\n            this.tail = this.prev[index]\n          } else if (index === this.head) {\n            this.head = this.next[index]\n          } else {\n            this.next[this.prev[index]] = this.next[index]\n            this.prev[this.next[index]] = this.prev[index]\n          }\n          this.size--\n          this.free.push(index)\n        }\n      }\n    }\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return deleted\n  }\n\n  clear() {\n    for (const index of this.rindexes({ allowStale: true })) {\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'))\n      } else {\n        const k = this.keyList[index]\n        this.dispose(v, k, 'delete')\n        if (this.disposeAfter) {\n          this.disposed.push([v, k, 'delete'])\n        }\n      }\n    }\n\n    this.keyMap.clear()\n    this.valList.fill(null)\n    this.keyList.fill(null)\n    if (this.ttls) {\n      this.ttls.fill(0)\n      this.starts.fill(0)\n    }\n    if (this.sizes) {\n      this.sizes.fill(0)\n    }\n    this.head = 0\n    this.tail = 0\n    this.initialFill = 1\n    this.free.length = 0\n    this.calculatedSize = 0\n    this.size = 0\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n  }\n\n  get reset() {\n    deprecatedMethod('reset', 'clear')\n    return this.clear\n  }\n\n  get length() {\n    deprecatedProperty('length', 'size')\n    return this.size\n  }\n\n  static get AbortController() {\n    return AC\n  }\n  static get AbortSignal() {\n    return AS\n  }\n}\n\nmodule.exports = LRUCache\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL2xydS1jYWNoZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQ0FBbUMsSUFBSTtBQUN2QztBQUNBLGtCQUFrQixLQUFLLG9CQUFvQixRQUFRO0FBQ25EO0FBQ0E7QUFDQTtBQUNBLG1DQUFtQyxPQUFPO0FBQzFDO0FBQ0EsWUFBWSxZQUFZO0FBQ3hCLFlBQVksTUFBTTtBQUNsQixrQkFBa0IsUUFBUSxrQkFBa0IsUUFBUTtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsTUFBTTtBQUMzQztBQUNBLFlBQVksWUFBWTtBQUN4QixZQUFZLE1BQU07QUFDbEIsa0JBQWtCLE9BQU8sb0JBQW9CLFFBQVE7QUFDckQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EscUJBQXFCLE1BQU0sNEJBQTRCLFNBQVM7QUFDaEU7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQjtBQUMxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07O0FBRU47QUFDQTtBQUNBLFlBQVksd0JBQXdCO0FBQ3BDLHVDQUF1Qzs7QUFFdkM7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQix1QkFBdUI7QUFDbEQ7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLGFBQWEsK0JBQStCLElBQUk7QUFDaEQ7QUFDQSw4QkFBOEIsTUFBTTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsY0FBYywrQkFBK0IsSUFBSTtBQUNqRDtBQUNBLDhCQUE4QixNQUFNO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9DQUFvQyxrQkFBa0I7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQyxrQkFBa0I7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCO0FBQ3RCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7QUFDUjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFdBQVcsK0NBQStDLElBQUk7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFlBQVksK0JBQStCLElBQUk7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGNBQWMsVUFBVTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVk7QUFDWjtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjLFVBQVU7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix5Q0FBeUM7QUFDaEU7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVU7QUFDVjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5REFBeUQsa0JBQWtCO0FBQzNFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0NBQXdDLGtCQUFrQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL2xydS1jYWNoZS9pbmRleC5qcz80Y2NhIl0sInNvdXJjZXNDb250ZW50IjpbImNvbnN0IHBlcmYgPVxuICB0eXBlb2YgcGVyZm9ybWFuY2UgPT09ICdvYmplY3QnICYmXG4gIHBlcmZvcm1hbmNlICYmXG4gIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbidcbiAgICA/IHBlcmZvcm1hbmNlXG4gICAgOiBEYXRlXG5cbmNvbnN0IGhhc0Fib3J0Q29udHJvbGxlciA9IHR5cGVvZiBBYm9ydENvbnRyb2xsZXIgPT09ICdmdW5jdGlvbidcblxuLy8gbWluaW1hbCBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eSBwb2x5ZmlsbFxuLy8gdGhpcyBkb2Vzbid0IGhhdmUgbmVhcmx5IGFsbCB0aGUgY2hlY2tzIGFuZCB3aGF0bm90IHRoYXRcbi8vIGFjdHVhbCBBYm9ydENvbnRyb2xsZXIvU2lnbmFsIGhhcywgYnV0IGl0J3MgZW5vdWdoIGZvclxuLy8gb3VyIHB1cnBvc2VzLCBhbmQgaWYgdXNlZCBwcm9wZXJseSwgYmVoYXZlcyB0aGUgc2FtZS5cbmNvbnN0IEFDID0gaGFzQWJvcnRDb250cm9sbGVyXG4gID8gQWJvcnRDb250cm9sbGVyXG4gIDogY2xhc3MgQWJvcnRDb250cm9sbGVyIHtcbiAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICB0aGlzLnNpZ25hbCA9IG5ldyBBUygpXG4gICAgICB9XG4gICAgICBhYm9ydChyZWFzb24gPSBuZXcgRXJyb3IoJ1RoaXMgb3BlcmF0aW9uIHdhcyBhYm9ydGVkJykpIHtcbiAgICAgICAgdGhpcy5zaWduYWwucmVhc29uID0gdGhpcy5zaWduYWwucmVhc29uIHx8IHJlYXNvblxuICAgICAgICB0aGlzLnNpZ25hbC5hYm9ydGVkID0gdHJ1ZVxuICAgICAgICB0aGlzLnNpZ25hbC5kaXNwYXRjaEV2ZW50KHtcbiAgICAgICAgICB0eXBlOiAnYWJvcnQnLFxuICAgICAgICAgIHRhcmdldDogdGhpcy5zaWduYWwsXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfVxuXG5jb25zdCBoYXNBYm9ydFNpZ25hbCA9IHR5cGVvZiBBYm9ydFNpZ25hbCA9PT0gJ2Z1bmN0aW9uJ1xuLy8gU29tZSBwb2x5ZmlsbHMgcHV0IHRoaXMgb24gdGhlIEFDIGNsYXNzLCBub3QgZ2xvYmFsXG5jb25zdCBoYXNBQ0Fib3J0U2lnbmFsID0gdHlwZW9mIEFDLkFib3J0U2lnbmFsID09PSAnZnVuY3Rpb24nXG5jb25zdCBBUyA9IGhhc0Fib3J0U2lnbmFsXG4gID8gQWJvcnRTaWduYWxcbiAgOiBoYXNBQ0Fib3J0U2lnbmFsXG4gID8gQUMuQWJvcnRDb250cm9sbGVyXG4gIDogY2xhc3MgQWJvcnRTaWduYWwge1xuICAgICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucmVhc29uID0gdW5kZWZpbmVkXG4gICAgICAgIHRoaXMuYWJvcnRlZCA9IGZhbHNlXG4gICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IFtdXG4gICAgICB9XG4gICAgICBkaXNwYXRjaEV2ZW50KGUpIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gJ2Fib3J0Jykge1xuICAgICAgICAgIHRoaXMuYWJvcnRlZCA9IHRydWVcbiAgICAgICAgICB0aGlzLm9uYWJvcnQoZSlcbiAgICAgICAgICB0aGlzLl9saXN0ZW5lcnMuZm9yRWFjaChmID0+IGYoZSksIHRoaXMpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9uYWJvcnQoKSB7fVxuICAgICAgYWRkRXZlbnRMaXN0ZW5lcihldiwgZm4pIHtcbiAgICAgICAgaWYgKGV2ID09PSAnYWJvcnQnKSB7XG4gICAgICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2goZm4pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXIoZXYsIGZuKSB7XG4gICAgICAgIGlmIChldiA9PT0gJ2Fib3J0Jykge1xuICAgICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVycy5maWx0ZXIoZiA9PiBmICE9PSBmbilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuY29uc3Qgd2FybmVkID0gbmV3IFNldCgpXG5jb25zdCBkZXByZWNhdGVkT3B0aW9uID0gKG9wdCwgaW5zdGVhZCkgPT4ge1xuICBjb25zdCBjb2RlID0gYExSVV9DQUNIRV9PUFRJT05fJHtvcHR9YFxuICBpZiAoc2hvdWxkV2Fybihjb2RlKSkge1xuICAgIHdhcm4oY29kZSwgYCR7b3B0fSBvcHRpb25gLCBgb3B0aW9ucy4ke2luc3RlYWR9YCwgTFJVQ2FjaGUpXG4gIH1cbn1cbmNvbnN0IGRlcHJlY2F0ZWRNZXRob2QgPSAobWV0aG9kLCBpbnN0ZWFkKSA9PiB7XG4gIGNvbnN0IGNvZGUgPSBgTFJVX0NBQ0hFX01FVEhPRF8ke21ldGhvZH1gXG4gIGlmIChzaG91bGRXYXJuKGNvZGUpKSB7XG4gICAgY29uc3QgeyBwcm90b3R5cGUgfSA9IExSVUNhY2hlXG4gICAgY29uc3QgeyBnZXQgfSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocHJvdG90eXBlLCBtZXRob2QpXG4gICAgd2Fybihjb2RlLCBgJHttZXRob2R9IG1ldGhvZGAsIGBjYWNoZS4ke2luc3RlYWR9KClgLCBnZXQpXG4gIH1cbn1cbmNvbnN0IGRlcHJlY2F0ZWRQcm9wZXJ0eSA9IChmaWVsZCwgaW5zdGVhZCkgPT4ge1xuICBjb25zdCBjb2RlID0gYExSVV9DQUNIRV9QUk9QRVJUWV8ke2ZpZWxkfWBcbiAgaWYgKHNob3VsZFdhcm4oY29kZSkpIHtcbiAgICBjb25zdCB7IHByb3RvdHlwZSB9ID0gTFJVQ2FjaGVcbiAgICBjb25zdCB7IGdldCB9ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihwcm90b3R5cGUsIGZpZWxkKVxuICAgIHdhcm4oY29kZSwgYCR7ZmllbGR9IHByb3BlcnR5YCwgYGNhY2hlLiR7aW5zdGVhZH1gLCBnZXQpXG4gIH1cbn1cblxuY29uc3QgZW1pdFdhcm5pbmcgPSAoLi4uYSkgPT4ge1xuICB0eXBlb2YgcHJvY2VzcyA9PT0gJ29iamVjdCcgJiZcbiAgcHJvY2VzcyAmJlxuICB0eXBlb2YgcHJvY2Vzcy5lbWl0V2FybmluZyA9PT0gJ2Z1bmN0aW9uJ1xuICAgID8gcHJvY2Vzcy5lbWl0V2FybmluZyguLi5hKVxuICAgIDogY29uc29sZS5lcnJvciguLi5hKVxufVxuXG5jb25zdCBzaG91bGRXYXJuID0gY29kZSA9PiAhd2FybmVkLmhhcyhjb2RlKVxuXG5jb25zdCB3YXJuID0gKGNvZGUsIHdoYXQsIGluc3RlYWQsIGZuKSA9PiB7XG4gIHdhcm5lZC5hZGQoY29kZSlcbiAgY29uc3QgbXNnID0gYFRoZSAke3doYXR9IGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgJHtpbnN0ZWFkfSBpbnN0ZWFkLmBcbiAgZW1pdFdhcm5pbmcobXNnLCAnRGVwcmVjYXRpb25XYXJuaW5nJywgY29kZSwgZm4pXG59XG5cbmNvbnN0IGlzUG9zSW50ID0gbiA9PiBuICYmIG4gPT09IE1hdGguZmxvb3IobikgJiYgbiA+IDAgJiYgaXNGaW5pdGUobilcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgLSBUaGlzIGlzIGEgbGl0dGxlIGJpdCByaWRpY3Vsb3VzLCB0YmguXG4gKiBUaGUgbWF4aW11bSBhcnJheSBsZW5ndGggaXMgMl4zMi0xIG9yIHRoZXJlYWJvdXRzIG9uIG1vc3QgSlMgaW1wbHMuXG4gKiBBbmQgd2VsbCBiZWZvcmUgdGhhdCBwb2ludCwgeW91J3JlIGNhY2hpbmcgdGhlIGVudGlyZSB3b3JsZCwgSSBtZWFuLFxuICogdGhhdCdzIH4zMkdCIG9mIGp1c3QgaW50ZWdlcnMgZm9yIHRoZSBuZXh0L3ByZXYgbGlua3MsIHBsdXMgd2hhdGV2ZXJcbiAqIGVsc2UgdG8gaG9sZCB0aGF0IG1hbnkga2V5cyBhbmQgdmFsdWVzLiAgSnVzdCBmaWxsaW5nIHRoZSBtZW1vcnkgd2l0aFxuICogemVyb2VzIGF0IGluaXQgdGltZSBpcyBicnV0YWwgd2hlbiB5b3UgZ2V0IHRoYXQgYmlnLlxuICogQnV0IHdoeSBub3QgYmUgY29tcGxldGU/XG4gKiBNYXliZSBpbiB0aGUgZnV0dXJlLCB0aGVzZSBsaW1pdHMgd2lsbCBoYXZlIGV4cGFuZGVkLiAqL1xuY29uc3QgZ2V0VWludEFycmF5ID0gbWF4ID0+XG4gICFpc1Bvc0ludChtYXgpXG4gICAgPyBudWxsXG4gICAgOiBtYXggPD0gTWF0aC5wb3coMiwgOClcbiAgICA/IFVpbnQ4QXJyYXlcbiAgICA6IG1heCA8PSBNYXRoLnBvdygyLCAxNilcbiAgICA/IFVpbnQxNkFycmF5XG4gICAgOiBtYXggPD0gTWF0aC5wb3coMiwgMzIpXG4gICAgPyBVaW50MzJBcnJheVxuICAgIDogbWF4IDw9IE51bWJlci5NQVhfU0FGRV9JTlRFR0VSXG4gICAgPyBaZXJvQXJyYXlcbiAgICA6IG51bGxcblxuY2xhc3MgWmVyb0FycmF5IGV4dGVuZHMgQXJyYXkge1xuICBjb25zdHJ1Y3RvcihzaXplKSB7XG4gICAgc3VwZXIoc2l6ZSlcbiAgICB0aGlzLmZpbGwoMClcbiAgfVxufVxuXG5jbGFzcyBTdGFjayB7XG4gIGNvbnN0cnVjdG9yKG1heCkge1xuICAgIGlmIChtYXggPT09IDApIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgICBjb25zdCBVaW50QXJyYXkgPSBnZXRVaW50QXJyYXkobWF4KVxuICAgIHRoaXMuaGVhcCA9IG5ldyBVaW50QXJyYXkobWF4KVxuICAgIHRoaXMubGVuZ3RoID0gMFxuICB9XG4gIHB1c2gobikge1xuICAgIHRoaXMuaGVhcFt0aGlzLmxlbmd0aCsrXSA9IG5cbiAgfVxuICBwb3AoKSB7XG4gICAgcmV0dXJuIHRoaXMuaGVhcFstLXRoaXMubGVuZ3RoXVxuICB9XG59XG5cbmNsYXNzIExSVUNhY2hlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qge1xuICAgICAgbWF4ID0gMCxcbiAgICAgIHR0bCxcbiAgICAgIHR0bFJlc29sdXRpb24gPSAxLFxuICAgICAgdHRsQXV0b3B1cmdlLFxuICAgICAgdXBkYXRlQWdlT25HZXQsXG4gICAgICB1cGRhdGVBZ2VPbkhhcyxcbiAgICAgIGFsbG93U3RhbGUsXG4gICAgICBkaXNwb3NlLFxuICAgICAgZGlzcG9zZUFmdGVyLFxuICAgICAgbm9EaXNwb3NlT25TZXQsXG4gICAgICBub1VwZGF0ZVRUTCxcbiAgICAgIG1heFNpemUgPSAwLFxuICAgICAgbWF4RW50cnlTaXplID0gMCxcbiAgICAgIHNpemVDYWxjdWxhdGlvbixcbiAgICAgIGZldGNoTWV0aG9kLFxuICAgICAgZmV0Y2hDb250ZXh0LFxuICAgICAgbm9EZWxldGVPbkZldGNoUmVqZWN0aW9uLFxuICAgICAgbm9EZWxldGVPblN0YWxlR2V0LFxuICAgICAgYWxsb3dTdGFsZU9uRmV0Y2hSZWplY3Rpb24sXG4gICAgICBhbGxvd1N0YWxlT25GZXRjaEFib3J0LFxuICAgICAgaWdub3JlRmV0Y2hBYm9ydCxcbiAgICB9ID0gb3B0aW9uc1xuXG4gICAgLy8gZGVwcmVjYXRlZCBvcHRpb25zLCBkb24ndCB0cmlnZ2VyIGEgd2FybmluZyBmb3IgZ2V0dGluZyB0aGVtIGlmXG4gICAgLy8gdGhlIHRoaW5nIGJlaW5nIHBhc3NlZCBpbiBpcyBhbm90aGVyIExSVUNhY2hlIHdlJ3JlIGNvcHlpbmcuXG4gICAgY29uc3QgeyBsZW5ndGgsIG1heEFnZSwgc3RhbGUgfSA9XG4gICAgICBvcHRpb25zIGluc3RhbmNlb2YgTFJVQ2FjaGUgPyB7fSA6IG9wdGlvbnNcblxuICAgIGlmIChtYXggIT09IDAgJiYgIWlzUG9zSW50KG1heCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21heCBvcHRpb24gbXVzdCBiZSBhIG5vbm5lZ2F0aXZlIGludGVnZXInKVxuICAgIH1cblxuICAgIGNvbnN0IFVpbnRBcnJheSA9IG1heCA/IGdldFVpbnRBcnJheShtYXgpIDogQXJyYXlcbiAgICBpZiAoIVVpbnRBcnJheSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIG1heCB2YWx1ZTogJyArIG1heClcbiAgICB9XG5cbiAgICB0aGlzLm1heCA9IG1heFxuICAgIHRoaXMubWF4U2l6ZSA9IG1heFNpemVcbiAgICB0aGlzLm1heEVudHJ5U2l6ZSA9IG1heEVudHJ5U2l6ZSB8fCB0aGlzLm1heFNpemVcbiAgICB0aGlzLnNpemVDYWxjdWxhdGlvbiA9IHNpemVDYWxjdWxhdGlvbiB8fCBsZW5ndGhcbiAgICBpZiAodGhpcy5zaXplQ2FsY3VsYXRpb24pIHtcbiAgICAgIGlmICghdGhpcy5tYXhTaXplICYmICF0aGlzLm1heEVudHJ5U2l6ZSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdjYW5ub3Qgc2V0IHNpemVDYWxjdWxhdGlvbiB3aXRob3V0IHNldHRpbmcgbWF4U2l6ZSBvciBtYXhFbnRyeVNpemUnXG4gICAgICAgIClcbiAgICAgIH1cbiAgICAgIGlmICh0eXBlb2YgdGhpcy5zaXplQ2FsY3VsYXRpb24gIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2l6ZUNhbGN1bGF0aW9uIHNldCB0byBub24tZnVuY3Rpb24nKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuZmV0Y2hNZXRob2QgPSBmZXRjaE1ldGhvZCB8fCBudWxsXG4gICAgaWYgKHRoaXMuZmV0Y2hNZXRob2QgJiYgdHlwZW9mIHRoaXMuZmV0Y2hNZXRob2QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdmZXRjaE1ldGhvZCBtdXN0IGJlIGEgZnVuY3Rpb24gaWYgc3BlY2lmaWVkJ1xuICAgICAgKVxuICAgIH1cblxuICAgIHRoaXMuZmV0Y2hDb250ZXh0ID0gZmV0Y2hDb250ZXh0XG4gICAgaWYgKCF0aGlzLmZldGNoTWV0aG9kICYmIGZldGNoQ29udGV4dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnY2Fubm90IHNldCBmZXRjaENvbnRleHQgd2l0aG91dCBmZXRjaE1ldGhvZCdcbiAgICAgIClcbiAgICB9XG5cbiAgICB0aGlzLmtleU1hcCA9IG5ldyBNYXAoKVxuICAgIHRoaXMua2V5TGlzdCA9IG5ldyBBcnJheShtYXgpLmZpbGwobnVsbClcbiAgICB0aGlzLnZhbExpc3QgPSBuZXcgQXJyYXkobWF4KS5maWxsKG51bGwpXG4gICAgdGhpcy5uZXh0ID0gbmV3IFVpbnRBcnJheShtYXgpXG4gICAgdGhpcy5wcmV2ID0gbmV3IFVpbnRBcnJheShtYXgpXG4gICAgdGhpcy5oZWFkID0gMFxuICAgIHRoaXMudGFpbCA9IDBcbiAgICB0aGlzLmZyZWUgPSBuZXcgU3RhY2sobWF4KVxuICAgIHRoaXMuaW5pdGlhbEZpbGwgPSAxXG4gICAgdGhpcy5zaXplID0gMFxuXG4gICAgaWYgKHR5cGVvZiBkaXNwb3NlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmRpc3Bvc2UgPSBkaXNwb3NlXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZGlzcG9zZUFmdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLmRpc3Bvc2VBZnRlciA9IGRpc3Bvc2VBZnRlclxuICAgICAgdGhpcy5kaXNwb3NlZCA9IFtdXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGlzcG9zZUFmdGVyID0gbnVsbFxuICAgICAgdGhpcy5kaXNwb3NlZCA9IG51bGxcbiAgICB9XG4gICAgdGhpcy5ub0Rpc3Bvc2VPblNldCA9ICEhbm9EaXNwb3NlT25TZXRcbiAgICB0aGlzLm5vVXBkYXRlVFRMID0gISFub1VwZGF0ZVRUTFxuICAgIHRoaXMubm9EZWxldGVPbkZldGNoUmVqZWN0aW9uID0gISFub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb25cbiAgICB0aGlzLmFsbG93U3RhbGVPbkZldGNoUmVqZWN0aW9uID0gISFhbGxvd1N0YWxlT25GZXRjaFJlamVjdGlvblxuICAgIHRoaXMuYWxsb3dTdGFsZU9uRmV0Y2hBYm9ydCA9ICEhYWxsb3dTdGFsZU9uRmV0Y2hBYm9ydFxuICAgIHRoaXMuaWdub3JlRmV0Y2hBYm9ydCA9ICEhaWdub3JlRmV0Y2hBYm9ydFxuXG4gICAgLy8gTkI6IG1heEVudHJ5U2l6ZSBpcyBzZXQgdG8gbWF4U2l6ZSBpZiBpdCdzIHNldFxuICAgIGlmICh0aGlzLm1heEVudHJ5U2l6ZSAhPT0gMCkge1xuICAgICAgaWYgKHRoaXMubWF4U2l6ZSAhPT0gMCkge1xuICAgICAgICBpZiAoIWlzUG9zSW50KHRoaXMubWF4U2l6ZSkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICAgJ21heFNpemUgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIgaWYgc3BlY2lmaWVkJ1xuICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKCFpc1Bvc0ludCh0aGlzLm1heEVudHJ5U2l6ZSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAnbWF4RW50cnlTaXplIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIGlmIHNwZWNpZmllZCdcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgdGhpcy5pbml0aWFsaXplU2l6ZVRyYWNraW5nKClcbiAgICB9XG5cbiAgICB0aGlzLmFsbG93U3RhbGUgPSAhIWFsbG93U3RhbGUgfHwgISFzdGFsZVxuICAgIHRoaXMubm9EZWxldGVPblN0YWxlR2V0ID0gISFub0RlbGV0ZU9uU3RhbGVHZXRcbiAgICB0aGlzLnVwZGF0ZUFnZU9uR2V0ID0gISF1cGRhdGVBZ2VPbkdldFxuICAgIHRoaXMudXBkYXRlQWdlT25IYXMgPSAhIXVwZGF0ZUFnZU9uSGFzXG4gICAgdGhpcy50dGxSZXNvbHV0aW9uID1cbiAgICAgIGlzUG9zSW50KHR0bFJlc29sdXRpb24pIHx8IHR0bFJlc29sdXRpb24gPT09IDBcbiAgICAgICAgPyB0dGxSZXNvbHV0aW9uXG4gICAgICAgIDogMVxuICAgIHRoaXMudHRsQXV0b3B1cmdlID0gISF0dGxBdXRvcHVyZ2VcbiAgICB0aGlzLnR0bCA9IHR0bCB8fCBtYXhBZ2UgfHwgMFxuICAgIGlmICh0aGlzLnR0bCkge1xuICAgICAgaWYgKCFpc1Bvc0ludCh0aGlzLnR0bCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAndHRsIG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIGlmIHNwZWNpZmllZCdcbiAgICAgICAgKVxuICAgICAgfVxuICAgICAgdGhpcy5pbml0aWFsaXplVFRMVHJhY2tpbmcoKVxuICAgIH1cblxuICAgIC8vIGRvIG5vdCBhbGxvdyBjb21wbGV0ZWx5IHVuYm91bmRlZCBjYWNoZXNcbiAgICBpZiAodGhpcy5tYXggPT09IDAgJiYgdGhpcy50dGwgPT09IDAgJiYgdGhpcy5tYXhTaXplID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnQXQgbGVhc3Qgb25lIG9mIG1heCwgbWF4U2l6ZSwgb3IgdHRsIGlzIHJlcXVpcmVkJ1xuICAgICAgKVxuICAgIH1cbiAgICBpZiAoIXRoaXMudHRsQXV0b3B1cmdlICYmICF0aGlzLm1heCAmJiAhdGhpcy5tYXhTaXplKSB7XG4gICAgICBjb25zdCBjb2RlID0gJ0xSVV9DQUNIRV9VTkJPVU5ERUQnXG4gICAgICBpZiAoc2hvdWxkV2Fybihjb2RlKSkge1xuICAgICAgICB3YXJuZWQuYWRkKGNvZGUpXG4gICAgICAgIGNvbnN0IG1zZyA9XG4gICAgICAgICAgJ1RUTCBjYWNoaW5nIHdpdGhvdXQgdHRsQXV0b3B1cmdlLCBtYXgsIG9yIG1heFNpemUgY2FuICcgK1xuICAgICAgICAgICdyZXN1bHQgaW4gdW5ib3VuZGVkIG1lbW9yeSBjb25zdW1wdGlvbi4nXG4gICAgICAgIGVtaXRXYXJuaW5nKG1zZywgJ1VuYm91bmRlZENhY2hlV2FybmluZycsIGNvZGUsIExSVUNhY2hlKVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChzdGFsZSkge1xuICAgICAgZGVwcmVjYXRlZE9wdGlvbignc3RhbGUnLCAnYWxsb3dTdGFsZScpXG4gICAgfVxuICAgIGlmIChtYXhBZ2UpIHtcbiAgICAgIGRlcHJlY2F0ZWRPcHRpb24oJ21heEFnZScsICd0dGwnKVxuICAgIH1cbiAgICBpZiAobGVuZ3RoKSB7XG4gICAgICBkZXByZWNhdGVkT3B0aW9uKCdsZW5ndGgnLCAnc2l6ZUNhbGN1bGF0aW9uJylcbiAgICB9XG4gIH1cblxuICBnZXRSZW1haW5pbmdUVEwoa2V5KSB7XG4gICAgcmV0dXJuIHRoaXMuaGFzKGtleSwgeyB1cGRhdGVBZ2VPbkhhczogZmFsc2UgfSkgPyBJbmZpbml0eSA6IDBcbiAgfVxuXG4gIGluaXRpYWxpemVUVExUcmFja2luZygpIHtcbiAgICB0aGlzLnR0bHMgPSBuZXcgWmVyb0FycmF5KHRoaXMubWF4KVxuICAgIHRoaXMuc3RhcnRzID0gbmV3IFplcm9BcnJheSh0aGlzLm1heClcblxuICAgIHRoaXMuc2V0SXRlbVRUTCA9IChpbmRleCwgdHRsLCBzdGFydCA9IHBlcmYubm93KCkpID0+IHtcbiAgICAgIHRoaXMuc3RhcnRzW2luZGV4XSA9IHR0bCAhPT0gMCA/IHN0YXJ0IDogMFxuICAgICAgdGhpcy50dGxzW2luZGV4XSA9IHR0bFxuICAgICAgaWYgKHR0bCAhPT0gMCAmJiB0aGlzLnR0bEF1dG9wdXJnZSkge1xuICAgICAgICBjb25zdCB0ID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuaXNTdGFsZShpbmRleCkpIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlKHRoaXMua2V5TGlzdFtpbmRleF0pXG4gICAgICAgICAgfVxuICAgICAgICB9LCB0dGwgKyAxKVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAtIHVucmVmKCkgbm90IHN1cHBvcnRlZCBvbiBhbGwgcGxhdGZvcm1zICovXG4gICAgICAgIGlmICh0LnVucmVmKSB7XG4gICAgICAgICAgdC51bnJlZigpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLnVwZGF0ZUl0ZW1BZ2UgPSBpbmRleCA9PiB7XG4gICAgICB0aGlzLnN0YXJ0c1tpbmRleF0gPSB0aGlzLnR0bHNbaW5kZXhdICE9PSAwID8gcGVyZi5ub3coKSA6IDBcbiAgICB9XG5cbiAgICB0aGlzLnN0YXR1c1RUTCA9IChzdGF0dXMsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoc3RhdHVzKSB7XG4gICAgICAgIHN0YXR1cy50dGwgPSB0aGlzLnR0bHNbaW5kZXhdXG4gICAgICAgIHN0YXR1cy5zdGFydCA9IHRoaXMuc3RhcnRzW2luZGV4XVxuICAgICAgICBzdGF0dXMubm93ID0gY2FjaGVkTm93IHx8IGdldE5vdygpXG4gICAgICAgIHN0YXR1cy5yZW1haW5pbmdUVEwgPSBzdGF0dXMubm93ICsgc3RhdHVzLnR0bCAtIHN0YXR1cy5zdGFydFxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRlYm91bmNlIGNhbGxzIHRvIHBlcmYubm93KCkgdG8gMXMgc28gd2UncmUgbm90IGhpdHRpbmdcbiAgICAvLyB0aGF0IGNvc3RseSBjYWxsIHJlcGVhdGVkbHkuXG4gICAgbGV0IGNhY2hlZE5vdyA9IDBcbiAgICBjb25zdCBnZXROb3cgPSAoKSA9PiB7XG4gICAgICBjb25zdCBuID0gcGVyZi5ub3coKVxuICAgICAgaWYgKHRoaXMudHRsUmVzb2x1dGlvbiA+IDApIHtcbiAgICAgICAgY2FjaGVkTm93ID0gblxuICAgICAgICBjb25zdCB0ID0gc2V0VGltZW91dChcbiAgICAgICAgICAoKSA9PiAoY2FjaGVkTm93ID0gMCksXG4gICAgICAgICAgdGhpcy50dGxSZXNvbHV0aW9uXG4gICAgICAgIClcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgLSBub3QgYXZhaWxhYmxlIG9uIGFsbCBwbGF0Zm9ybXMgKi9cbiAgICAgICAgaWYgKHQudW5yZWYpIHtcbiAgICAgICAgICB0LnVucmVmKClcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIG5cbiAgICB9XG5cbiAgICB0aGlzLmdldFJlbWFpbmluZ1RUTCA9IGtleSA9PiB7XG4gICAgICBjb25zdCBpbmRleCA9IHRoaXMua2V5TWFwLmdldChrZXkpXG4gICAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gMFxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMudHRsc1tpbmRleF0gPT09IDAgfHwgdGhpcy5zdGFydHNbaW5kZXhdID09PSAwXG4gICAgICAgID8gSW5maW5pdHlcbiAgICAgICAgOiB0aGlzLnN0YXJ0c1tpbmRleF0gK1xuICAgICAgICAgICAgdGhpcy50dGxzW2luZGV4XSAtXG4gICAgICAgICAgICAoY2FjaGVkTm93IHx8IGdldE5vdygpKVxuICAgIH1cblxuICAgIHRoaXMuaXNTdGFsZSA9IGluZGV4ID0+IHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgIHRoaXMudHRsc1tpbmRleF0gIT09IDAgJiZcbiAgICAgICAgdGhpcy5zdGFydHNbaW5kZXhdICE9PSAwICYmXG4gICAgICAgIChjYWNoZWROb3cgfHwgZ2V0Tm93KCkpIC0gdGhpcy5zdGFydHNbaW5kZXhdID5cbiAgICAgICAgICB0aGlzLnR0bHNbaW5kZXhdXG4gICAgICApXG4gICAgfVxuICB9XG4gIHVwZGF0ZUl0ZW1BZ2UoX2luZGV4KSB7fVxuICBzdGF0dXNUVEwoX3N0YXR1cywgX2luZGV4KSB7fVxuICBzZXRJdGVtVFRMKF9pbmRleCwgX3R0bCwgX3N0YXJ0KSB7fVxuICBpc1N0YWxlKF9pbmRleCkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgaW5pdGlhbGl6ZVNpemVUcmFja2luZygpIHtcbiAgICB0aGlzLmNhbGN1bGF0ZWRTaXplID0gMFxuICAgIHRoaXMuc2l6ZXMgPSBuZXcgWmVyb0FycmF5KHRoaXMubWF4KVxuICAgIHRoaXMucmVtb3ZlSXRlbVNpemUgPSBpbmRleCA9PiB7XG4gICAgICB0aGlzLmNhbGN1bGF0ZWRTaXplIC09IHRoaXMuc2l6ZXNbaW5kZXhdXG4gICAgICB0aGlzLnNpemVzW2luZGV4XSA9IDBcbiAgICB9XG4gICAgdGhpcy5yZXF1aXJlU2l6ZSA9IChrLCB2LCBzaXplLCBzaXplQ2FsY3VsYXRpb24pID0+IHtcbiAgICAgIC8vIHByb3Zpc2lvbmFsbHkgYWNjZXB0IGJhY2tncm91bmQgZmV0Y2hlcy5cbiAgICAgIC8vIGFjdHVhbCB2YWx1ZSBzaXplIHdpbGwgYmUgY2hlY2tlZCB3aGVuIHRoZXkgcmV0dXJuLlxuICAgICAgaWYgKHRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godikpIHtcbiAgICAgICAgcmV0dXJuIDBcbiAgICAgIH1cbiAgICAgIGlmICghaXNQb3NJbnQoc2l6ZSkpIHtcbiAgICAgICAgaWYgKHNpemVDYWxjdWxhdGlvbikge1xuICAgICAgICAgIGlmICh0eXBlb2Ygc2l6ZUNhbGN1bGF0aW9uICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdzaXplQ2FsY3VsYXRpb24gbXVzdCBiZSBhIGZ1bmN0aW9uJylcbiAgICAgICAgICB9XG4gICAgICAgICAgc2l6ZSA9IHNpemVDYWxjdWxhdGlvbih2LCBrKVxuICAgICAgICAgIGlmICghaXNQb3NJbnQoc2l6ZSkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgICAgICdzaXplQ2FsY3VsYXRpb24gcmV0dXJuIGludmFsaWQgKGV4cGVjdCBwb3NpdGl2ZSBpbnRlZ2VyKSdcbiAgICAgICAgICAgIClcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICAgICdpbnZhbGlkIHNpemUgdmFsdWUgKG11c3QgYmUgcG9zaXRpdmUgaW50ZWdlcikuICcgK1xuICAgICAgICAgICAgICAnV2hlbiBtYXhTaXplIG9yIG1heEVudHJ5U2l6ZSBpcyB1c2VkLCBzaXplQ2FsY3VsYXRpb24gb3Igc2l6ZSAnICtcbiAgICAgICAgICAgICAgJ211c3QgYmUgc2V0LidcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBzaXplXG4gICAgfVxuICAgIHRoaXMuYWRkSXRlbVNpemUgPSAoaW5kZXgsIHNpemUsIHN0YXR1cykgPT4ge1xuICAgICAgdGhpcy5zaXplc1tpbmRleF0gPSBzaXplXG4gICAgICBpZiAodGhpcy5tYXhTaXplKSB7XG4gICAgICAgIGNvbnN0IG1heFNpemUgPSB0aGlzLm1heFNpemUgLSB0aGlzLnNpemVzW2luZGV4XVxuICAgICAgICB3aGlsZSAodGhpcy5jYWxjdWxhdGVkU2l6ZSA+IG1heFNpemUpIHtcbiAgICAgICAgICB0aGlzLmV2aWN0KHRydWUpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMuY2FsY3VsYXRlZFNpemUgKz0gdGhpcy5zaXplc1tpbmRleF1cbiAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgc3RhdHVzLmVudHJ5U2l6ZSA9IHNpemVcbiAgICAgICAgc3RhdHVzLnRvdGFsQ2FsY3VsYXRlZFNpemUgPSB0aGlzLmNhbGN1bGF0ZWRTaXplXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlbW92ZUl0ZW1TaXplKF9pbmRleCkge31cbiAgYWRkSXRlbVNpemUoX2luZGV4LCBfc2l6ZSkge31cbiAgcmVxdWlyZVNpemUoX2ssIF92LCBzaXplLCBzaXplQ2FsY3VsYXRpb24pIHtcbiAgICBpZiAoc2l6ZSB8fCBzaXplQ2FsY3VsYXRpb24pIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdjYW5ub3Qgc2V0IHNpemUgd2l0aG91dCBzZXR0aW5nIG1heFNpemUgb3IgbWF4RW50cnlTaXplIG9uIGNhY2hlJ1xuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gICppbmRleGVzKHsgYWxsb3dTdGFsZSA9IHRoaXMuYWxsb3dTdGFsZSB9ID0ge30pIHtcbiAgICBpZiAodGhpcy5zaXplKSB7XG4gICAgICBmb3IgKGxldCBpID0gdGhpcy50YWlsOyB0cnVlOyApIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWRJbmRleChpKSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFsbG93U3RhbGUgfHwgIXRoaXMuaXNTdGFsZShpKSkge1xuICAgICAgICAgIHlpZWxkIGlcbiAgICAgICAgfVxuICAgICAgICBpZiAoaSA9PT0gdGhpcy5oZWFkKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpID0gdGhpcy5wcmV2W2ldXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAqcmluZGV4ZXMoeyBhbGxvd1N0YWxlID0gdGhpcy5hbGxvd1N0YWxlIH0gPSB7fSkge1xuICAgIGlmICh0aGlzLnNpemUpIHtcbiAgICAgIGZvciAobGV0IGkgPSB0aGlzLmhlYWQ7IHRydWU7ICkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZEluZGV4KGkpKSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYWxsb3dTdGFsZSB8fCAhdGhpcy5pc1N0YWxlKGkpKSB7XG4gICAgICAgICAgeWllbGQgaVxuICAgICAgICB9XG4gICAgICAgIGlmIChpID09PSB0aGlzLnRhaWwpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGkgPSB0aGlzLm5leHRbaV1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlzVmFsaWRJbmRleChpbmRleCkge1xuICAgIHJldHVybiAoXG4gICAgICBpbmRleCAhPT0gdW5kZWZpbmVkICYmXG4gICAgICB0aGlzLmtleU1hcC5nZXQodGhpcy5rZXlMaXN0W2luZGV4XSkgPT09IGluZGV4XG4gICAgKVxuICB9XG5cbiAgKmVudHJpZXMoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMuaW5kZXhlcygpKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMudmFsTGlzdFtpXSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIHRoaXMua2V5TGlzdFtpXSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICF0aGlzLmlzQmFja2dyb3VuZEZldGNoKHRoaXMudmFsTGlzdFtpXSlcbiAgICAgICkge1xuICAgICAgICB5aWVsZCBbdGhpcy5rZXlMaXN0W2ldLCB0aGlzLnZhbExpc3RbaV1dXG4gICAgICB9XG4gICAgfVxuICB9XG4gICpyZW50cmllcygpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5yaW5kZXhlcygpKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMudmFsTGlzdFtpXSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgIHRoaXMua2V5TGlzdFtpXSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICF0aGlzLmlzQmFja2dyb3VuZEZldGNoKHRoaXMudmFsTGlzdFtpXSlcbiAgICAgICkge1xuICAgICAgICB5aWVsZCBbdGhpcy5rZXlMaXN0W2ldLCB0aGlzLnZhbExpc3RbaV1dXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgKmtleXMoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMuaW5kZXhlcygpKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMua2V5TGlzdFtpXSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICF0aGlzLmlzQmFja2dyb3VuZEZldGNoKHRoaXMudmFsTGlzdFtpXSlcbiAgICAgICkge1xuICAgICAgICB5aWVsZCB0aGlzLmtleUxpc3RbaV1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgKnJrZXlzKCkge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLnJpbmRleGVzKCkpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdGhpcy5rZXlMaXN0W2ldICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgIXRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godGhpcy52YWxMaXN0W2ldKVxuICAgICAgKSB7XG4gICAgICAgIHlpZWxkIHRoaXMua2V5TGlzdFtpXVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICp2YWx1ZXMoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMuaW5kZXhlcygpKSB7XG4gICAgICBpZiAoXG4gICAgICAgIHRoaXMudmFsTGlzdFtpXSAhPT0gdW5kZWZpbmVkICYmXG4gICAgICAgICF0aGlzLmlzQmFja2dyb3VuZEZldGNoKHRoaXMudmFsTGlzdFtpXSlcbiAgICAgICkge1xuICAgICAgICB5aWVsZCB0aGlzLnZhbExpc3RbaV1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgKnJ2YWx1ZXMoKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMucmluZGV4ZXMoKSkge1xuICAgICAgaWYgKFxuICAgICAgICB0aGlzLnZhbExpc3RbaV0gIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAhdGhpcy5pc0JhY2tncm91bmRGZXRjaCh0aGlzLnZhbExpc3RbaV0pXG4gICAgICApIHtcbiAgICAgICAgeWllbGQgdGhpcy52YWxMaXN0W2ldXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgcmV0dXJuIHRoaXMuZW50cmllcygpXG4gIH1cblxuICBmaW5kKGZuLCBnZXRPcHRpb25zKSB7XG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMuaW5kZXhlcygpKSB7XG4gICAgICBjb25zdCB2ID0gdGhpcy52YWxMaXN0W2ldXG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godilcbiAgICAgICAgPyB2Ll9fc3RhbGVXaGlsZUZldGNoaW5nXG4gICAgICAgIDogdlxuICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIGNvbnRpbnVlXG4gICAgICBpZiAoZm4odmFsdWUsIHRoaXMua2V5TGlzdFtpXSwgdGhpcykpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KHRoaXMua2V5TGlzdFtpXSwgZ2V0T3B0aW9ucylcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3JFYWNoKGZuLCB0aGlzcCA9IHRoaXMpIHtcbiAgICBmb3IgKGNvbnN0IGkgb2YgdGhpcy5pbmRleGVzKCkpIHtcbiAgICAgIGNvbnN0IHYgPSB0aGlzLnZhbExpc3RbaV1cbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pc0JhY2tncm91bmRGZXRjaCh2KVxuICAgICAgICA/IHYuX19zdGFsZVdoaWxlRmV0Y2hpbmdcbiAgICAgICAgOiB2XG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgY29udGludWVcbiAgICAgIGZuLmNhbGwodGhpc3AsIHZhbHVlLCB0aGlzLmtleUxpc3RbaV0sIHRoaXMpXG4gICAgfVxuICB9XG5cbiAgcmZvckVhY2goZm4sIHRoaXNwID0gdGhpcykge1xuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLnJpbmRleGVzKCkpIHtcbiAgICAgIGNvbnN0IHYgPSB0aGlzLnZhbExpc3RbaV1cbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5pc0JhY2tncm91bmRGZXRjaCh2KVxuICAgICAgICA/IHYuX19zdGFsZVdoaWxlRmV0Y2hpbmdcbiAgICAgICAgOiB2XG4gICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgY29udGludWVcbiAgICAgIGZuLmNhbGwodGhpc3AsIHZhbHVlLCB0aGlzLmtleUxpc3RbaV0sIHRoaXMpXG4gICAgfVxuICB9XG5cbiAgZ2V0IHBydW5lKCkge1xuICAgIGRlcHJlY2F0ZWRNZXRob2QoJ3BydW5lJywgJ3B1cmdlU3RhbGUnKVxuICAgIHJldHVybiB0aGlzLnB1cmdlU3RhbGVcbiAgfVxuXG4gIHB1cmdlU3RhbGUoKSB7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZVxuICAgIGZvciAoY29uc3QgaSBvZiB0aGlzLnJpbmRleGVzKHsgYWxsb3dTdGFsZTogdHJ1ZSB9KSkge1xuICAgICAgaWYgKHRoaXMuaXNTdGFsZShpKSkge1xuICAgICAgICB0aGlzLmRlbGV0ZSh0aGlzLmtleUxpc3RbaV0pXG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZWxldGVkXG4gIH1cblxuICBkdW1wKCkge1xuICAgIGNvbnN0IGFyciA9IFtdXG4gICAgZm9yIChjb25zdCBpIG9mIHRoaXMuaW5kZXhlcyh7IGFsbG93U3RhbGU6IHRydWUgfSkpIHtcbiAgICAgIGNvbnN0IGtleSA9IHRoaXMua2V5TGlzdFtpXVxuICAgICAgY29uc3QgdiA9IHRoaXMudmFsTGlzdFtpXVxuICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmlzQmFja2dyb3VuZEZldGNoKHYpXG4gICAgICAgID8gdi5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICA6IHZcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSBjb250aW51ZVxuICAgICAgY29uc3QgZW50cnkgPSB7IHZhbHVlIH1cbiAgICAgIGlmICh0aGlzLnR0bHMpIHtcbiAgICAgICAgZW50cnkudHRsID0gdGhpcy50dGxzW2ldXG4gICAgICAgIC8vIGFsd2F5cyBkdW1wIHRoZSBzdGFydCByZWxhdGl2ZSB0byBhIHBvcnRhYmxlIHRpbWVzdGFtcFxuICAgICAgICAvLyBpdCdzIG9rIGZvciB0aGlzIHRvIGJlIGEgYml0IHNsb3csIGl0J3MgYSByYXJlIG9wZXJhdGlvbi5cbiAgICAgICAgY29uc3QgYWdlID0gcGVyZi5ub3coKSAtIHRoaXMuc3RhcnRzW2ldXG4gICAgICAgIGVudHJ5LnN0YXJ0ID0gTWF0aC5mbG9vcihEYXRlLm5vdygpIC0gYWdlKVxuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc2l6ZXMpIHtcbiAgICAgICAgZW50cnkuc2l6ZSA9IHRoaXMuc2l6ZXNbaV1cbiAgICAgIH1cbiAgICAgIGFyci51bnNoaWZ0KFtrZXksIGVudHJ5XSlcbiAgICB9XG4gICAgcmV0dXJuIGFyclxuICB9XG5cbiAgbG9hZChhcnIpIHtcbiAgICB0aGlzLmNsZWFyKClcbiAgICBmb3IgKGNvbnN0IFtrZXksIGVudHJ5XSBvZiBhcnIpIHtcbiAgICAgIGlmIChlbnRyeS5zdGFydCkge1xuICAgICAgICAvLyBlbnRyeS5zdGFydCBpcyBhIHBvcnRhYmxlIHRpbWVzdGFtcCwgYnV0IHdlIG1heSBiZSB1c2luZ1xuICAgICAgICAvLyBub2RlJ3MgcGVyZm9ybWFuY2Uubm93KCksIHNvIGNhbGN1bGF0ZSB0aGUgb2Zmc2V0LlxuICAgICAgICAvLyBpdCdzIG9rIGZvciB0aGlzIHRvIGJlIGEgYml0IHNsb3csIGl0J3MgYSByYXJlIG9wZXJhdGlvbi5cbiAgICAgICAgY29uc3QgYWdlID0gRGF0ZS5ub3coKSAtIGVudHJ5LnN0YXJ0XG4gICAgICAgIGVudHJ5LnN0YXJ0ID0gcGVyZi5ub3coKSAtIGFnZVxuICAgICAgfVxuICAgICAgdGhpcy5zZXQoa2V5LCBlbnRyeS52YWx1ZSwgZW50cnkpXG4gICAgfVxuICB9XG5cbiAgZGlzcG9zZShfdiwgX2ssIF9yZWFzb24pIHt9XG5cbiAgc2V0KFxuICAgIGssXG4gICAgdixcbiAgICB7XG4gICAgICB0dGwgPSB0aGlzLnR0bCxcbiAgICAgIHN0YXJ0LFxuICAgICAgbm9EaXNwb3NlT25TZXQgPSB0aGlzLm5vRGlzcG9zZU9uU2V0LFxuICAgICAgc2l6ZSA9IDAsXG4gICAgICBzaXplQ2FsY3VsYXRpb24gPSB0aGlzLnNpemVDYWxjdWxhdGlvbixcbiAgICAgIG5vVXBkYXRlVFRMID0gdGhpcy5ub1VwZGF0ZVRUTCxcbiAgICAgIHN0YXR1cyxcbiAgICB9ID0ge31cbiAgKSB7XG4gICAgc2l6ZSA9IHRoaXMucmVxdWlyZVNpemUoaywgdiwgc2l6ZSwgc2l6ZUNhbGN1bGF0aW9uKVxuICAgIC8vIGlmIHRoZSBpdGVtIGRvZXNuJ3QgZml0LCBkb24ndCBkbyBhbnl0aGluZ1xuICAgIC8vIE5COiBtYXhFbnRyeVNpemUgc2V0IHRvIG1heFNpemUgYnkgZGVmYXVsdFxuICAgIGlmICh0aGlzLm1heEVudHJ5U2l6ZSAmJiBzaXplID4gdGhpcy5tYXhFbnRyeVNpemUpIHtcbiAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgc3RhdHVzLnNldCA9ICdtaXNzJ1xuICAgICAgICBzdGF0dXMubWF4RW50cnlTaXplRXhjZWVkZWQgPSB0cnVlXG4gICAgICB9XG4gICAgICAvLyBoYXZlIHRvIGRlbGV0ZSwgaW4gY2FzZSBhIGJhY2tncm91bmQgZmV0Y2ggaXMgdGhlcmUgYWxyZWFkeS5cbiAgICAgIC8vIGluIG5vbi1hc3luYyBjYXNlcywgdGhpcyBpcyBhIG5vLW9wXG4gICAgICB0aGlzLmRlbGV0ZShrKVxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG4gICAgbGV0IGluZGV4ID0gdGhpcy5zaXplID09PSAwID8gdW5kZWZpbmVkIDogdGhpcy5rZXlNYXAuZ2V0KGspXG4gICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGFkZGl0aW9uXG4gICAgICBpbmRleCA9IHRoaXMubmV3SW5kZXgoKVxuICAgICAgdGhpcy5rZXlMaXN0W2luZGV4XSA9IGtcbiAgICAgIHRoaXMudmFsTGlzdFtpbmRleF0gPSB2XG4gICAgICB0aGlzLmtleU1hcC5zZXQoaywgaW5kZXgpXG4gICAgICB0aGlzLm5leHRbdGhpcy50YWlsXSA9IGluZGV4XG4gICAgICB0aGlzLnByZXZbaW5kZXhdID0gdGhpcy50YWlsXG4gICAgICB0aGlzLnRhaWwgPSBpbmRleFxuICAgICAgdGhpcy5zaXplKytcbiAgICAgIHRoaXMuYWRkSXRlbVNpemUoaW5kZXgsIHNpemUsIHN0YXR1cylcbiAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgc3RhdHVzLnNldCA9ICdhZGQnXG4gICAgICB9XG4gICAgICBub1VwZGF0ZVRUTCA9IGZhbHNlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVwZGF0ZVxuICAgICAgdGhpcy5tb3ZlVG9UYWlsKGluZGV4KVxuICAgICAgY29uc3Qgb2xkVmFsID0gdGhpcy52YWxMaXN0W2luZGV4XVxuICAgICAgaWYgKHYgIT09IG9sZFZhbCkge1xuICAgICAgICBpZiAodGhpcy5pc0JhY2tncm91bmRGZXRjaChvbGRWYWwpKSB7XG4gICAgICAgICAgb2xkVmFsLl9fYWJvcnRDb250cm9sbGVyLmFib3J0KG5ldyBFcnJvcigncmVwbGFjZWQnKSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoIW5vRGlzcG9zZU9uU2V0KSB7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2Uob2xkVmFsLCBrLCAnc2V0JylcbiAgICAgICAgICAgIGlmICh0aGlzLmRpc3Bvc2VBZnRlcikge1xuICAgICAgICAgICAgICB0aGlzLmRpc3Bvc2VkLnB1c2goW29sZFZhbCwgaywgJ3NldCddKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUl0ZW1TaXplKGluZGV4KVxuICAgICAgICB0aGlzLnZhbExpc3RbaW5kZXhdID0gdlxuICAgICAgICB0aGlzLmFkZEl0ZW1TaXplKGluZGV4LCBzaXplLCBzdGF0dXMpXG4gICAgICAgIGlmIChzdGF0dXMpIHtcbiAgICAgICAgICBzdGF0dXMuc2V0ID0gJ3JlcGxhY2UnXG4gICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPVxuICAgICAgICAgICAgb2xkVmFsICYmIHRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2gob2xkVmFsKVxuICAgICAgICAgICAgICA/IG9sZFZhbC5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICAgICAgICA6IG9sZFZhbFxuICAgICAgICAgIGlmIChvbGRWYWx1ZSAhPT0gdW5kZWZpbmVkKSBzdGF0dXMub2xkVmFsdWUgPSBvbGRWYWx1ZVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHN0YXR1cykge1xuICAgICAgICBzdGF0dXMuc2V0ID0gJ3VwZGF0ZSdcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHR0bCAhPT0gMCAmJiB0aGlzLnR0bCA9PT0gMCAmJiAhdGhpcy50dGxzKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVUVExUcmFja2luZygpXG4gICAgfVxuICAgIGlmICghbm9VcGRhdGVUVEwpIHtcbiAgICAgIHRoaXMuc2V0SXRlbVRUTChpbmRleCwgdHRsLCBzdGFydClcbiAgICB9XG4gICAgdGhpcy5zdGF0dXNUVEwoc3RhdHVzLCBpbmRleClcbiAgICBpZiAodGhpcy5kaXNwb3NlQWZ0ZXIpIHtcbiAgICAgIHdoaWxlICh0aGlzLmRpc3Bvc2VkLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmRpc3Bvc2VBZnRlciguLi50aGlzLmRpc3Bvc2VkLnNoaWZ0KCkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBuZXdJbmRleCgpIHtcbiAgICBpZiAodGhpcy5zaXplID09PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy50YWlsXG4gICAgfVxuICAgIGlmICh0aGlzLnNpemUgPT09IHRoaXMubWF4ICYmIHRoaXMubWF4ICE9PSAwKSB7XG4gICAgICByZXR1cm4gdGhpcy5ldmljdChmYWxzZSlcbiAgICB9XG4gICAgaWYgKHRoaXMuZnJlZS5sZW5ndGggIT09IDApIHtcbiAgICAgIHJldHVybiB0aGlzLmZyZWUucG9wKClcbiAgICB9XG4gICAgLy8gaW5pdGlhbCBmaWxsLCBqdXN0IGtlZXAgd3JpdGluZyBkb3duIHRoZSBsaXN0XG4gICAgcmV0dXJuIHRoaXMuaW5pdGlhbEZpbGwrK1xuICB9XG5cbiAgcG9wKCkge1xuICAgIGlmICh0aGlzLnNpemUpIHtcbiAgICAgIGNvbnN0IHZhbCA9IHRoaXMudmFsTGlzdFt0aGlzLmhlYWRdXG4gICAgICB0aGlzLmV2aWN0KHRydWUpXG4gICAgICByZXR1cm4gdmFsXG4gICAgfVxuICB9XG5cbiAgZXZpY3QoZnJlZSkge1xuICAgIGNvbnN0IGhlYWQgPSB0aGlzLmhlYWRcbiAgICBjb25zdCBrID0gdGhpcy5rZXlMaXN0W2hlYWRdXG4gICAgY29uc3QgdiA9IHRoaXMudmFsTGlzdFtoZWFkXVxuICAgIGlmICh0aGlzLmlzQmFja2dyb3VuZEZldGNoKHYpKSB7XG4gICAgICB2Ll9fYWJvcnRDb250cm9sbGVyLmFib3J0KG5ldyBFcnJvcignZXZpY3RlZCcpKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRpc3Bvc2UodiwgaywgJ2V2aWN0JylcbiAgICAgIGlmICh0aGlzLmRpc3Bvc2VBZnRlcikge1xuICAgICAgICB0aGlzLmRpc3Bvc2VkLnB1c2goW3YsIGssICdldmljdCddKVxuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnJlbW92ZUl0ZW1TaXplKGhlYWQpXG4gICAgLy8gaWYgd2UgYXJlbid0IGFib3V0IHRvIHVzZSB0aGUgaW5kZXgsIHRoZW4gbnVsbCB0aGVzZSBvdXRcbiAgICBpZiAoZnJlZSkge1xuICAgICAgdGhpcy5rZXlMaXN0W2hlYWRdID0gbnVsbFxuICAgICAgdGhpcy52YWxMaXN0W2hlYWRdID0gbnVsbFxuICAgICAgdGhpcy5mcmVlLnB1c2goaGVhZClcbiAgICB9XG4gICAgdGhpcy5oZWFkID0gdGhpcy5uZXh0W2hlYWRdXG4gICAgdGhpcy5rZXlNYXAuZGVsZXRlKGspXG4gICAgdGhpcy5zaXplLS1cbiAgICByZXR1cm4gaGVhZFxuICB9XG5cbiAgaGFzKGssIHsgdXBkYXRlQWdlT25IYXMgPSB0aGlzLnVwZGF0ZUFnZU9uSGFzLCBzdGF0dXMgfSA9IHt9KSB7XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmtleU1hcC5nZXQoaylcbiAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKCF0aGlzLmlzU3RhbGUoaW5kZXgpKSB7XG4gICAgICAgIGlmICh1cGRhdGVBZ2VPbkhhcykge1xuICAgICAgICAgIHRoaXMudXBkYXRlSXRlbUFnZShpbmRleClcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdHVzKSBzdGF0dXMuaGFzID0gJ2hpdCdcbiAgICAgICAgdGhpcy5zdGF0dXNUVEwoc3RhdHVzLCBpbmRleClcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gZWxzZSBpZiAoc3RhdHVzKSB7XG4gICAgICAgIHN0YXR1cy5oYXMgPSAnc3RhbGUnXG4gICAgICAgIHRoaXMuc3RhdHVzVFRMKHN0YXR1cywgaW5kZXgpXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChzdGF0dXMpIHtcbiAgICAgIHN0YXR1cy5oYXMgPSAnbWlzcydcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvLyBsaWtlIGdldCgpLCBidXQgd2l0aG91dCBhbnkgTFJVIHVwZGF0aW5nIG9yIFRUTCBleHBpcmF0aW9uXG4gIHBlZWsoaywgeyBhbGxvd1N0YWxlID0gdGhpcy5hbGxvd1N0YWxlIH0gPSB7fSkge1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5rZXlNYXAuZ2V0KGspXG4gICAgaWYgKGluZGV4ICE9PSB1bmRlZmluZWQgJiYgKGFsbG93U3RhbGUgfHwgIXRoaXMuaXNTdGFsZShpbmRleCkpKSB7XG4gICAgICBjb25zdCB2ID0gdGhpcy52YWxMaXN0W2luZGV4XVxuICAgICAgLy8gZWl0aGVyIHN0YWxlIGFuZCBhbGxvd2VkLCBvciBmb3JjaW5nIGEgcmVmcmVzaCBvZiBub24tc3RhbGUgdmFsdWVcbiAgICAgIHJldHVybiB0aGlzLmlzQmFja2dyb3VuZEZldGNoKHYpID8gdi5fX3N0YWxlV2hpbGVGZXRjaGluZyA6IHZcbiAgICB9XG4gIH1cblxuICBiYWNrZ3JvdW5kRmV0Y2goaywgaW5kZXgsIG9wdGlvbnMsIGNvbnRleHQpIHtcbiAgICBjb25zdCB2ID0gaW5kZXggPT09IHVuZGVmaW5lZCA/IHVuZGVmaW5lZCA6IHRoaXMudmFsTGlzdFtpbmRleF1cbiAgICBpZiAodGhpcy5pc0JhY2tncm91bmRGZXRjaCh2KSkge1xuICAgICAgcmV0dXJuIHZcbiAgICB9XG4gICAgY29uc3QgYWMgPSBuZXcgQUMoKVxuICAgIGlmIChvcHRpb25zLnNpZ25hbCkge1xuICAgICAgb3B0aW9ucy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PlxuICAgICAgICBhYy5hYm9ydChvcHRpb25zLnNpZ25hbC5yZWFzb24pXG4gICAgICApXG4gICAgfVxuICAgIGNvbnN0IGZldGNoT3B0cyA9IHtcbiAgICAgIHNpZ25hbDogYWMuc2lnbmFsLFxuICAgICAgb3B0aW9ucyxcbiAgICAgIGNvbnRleHQsXG4gICAgfVxuICAgIGNvbnN0IGNiID0gKHYsIHVwZGF0ZUNhY2hlID0gZmFsc2UpID0+IHtcbiAgICAgIGNvbnN0IHsgYWJvcnRlZCB9ID0gYWMuc2lnbmFsXG4gICAgICBjb25zdCBpZ25vcmVBYm9ydCA9IG9wdGlvbnMuaWdub3JlRmV0Y2hBYm9ydCAmJiB2ICE9PSB1bmRlZmluZWRcbiAgICAgIGlmIChvcHRpb25zLnN0YXR1cykge1xuICAgICAgICBpZiAoYWJvcnRlZCAmJiAhdXBkYXRlQ2FjaGUpIHtcbiAgICAgICAgICBvcHRpb25zLnN0YXR1cy5mZXRjaEFib3J0ZWQgPSB0cnVlXG4gICAgICAgICAgb3B0aW9ucy5zdGF0dXMuZmV0Y2hFcnJvciA9IGFjLnNpZ25hbC5yZWFzb25cbiAgICAgICAgICBpZiAoaWdub3JlQWJvcnQpIG9wdGlvbnMuc3RhdHVzLmZldGNoQWJvcnRJZ25vcmVkID0gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMuc3RhdHVzLmZldGNoUmVzb2x2ZWQgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChhYm9ydGVkICYmICFpZ25vcmVBYm9ydCAmJiAhdXBkYXRlQ2FjaGUpIHtcbiAgICAgICAgcmV0dXJuIGZldGNoRmFpbChhYy5zaWduYWwucmVhc29uKVxuICAgICAgfVxuICAgICAgLy8gZWl0aGVyIHdlIGRpZG4ndCBhYm9ydCwgYW5kIGFyZSBzdGlsbCBoZXJlLCBvciB3ZSBkaWQsIGFuZCBpZ25vcmVkXG4gICAgICBpZiAodGhpcy52YWxMaXN0W2luZGV4XSA9PT0gcCkge1xuICAgICAgICBpZiAodiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgaWYgKHAuX19zdGFsZVdoaWxlRmV0Y2hpbmcpIHtcbiAgICAgICAgICAgIHRoaXMudmFsTGlzdFtpbmRleF0gPSBwLl9fc3RhbGVXaGlsZUZldGNoaW5nXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVsZXRlKGspXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChvcHRpb25zLnN0YXR1cykgb3B0aW9ucy5zdGF0dXMuZmV0Y2hVcGRhdGVkID0gdHJ1ZVxuICAgICAgICAgIHRoaXMuc2V0KGssIHYsIGZldGNoT3B0cy5vcHRpb25zKVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdlxuICAgIH1cbiAgICBjb25zdCBlYiA9IGVyID0+IHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXR1cykge1xuICAgICAgICBvcHRpb25zLnN0YXR1cy5mZXRjaFJlamVjdGVkID0gdHJ1ZVxuICAgICAgICBvcHRpb25zLnN0YXR1cy5mZXRjaEVycm9yID0gZXJcbiAgICAgIH1cbiAgICAgIHJldHVybiBmZXRjaEZhaWwoZXIpXG4gICAgfVxuICAgIGNvbnN0IGZldGNoRmFpbCA9IGVyID0+IHtcbiAgICAgIGNvbnN0IHsgYWJvcnRlZCB9ID0gYWMuc2lnbmFsXG4gICAgICBjb25zdCBhbGxvd1N0YWxlQWJvcnRlZCA9XG4gICAgICAgIGFib3J0ZWQgJiYgb3B0aW9ucy5hbGxvd1N0YWxlT25GZXRjaEFib3J0XG4gICAgICBjb25zdCBhbGxvd1N0YWxlID1cbiAgICAgICAgYWxsb3dTdGFsZUFib3J0ZWQgfHwgb3B0aW9ucy5hbGxvd1N0YWxlT25GZXRjaFJlamVjdGlvblxuICAgICAgY29uc3Qgbm9EZWxldGUgPSBhbGxvd1N0YWxlIHx8IG9wdGlvbnMubm9EZWxldGVPbkZldGNoUmVqZWN0aW9uXG4gICAgICBpZiAodGhpcy52YWxMaXN0W2luZGV4XSA9PT0gcCkge1xuICAgICAgICAvLyBpZiB3ZSBhbGxvdyBzdGFsZSBvbiBmZXRjaCByZWplY3Rpb25zLCB0aGVuIHdlIG5lZWQgdG8gZW5zdXJlIHRoYXRcbiAgICAgICAgLy8gdGhlIHN0YWxlIHZhbHVlIGlzIG5vdCByZW1vdmVkIGZyb20gdGhlIGNhY2hlIHdoZW4gdGhlIGZldGNoIGZhaWxzLlxuICAgICAgICBjb25zdCBkZWwgPSAhbm9EZWxldGUgfHwgcC5fX3N0YWxlV2hpbGVGZXRjaGluZyA9PT0gdW5kZWZpbmVkXG4gICAgICAgIGlmIChkZWwpIHtcbiAgICAgICAgICB0aGlzLmRlbGV0ZShrKVxuICAgICAgICB9IGVsc2UgaWYgKCFhbGxvd1N0YWxlQWJvcnRlZCkge1xuICAgICAgICAgIC8vIHN0aWxsIHJlcGxhY2UgdGhlICpwcm9taXNlKiB3aXRoIHRoZSBzdGFsZSB2YWx1ZSxcbiAgICAgICAgICAvLyBzaW5jZSB3ZSBhcmUgZG9uZSB3aXRoIHRoZSBwcm9taXNlIGF0IHRoaXMgcG9pbnQuXG4gICAgICAgICAgLy8gbGVhdmUgaXQgdW50b3VjaGVkIGlmIHdlJ3JlIHN0aWxsIHdhaXRpbmcgZm9yIGFuXG4gICAgICAgICAgLy8gYWJvcnRlZCBiYWNrZ3JvdW5kIGZldGNoIHRoYXQgaGFzbid0IHlldCByZXR1cm5lZC5cbiAgICAgICAgICB0aGlzLnZhbExpc3RbaW5kZXhdID0gcC5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYWxsb3dTdGFsZSkge1xuICAgICAgICBpZiAob3B0aW9ucy5zdGF0dXMgJiYgcC5fX3N0YWxlV2hpbGVGZXRjaGluZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgb3B0aW9ucy5zdGF0dXMucmV0dXJuZWRTdGFsZSA9IHRydWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcC5fX3N0YWxlV2hpbGVGZXRjaGluZ1xuICAgICAgfSBlbHNlIGlmIChwLl9fcmV0dXJuZWQgPT09IHApIHtcbiAgICAgICAgdGhyb3cgZXJcbiAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcGNhbGwgPSAocmVzLCByZWopID0+IHtcbiAgICAgIHRoaXMuZmV0Y2hNZXRob2QoaywgdiwgZmV0Y2hPcHRzKS50aGVuKHYgPT4gcmVzKHYpLCByZWopXG4gICAgICAvLyBpZ25vcmVkLCB3ZSBnbyB1bnRpbCB3ZSBmaW5pc2gsIHJlZ2FyZGxlc3MuXG4gICAgICAvLyBkZWZlciBjaGVjayB1bnRpbCB3ZSBhcmUgYWN0dWFsbHkgYWJvcnRpbmcsXG4gICAgICAvLyBzbyBmZXRjaE1ldGhvZCBjYW4gb3ZlcnJpZGUuXG4gICAgICBhYy5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCAoKSA9PiB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAhb3B0aW9ucy5pZ25vcmVGZXRjaEFib3J0IHx8XG4gICAgICAgICAgb3B0aW9ucy5hbGxvd1N0YWxlT25GZXRjaEFib3J0XG4gICAgICAgICkge1xuICAgICAgICAgIHJlcygpXG4gICAgICAgICAgLy8gd2hlbiBpdCBldmVudHVhbGx5IHJlc29sdmVzLCB1cGRhdGUgdGhlIGNhY2hlLlxuICAgICAgICAgIGlmIChvcHRpb25zLmFsbG93U3RhbGVPbkZldGNoQWJvcnQpIHtcbiAgICAgICAgICAgIHJlcyA9IHYgPT4gY2IodiwgdHJ1ZSlcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuICAgIGlmIChvcHRpb25zLnN0YXR1cykgb3B0aW9ucy5zdGF0dXMuZmV0Y2hEaXNwYXRjaGVkID0gdHJ1ZVxuICAgIGNvbnN0IHAgPSBuZXcgUHJvbWlzZShwY2FsbCkudGhlbihjYiwgZWIpXG4gICAgcC5fX2Fib3J0Q29udHJvbGxlciA9IGFjXG4gICAgcC5fX3N0YWxlV2hpbGVGZXRjaGluZyA9IHZcbiAgICBwLl9fcmV0dXJuZWQgPSBudWxsXG4gICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIGludGVybmFsLCBkb24ndCBleHBvc2Ugc3RhdHVzLlxuICAgICAgdGhpcy5zZXQoaywgcCwgeyAuLi5mZXRjaE9wdHMub3B0aW9ucywgc3RhdHVzOiB1bmRlZmluZWQgfSlcbiAgICAgIGluZGV4ID0gdGhpcy5rZXlNYXAuZ2V0KGspXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudmFsTGlzdFtpbmRleF0gPSBwXG4gICAgfVxuICAgIHJldHVybiBwXG4gIH1cblxuICBpc0JhY2tncm91bmRGZXRjaChwKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIHAgJiZcbiAgICAgIHR5cGVvZiBwID09PSAnb2JqZWN0JyAmJlxuICAgICAgdHlwZW9mIHAudGhlbiA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKFxuICAgICAgICBwLFxuICAgICAgICAnX19zdGFsZVdoaWxlRmV0Y2hpbmcnXG4gICAgICApICYmXG4gICAgICBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocCwgJ19fcmV0dXJuZWQnKSAmJlxuICAgICAgKHAuX19yZXR1cm5lZCA9PT0gcCB8fCBwLl9fcmV0dXJuZWQgPT09IG51bGwpXG4gICAgKVxuICB9XG5cbiAgLy8gdGhpcyB0YWtlcyB0aGUgdW5pb24gb2YgZ2V0KCkgYW5kIHNldCgpIG9wdHMsIGJlY2F1c2UgaXQgZG9lcyBib3RoXG4gIGFzeW5jIGZldGNoKFxuICAgIGssXG4gICAge1xuICAgICAgLy8gZ2V0IG9wdGlvbnNcbiAgICAgIGFsbG93U3RhbGUgPSB0aGlzLmFsbG93U3RhbGUsXG4gICAgICB1cGRhdGVBZ2VPbkdldCA9IHRoaXMudXBkYXRlQWdlT25HZXQsXG4gICAgICBub0RlbGV0ZU9uU3RhbGVHZXQgPSB0aGlzLm5vRGVsZXRlT25TdGFsZUdldCxcbiAgICAgIC8vIHNldCBvcHRpb25zXG4gICAgICB0dGwgPSB0aGlzLnR0bCxcbiAgICAgIG5vRGlzcG9zZU9uU2V0ID0gdGhpcy5ub0Rpc3Bvc2VPblNldCxcbiAgICAgIHNpemUgPSAwLFxuICAgICAgc2l6ZUNhbGN1bGF0aW9uID0gdGhpcy5zaXplQ2FsY3VsYXRpb24sXG4gICAgICBub1VwZGF0ZVRUTCA9IHRoaXMubm9VcGRhdGVUVEwsXG4gICAgICAvLyBmZXRjaCBleGNsdXNpdmUgb3B0aW9uc1xuICAgICAgbm9EZWxldGVPbkZldGNoUmVqZWN0aW9uID0gdGhpcy5ub0RlbGV0ZU9uRmV0Y2hSZWplY3Rpb24sXG4gICAgICBhbGxvd1N0YWxlT25GZXRjaFJlamVjdGlvbiA9IHRoaXMuYWxsb3dTdGFsZU9uRmV0Y2hSZWplY3Rpb24sXG4gICAgICBpZ25vcmVGZXRjaEFib3J0ID0gdGhpcy5pZ25vcmVGZXRjaEFib3J0LFxuICAgICAgYWxsb3dTdGFsZU9uRmV0Y2hBYm9ydCA9IHRoaXMuYWxsb3dTdGFsZU9uRmV0Y2hBYm9ydCxcbiAgICAgIGZldGNoQ29udGV4dCA9IHRoaXMuZmV0Y2hDb250ZXh0LFxuICAgICAgZm9yY2VSZWZyZXNoID0gZmFsc2UsXG4gICAgICBzdGF0dXMsXG4gICAgICBzaWduYWwsXG4gICAgfSA9IHt9XG4gICkge1xuICAgIGlmICghdGhpcy5mZXRjaE1ldGhvZCkge1xuICAgICAgaWYgKHN0YXR1cykgc3RhdHVzLmZldGNoID0gJ2dldCdcbiAgICAgIHJldHVybiB0aGlzLmdldChrLCB7XG4gICAgICAgIGFsbG93U3RhbGUsXG4gICAgICAgIHVwZGF0ZUFnZU9uR2V0LFxuICAgICAgICBub0RlbGV0ZU9uU3RhbGVHZXQsXG4gICAgICAgIHN0YXR1cyxcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgIGFsbG93U3RhbGUsXG4gICAgICB1cGRhdGVBZ2VPbkdldCxcbiAgICAgIG5vRGVsZXRlT25TdGFsZUdldCxcbiAgICAgIHR0bCxcbiAgICAgIG5vRGlzcG9zZU9uU2V0LFxuICAgICAgc2l6ZSxcbiAgICAgIHNpemVDYWxjdWxhdGlvbixcbiAgICAgIG5vVXBkYXRlVFRMLFxuICAgICAgbm9EZWxldGVPbkZldGNoUmVqZWN0aW9uLFxuICAgICAgYWxsb3dTdGFsZU9uRmV0Y2hSZWplY3Rpb24sXG4gICAgICBhbGxvd1N0YWxlT25GZXRjaEFib3J0LFxuICAgICAgaWdub3JlRmV0Y2hBYm9ydCxcbiAgICAgIHN0YXR1cyxcbiAgICAgIHNpZ25hbCxcbiAgICB9XG5cbiAgICBsZXQgaW5kZXggPSB0aGlzLmtleU1hcC5nZXQoaylcbiAgICBpZiAoaW5kZXggPT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKHN0YXR1cykgc3RhdHVzLmZldGNoID0gJ21pc3MnXG4gICAgICBjb25zdCBwID0gdGhpcy5iYWNrZ3JvdW5kRmV0Y2goaywgaW5kZXgsIG9wdGlvbnMsIGZldGNoQ29udGV4dClcbiAgICAgIHJldHVybiAocC5fX3JldHVybmVkID0gcClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gaW4gY2FjaGUsIG1heWJlIGFscmVhZHkgZmV0Y2hpbmdcbiAgICAgIGNvbnN0IHYgPSB0aGlzLnZhbExpc3RbaW5kZXhdXG4gICAgICBpZiAodGhpcy5pc0JhY2tncm91bmRGZXRjaCh2KSkge1xuICAgICAgICBjb25zdCBzdGFsZSA9XG4gICAgICAgICAgYWxsb3dTdGFsZSAmJiB2Ll9fc3RhbGVXaGlsZUZldGNoaW5nICE9PSB1bmRlZmluZWRcbiAgICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICAgIHN0YXR1cy5mZXRjaCA9ICdpbmZsaWdodCdcbiAgICAgICAgICBpZiAoc3RhbGUpIHN0YXR1cy5yZXR1cm5lZFN0YWxlID0gdHJ1ZVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdGFsZSA/IHYuX19zdGFsZVdoaWxlRmV0Y2hpbmcgOiAodi5fX3JldHVybmVkID0gdilcbiAgICAgIH1cblxuICAgICAgLy8gaWYgd2UgZm9yY2UgYSByZWZyZXNoLCB0aGF0IG1lYW5zIGRvIE5PVCBzZXJ2ZSB0aGUgY2FjaGVkIHZhbHVlLFxuICAgICAgLy8gdW5sZXNzIHdlIGFyZSBhbHJlYWR5IGluIHRoZSBwcm9jZXNzIG9mIHJlZnJlc2hpbmcgdGhlIGNhY2hlLlxuICAgICAgY29uc3QgaXNTdGFsZSA9IHRoaXMuaXNTdGFsZShpbmRleClcbiAgICAgIGlmICghZm9yY2VSZWZyZXNoICYmICFpc1N0YWxlKSB7XG4gICAgICAgIGlmIChzdGF0dXMpIHN0YXR1cy5mZXRjaCA9ICdoaXQnXG4gICAgICAgIHRoaXMubW92ZVRvVGFpbChpbmRleClcbiAgICAgICAgaWYgKHVwZGF0ZUFnZU9uR2V0KSB7XG4gICAgICAgICAgdGhpcy51cGRhdGVJdGVtQWdlKGluZGV4KVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdHVzVFRMKHN0YXR1cywgaW5kZXgpXG4gICAgICAgIHJldHVybiB2XG4gICAgICB9XG5cbiAgICAgIC8vIG9rLCBpdCBpcyBzdGFsZSBvciBhIGZvcmNlZCByZWZyZXNoLCBhbmQgbm90IGFscmVhZHkgZmV0Y2hpbmcuXG4gICAgICAvLyByZWZyZXNoIHRoZSBjYWNoZS5cbiAgICAgIGNvbnN0IHAgPSB0aGlzLmJhY2tncm91bmRGZXRjaChrLCBpbmRleCwgb3B0aW9ucywgZmV0Y2hDb250ZXh0KVxuICAgICAgY29uc3QgaGFzU3RhbGUgPSBwLl9fc3RhbGVXaGlsZUZldGNoaW5nICE9PSB1bmRlZmluZWRcbiAgICAgIGNvbnN0IHN0YWxlVmFsID0gaGFzU3RhbGUgJiYgYWxsb3dTdGFsZVxuICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICBzdGF0dXMuZmV0Y2ggPSBoYXNTdGFsZSAmJiBpc1N0YWxlID8gJ3N0YWxlJyA6ICdyZWZyZXNoJ1xuICAgICAgICBpZiAoc3RhbGVWYWwgJiYgaXNTdGFsZSkgc3RhdHVzLnJldHVybmVkU3RhbGUgPSB0cnVlXG4gICAgICB9XG4gICAgICByZXR1cm4gc3RhbGVWYWwgPyBwLl9fc3RhbGVXaGlsZUZldGNoaW5nIDogKHAuX19yZXR1cm5lZCA9IHApXG4gICAgfVxuICB9XG5cbiAgZ2V0KFxuICAgIGssXG4gICAge1xuICAgICAgYWxsb3dTdGFsZSA9IHRoaXMuYWxsb3dTdGFsZSxcbiAgICAgIHVwZGF0ZUFnZU9uR2V0ID0gdGhpcy51cGRhdGVBZ2VPbkdldCxcbiAgICAgIG5vRGVsZXRlT25TdGFsZUdldCA9IHRoaXMubm9EZWxldGVPblN0YWxlR2V0LFxuICAgICAgc3RhdHVzLFxuICAgIH0gPSB7fVxuICApIHtcbiAgICBjb25zdCBpbmRleCA9IHRoaXMua2V5TWFwLmdldChrKVxuICAgIGlmIChpbmRleCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IHRoaXMudmFsTGlzdFtpbmRleF1cbiAgICAgIGNvbnN0IGZldGNoaW5nID0gdGhpcy5pc0JhY2tncm91bmRGZXRjaCh2YWx1ZSlcbiAgICAgIHRoaXMuc3RhdHVzVFRMKHN0YXR1cywgaW5kZXgpXG4gICAgICBpZiAodGhpcy5pc1N0YWxlKGluZGV4KSkge1xuICAgICAgICBpZiAoc3RhdHVzKSBzdGF0dXMuZ2V0ID0gJ3N0YWxlJ1xuICAgICAgICAvLyBkZWxldGUgb25seSBpZiBub3QgYW4gaW4tZmxpZ2h0IGJhY2tncm91bmQgZmV0Y2hcbiAgICAgICAgaWYgKCFmZXRjaGluZykge1xuICAgICAgICAgIGlmICghbm9EZWxldGVPblN0YWxlR2V0KSB7XG4gICAgICAgICAgICB0aGlzLmRlbGV0ZShrKVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoc3RhdHVzKSBzdGF0dXMucmV0dXJuZWRTdGFsZSA9IGFsbG93U3RhbGVcbiAgICAgICAgICByZXR1cm4gYWxsb3dTdGFsZSA/IHZhbHVlIDogdW5kZWZpbmVkXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHN0YXR1cykge1xuICAgICAgICAgICAgc3RhdHVzLnJldHVybmVkU3RhbGUgPVxuICAgICAgICAgICAgICBhbGxvd1N0YWxlICYmIHZhbHVlLl9fc3RhbGVXaGlsZUZldGNoaW5nICE9PSB1bmRlZmluZWRcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGFsbG93U3RhbGUgPyB2YWx1ZS5fX3N0YWxlV2hpbGVGZXRjaGluZyA6IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoc3RhdHVzKSBzdGF0dXMuZ2V0ID0gJ2hpdCdcbiAgICAgICAgLy8gaWYgd2UncmUgY3VycmVudGx5IGZldGNoaW5nIGl0LCB3ZSBkb24ndCBhY3R1YWxseSBoYXZlIGl0IHlldFxuICAgICAgICAvLyBpdCdzIG5vdCBzdGFsZSwgd2hpY2ggbWVhbnMgdGhpcyBpc24ndCBhIHN0YWxlV2hpbGVSZWZldGNoaW5nLlxuICAgICAgICAvLyBJZiBpdCdzIG5vdCBzdGFsZSwgYW5kIGZldGNoaW5nLCBBTkQgaGFzIGEgX19zdGFsZVdoaWxlRmV0Y2hpbmdcbiAgICAgICAgLy8gdmFsdWUsIHRoZW4gdGhhdCBtZWFucyB0aGUgdXNlciBmZXRjaGVkIHdpdGgge2ZvcmNlUmVmcmVzaDp0cnVlfSxcbiAgICAgICAgLy8gc28gaXQncyBzYWZlIHRvIHJldHVybiB0aGF0IHZhbHVlLlxuICAgICAgICBpZiAoZmV0Y2hpbmcpIHtcbiAgICAgICAgICByZXR1cm4gdmFsdWUuX19zdGFsZVdoaWxlRmV0Y2hpbmdcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm1vdmVUb1RhaWwoaW5kZXgpXG4gICAgICAgIGlmICh1cGRhdGVBZ2VPbkdldCkge1xuICAgICAgICAgIHRoaXMudXBkYXRlSXRlbUFnZShpbmRleClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHN0YXR1cykge1xuICAgICAgc3RhdHVzLmdldCA9ICdtaXNzJ1xuICAgIH1cbiAgfVxuXG4gIGNvbm5lY3QocCwgbikge1xuICAgIHRoaXMucHJldltuXSA9IHBcbiAgICB0aGlzLm5leHRbcF0gPSBuXG4gIH1cblxuICBtb3ZlVG9UYWlsKGluZGV4KSB7XG4gICAgLy8gaWYgdGFpbCBhbHJlYWR5LCBub3RoaW5nIHRvIGRvXG4gICAgLy8gaWYgaGVhZCwgbW92ZSBoZWFkIHRvIG5leHRbaW5kZXhdXG4gICAgLy8gZWxzZVxuICAgIC8vICAgbW92ZSBuZXh0W3ByZXZbaW5kZXhdXSB0byBuZXh0W2luZGV4XSAoaGVhZCBoYXMgbm8gcHJldilcbiAgICAvLyAgIG1vdmUgcHJldltuZXh0W2luZGV4XV0gdG8gcHJldltpbmRleF1cbiAgICAvLyBwcmV2W2luZGV4XSA9IHRhaWxcbiAgICAvLyBuZXh0W3RhaWxdID0gaW5kZXhcbiAgICAvLyB0YWlsID0gaW5kZXhcbiAgICBpZiAoaW5kZXggIT09IHRoaXMudGFpbCkge1xuICAgICAgaWYgKGluZGV4ID09PSB0aGlzLmhlYWQpIHtcbiAgICAgICAgdGhpcy5oZWFkID0gdGhpcy5uZXh0W2luZGV4XVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5jb25uZWN0KHRoaXMucHJldltpbmRleF0sIHRoaXMubmV4dFtpbmRleF0pXG4gICAgICB9XG4gICAgICB0aGlzLmNvbm5lY3QodGhpcy50YWlsLCBpbmRleClcbiAgICAgIHRoaXMudGFpbCA9IGluZGV4XG4gICAgfVxuICB9XG5cbiAgZ2V0IGRlbCgpIHtcbiAgICBkZXByZWNhdGVkTWV0aG9kKCdkZWwnLCAnZGVsZXRlJylcbiAgICByZXR1cm4gdGhpcy5kZWxldGVcbiAgfVxuXG4gIGRlbGV0ZShrKSB7XG4gICAgbGV0IGRlbGV0ZWQgPSBmYWxzZVxuICAgIGlmICh0aGlzLnNpemUgIT09IDApIHtcbiAgICAgIGNvbnN0IGluZGV4ID0gdGhpcy5rZXlNYXAuZ2V0KGspXG4gICAgICBpZiAoaW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBkZWxldGVkID0gdHJ1ZVxuICAgICAgICBpZiAodGhpcy5zaXplID09PSAxKSB7XG4gICAgICAgICAgdGhpcy5jbGVhcigpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yZW1vdmVJdGVtU2l6ZShpbmRleClcbiAgICAgICAgICBjb25zdCB2ID0gdGhpcy52YWxMaXN0W2luZGV4XVxuICAgICAgICAgIGlmICh0aGlzLmlzQmFja2dyb3VuZEZldGNoKHYpKSB7XG4gICAgICAgICAgICB2Ll9fYWJvcnRDb250cm9sbGVyLmFib3J0KG5ldyBFcnJvcignZGVsZXRlZCcpKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmRpc3Bvc2UodiwgaywgJ2RlbGV0ZScpXG4gICAgICAgICAgICBpZiAodGhpcy5kaXNwb3NlQWZ0ZXIpIHtcbiAgICAgICAgICAgICAgdGhpcy5kaXNwb3NlZC5wdXNoKFt2LCBrLCAnZGVsZXRlJ10pXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMua2V5TWFwLmRlbGV0ZShrKVxuICAgICAgICAgIHRoaXMua2V5TGlzdFtpbmRleF0gPSBudWxsXG4gICAgICAgICAgdGhpcy52YWxMaXN0W2luZGV4XSA9IG51bGxcbiAgICAgICAgICBpZiAoaW5kZXggPT09IHRoaXMudGFpbCkge1xuICAgICAgICAgICAgdGhpcy50YWlsID0gdGhpcy5wcmV2W2luZGV4XVxuICAgICAgICAgIH0gZWxzZSBpZiAoaW5kZXggPT09IHRoaXMuaGVhZCkge1xuICAgICAgICAgICAgdGhpcy5oZWFkID0gdGhpcy5uZXh0W2luZGV4XVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm5leHRbdGhpcy5wcmV2W2luZGV4XV0gPSB0aGlzLm5leHRbaW5kZXhdXG4gICAgICAgICAgICB0aGlzLnByZXZbdGhpcy5uZXh0W2luZGV4XV0gPSB0aGlzLnByZXZbaW5kZXhdXG4gICAgICAgICAgfVxuICAgICAgICAgIHRoaXMuc2l6ZS0tXG4gICAgICAgICAgdGhpcy5mcmVlLnB1c2goaW5kZXgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRoaXMuZGlzcG9zZWQpIHtcbiAgICAgIHdoaWxlICh0aGlzLmRpc3Bvc2VkLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmRpc3Bvc2VBZnRlciguLi50aGlzLmRpc3Bvc2VkLnNoaWZ0KCkpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkZWxldGVkXG4gIH1cblxuICBjbGVhcigpIHtcbiAgICBmb3IgKGNvbnN0IGluZGV4IG9mIHRoaXMucmluZGV4ZXMoeyBhbGxvd1N0YWxlOiB0cnVlIH0pKSB7XG4gICAgICBjb25zdCB2ID0gdGhpcy52YWxMaXN0W2luZGV4XVxuICAgICAgaWYgKHRoaXMuaXNCYWNrZ3JvdW5kRmV0Y2godikpIHtcbiAgICAgICAgdi5fX2Fib3J0Q29udHJvbGxlci5hYm9ydChuZXcgRXJyb3IoJ2RlbGV0ZWQnKSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IGsgPSB0aGlzLmtleUxpc3RbaW5kZXhdXG4gICAgICAgIHRoaXMuZGlzcG9zZSh2LCBrLCAnZGVsZXRlJylcbiAgICAgICAgaWYgKHRoaXMuZGlzcG9zZUFmdGVyKSB7XG4gICAgICAgICAgdGhpcy5kaXNwb3NlZC5wdXNoKFt2LCBrLCAnZGVsZXRlJ10pXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmtleU1hcC5jbGVhcigpXG4gICAgdGhpcy52YWxMaXN0LmZpbGwobnVsbClcbiAgICB0aGlzLmtleUxpc3QuZmlsbChudWxsKVxuICAgIGlmICh0aGlzLnR0bHMpIHtcbiAgICAgIHRoaXMudHRscy5maWxsKDApXG4gICAgICB0aGlzLnN0YXJ0cy5maWxsKDApXG4gICAgfVxuICAgIGlmICh0aGlzLnNpemVzKSB7XG4gICAgICB0aGlzLnNpemVzLmZpbGwoMClcbiAgICB9XG4gICAgdGhpcy5oZWFkID0gMFxuICAgIHRoaXMudGFpbCA9IDBcbiAgICB0aGlzLmluaXRpYWxGaWxsID0gMVxuICAgIHRoaXMuZnJlZS5sZW5ndGggPSAwXG4gICAgdGhpcy5jYWxjdWxhdGVkU2l6ZSA9IDBcbiAgICB0aGlzLnNpemUgPSAwXG4gICAgaWYgKHRoaXMuZGlzcG9zZWQpIHtcbiAgICAgIHdoaWxlICh0aGlzLmRpc3Bvc2VkLmxlbmd0aCkge1xuICAgICAgICB0aGlzLmRpc3Bvc2VBZnRlciguLi50aGlzLmRpc3Bvc2VkLnNoaWZ0KCkpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZ2V0IHJlc2V0KCkge1xuICAgIGRlcHJlY2F0ZWRNZXRob2QoJ3Jlc2V0JywgJ2NsZWFyJylcbiAgICByZXR1cm4gdGhpcy5jbGVhclxuICB9XG5cbiAgZ2V0IGxlbmd0aCgpIHtcbiAgICBkZXByZWNhdGVkUHJvcGVydHkoJ2xlbmd0aCcsICdzaXplJylcbiAgICByZXR1cm4gdGhpcy5zaXplXG4gIH1cblxuICBzdGF0aWMgZ2V0IEFib3J0Q29udHJvbGxlcigpIHtcbiAgICByZXR1cm4gQUNcbiAgfVxuICBzdGF0aWMgZ2V0IEFib3J0U2lnbmFsKCkge1xuICAgIHJldHVybiBBU1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gTFJVQ2FjaGVcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/lru-cache/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/cjs/protobuf.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@apollo/usage-reporting-protobuf/generated/cjs/protobuf.js ***!
  \*********************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\n\nvar $protobuf = __webpack_require__(/*! @apollo/protobufjs/minimal */ \"(rsc)/./node_modules/@apollo/protobufjs/minimal.js\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.Trace = (function() {\n\n    /**\n     * Properties of a Trace.\n     * @exports ITrace\n     * @interface ITrace\n     * @property {google.protobuf.ITimestamp|null} [startTime] Trace startTime\n     * @property {google.protobuf.ITimestamp|null} [endTime] Trace endTime\n     * @property {number|null} [durationNs] Trace durationNs\n     * @property {Trace.INode|null} [root] Trace root\n     * @property {boolean|null} [isIncomplete] Trace isIncomplete\n     * @property {string|null} [signature] Trace signature\n     * @property {string|null} [unexecutedOperationBody] Trace unexecutedOperationBody\n     * @property {string|null} [unexecutedOperationName] Trace unexecutedOperationName\n     * @property {Trace.IDetails|null} [details] Trace details\n     * @property {string|null} [clientName] Trace clientName\n     * @property {string|null} [clientVersion] Trace clientVersion\n     * @property {Trace.IHTTP|null} [http] Trace http\n     * @property {Trace.ICachePolicy|null} [cachePolicy] Trace cachePolicy\n     * @property {Trace.IQueryPlanNode|null} [queryPlan] Trace queryPlan\n     * @property {boolean|null} [fullQueryCacheHit] Trace fullQueryCacheHit\n     * @property {boolean|null} [persistedQueryHit] Trace persistedQueryHit\n     * @property {boolean|null} [persistedQueryRegister] Trace persistedQueryRegister\n     * @property {boolean|null} [registeredOperation] Trace registeredOperation\n     * @property {boolean|null} [forbiddenOperation] Trace forbiddenOperation\n     * @property {number|null} [fieldExecutionWeight] Trace fieldExecutionWeight\n     */\n\n    /**\n     * Constructs a new Trace.\n     * @exports Trace\n     * @classdesc Represents a Trace.\n     * @implements ITrace\n     * @constructor\n     * @param {ITrace=} [properties] Properties to set\n     */\n    function Trace(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Trace startTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} startTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.startTime = null;\n\n    /**\n     * Trace endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.endTime = null;\n\n    /**\n     * Trace durationNs.\n     * @member {number} durationNs\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.durationNs = 0;\n\n    /**\n     * Trace root.\n     * @member {Trace.INode|null|undefined} root\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.root = null;\n\n    /**\n     * Trace isIncomplete.\n     * @member {boolean} isIncomplete\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.isIncomplete = false;\n\n    /**\n     * Trace signature.\n     * @member {string} signature\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.signature = \"\";\n\n    /**\n     * Trace unexecutedOperationBody.\n     * @member {string} unexecutedOperationBody\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.unexecutedOperationBody = \"\";\n\n    /**\n     * Trace unexecutedOperationName.\n     * @member {string} unexecutedOperationName\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.unexecutedOperationName = \"\";\n\n    /**\n     * Trace details.\n     * @member {Trace.IDetails|null|undefined} details\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.details = null;\n\n    /**\n     * Trace clientName.\n     * @member {string} clientName\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientName = \"\";\n\n    /**\n     * Trace clientVersion.\n     * @member {string} clientVersion\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientVersion = \"\";\n\n    /**\n     * Trace http.\n     * @member {Trace.IHTTP|null|undefined} http\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.http = null;\n\n    /**\n     * Trace cachePolicy.\n     * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.cachePolicy = null;\n\n    /**\n     * Trace queryPlan.\n     * @member {Trace.IQueryPlanNode|null|undefined} queryPlan\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.queryPlan = null;\n\n    /**\n     * Trace fullQueryCacheHit.\n     * @member {boolean} fullQueryCacheHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.fullQueryCacheHit = false;\n\n    /**\n     * Trace persistedQueryHit.\n     * @member {boolean} persistedQueryHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryHit = false;\n\n    /**\n     * Trace persistedQueryRegister.\n     * @member {boolean} persistedQueryRegister\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryRegister = false;\n\n    /**\n     * Trace registeredOperation.\n     * @member {boolean} registeredOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.registeredOperation = false;\n\n    /**\n     * Trace forbiddenOperation.\n     * @member {boolean} forbiddenOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.forbiddenOperation = false;\n\n    /**\n     * Trace fieldExecutionWeight.\n     * @member {number} fieldExecutionWeight\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.fieldExecutionWeight = 0;\n\n    /**\n     * Creates a new Trace instance using the specified properties.\n     * @function create\n     * @memberof Trace\n     * @static\n     * @param {ITrace=} [properties] Properties to set\n     * @returns {Trace} Trace instance\n     */\n    Trace.create = function create(properties) {\n        return new Trace(properties);\n    };\n\n    /**\n     * Encodes the specified Trace message. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encode\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n            $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.details != null && Object.hasOwnProperty.call(message, \"details\"))\n            $root.Trace.Details.encode(message.details, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.clientVersion);\n        if (message.http != null && Object.hasOwnProperty.call(message, \"http\"))\n            $root.Trace.HTTP.encode(message.http, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n        if (message.durationNs != null && Object.hasOwnProperty.call(message, \"durationNs\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.durationNs);\n        if (message.root != null && Object.hasOwnProperty.call(message, \"root\"))\n            $root.Trace.Node.encode(message.root, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n        if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n            $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n        if (message.signature != null && Object.hasOwnProperty.call(message, \"signature\"))\n            writer.uint32(/* id 19, wireType 2 =*/154).string(message.signature);\n        if (message.fullQueryCacheHit != null && Object.hasOwnProperty.call(message, \"fullQueryCacheHit\"))\n            writer.uint32(/* id 20, wireType 0 =*/160).bool(message.fullQueryCacheHit);\n        if (message.persistedQueryHit != null && Object.hasOwnProperty.call(message, \"persistedQueryHit\"))\n            writer.uint32(/* id 21, wireType 0 =*/168).bool(message.persistedQueryHit);\n        if (message.persistedQueryRegister != null && Object.hasOwnProperty.call(message, \"persistedQueryRegister\"))\n            writer.uint32(/* id 22, wireType 0 =*/176).bool(message.persistedQueryRegister);\n        if (message.registeredOperation != null && Object.hasOwnProperty.call(message, \"registeredOperation\"))\n            writer.uint32(/* id 24, wireType 0 =*/192).bool(message.registeredOperation);\n        if (message.forbiddenOperation != null && Object.hasOwnProperty.call(message, \"forbiddenOperation\"))\n            writer.uint32(/* id 25, wireType 0 =*/200).bool(message.forbiddenOperation);\n        if (message.queryPlan != null && Object.hasOwnProperty.call(message, \"queryPlan\"))\n            $root.Trace.QueryPlanNode.encode(message.queryPlan, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();\n        if (message.unexecutedOperationBody != null && Object.hasOwnProperty.call(message, \"unexecutedOperationBody\"))\n            writer.uint32(/* id 27, wireType 2 =*/218).string(message.unexecutedOperationBody);\n        if (message.unexecutedOperationName != null && Object.hasOwnProperty.call(message, \"unexecutedOperationName\"))\n            writer.uint32(/* id 28, wireType 2 =*/226).string(message.unexecutedOperationName);\n        if (message.fieldExecutionWeight != null && Object.hasOwnProperty.call(message, \"fieldExecutionWeight\"))\n            writer.uint32(/* id 31, wireType 1 =*/249).double(message.fieldExecutionWeight);\n        if (message.isIncomplete != null && Object.hasOwnProperty.call(message, \"isIncomplete\"))\n            writer.uint32(/* id 33, wireType 0 =*/264).bool(message.isIncomplete);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Trace message, length delimited. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 4:\n                message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 11:\n                message.durationNs = reader.uint64();\n                break;\n            case 14:\n                message.root = $root.Trace.Node.decode(reader, reader.uint32());\n                break;\n            case 33:\n                message.isIncomplete = reader.bool();\n                break;\n            case 19:\n                message.signature = reader.string();\n                break;\n            case 27:\n                message.unexecutedOperationBody = reader.string();\n                break;\n            case 28:\n                message.unexecutedOperationName = reader.string();\n                break;\n            case 6:\n                message.details = $root.Trace.Details.decode(reader, reader.uint32());\n                break;\n            case 7:\n                message.clientName = reader.string();\n                break;\n            case 8:\n                message.clientVersion = reader.string();\n                break;\n            case 10:\n                message.http = $root.Trace.HTTP.decode(reader, reader.uint32());\n                break;\n            case 18:\n                message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                break;\n            case 26:\n                message.queryPlan = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                break;\n            case 20:\n                message.fullQueryCacheHit = reader.bool();\n                break;\n            case 21:\n                message.persistedQueryHit = reader.bool();\n                break;\n            case 22:\n                message.persistedQueryRegister = reader.bool();\n                break;\n            case 24:\n                message.registeredOperation = reader.bool();\n                break;\n            case 25:\n                message.forbiddenOperation = reader.bool();\n                break;\n            case 31:\n                message.fieldExecutionWeight = reader.double();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Trace message.\n     * @function verify\n     * @memberof Trace\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Trace.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.startTime);\n            if (error)\n                return \"startTime.\" + error;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (!$util.isInteger(message.durationNs) && !(message.durationNs && $util.isInteger(message.durationNs.low) && $util.isInteger(message.durationNs.high)))\n                return \"durationNs: integer|Long expected\";\n        if (message.root != null && message.hasOwnProperty(\"root\")) {\n            var error = $root.Trace.Node.verify(message.root);\n            if (error)\n                return \"root.\" + error;\n        }\n        if (message.isIncomplete != null && message.hasOwnProperty(\"isIncomplete\"))\n            if (typeof message.isIncomplete !== \"boolean\")\n                return \"isIncomplete: boolean expected\";\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            if (!$util.isString(message.signature))\n                return \"signature: string expected\";\n        if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\"))\n            if (!$util.isString(message.unexecutedOperationBody))\n                return \"unexecutedOperationBody: string expected\";\n        if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\"))\n            if (!$util.isString(message.unexecutedOperationName))\n                return \"unexecutedOperationName: string expected\";\n        if (message.details != null && message.hasOwnProperty(\"details\")) {\n            var error = $root.Trace.Details.verify(message.details);\n            if (error)\n                return \"details.\" + error;\n        }\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        if (message.http != null && message.hasOwnProperty(\"http\")) {\n            var error = $root.Trace.HTTP.verify(message.http);\n            if (error)\n                return \"http.\" + error;\n        }\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n            var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n            if (error)\n                return \"cachePolicy.\" + error;\n        }\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\")) {\n            var error = $root.Trace.QueryPlanNode.verify(message.queryPlan);\n            if (error)\n                return \"queryPlan.\" + error;\n        }\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            if (typeof message.fullQueryCacheHit !== \"boolean\")\n                return \"fullQueryCacheHit: boolean expected\";\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            if (typeof message.persistedQueryHit !== \"boolean\")\n                return \"persistedQueryHit: boolean expected\";\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            if (typeof message.persistedQueryRegister !== \"boolean\")\n                return \"persistedQueryRegister: boolean expected\";\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            if (typeof message.registeredOperation !== \"boolean\")\n                return \"registeredOperation: boolean expected\";\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            if (typeof message.forbiddenOperation !== \"boolean\")\n                return \"forbiddenOperation: boolean expected\";\n        if (message.fieldExecutionWeight != null && message.hasOwnProperty(\"fieldExecutionWeight\"))\n            if (typeof message.fieldExecutionWeight !== \"number\")\n                return \"fieldExecutionWeight: number expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a Trace message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace\n     * @static\n     * @param {Trace} message Trace\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Trace.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.endTime = null;\n            object.startTime = null;\n            object.details = null;\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n            object.http = null;\n            object.durationNs = 0;\n            object.root = null;\n            object.cachePolicy = null;\n            object.signature = \"\";\n            object.fullQueryCacheHit = false;\n            object.persistedQueryHit = false;\n            object.persistedQueryRegister = false;\n            object.registeredOperation = false;\n            object.forbiddenOperation = false;\n            object.queryPlan = null;\n            object.unexecutedOperationBody = \"\";\n            object.unexecutedOperationName = \"\";\n            object.fieldExecutionWeight = 0;\n            object.isIncomplete = false;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n            object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);\n        if (message.details != null && message.hasOwnProperty(\"details\"))\n            object.details = $root.Trace.Details.toObject(message.details, options);\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        if (message.http != null && message.hasOwnProperty(\"http\"))\n            object.http = $root.Trace.HTTP.toObject(message.http, options);\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (typeof message.durationNs === \"number\")\n                object.durationNs = options.longs === String ? String(message.durationNs) : message.durationNs;\n            else\n                object.durationNs = options.longs === String ? $util.Long.prototype.toString.call(message.durationNs) : options.longs === Number ? new $util.LongBits(message.durationNs.low >>> 0, message.durationNs.high >>> 0).toNumber(true) : message.durationNs;\n        if (message.root != null && message.hasOwnProperty(\"root\"))\n            object.root = $root.Trace.Node.toObject(message.root, options);\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n            object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            object.signature = message.signature;\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            object.fullQueryCacheHit = message.fullQueryCacheHit;\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            object.persistedQueryHit = message.persistedQueryHit;\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            object.persistedQueryRegister = message.persistedQueryRegister;\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            object.registeredOperation = message.registeredOperation;\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            object.forbiddenOperation = message.forbiddenOperation;\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\"))\n            object.queryPlan = $root.Trace.QueryPlanNode.toObject(message.queryPlan, options);\n        if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\"))\n            object.unexecutedOperationBody = message.unexecutedOperationBody;\n        if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\"))\n            object.unexecutedOperationName = message.unexecutedOperationName;\n        if (message.fieldExecutionWeight != null && message.hasOwnProperty(\"fieldExecutionWeight\"))\n            object.fieldExecutionWeight = options.json && !isFinite(message.fieldExecutionWeight) ? String(message.fieldExecutionWeight) : message.fieldExecutionWeight;\n        if (message.isIncomplete != null && message.hasOwnProperty(\"isIncomplete\"))\n            object.isIncomplete = message.isIncomplete;\n        return object;\n    };\n\n    /**\n     * Converts this Trace to JSON.\n     * @function toJSON\n     * @memberof Trace\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Trace.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    Trace.CachePolicy = (function() {\n\n        /**\n         * Properties of a CachePolicy.\n         * @memberof Trace\n         * @interface ICachePolicy\n         * @property {Trace.CachePolicy.Scope|null} [scope] CachePolicy scope\n         * @property {number|null} [maxAgeNs] CachePolicy maxAgeNs\n         */\n\n        /**\n         * Constructs a new CachePolicy.\n         * @memberof Trace\n         * @classdesc Represents a CachePolicy.\n         * @implements ICachePolicy\n         * @constructor\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         */\n        function CachePolicy(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CachePolicy scope.\n         * @member {Trace.CachePolicy.Scope} scope\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.scope = 0;\n\n        /**\n         * CachePolicy maxAgeNs.\n         * @member {number} maxAgeNs\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.maxAgeNs = 0;\n\n        /**\n         * Creates a new CachePolicy instance using the specified properties.\n         * @function create\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         * @returns {Trace.CachePolicy} CachePolicy instance\n         */\n        CachePolicy.create = function create(properties) {\n            return new CachePolicy(properties);\n        };\n\n        /**\n         * Encodes the specified CachePolicy message. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.scope);\n            if (message.maxAgeNs != null && Object.hasOwnProperty.call(message, \"maxAgeNs\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.maxAgeNs);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CachePolicy message, length delimited. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.CachePolicy();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.scope = reader.int32();\n                    break;\n                case 2:\n                    message.maxAgeNs = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CachePolicy message.\n         * @function verify\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CachePolicy.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                switch (message.scope) {\n                default:\n                    return \"scope: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (!$util.isInteger(message.maxAgeNs) && !(message.maxAgeNs && $util.isInteger(message.maxAgeNs.low) && $util.isInteger(message.maxAgeNs.high)))\n                    return \"maxAgeNs: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a CachePolicy message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.CachePolicy} message CachePolicy\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CachePolicy.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.scope = options.enums === String ? \"UNKNOWN\" : 0;\n                object.maxAgeNs = 0;\n            }\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                object.scope = options.enums === String ? $root.Trace.CachePolicy.Scope[message.scope] : message.scope;\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (typeof message.maxAgeNs === \"number\")\n                    object.maxAgeNs = options.longs === String ? String(message.maxAgeNs) : message.maxAgeNs;\n                else\n                    object.maxAgeNs = options.longs === String ? $util.Long.prototype.toString.call(message.maxAgeNs) : options.longs === Number ? new $util.LongBits(message.maxAgeNs.low >>> 0, message.maxAgeNs.high >>> 0).toNumber() : message.maxAgeNs;\n            return object;\n        };\n\n        /**\n         * Converts this CachePolicy to JSON.\n         * @function toJSON\n         * @memberof Trace.CachePolicy\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CachePolicy.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Scope enum.\n         * @name Trace.CachePolicy.Scope\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} PUBLIC=1 PUBLIC value\n         * @property {number} PRIVATE=2 PRIVATE value\n         */\n        CachePolicy.Scope = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"PUBLIC\"] = 1;\n            values[valuesById[2] = \"PRIVATE\"] = 2;\n            return values;\n        })();\n\n        return CachePolicy;\n    })();\n\n    Trace.Details = (function() {\n\n        /**\n         * Properties of a Details.\n         * @memberof Trace\n         * @interface IDetails\n         * @property {Object.<string,string>|null} [variablesJson] Details variablesJson\n         * @property {string|null} [operationName] Details operationName\n         */\n\n        /**\n         * Constructs a new Details.\n         * @memberof Trace\n         * @classdesc Represents a Details.\n         * @implements IDetails\n         * @constructor\n         * @param {Trace.IDetails=} [properties] Properties to set\n         */\n        function Details(properties) {\n            this.variablesJson = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Details variablesJson.\n         * @member {Object.<string,string>} variablesJson\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.variablesJson = $util.emptyObject;\n\n        /**\n         * Details operationName.\n         * @member {string} operationName\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.operationName = \"\";\n\n        /**\n         * Creates a new Details instance using the specified properties.\n         * @function create\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails=} [properties] Properties to set\n         * @returns {Trace.Details} Details instance\n         */\n        Details.create = function create(properties) {\n            return new Details(properties);\n        };\n\n        /**\n         * Encodes the specified Details message. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.operationName != null && Object.hasOwnProperty.call(message, \"operationName\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.operationName);\n            if (message.variablesJson != null && Object.hasOwnProperty.call(message, \"variablesJson\"))\n                for (var keys = Object.keys(message.variablesJson), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.variablesJson[keys[i]]).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Details message, length delimited. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Details(), key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 4:\n                    reader.skip().pos++;\n                    if (message.variablesJson === $util.emptyObject)\n                        message.variablesJson = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.variablesJson[key] = reader.string();\n                    break;\n                case 3:\n                    message.operationName = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Details message.\n         * @function verify\n         * @memberof Trace.Details\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Details.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.variablesJson != null && message.hasOwnProperty(\"variablesJson\")) {\n                if (!$util.isObject(message.variablesJson))\n                    return \"variablesJson: object expected\";\n                var key = Object.keys(message.variablesJson);\n                for (var i = 0; i < key.length; ++i)\n                    if (!$util.isString(message.variablesJson[key[i]]))\n                        return \"variablesJson: string{k:string} expected\";\n            }\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                if (!$util.isString(message.operationName))\n                    return \"operationName: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Details message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.Details} message Details\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Details.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults)\n                object.variablesJson = {};\n            if (options.defaults)\n                object.operationName = \"\";\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                object.operationName = message.operationName;\n            var keys2;\n            if (message.variablesJson && (keys2 = Object.keys(message.variablesJson)).length) {\n                object.variablesJson = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.variablesJson[keys2[j]] = message.variablesJson[keys2[j]];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Details to JSON.\n         * @function toJSON\n         * @memberof Trace.Details\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Details.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Details;\n    })();\n\n    Trace.Error = (function() {\n\n        /**\n         * Properties of an Error.\n         * @memberof Trace\n         * @interface IError\n         * @property {string|null} [message] Error message\n         * @property {Array.<Trace.ILocation>|null} [location] Error location\n         * @property {number|null} [timeNs] Error timeNs\n         * @property {string|null} [json] Error json\n         */\n\n        /**\n         * Constructs a new Error.\n         * @memberof Trace\n         * @classdesc Represents an Error.\n         * @implements IError\n         * @constructor\n         * @param {Trace.IError=} [properties] Properties to set\n         */\n        function Error(properties) {\n            this.location = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Error message.\n         * @member {string} message\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.message = \"\";\n\n        /**\n         * Error location.\n         * @member {Array.<Trace.ILocation>} location\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.location = $util.emptyArray;\n\n        /**\n         * Error timeNs.\n         * @member {number} timeNs\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.timeNs = 0;\n\n        /**\n         * Error json.\n         * @member {string} json\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.json = \"\";\n\n        /**\n         * Creates a new Error instance using the specified properties.\n         * @function create\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError=} [properties] Properties to set\n         * @returns {Trace.Error} Error instance\n         */\n        Error.create = function create(properties) {\n            return new Error(properties);\n        };\n\n        /**\n         * Encodes the specified Error message. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);\n            if (message.location != null && message.location.length)\n                for (var i = 0; i < message.location.length; ++i)\n                    $root.Trace.Location.encode(message.location[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.timeNs != null && Object.hasOwnProperty.call(message, \"timeNs\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.timeNs);\n            if (message.json != null && Object.hasOwnProperty.call(message, \"json\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.json);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Error message, length delimited. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Error();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.message = reader.string();\n                    break;\n                case 2:\n                    if (!(message.location && message.location.length))\n                        message.location = [];\n                    message.location.push($root.Trace.Location.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.timeNs = reader.uint64();\n                    break;\n                case 4:\n                    message.json = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Error message.\n         * @function verify\n         * @memberof Trace.Error\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Error.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                if (!$util.isString(message.message))\n                    return \"message: string expected\";\n            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                if (!Array.isArray(message.location))\n                    return \"location: array expected\";\n                for (var i = 0; i < message.location.length; ++i) {\n                    var error = $root.Trace.Location.verify(message.location[i]);\n                    if (error)\n                        return \"location.\" + error;\n                }\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (!$util.isInteger(message.timeNs) && !(message.timeNs && $util.isInteger(message.timeNs.low) && $util.isInteger(message.timeNs.high)))\n                    return \"timeNs: integer|Long expected\";\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                if (!$util.isString(message.json))\n                    return \"json: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from an Error message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.Error} message Error\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Error.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.location = [];\n            if (options.defaults) {\n                object.message = \"\";\n                object.timeNs = 0;\n                object.json = \"\";\n            }\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            if (message.location && message.location.length) {\n                object.location = [];\n                for (var j = 0; j < message.location.length; ++j)\n                    object.location[j] = $root.Trace.Location.toObject(message.location[j], options);\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (typeof message.timeNs === \"number\")\n                    object.timeNs = options.longs === String ? String(message.timeNs) : message.timeNs;\n                else\n                    object.timeNs = options.longs === String ? $util.Long.prototype.toString.call(message.timeNs) : options.longs === Number ? new $util.LongBits(message.timeNs.low >>> 0, message.timeNs.high >>> 0).toNumber(true) : message.timeNs;\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                object.json = message.json;\n            return object;\n        };\n\n        /**\n         * Converts this Error to JSON.\n         * @function toJSON\n         * @memberof Trace.Error\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Error.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Error;\n    })();\n\n    Trace.HTTP = (function() {\n\n        /**\n         * Properties of a HTTP.\n         * @memberof Trace\n         * @interface IHTTP\n         * @property {Trace.HTTP.Method|null} [method] HTTP method\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [requestHeaders] HTTP requestHeaders\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [responseHeaders] HTTP responseHeaders\n         * @property {number|null} [statusCode] HTTP statusCode\n         */\n\n        /**\n         * Constructs a new HTTP.\n         * @memberof Trace\n         * @classdesc Represents a HTTP.\n         * @implements IHTTP\n         * @constructor\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         */\n        function HTTP(properties) {\n            this.requestHeaders = {};\n            this.responseHeaders = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * HTTP method.\n         * @member {Trace.HTTP.Method} method\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.method = 0;\n\n        /**\n         * HTTP requestHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} requestHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.requestHeaders = $util.emptyObject;\n\n        /**\n         * HTTP responseHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} responseHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.responseHeaders = $util.emptyObject;\n\n        /**\n         * HTTP statusCode.\n         * @member {number} statusCode\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.statusCode = 0;\n\n        /**\n         * Creates a new HTTP instance using the specified properties.\n         * @function create\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         * @returns {Trace.HTTP} HTTP instance\n         */\n        HTTP.create = function create(properties) {\n            return new HTTP(properties);\n        };\n\n        /**\n         * Encodes the specified HTTP message. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.method != null && Object.hasOwnProperty.call(message, \"method\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.method);\n            if (message.requestHeaders != null && Object.hasOwnProperty.call(message, \"requestHeaders\"))\n                for (var keys = Object.keys(message.requestHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.requestHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.responseHeaders != null && Object.hasOwnProperty.call(message, \"responseHeaders\"))\n                for (var keys = Object.keys(message.responseHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.responseHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.statusCode != null && Object.hasOwnProperty.call(message, \"statusCode\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.statusCode);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified HTTP message, length delimited. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP(), key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.method = reader.int32();\n                    break;\n                case 4:\n                    reader.skip().pos++;\n                    if (message.requestHeaders === $util.emptyObject)\n                        message.requestHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.requestHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    reader.skip().pos++;\n                    if (message.responseHeaders === $util.emptyObject)\n                        message.responseHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.responseHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.statusCode = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a HTTP message.\n         * @function verify\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        HTTP.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                switch (message.method) {\n                default:\n                    return \"method: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                    break;\n                }\n            if (message.requestHeaders != null && message.hasOwnProperty(\"requestHeaders\")) {\n                if (!$util.isObject(message.requestHeaders))\n                    return \"requestHeaders: object expected\";\n                var key = Object.keys(message.requestHeaders);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.Trace.HTTP.Values.verify(message.requestHeaders[key[i]]);\n                    if (error)\n                        return \"requestHeaders.\" + error;\n                }\n            }\n            if (message.responseHeaders != null && message.hasOwnProperty(\"responseHeaders\")) {\n                if (!$util.isObject(message.responseHeaders))\n                    return \"responseHeaders: object expected\";\n                var key = Object.keys(message.responseHeaders);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.Trace.HTTP.Values.verify(message.responseHeaders[key[i]]);\n                    if (error)\n                        return \"responseHeaders.\" + error;\n                }\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                if (!$util.isInteger(message.statusCode))\n                    return \"statusCode: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a HTTP message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.HTTP} message HTTP\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        HTTP.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults) {\n                object.requestHeaders = {};\n                object.responseHeaders = {};\n            }\n            if (options.defaults) {\n                object.method = options.enums === String ? \"UNKNOWN\" : 0;\n                object.statusCode = 0;\n            }\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                object.method = options.enums === String ? $root.Trace.HTTP.Method[message.method] : message.method;\n            var keys2;\n            if (message.requestHeaders && (keys2 = Object.keys(message.requestHeaders)).length) {\n                object.requestHeaders = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.requestHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.requestHeaders[keys2[j]], options);\n            }\n            if (message.responseHeaders && (keys2 = Object.keys(message.responseHeaders)).length) {\n                object.responseHeaders = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.responseHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.responseHeaders[keys2[j]], options);\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                object.statusCode = message.statusCode;\n            return object;\n        };\n\n        /**\n         * Converts this HTTP to JSON.\n         * @function toJSON\n         * @memberof Trace.HTTP\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        HTTP.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        HTTP.Values = (function() {\n\n            /**\n             * Properties of a Values.\n             * @memberof Trace.HTTP\n             * @interface IValues\n             * @property {Array.<string>|null} [value] Values value\n             */\n\n            /**\n             * Constructs a new Values.\n             * @memberof Trace.HTTP\n             * @classdesc Represents a Values.\n             * @implements IValues\n             * @constructor\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             */\n            function Values(properties) {\n                this.value = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Values value.\n             * @member {Array.<string>} value\n             * @memberof Trace.HTTP.Values\n             * @instance\n             */\n            Values.prototype.value = $util.emptyArray;\n\n            /**\n             * Creates a new Values instance using the specified properties.\n             * @function create\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             * @returns {Trace.HTTP.Values} Values instance\n             */\n            Values.create = function create(properties) {\n                return new Values(properties);\n            };\n\n            /**\n             * Encodes the specified Values message. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.value != null && message.value.length)\n                    for (var i = 0; i < message.value.length; ++i)\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.value[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Values message, length delimited. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP.Values();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.value && message.value.length))\n                            message.value = [];\n                        message.value.push(reader.string());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Values message.\n             * @function verify\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Values.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value))\n                        return \"value: array expected\";\n                    for (var i = 0; i < message.value.length; ++i)\n                        if (!$util.isString(message.value[i]))\n                            return \"value: string[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a Values message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.Values} message Values\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Values.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.value = [];\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (var j = 0; j < message.value.length; ++j)\n                        object.value[j] = message.value[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Values to JSON.\n             * @function toJSON\n             * @memberof Trace.HTTP.Values\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Values.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Values;\n        })();\n\n        /**\n         * Method enum.\n         * @name Trace.HTTP.Method\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} OPTIONS=1 OPTIONS value\n         * @property {number} GET=2 GET value\n         * @property {number} HEAD=3 HEAD value\n         * @property {number} POST=4 POST value\n         * @property {number} PUT=5 PUT value\n         * @property {number} DELETE=6 DELETE value\n         * @property {number} TRACE=7 TRACE value\n         * @property {number} CONNECT=8 CONNECT value\n         * @property {number} PATCH=9 PATCH value\n         */\n        HTTP.Method = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"OPTIONS\"] = 1;\n            values[valuesById[2] = \"GET\"] = 2;\n            values[valuesById[3] = \"HEAD\"] = 3;\n            values[valuesById[4] = \"POST\"] = 4;\n            values[valuesById[5] = \"PUT\"] = 5;\n            values[valuesById[6] = \"DELETE\"] = 6;\n            values[valuesById[7] = \"TRACE\"] = 7;\n            values[valuesById[8] = \"CONNECT\"] = 8;\n            values[valuesById[9] = \"PATCH\"] = 9;\n            return values;\n        })();\n\n        return HTTP;\n    })();\n\n    Trace.Location = (function() {\n\n        /**\n         * Properties of a Location.\n         * @memberof Trace\n         * @interface ILocation\n         * @property {number|null} [line] Location line\n         * @property {number|null} [column] Location column\n         */\n\n        /**\n         * Constructs a new Location.\n         * @memberof Trace\n         * @classdesc Represents a Location.\n         * @implements ILocation\n         * @constructor\n         * @param {Trace.ILocation=} [properties] Properties to set\n         */\n        function Location(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Location line.\n         * @member {number} line\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.line = 0;\n\n        /**\n         * Location column.\n         * @member {number} column\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.column = 0;\n\n        /**\n         * Creates a new Location instance using the specified properties.\n         * @function create\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation=} [properties] Properties to set\n         * @returns {Trace.Location} Location instance\n         */\n        Location.create = function create(properties) {\n            return new Location(properties);\n        };\n\n        /**\n         * Encodes the specified Location message. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.line != null && Object.hasOwnProperty.call(message, \"line\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.line);\n            if (message.column != null && Object.hasOwnProperty.call(message, \"column\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.column);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Location message, length delimited. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Location();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.line = reader.uint32();\n                    break;\n                case 2:\n                    message.column = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Location message.\n         * @function verify\n         * @memberof Trace.Location\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Location.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                if (!$util.isInteger(message.line))\n                    return \"line: integer expected\";\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                if (!$util.isInteger(message.column))\n                    return \"column: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Location message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.Location} message Location\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Location.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.line = 0;\n                object.column = 0;\n            }\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                object.line = message.line;\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                object.column = message.column;\n            return object;\n        };\n\n        /**\n         * Converts this Location to JSON.\n         * @function toJSON\n         * @memberof Trace.Location\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Location.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Location;\n    })();\n\n    Trace.Node = (function() {\n\n        /**\n         * Properties of a Node.\n         * @memberof Trace\n         * @interface INode\n         * @property {string|null} [responseName] Node responseName\n         * @property {number|null} [index] Node index\n         * @property {string|null} [originalFieldName] Node originalFieldName\n         * @property {string|null} [type] Node type\n         * @property {string|null} [parentType] Node parentType\n         * @property {Trace.ICachePolicy|null} [cachePolicy] Node cachePolicy\n         * @property {number|null} [startTime] Node startTime\n         * @property {number|null} [endTime] Node endTime\n         * @property {Array.<Trace.IError>|null} [error] Node error\n         * @property {Array.<Trace.INode>|null} [child] Node child\n         */\n\n        /**\n         * Constructs a new Node.\n         * @memberof Trace\n         * @classdesc Represents a Node.\n         * @implements INode\n         * @constructor\n         * @param {Trace.INode=} [properties] Properties to set\n         */\n        function Node(properties) {\n            this.error = [];\n            this.child = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Node responseName.\n         * @member {string} responseName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.responseName = \"\";\n\n        /**\n         * Node index.\n         * @member {number} index\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.index = 0;\n\n        /**\n         * Node originalFieldName.\n         * @member {string} originalFieldName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.originalFieldName = \"\";\n\n        /**\n         * Node type.\n         * @member {string} type\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.type = \"\";\n\n        /**\n         * Node parentType.\n         * @member {string} parentType\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.parentType = \"\";\n\n        /**\n         * Node cachePolicy.\n         * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.cachePolicy = null;\n\n        /**\n         * Node startTime.\n         * @member {number} startTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.startTime = 0;\n\n        /**\n         * Node endTime.\n         * @member {number} endTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.endTime = 0;\n\n        /**\n         * Node error.\n         * @member {Array.<Trace.IError>} error\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.error = $util.emptyArray;\n\n        /**\n         * Node child.\n         * @member {Array.<Trace.INode>} child\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.child = $util.emptyArray;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * Node id.\n         * @member {\"responseName\"|\"index\"|undefined} id\n         * @memberof Trace.Node\n         * @instance\n         */\n        Object.defineProperty(Node.prototype, \"id\", {\n            get: $util.oneOfGetter($oneOfFields = [\"responseName\", \"index\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Node instance using the specified properties.\n         * @function create\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode=} [properties] Properties to set\n         * @returns {Trace.Node} Node instance\n         */\n        Node.create = function create(properties) {\n            return new Node(properties);\n        };\n\n        /**\n         * Encodes the specified Node message. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.responseName != null && Object.hasOwnProperty.call(message, \"responseName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.responseName);\n            if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);\n            if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n                $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.startTime);\n            if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.endTime);\n            if (message.error != null && message.error.length)\n                for (var i = 0; i < message.error.length; ++i)\n                    $root.Trace.Error.encode(message.error[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.child != null && message.child.length)\n                for (var i = 0; i < message.child.length; ++i)\n                    $root.Trace.Node.encode(message.child[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.parentType != null && Object.hasOwnProperty.call(message, \"parentType\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.parentType);\n            if (message.originalFieldName != null && Object.hasOwnProperty.call(message, \"originalFieldName\"))\n                writer.uint32(/* id 14, wireType 2 =*/114).string(message.originalFieldName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Node message, length delimited. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Node();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.responseName = reader.string();\n                    break;\n                case 2:\n                    message.index = reader.uint32();\n                    break;\n                case 14:\n                    message.originalFieldName = reader.string();\n                    break;\n                case 3:\n                    message.type = reader.string();\n                    break;\n                case 13:\n                    message.parentType = reader.string();\n                    break;\n                case 5:\n                    message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.startTime = reader.uint64();\n                    break;\n                case 9:\n                    message.endTime = reader.uint64();\n                    break;\n                case 11:\n                    if (!(message.error && message.error.length))\n                        message.error = [];\n                    message.error.push($root.Trace.Error.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.child && message.child.length))\n                        message.child = [];\n                    message.child.push($root.Trace.Node.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Node message.\n         * @function verify\n         * @memberof Trace.Node\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Node.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                properties.id = 1;\n                if (!$util.isString(message.responseName))\n                    return \"responseName: string expected\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                if (properties.id === 1)\n                    return \"id: multiple values\";\n                properties.id = 1;\n                if (!$util.isInteger(message.index))\n                    return \"index: integer expected\";\n            }\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                if (!$util.isString(message.originalFieldName))\n                    return \"originalFieldName: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                if (!$util.isString(message.type))\n                    return \"type: string expected\";\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                if (!$util.isString(message.parentType))\n                    return \"parentType: string expected\";\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n                var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n                if (error)\n                    return \"cachePolicy.\" + error;\n            }\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))\n                    return \"startTime: integer|Long expected\";\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))\n                    return \"endTime: integer|Long expected\";\n            if (message.error != null && message.hasOwnProperty(\"error\")) {\n                if (!Array.isArray(message.error))\n                    return \"error: array expected\";\n                for (var i = 0; i < message.error.length; ++i) {\n                    var error = $root.Trace.Error.verify(message.error[i]);\n                    if (error)\n                        return \"error.\" + error;\n                }\n            }\n            if (message.child != null && message.hasOwnProperty(\"child\")) {\n                if (!Array.isArray(message.child))\n                    return \"child: array expected\";\n                for (var i = 0; i < message.child.length; ++i) {\n                    var error = $root.Trace.Node.verify(message.child[i]);\n                    if (error)\n                        return \"child.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Node message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.Node} message Node\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Node.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.error = [];\n                object.child = [];\n            }\n            if (options.defaults) {\n                object.type = \"\";\n                object.cachePolicy = null;\n                object.startTime = 0;\n                object.endTime = 0;\n                object.parentType = \"\";\n                object.originalFieldName = \"\";\n            }\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                object.responseName = message.responseName;\n                if (options.oneofs)\n                    object.id = \"responseName\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                object.index = message.index;\n                if (options.oneofs)\n                    object.id = \"index\";\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = message.type;\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n                object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (typeof message.startTime === \"number\")\n                    object.startTime = options.longs === String ? String(message.startTime) : message.startTime;\n                else\n                    object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (typeof message.endTime === \"number\")\n                    object.endTime = options.longs === String ? String(message.endTime) : message.endTime;\n                else\n                    object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber(true) : message.endTime;\n            if (message.error && message.error.length) {\n                object.error = [];\n                for (var j = 0; j < message.error.length; ++j)\n                    object.error[j] = $root.Trace.Error.toObject(message.error[j], options);\n            }\n            if (message.child && message.child.length) {\n                object.child = [];\n                for (var j = 0; j < message.child.length; ++j)\n                    object.child[j] = $root.Trace.Node.toObject(message.child[j], options);\n            }\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                object.parentType = message.parentType;\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                object.originalFieldName = message.originalFieldName;\n            return object;\n        };\n\n        /**\n         * Converts this Node to JSON.\n         * @function toJSON\n         * @memberof Trace.Node\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Node.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Node;\n    })();\n\n    Trace.QueryPlanNode = (function() {\n\n        /**\n         * Properties of a QueryPlanNode.\n         * @memberof Trace\n         * @interface IQueryPlanNode\n         * @property {Trace.QueryPlanNode.ISequenceNode|null} [sequence] QueryPlanNode sequence\n         * @property {Trace.QueryPlanNode.IParallelNode|null} [parallel] QueryPlanNode parallel\n         * @property {Trace.QueryPlanNode.IFetchNode|null} [fetch] QueryPlanNode fetch\n         * @property {Trace.QueryPlanNode.IFlattenNode|null} [flatten] QueryPlanNode flatten\n         * @property {Trace.QueryPlanNode.IDeferNode|null} [defer] QueryPlanNode defer\n         * @property {Trace.QueryPlanNode.IConditionNode|null} [condition] QueryPlanNode condition\n         */\n\n        /**\n         * Constructs a new QueryPlanNode.\n         * @memberof Trace\n         * @classdesc Represents a QueryPlanNode.\n         * @implements IQueryPlanNode\n         * @constructor\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         */\n        function QueryPlanNode(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * QueryPlanNode sequence.\n         * @member {Trace.QueryPlanNode.ISequenceNode|null|undefined} sequence\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.sequence = null;\n\n        /**\n         * QueryPlanNode parallel.\n         * @member {Trace.QueryPlanNode.IParallelNode|null|undefined} parallel\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.parallel = null;\n\n        /**\n         * QueryPlanNode fetch.\n         * @member {Trace.QueryPlanNode.IFetchNode|null|undefined} fetch\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.fetch = null;\n\n        /**\n         * QueryPlanNode flatten.\n         * @member {Trace.QueryPlanNode.IFlattenNode|null|undefined} flatten\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.flatten = null;\n\n        /**\n         * QueryPlanNode defer.\n         * @member {Trace.QueryPlanNode.IDeferNode|null|undefined} defer\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.defer = null;\n\n        /**\n         * QueryPlanNode condition.\n         * @member {Trace.QueryPlanNode.IConditionNode|null|undefined} condition\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.condition = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * QueryPlanNode node.\n         * @member {\"sequence\"|\"parallel\"|\"fetch\"|\"flatten\"|\"defer\"|\"condition\"|undefined} node\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        Object.defineProperty(QueryPlanNode.prototype, \"node\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sequence\", \"parallel\", \"fetch\", \"flatten\", \"defer\", \"condition\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new QueryPlanNode instance using the specified properties.\n         * @function create\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         * @returns {Trace.QueryPlanNode} QueryPlanNode instance\n         */\n        QueryPlanNode.create = function create(properties) {\n            return new QueryPlanNode(properties);\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.sequence != null && Object.hasOwnProperty.call(message, \"sequence\"))\n                $root.Trace.QueryPlanNode.SequenceNode.encode(message.sequence, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.parallel != null && Object.hasOwnProperty.call(message, \"parallel\"))\n                $root.Trace.QueryPlanNode.ParallelNode.encode(message.parallel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.fetch != null && Object.hasOwnProperty.call(message, \"fetch\"))\n                $root.Trace.QueryPlanNode.FetchNode.encode(message.fetch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.flatten != null && Object.hasOwnProperty.call(message, \"flatten\"))\n                $root.Trace.QueryPlanNode.FlattenNode.encode(message.flatten, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.defer != null && Object.hasOwnProperty.call(message, \"defer\"))\n                $root.Trace.QueryPlanNode.DeferNode.encode(message.defer, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.condition != null && Object.hasOwnProperty.call(message, \"condition\"))\n                $root.Trace.QueryPlanNode.ConditionNode.encode(message.condition, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.sequence = $root.Trace.QueryPlanNode.SequenceNode.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.parallel = $root.Trace.QueryPlanNode.ParallelNode.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.fetch = $root.Trace.QueryPlanNode.FetchNode.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.flatten = $root.Trace.QueryPlanNode.FlattenNode.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.defer = $root.Trace.QueryPlanNode.DeferNode.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.condition = $root.Trace.QueryPlanNode.ConditionNode.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a QueryPlanNode message.\n         * @function verify\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        QueryPlanNode.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.SequenceNode.verify(message.sequence);\n                    if (error)\n                        return \"sequence.\" + error;\n                }\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.ParallelNode.verify(message.parallel);\n                    if (error)\n                        return \"parallel.\" + error;\n                }\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.FetchNode.verify(message.fetch);\n                    if (error)\n                        return \"fetch.\" + error;\n                }\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.FlattenNode.verify(message.flatten);\n                    if (error)\n                        return \"flatten.\" + error;\n                }\n            }\n            if (message.defer != null && message.hasOwnProperty(\"defer\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.DeferNode.verify(message.defer);\n                    if (error)\n                        return \"defer.\" + error;\n                }\n            }\n            if (message.condition != null && message.hasOwnProperty(\"condition\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.ConditionNode.verify(message.condition);\n                    if (error)\n                        return \"condition.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a QueryPlanNode message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.QueryPlanNode} message QueryPlanNode\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        QueryPlanNode.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                object.sequence = $root.Trace.QueryPlanNode.SequenceNode.toObject(message.sequence, options);\n                if (options.oneofs)\n                    object.node = \"sequence\";\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                object.parallel = $root.Trace.QueryPlanNode.ParallelNode.toObject(message.parallel, options);\n                if (options.oneofs)\n                    object.node = \"parallel\";\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                object.fetch = $root.Trace.QueryPlanNode.FetchNode.toObject(message.fetch, options);\n                if (options.oneofs)\n                    object.node = \"fetch\";\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                object.flatten = $root.Trace.QueryPlanNode.FlattenNode.toObject(message.flatten, options);\n                if (options.oneofs)\n                    object.node = \"flatten\";\n            }\n            if (message.defer != null && message.hasOwnProperty(\"defer\")) {\n                object.defer = $root.Trace.QueryPlanNode.DeferNode.toObject(message.defer, options);\n                if (options.oneofs)\n                    object.node = \"defer\";\n            }\n            if (message.condition != null && message.hasOwnProperty(\"condition\")) {\n                object.condition = $root.Trace.QueryPlanNode.ConditionNode.toObject(message.condition, options);\n                if (options.oneofs)\n                    object.node = \"condition\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this QueryPlanNode to JSON.\n         * @function toJSON\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        QueryPlanNode.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        QueryPlanNode.SequenceNode = (function() {\n\n            /**\n             * Properties of a SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface ISequenceNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] SequenceNode nodes\n             */\n\n            /**\n             * Constructs a new SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a SequenceNode.\n             * @implements ISequenceNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             */\n            function SequenceNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SequenceNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             */\n            SequenceNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new SequenceNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode instance\n             */\n            SequenceNode.create = function create(properties) {\n                return new SequenceNode(properties);\n            };\n\n            /**\n             * Encodes the specified SequenceNode message. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (var i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SequenceNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.SequenceNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SequenceNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SequenceNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (var i = 0; i < message.nodes.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a SequenceNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.SequenceNode} message SequenceNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SequenceNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (var j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this SequenceNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SequenceNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return SequenceNode;\n        })();\n\n        QueryPlanNode.ParallelNode = (function() {\n\n            /**\n             * Properties of a ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IParallelNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] ParallelNode nodes\n             */\n\n            /**\n             * Constructs a new ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ParallelNode.\n             * @implements IParallelNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             */\n            function ParallelNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ParallelNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             */\n            ParallelNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new ParallelNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode instance\n             */\n            ParallelNode.create = function create(properties) {\n                return new ParallelNode(properties);\n            };\n\n            /**\n             * Encodes the specified ParallelNode message. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (var i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ParallelNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ParallelNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ParallelNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ParallelNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (var i = 0; i < message.nodes.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ParallelNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.ParallelNode} message ParallelNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ParallelNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (var j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ParallelNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ParallelNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ParallelNode;\n        })();\n\n        QueryPlanNode.FetchNode = (function() {\n\n            /**\n             * Properties of a FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFetchNode\n             * @property {string|null} [serviceName] FetchNode serviceName\n             * @property {boolean|null} [traceParsingFailed] FetchNode traceParsingFailed\n             * @property {ITrace|null} [trace] FetchNode trace\n             * @property {number|null} [sentTimeOffset] FetchNode sentTimeOffset\n             * @property {google.protobuf.ITimestamp|null} [sentTime] FetchNode sentTime\n             * @property {google.protobuf.ITimestamp|null} [receivedTime] FetchNode receivedTime\n             */\n\n            /**\n             * Constructs a new FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FetchNode.\n             * @implements IFetchNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             */\n            function FetchNode(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FetchNode serviceName.\n             * @member {string} serviceName\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.serviceName = \"\";\n\n            /**\n             * FetchNode traceParsingFailed.\n             * @member {boolean} traceParsingFailed\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.traceParsingFailed = false;\n\n            /**\n             * FetchNode trace.\n             * @member {ITrace|null|undefined} trace\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.trace = null;\n\n            /**\n             * FetchNode sentTimeOffset.\n             * @member {number} sentTimeOffset\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTimeOffset = 0;\n\n            /**\n             * FetchNode sentTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} sentTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTime = null;\n\n            /**\n             * FetchNode receivedTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} receivedTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.receivedTime = null;\n\n            /**\n             * Creates a new FetchNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode instance\n             */\n            FetchNode.create = function create(properties) {\n                return new FetchNode(properties);\n            };\n\n            /**\n             * Encodes the specified FetchNode message. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.serviceName != null && Object.hasOwnProperty.call(message, \"serviceName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);\n                if (message.traceParsingFailed != null && Object.hasOwnProperty.call(message, \"traceParsingFailed\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.traceParsingFailed);\n                if (message.trace != null && Object.hasOwnProperty.call(message, \"trace\"))\n                    $root.Trace.encode(message.trace, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.sentTimeOffset != null && Object.hasOwnProperty.call(message, \"sentTimeOffset\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.sentTimeOffset);\n                if (message.sentTime != null && Object.hasOwnProperty.call(message, \"sentTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.sentTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                if (message.receivedTime != null && Object.hasOwnProperty.call(message, \"receivedTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.receivedTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FetchNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FetchNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.serviceName = reader.string();\n                        break;\n                    case 2:\n                        message.traceParsingFailed = reader.bool();\n                        break;\n                    case 3:\n                        message.trace = $root.Trace.decode(reader, reader.uint32());\n                        break;\n                    case 4:\n                        message.sentTimeOffset = reader.uint64();\n                        break;\n                    case 5:\n                        message.sentTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    case 6:\n                        message.receivedTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FetchNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FetchNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    if (!$util.isString(message.serviceName))\n                        return \"serviceName: string expected\";\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    if (typeof message.traceParsingFailed !== \"boolean\")\n                        return \"traceParsingFailed: boolean expected\";\n                if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n                    var error = $root.Trace.verify(message.trace);\n                    if (error)\n                        return \"trace.\" + error;\n                }\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (!$util.isInteger(message.sentTimeOffset) && !(message.sentTimeOffset && $util.isInteger(message.sentTimeOffset.low) && $util.isInteger(message.sentTimeOffset.high)))\n                        return \"sentTimeOffset: integer|Long expected\";\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\")) {\n                    var error = $root.google.protobuf.Timestamp.verify(message.sentTime);\n                    if (error)\n                        return \"sentTime.\" + error;\n                }\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\")) {\n                    var error = $root.google.protobuf.Timestamp.verify(message.receivedTime);\n                    if (error)\n                        return \"receivedTime.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a FetchNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.FetchNode} message FetchNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FetchNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.serviceName = \"\";\n                    object.traceParsingFailed = false;\n                    object.trace = null;\n                    object.sentTimeOffset = 0;\n                    object.sentTime = null;\n                    object.receivedTime = null;\n                }\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    object.serviceName = message.serviceName;\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    object.traceParsingFailed = message.traceParsingFailed;\n                if (message.trace != null && message.hasOwnProperty(\"trace\"))\n                    object.trace = $root.Trace.toObject(message.trace, options);\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (typeof message.sentTimeOffset === \"number\")\n                        object.sentTimeOffset = options.longs === String ? String(message.sentTimeOffset) : message.sentTimeOffset;\n                    else\n                        object.sentTimeOffset = options.longs === String ? $util.Long.prototype.toString.call(message.sentTimeOffset) : options.longs === Number ? new $util.LongBits(message.sentTimeOffset.low >>> 0, message.sentTimeOffset.high >>> 0).toNumber(true) : message.sentTimeOffset;\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\"))\n                    object.sentTime = $root.google.protobuf.Timestamp.toObject(message.sentTime, options);\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\"))\n                    object.receivedTime = $root.google.protobuf.Timestamp.toObject(message.receivedTime, options);\n                return object;\n            };\n\n            /**\n             * Converts this FetchNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FetchNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FetchNode;\n        })();\n\n        QueryPlanNode.FlattenNode = (function() {\n\n            /**\n             * Properties of a FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFlattenNode\n             * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [responsePath] FlattenNode responsePath\n             * @property {Trace.IQueryPlanNode|null} [node] FlattenNode node\n             */\n\n            /**\n             * Constructs a new FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FlattenNode.\n             * @implements IFlattenNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             */\n            function FlattenNode(properties) {\n                this.responsePath = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FlattenNode responsePath.\n             * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} responsePath\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.responsePath = $util.emptyArray;\n\n            /**\n             * FlattenNode node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.node = null;\n\n            /**\n             * Creates a new FlattenNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode instance\n             */\n            FlattenNode.create = function create(properties) {\n                return new FlattenNode(properties);\n            };\n\n            /**\n             * Encodes the specified FlattenNode message. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.responsePath != null && message.responsePath.length)\n                    for (var i = 0; i < message.responsePath.length; ++i)\n                        $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.responsePath[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FlattenNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FlattenNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.responsePath && message.responsePath.length))\n                            message.responsePath = [];\n                        message.responsePath.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FlattenNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FlattenNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.responsePath != null && message.hasOwnProperty(\"responsePath\")) {\n                    if (!Array.isArray(message.responsePath))\n                        return \"responsePath: array expected\";\n                    for (var i = 0; i < message.responsePath.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.responsePath[i]);\n                        if (error)\n                            return \"responsePath.\" + error;\n                    }\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    var error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a FlattenNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.FlattenNode} message FlattenNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FlattenNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.responsePath = [];\n                if (options.defaults)\n                    object.node = null;\n                if (message.responsePath && message.responsePath.length) {\n                    object.responsePath = [];\n                    for (var j = 0; j < message.responsePath.length; ++j)\n                        object.responsePath[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.responsePath[j], options);\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this FlattenNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FlattenNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FlattenNode;\n        })();\n\n        QueryPlanNode.DeferNode = (function() {\n\n            /**\n             * Properties of a DeferNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferNode\n             * @property {Trace.QueryPlanNode.IDeferNodePrimary|null} [primary] DeferNode primary\n             * @property {Array.<Trace.QueryPlanNode.IDeferredNode>|null} [deferred] DeferNode deferred\n             */\n\n            /**\n             * Constructs a new DeferNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferNode.\n             * @implements IDeferNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferNode=} [properties] Properties to set\n             */\n            function DeferNode(properties) {\n                this.deferred = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferNode primary.\n             * @member {Trace.QueryPlanNode.IDeferNodePrimary|null|undefined} primary\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @instance\n             */\n            DeferNode.prototype.primary = null;\n\n            /**\n             * DeferNode deferred.\n             * @member {Array.<Trace.QueryPlanNode.IDeferredNode>} deferred\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @instance\n             */\n            DeferNode.prototype.deferred = $util.emptyArray;\n\n            /**\n             * Creates a new DeferNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferNode} DeferNode instance\n             */\n            DeferNode.create = function create(properties) {\n                return new DeferNode(properties);\n            };\n\n            /**\n             * Encodes the specified DeferNode message. Does not implicitly {@link Trace.QueryPlanNode.DeferNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNode} message DeferNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.primary != null && Object.hasOwnProperty.call(message, \"primary\"))\n                    $root.Trace.QueryPlanNode.DeferNodePrimary.encode(message.primary, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.deferred != null && message.deferred.length)\n                    for (var i = 0; i < message.deferred.length; ++i)\n                        $root.Trace.QueryPlanNode.DeferredNode.encode(message.deferred[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNode} message DeferNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferNode} DeferNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.primary = $root.Trace.QueryPlanNode.DeferNodePrimary.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        if (!(message.deferred && message.deferred.length))\n                            message.deferred = [];\n                        message.deferred.push($root.Trace.QueryPlanNode.DeferredNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferNode} DeferNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.primary != null && message.hasOwnProperty(\"primary\")) {\n                    var error = $root.Trace.QueryPlanNode.DeferNodePrimary.verify(message.primary);\n                    if (error)\n                        return \"primary.\" + error;\n                }\n                if (message.deferred != null && message.hasOwnProperty(\"deferred\")) {\n                    if (!Array.isArray(message.deferred))\n                        return \"deferred: array expected\";\n                    for (var i = 0; i < message.deferred.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.DeferredNode.verify(message.deferred[i]);\n                        if (error)\n                            return \"deferred.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.DeferNode} message DeferNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.deferred = [];\n                if (options.defaults)\n                    object.primary = null;\n                if (message.primary != null && message.hasOwnProperty(\"primary\"))\n                    object.primary = $root.Trace.QueryPlanNode.DeferNodePrimary.toObject(message.primary, options);\n                if (message.deferred && message.deferred.length) {\n                    object.deferred = [];\n                    for (var j = 0; j < message.deferred.length; ++j)\n                        object.deferred[j] = $root.Trace.QueryPlanNode.DeferredNode.toObject(message.deferred[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this DeferNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return DeferNode;\n        })();\n\n        QueryPlanNode.ConditionNode = (function() {\n\n            /**\n             * Properties of a ConditionNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IConditionNode\n             * @property {string|null} [condition] ConditionNode condition\n             * @property {Trace.IQueryPlanNode|null} [ifClause] ConditionNode ifClause\n             * @property {Trace.IQueryPlanNode|null} [elseClause] ConditionNode elseClause\n             */\n\n            /**\n             * Constructs a new ConditionNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ConditionNode.\n             * @implements IConditionNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IConditionNode=} [properties] Properties to set\n             */\n            function ConditionNode(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ConditionNode condition.\n             * @member {string} condition\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             */\n            ConditionNode.prototype.condition = \"\";\n\n            /**\n             * ConditionNode ifClause.\n             * @member {Trace.IQueryPlanNode|null|undefined} ifClause\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             */\n            ConditionNode.prototype.ifClause = null;\n\n            /**\n             * ConditionNode elseClause.\n             * @member {Trace.IQueryPlanNode|null|undefined} elseClause\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             */\n            ConditionNode.prototype.elseClause = null;\n\n            /**\n             * Creates a new ConditionNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.IConditionNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ConditionNode} ConditionNode instance\n             */\n            ConditionNode.create = function create(properties) {\n                return new ConditionNode(properties);\n            };\n\n            /**\n             * Encodes the specified ConditionNode message. Does not implicitly {@link Trace.QueryPlanNode.ConditionNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.IConditionNode} message ConditionNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ConditionNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.condition != null && Object.hasOwnProperty.call(message, \"condition\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.condition);\n                if (message.ifClause != null && Object.hasOwnProperty.call(message, \"ifClause\"))\n                    $root.Trace.QueryPlanNode.encode(message.ifClause, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                if (message.elseClause != null && Object.hasOwnProperty.call(message, \"elseClause\"))\n                    $root.Trace.QueryPlanNode.encode(message.elseClause, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ConditionNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ConditionNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.IConditionNode} message ConditionNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ConditionNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ConditionNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ConditionNode} ConditionNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ConditionNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ConditionNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.condition = reader.string();\n                        break;\n                    case 2:\n                        message.ifClause = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    case 3:\n                        message.elseClause = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ConditionNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ConditionNode} ConditionNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ConditionNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ConditionNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ConditionNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.condition != null && message.hasOwnProperty(\"condition\"))\n                    if (!$util.isString(message.condition))\n                        return \"condition: string expected\";\n                if (message.ifClause != null && message.hasOwnProperty(\"ifClause\")) {\n                    var error = $root.Trace.QueryPlanNode.verify(message.ifClause);\n                    if (error)\n                        return \"ifClause.\" + error;\n                }\n                if (message.elseClause != null && message.hasOwnProperty(\"elseClause\")) {\n                    var error = $root.Trace.QueryPlanNode.verify(message.elseClause);\n                    if (error)\n                        return \"elseClause.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ConditionNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.ConditionNode} message ConditionNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ConditionNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.condition = \"\";\n                    object.ifClause = null;\n                    object.elseClause = null;\n                }\n                if (message.condition != null && message.hasOwnProperty(\"condition\"))\n                    object.condition = message.condition;\n                if (message.ifClause != null && message.hasOwnProperty(\"ifClause\"))\n                    object.ifClause = $root.Trace.QueryPlanNode.toObject(message.ifClause, options);\n                if (message.elseClause != null && message.hasOwnProperty(\"elseClause\"))\n                    object.elseClause = $root.Trace.QueryPlanNode.toObject(message.elseClause, options);\n                return object;\n            };\n\n            /**\n             * Converts this ConditionNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ConditionNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ConditionNode;\n        })();\n\n        QueryPlanNode.DeferNodePrimary = (function() {\n\n            /**\n             * Properties of a DeferNodePrimary.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferNodePrimary\n             * @property {Trace.IQueryPlanNode|null} [node] DeferNodePrimary node\n             */\n\n            /**\n             * Constructs a new DeferNodePrimary.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferNodePrimary.\n             * @implements IDeferNodePrimary\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary=} [properties] Properties to set\n             */\n            function DeferNodePrimary(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferNodePrimary node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @instance\n             */\n            DeferNodePrimary.prototype.node = null;\n\n            /**\n             * Creates a new DeferNodePrimary instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferNodePrimary} DeferNodePrimary instance\n             */\n            DeferNodePrimary.create = function create(properties) {\n                return new DeferNodePrimary(properties);\n            };\n\n            /**\n             * Encodes the specified DeferNodePrimary message. Does not implicitly {@link Trace.QueryPlanNode.DeferNodePrimary.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary} message DeferNodePrimary message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNodePrimary.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferNodePrimary message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferNodePrimary.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary} message DeferNodePrimary message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNodePrimary.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferNodePrimary message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferNodePrimary} DeferNodePrimary\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNodePrimary.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferNodePrimary();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferNodePrimary message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferNodePrimary} DeferNodePrimary\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNodePrimary.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferNodePrimary message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferNodePrimary.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    var error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferNodePrimary message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.DeferNodePrimary} message DeferNodePrimary\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferNodePrimary.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults)\n                    object.node = null;\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this DeferNodePrimary to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferNodePrimary.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return DeferNodePrimary;\n        })();\n\n        QueryPlanNode.DeferredNode = (function() {\n\n            /**\n             * Properties of a DeferredNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferredNode\n             * @property {Array.<Trace.QueryPlanNode.IDeferredNodeDepends>|null} [depends] DeferredNode depends\n             * @property {string|null} [label] DeferredNode label\n             * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [path] DeferredNode path\n             * @property {Trace.IQueryPlanNode|null} [node] DeferredNode node\n             */\n\n            /**\n             * Constructs a new DeferredNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferredNode.\n             * @implements IDeferredNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferredNode=} [properties] Properties to set\n             */\n            function DeferredNode(properties) {\n                this.depends = [];\n                this.path = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferredNode depends.\n             * @member {Array.<Trace.QueryPlanNode.IDeferredNodeDepends>} depends\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.depends = $util.emptyArray;\n\n            /**\n             * DeferredNode label.\n             * @member {string} label\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.label = \"\";\n\n            /**\n             * DeferredNode path.\n             * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} path\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.path = $util.emptyArray;\n\n            /**\n             * DeferredNode node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.node = null;\n\n            /**\n             * Creates a new DeferredNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferredNode} DeferredNode instance\n             */\n            DeferredNode.create = function create(properties) {\n                return new DeferredNode(properties);\n            };\n\n            /**\n             * Encodes the specified DeferredNode message. Does not implicitly {@link Trace.QueryPlanNode.DeferredNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNode} message DeferredNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.depends != null && message.depends.length)\n                    for (var i = 0; i < message.depends.length; ++i)\n                        $root.Trace.QueryPlanNode.DeferredNodeDepends.encode(message.depends[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.label != null && Object.hasOwnProperty.call(message, \"label\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.label);\n                if (message.path != null && message.path.length)\n                    for (var i = 0; i < message.path.length; ++i)\n                        $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.path[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferredNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferredNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNode} message DeferredNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferredNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferredNode} DeferredNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferredNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.depends && message.depends.length))\n                            message.depends = [];\n                        message.depends.push($root.Trace.QueryPlanNode.DeferredNodeDepends.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        message.label = reader.string();\n                        break;\n                    case 3:\n                        if (!(message.path && message.path.length))\n                            message.path = [];\n                        message.path.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n                        break;\n                    case 4:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferredNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferredNode} DeferredNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferredNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferredNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.depends != null && message.hasOwnProperty(\"depends\")) {\n                    if (!Array.isArray(message.depends))\n                        return \"depends: array expected\";\n                    for (var i = 0; i < message.depends.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.DeferredNodeDepends.verify(message.depends[i]);\n                        if (error)\n                            return \"depends.\" + error;\n                    }\n                }\n                if (message.label != null && message.hasOwnProperty(\"label\"))\n                    if (!$util.isString(message.label))\n                        return \"label: string expected\";\n                if (message.path != null && message.hasOwnProperty(\"path\")) {\n                    if (!Array.isArray(message.path))\n                        return \"path: array expected\";\n                    for (var i = 0; i < message.path.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.path[i]);\n                        if (error)\n                            return \"path.\" + error;\n                    }\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    var error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferredNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.DeferredNode} message DeferredNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferredNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults) {\n                    object.depends = [];\n                    object.path = [];\n                }\n                if (options.defaults) {\n                    object.label = \"\";\n                    object.node = null;\n                }\n                if (message.depends && message.depends.length) {\n                    object.depends = [];\n                    for (var j = 0; j < message.depends.length; ++j)\n                        object.depends[j] = $root.Trace.QueryPlanNode.DeferredNodeDepends.toObject(message.depends[j], options);\n                }\n                if (message.label != null && message.hasOwnProperty(\"label\"))\n                    object.label = message.label;\n                if (message.path && message.path.length) {\n                    object.path = [];\n                    for (var j = 0; j < message.path.length; ++j)\n                        object.path[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.path[j], options);\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this DeferredNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferredNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return DeferredNode;\n        })();\n\n        QueryPlanNode.DeferredNodeDepends = (function() {\n\n            /**\n             * Properties of a DeferredNodeDepends.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferredNodeDepends\n             * @property {string|null} [id] DeferredNodeDepends id\n             * @property {string|null} [deferLabel] DeferredNodeDepends deferLabel\n             */\n\n            /**\n             * Constructs a new DeferredNodeDepends.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferredNodeDepends.\n             * @implements IDeferredNodeDepends\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends=} [properties] Properties to set\n             */\n            function DeferredNodeDepends(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferredNodeDepends id.\n             * @member {string} id\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @instance\n             */\n            DeferredNodeDepends.prototype.id = \"\";\n\n            /**\n             * DeferredNodeDepends deferLabel.\n             * @member {string} deferLabel\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @instance\n             */\n            DeferredNodeDepends.prototype.deferLabel = \"\";\n\n            /**\n             * Creates a new DeferredNodeDepends instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferredNodeDepends} DeferredNodeDepends instance\n             */\n            DeferredNodeDepends.create = function create(properties) {\n                return new DeferredNodeDepends(properties);\n            };\n\n            /**\n             * Encodes the specified DeferredNodeDepends message. Does not implicitly {@link Trace.QueryPlanNode.DeferredNodeDepends.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends} message DeferredNodeDepends message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNodeDepends.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                if (message.deferLabel != null && Object.hasOwnProperty.call(message, \"deferLabel\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.deferLabel);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferredNodeDepends message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferredNodeDepends.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends} message DeferredNodeDepends message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNodeDepends.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferredNodeDepends message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferredNodeDepends} DeferredNodeDepends\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNodeDepends.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferredNodeDepends();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.id = reader.string();\n                        break;\n                    case 2:\n                        message.deferLabel = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferredNodeDepends message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferredNodeDepends} DeferredNodeDepends\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNodeDepends.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferredNodeDepends message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferredNodeDepends.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isString(message.id))\n                        return \"id: string expected\";\n                if (message.deferLabel != null && message.hasOwnProperty(\"deferLabel\"))\n                    if (!$util.isString(message.deferLabel))\n                        return \"deferLabel: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferredNodeDepends message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.DeferredNodeDepends} message DeferredNodeDepends\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferredNodeDepends.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.id = \"\";\n                    object.deferLabel = \"\";\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    object.id = message.id;\n                if (message.deferLabel != null && message.hasOwnProperty(\"deferLabel\"))\n                    object.deferLabel = message.deferLabel;\n                return object;\n            };\n\n            /**\n             * Converts this DeferredNodeDepends to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferredNodeDepends.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return DeferredNodeDepends;\n        })();\n\n        QueryPlanNode.ResponsePathElement = (function() {\n\n            /**\n             * Properties of a ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @interface IResponsePathElement\n             * @property {string|null} [fieldName] ResponsePathElement fieldName\n             * @property {number|null} [index] ResponsePathElement index\n             */\n\n            /**\n             * Constructs a new ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ResponsePathElement.\n             * @implements IResponsePathElement\n             * @constructor\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             */\n            function ResponsePathElement(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ResponsePathElement fieldName.\n             * @member {string} fieldName\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.fieldName = \"\";\n\n            /**\n             * ResponsePathElement index.\n             * @member {number} index\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.index = 0;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ResponsePathElement id.\n             * @member {\"fieldName\"|\"index\"|undefined} id\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            Object.defineProperty(ResponsePathElement.prototype, \"id\", {\n                get: $util.oneOfGetter($oneOfFields = [\"fieldName\", \"index\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new ResponsePathElement instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement instance\n             */\n            ResponsePathElement.create = function create(properties) {\n                return new ResponsePathElement(properties);\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.fieldName != null && Object.hasOwnProperty.call(message, \"fieldName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldName);\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.fieldName = reader.string();\n                        break;\n                    case 2:\n                        message.index = reader.uint32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ResponsePathElement message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ResponsePathElement.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    properties.id = 1;\n                    if (!$util.isString(message.fieldName))\n                        return \"fieldName: string expected\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    if (properties.id === 1)\n                        return \"id: multiple values\";\n                    properties.id = 1;\n                    if (!$util.isInteger(message.index))\n                        return \"index: integer expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ResponsePathElement message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.ResponsePathElement} message ResponsePathElement\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ResponsePathElement.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    object.fieldName = message.fieldName;\n                    if (options.oneofs)\n                        object.id = \"fieldName\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    object.index = message.index;\n                    if (options.oneofs)\n                        object.id = \"index\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ResponsePathElement to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ResponsePathElement.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ResponsePathElement;\n        })();\n\n        return QueryPlanNode;\n    })();\n\n    return Trace;\n})();\n\n$root.ReportHeader = (function() {\n\n    /**\n     * Properties of a ReportHeader.\n     * @exports IReportHeader\n     * @interface IReportHeader\n     * @property {string|null} [graphRef] ReportHeader graphRef\n     * @property {string|null} [hostname] ReportHeader hostname\n     * @property {string|null} [agentVersion] ReportHeader agentVersion\n     * @property {string|null} [serviceVersion] ReportHeader serviceVersion\n     * @property {string|null} [runtimeVersion] ReportHeader runtimeVersion\n     * @property {string|null} [uname] ReportHeader uname\n     * @property {string|null} [executableSchemaId] ReportHeader executableSchemaId\n     */\n\n    /**\n     * Constructs a new ReportHeader.\n     * @exports ReportHeader\n     * @classdesc Represents a ReportHeader.\n     * @implements IReportHeader\n     * @constructor\n     * @param {IReportHeader=} [properties] Properties to set\n     */\n    function ReportHeader(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReportHeader graphRef.\n     * @member {string} graphRef\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.graphRef = \"\";\n\n    /**\n     * ReportHeader hostname.\n     * @member {string} hostname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.hostname = \"\";\n\n    /**\n     * ReportHeader agentVersion.\n     * @member {string} agentVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.agentVersion = \"\";\n\n    /**\n     * ReportHeader serviceVersion.\n     * @member {string} serviceVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.serviceVersion = \"\";\n\n    /**\n     * ReportHeader runtimeVersion.\n     * @member {string} runtimeVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.runtimeVersion = \"\";\n\n    /**\n     * ReportHeader uname.\n     * @member {string} uname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.uname = \"\";\n\n    /**\n     * ReportHeader executableSchemaId.\n     * @member {string} executableSchemaId\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.executableSchemaId = \"\";\n\n    /**\n     * Creates a new ReportHeader instance using the specified properties.\n     * @function create\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader=} [properties] Properties to set\n     * @returns {ReportHeader} ReportHeader instance\n     */\n    ReportHeader.create = function create(properties) {\n        return new ReportHeader(properties);\n    };\n\n    /**\n     * Encodes the specified ReportHeader message. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encode\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.hostname != null && Object.hasOwnProperty.call(message, \"hostname\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.hostname);\n        if (message.agentVersion != null && Object.hasOwnProperty.call(message, \"agentVersion\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.agentVersion);\n        if (message.serviceVersion != null && Object.hasOwnProperty.call(message, \"serviceVersion\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.serviceVersion);\n        if (message.runtimeVersion != null && Object.hasOwnProperty.call(message, \"runtimeVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.runtimeVersion);\n        if (message.uname != null && Object.hasOwnProperty.call(message, \"uname\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.uname);\n        if (message.executableSchemaId != null && Object.hasOwnProperty.call(message, \"executableSchemaId\"))\n            writer.uint32(/* id 11, wireType 2 =*/90).string(message.executableSchemaId);\n        if (message.graphRef != null && Object.hasOwnProperty.call(message, \"graphRef\"))\n            writer.uint32(/* id 12, wireType 2 =*/98).string(message.graphRef);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReportHeader message, length delimited. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportHeader();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 12:\n                message.graphRef = reader.string();\n                break;\n            case 5:\n                message.hostname = reader.string();\n                break;\n            case 6:\n                message.agentVersion = reader.string();\n                break;\n            case 7:\n                message.serviceVersion = reader.string();\n                break;\n            case 8:\n                message.runtimeVersion = reader.string();\n                break;\n            case 9:\n                message.uname = reader.string();\n                break;\n            case 11:\n                message.executableSchemaId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReportHeader message.\n     * @function verify\n     * @memberof ReportHeader\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReportHeader.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.graphRef != null && message.hasOwnProperty(\"graphRef\"))\n            if (!$util.isString(message.graphRef))\n                return \"graphRef: string expected\";\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            if (!$util.isString(message.hostname))\n                return \"hostname: string expected\";\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            if (!$util.isString(message.agentVersion))\n                return \"agentVersion: string expected\";\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            if (!$util.isString(message.serviceVersion))\n                return \"serviceVersion: string expected\";\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            if (!$util.isString(message.runtimeVersion))\n                return \"runtimeVersion: string expected\";\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            if (!$util.isString(message.uname))\n                return \"uname: string expected\";\n        if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\"))\n            if (!$util.isString(message.executableSchemaId))\n                return \"executableSchemaId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ReportHeader message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReportHeader\n     * @static\n     * @param {ReportHeader} message ReportHeader\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReportHeader.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.hostname = \"\";\n            object.agentVersion = \"\";\n            object.serviceVersion = \"\";\n            object.runtimeVersion = \"\";\n            object.uname = \"\";\n            object.executableSchemaId = \"\";\n            object.graphRef = \"\";\n        }\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            object.hostname = message.hostname;\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            object.agentVersion = message.agentVersion;\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            object.serviceVersion = message.serviceVersion;\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            object.runtimeVersion = message.runtimeVersion;\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            object.uname = message.uname;\n        if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\"))\n            object.executableSchemaId = message.executableSchemaId;\n        if (message.graphRef != null && message.hasOwnProperty(\"graphRef\"))\n            object.graphRef = message.graphRef;\n        return object;\n    };\n\n    /**\n     * Converts this ReportHeader to JSON.\n     * @function toJSON\n     * @memberof ReportHeader\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReportHeader.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReportHeader;\n})();\n\n$root.PathErrorStats = (function() {\n\n    /**\n     * Properties of a PathErrorStats.\n     * @exports IPathErrorStats\n     * @interface IPathErrorStats\n     * @property {Object.<string,IPathErrorStats>|null} [children] PathErrorStats children\n     * @property {number|null} [errorsCount] PathErrorStats errorsCount\n     * @property {number|null} [requestsWithErrorsCount] PathErrorStats requestsWithErrorsCount\n     */\n\n    /**\n     * Constructs a new PathErrorStats.\n     * @exports PathErrorStats\n     * @classdesc Represents a PathErrorStats.\n     * @implements IPathErrorStats\n     * @constructor\n     * @param {IPathErrorStats=} [properties] Properties to set\n     */\n    function PathErrorStats(properties) {\n        this.children = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PathErrorStats children.\n     * @member {Object.<string,IPathErrorStats>} children\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.children = $util.emptyObject;\n\n    /**\n     * PathErrorStats errorsCount.\n     * @member {number} errorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.errorsCount = 0;\n\n    /**\n     * PathErrorStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.requestsWithErrorsCount = 0;\n\n    /**\n     * Creates a new PathErrorStats instance using the specified properties.\n     * @function create\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats=} [properties] Properties to set\n     * @returns {PathErrorStats} PathErrorStats instance\n     */\n    PathErrorStats.create = function create(properties) {\n        return new PathErrorStats(properties);\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encode\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.children != null && Object.hasOwnProperty.call(message, \"children\"))\n            for (var keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.PathErrorStats.encode(message.children[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.requestsWithErrorsCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message, length delimited. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PathErrorStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                reader.skip().pos++;\n                if (message.children === $util.emptyObject)\n                    message.children = {};\n                key = reader.string();\n                reader.pos++;\n                message.children[key] = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PathErrorStats message.\n     * @function verify\n     * @memberof PathErrorStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PathErrorStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.children != null && message.hasOwnProperty(\"children\")) {\n            if (!$util.isObject(message.children))\n                return \"children: object expected\";\n            var key = Object.keys(message.children);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.PathErrorStats.verify(message.children[key[i]]);\n                if (error)\n                    return \"children.\" + error;\n            }\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a PathErrorStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PathErrorStats\n     * @static\n     * @param {PathErrorStats} message PathErrorStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PathErrorStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.children = {};\n        if (options.defaults) {\n            object.errorsCount = 0;\n            object.requestsWithErrorsCount = 0;\n        }\n        var keys2;\n        if (message.children && (keys2 = Object.keys(message.children)).length) {\n            object.children = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.children[keys2[j]] = $root.PathErrorStats.toObject(message.children[keys2[j]], options);\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        return object;\n    };\n\n    /**\n     * Converts this PathErrorStats to JSON.\n     * @function toJSON\n     * @memberof PathErrorStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PathErrorStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PathErrorStats;\n})();\n\n$root.QueryLatencyStats = (function() {\n\n    /**\n     * Properties of a QueryLatencyStats.\n     * @exports IQueryLatencyStats\n     * @interface IQueryLatencyStats\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [latencyCount] QueryLatencyStats latencyCount\n     * @property {number|null} [requestCount] QueryLatencyStats requestCount\n     * @property {number|null} [cacheHits] QueryLatencyStats cacheHits\n     * @property {number|null} [persistedQueryHits] QueryLatencyStats persistedQueryHits\n     * @property {number|null} [persistedQueryMisses] QueryLatencyStats persistedQueryMisses\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [cacheLatencyCount] QueryLatencyStats cacheLatencyCount\n     * @property {IPathErrorStats|null} [rootErrorStats] QueryLatencyStats rootErrorStats\n     * @property {number|null} [requestsWithErrorsCount] QueryLatencyStats requestsWithErrorsCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [publicCacheTtlCount] QueryLatencyStats publicCacheTtlCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [privateCacheTtlCount] QueryLatencyStats privateCacheTtlCount\n     * @property {number|null} [registeredOperationCount] QueryLatencyStats registeredOperationCount\n     * @property {number|null} [forbiddenOperationCount] QueryLatencyStats forbiddenOperationCount\n     * @property {number|null} [requestsWithoutFieldInstrumentation] QueryLatencyStats requestsWithoutFieldInstrumentation\n     */\n\n    /**\n     * Constructs a new QueryLatencyStats.\n     * @exports QueryLatencyStats\n     * @classdesc Represents a QueryLatencyStats.\n     * @implements IQueryLatencyStats\n     * @constructor\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     */\n    function QueryLatencyStats(properties) {\n        this.latencyCount = [];\n        this.cacheLatencyCount = [];\n        this.publicCacheTtlCount = [];\n        this.privateCacheTtlCount = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * QueryLatencyStats latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats requestCount.\n     * @member {number} requestCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestCount = 0;\n\n    /**\n     * QueryLatencyStats cacheHits.\n     * @member {number} cacheHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheHits = 0;\n\n    /**\n     * QueryLatencyStats persistedQueryHits.\n     * @member {number} persistedQueryHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryHits = 0;\n\n    /**\n     * QueryLatencyStats persistedQueryMisses.\n     * @member {number} persistedQueryMisses\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryMisses = 0;\n\n    /**\n     * QueryLatencyStats cacheLatencyCount.\n     * @member {Array.<number>} cacheLatencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheLatencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats rootErrorStats.\n     * @member {IPathErrorStats|null|undefined} rootErrorStats\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.rootErrorStats = null;\n\n    /**\n     * QueryLatencyStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestsWithErrorsCount = 0;\n\n    /**\n     * QueryLatencyStats publicCacheTtlCount.\n     * @member {Array.<number>} publicCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.publicCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats privateCacheTtlCount.\n     * @member {Array.<number>} privateCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.privateCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats registeredOperationCount.\n     * @member {number} registeredOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.registeredOperationCount = 0;\n\n    /**\n     * QueryLatencyStats forbiddenOperationCount.\n     * @member {number} forbiddenOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.forbiddenOperationCount = 0;\n\n    /**\n     * QueryLatencyStats requestsWithoutFieldInstrumentation.\n     * @member {number} requestsWithoutFieldInstrumentation\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestsWithoutFieldInstrumentation = 0;\n\n    /**\n     * Creates a new QueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     * @returns {QueryLatencyStats} QueryLatencyStats instance\n     */\n    QueryLatencyStats.create = function create(properties) {\n        return new QueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.requestCount != null && Object.hasOwnProperty.call(message, \"requestCount\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.requestCount);\n        if (message.cacheHits != null && Object.hasOwnProperty.call(message, \"cacheHits\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.cacheHits);\n        if (message.persistedQueryHits != null && Object.hasOwnProperty.call(message, \"persistedQueryHits\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.persistedQueryHits);\n        if (message.persistedQueryMisses != null && Object.hasOwnProperty.call(message, \"persistedQueryMisses\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.persistedQueryMisses);\n        if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, \"rootErrorStats\"))\n            $root.PathErrorStats.encode(message.rootErrorStats, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.requestsWithErrorsCount);\n        if (message.registeredOperationCount != null && Object.hasOwnProperty.call(message, \"registeredOperationCount\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.registeredOperationCount);\n        if (message.forbiddenOperationCount != null && Object.hasOwnProperty.call(message, \"forbiddenOperationCount\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.forbiddenOperationCount);\n        var array13;\n        if (message.latencyCount != null && message.latencyCount.toArray)\n            array13 = message.latencyCount.toArray();\n        else\n            array13 = message.latencyCount;\n        if (array13 != null && array13.length) {\n            writer.uint32(/* id 13, wireType 2 =*/106).fork();\n            for (var i = 0; i < array13.length; ++i)\n                writer.sint64(array13[i]);\n            writer.ldelim();\n        }\n        var array14;\n        if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)\n            array14 = message.cacheLatencyCount.toArray();\n        else\n            array14 = message.cacheLatencyCount;\n        if (array14 != null && array14.length) {\n            writer.uint32(/* id 14, wireType 2 =*/114).fork();\n            for (var i = 0; i < array14.length; ++i)\n                writer.sint64(array14[i]);\n            writer.ldelim();\n        }\n        var array15;\n        if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)\n            array15 = message.publicCacheTtlCount.toArray();\n        else\n            array15 = message.publicCacheTtlCount;\n        if (array15 != null && array15.length) {\n            writer.uint32(/* id 15, wireType 2 =*/122).fork();\n            for (var i = 0; i < array15.length; ++i)\n                writer.sint64(array15[i]);\n            writer.ldelim();\n        }\n        var array16;\n        if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)\n            array16 = message.privateCacheTtlCount.toArray();\n        else\n            array16 = message.privateCacheTtlCount;\n        if (array16 != null && array16.length) {\n            writer.uint32(/* id 16, wireType 2 =*/130).fork();\n            for (var i = 0; i < array16.length; ++i)\n                writer.sint64(array16[i]);\n            writer.ldelim();\n        }\n        if (message.requestsWithoutFieldInstrumentation != null && Object.hasOwnProperty.call(message, \"requestsWithoutFieldInstrumentation\"))\n            writer.uint32(/* id 17, wireType 0 =*/136).uint64(message.requestsWithoutFieldInstrumentation);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message, length delimited. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.QueryLatencyStats();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 13:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.sint64());\n                } else\n                    message.latencyCount.push(reader.sint64());\n                break;\n            case 2:\n                message.requestCount = reader.uint64();\n                break;\n            case 3:\n                message.cacheHits = reader.uint64();\n                break;\n            case 4:\n                message.persistedQueryHits = reader.uint64();\n                break;\n            case 5:\n                message.persistedQueryMisses = reader.uint64();\n                break;\n            case 14:\n                if (!(message.cacheLatencyCount && message.cacheLatencyCount.length))\n                    message.cacheLatencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.cacheLatencyCount.push(reader.sint64());\n                } else\n                    message.cacheLatencyCount.push(reader.sint64());\n                break;\n            case 7:\n                message.rootErrorStats = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 8:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 15:\n                if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length))\n                    message.publicCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.publicCacheTtlCount.push(reader.sint64());\n                } else\n                    message.publicCacheTtlCount.push(reader.sint64());\n                break;\n            case 16:\n                if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length))\n                    message.privateCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.privateCacheTtlCount.push(reader.sint64());\n                } else\n                    message.privateCacheTtlCount.push(reader.sint64());\n                break;\n            case 11:\n                message.registeredOperationCount = reader.uint64();\n                break;\n            case 12:\n                message.forbiddenOperationCount = reader.uint64();\n                break;\n            case 17:\n                message.requestsWithoutFieldInstrumentation = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a QueryLatencyStats message.\n     * @function verify\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    QueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            var array13;\n            if (message.latencyCount != null && message.latencyCount.toArray)\n                array13 = message.latencyCount.toArray();\n            else\n                array13 = message.latencyCount;\n            if (!Array.isArray(array13))\n                return \"latencyCount: array expected\";\n            for (var i = 0; i < array13.length; ++i)\n                if (!$util.isInteger(array13[i]) && !(array13[i] && $util.isInteger(array13[i].low) && $util.isInteger(array13[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (!$util.isInteger(message.requestCount) && !(message.requestCount && $util.isInteger(message.requestCount.low) && $util.isInteger(message.requestCount.high)))\n                return \"requestCount: integer|Long expected\";\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (!$util.isInteger(message.cacheHits) && !(message.cacheHits && $util.isInteger(message.cacheHits.low) && $util.isInteger(message.cacheHits.high)))\n                return \"cacheHits: integer|Long expected\";\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (!$util.isInteger(message.persistedQueryHits) && !(message.persistedQueryHits && $util.isInteger(message.persistedQueryHits.low) && $util.isInteger(message.persistedQueryHits.high)))\n                return \"persistedQueryHits: integer|Long expected\";\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (!$util.isInteger(message.persistedQueryMisses) && !(message.persistedQueryMisses && $util.isInteger(message.persistedQueryMisses.low) && $util.isInteger(message.persistedQueryMisses.high)))\n                return \"persistedQueryMisses: integer|Long expected\";\n        if (message.cacheLatencyCount != null && message.hasOwnProperty(\"cacheLatencyCount\")) {\n            var array14;\n            if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)\n                array14 = message.cacheLatencyCount.toArray();\n            else\n                array14 = message.cacheLatencyCount;\n            if (!Array.isArray(array14))\n                return \"cacheLatencyCount: array expected\";\n            for (var i = 0; i < array14.length; ++i)\n                if (!$util.isInteger(array14[i]) && !(array14[i] && $util.isInteger(array14[i].low) && $util.isInteger(array14[i].high)))\n                    return \"cacheLatencyCount: integer|Long[] expected\";\n        }\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) {\n            var error = $root.PathErrorStats.verify(message.rootErrorStats);\n            if (error)\n                return \"rootErrorStats.\" + error;\n        }\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.publicCacheTtlCount != null && message.hasOwnProperty(\"publicCacheTtlCount\")) {\n            var array15;\n            if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)\n                array15 = message.publicCacheTtlCount.toArray();\n            else\n                array15 = message.publicCacheTtlCount;\n            if (!Array.isArray(array15))\n                return \"publicCacheTtlCount: array expected\";\n            for (var i = 0; i < array15.length; ++i)\n                if (!$util.isInteger(array15[i]) && !(array15[i] && $util.isInteger(array15[i].low) && $util.isInteger(array15[i].high)))\n                    return \"publicCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.privateCacheTtlCount != null && message.hasOwnProperty(\"privateCacheTtlCount\")) {\n            var array16;\n            if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)\n                array16 = message.privateCacheTtlCount.toArray();\n            else\n                array16 = message.privateCacheTtlCount;\n            if (!Array.isArray(array16))\n                return \"privateCacheTtlCount: array expected\";\n            for (var i = 0; i < array16.length; ++i)\n                if (!$util.isInteger(array16[i]) && !(array16[i] && $util.isInteger(array16[i].low) && $util.isInteger(array16[i].high)))\n                    return \"privateCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (!$util.isInteger(message.registeredOperationCount) && !(message.registeredOperationCount && $util.isInteger(message.registeredOperationCount.low) && $util.isInteger(message.registeredOperationCount.high)))\n                return \"registeredOperationCount: integer|Long expected\";\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (!$util.isInteger(message.forbiddenOperationCount) && !(message.forbiddenOperationCount && $util.isInteger(message.forbiddenOperationCount.low) && $util.isInteger(message.forbiddenOperationCount.high)))\n                return \"forbiddenOperationCount: integer|Long expected\";\n        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty(\"requestsWithoutFieldInstrumentation\"))\n            if (!$util.isInteger(message.requestsWithoutFieldInstrumentation) && !(message.requestsWithoutFieldInstrumentation && $util.isInteger(message.requestsWithoutFieldInstrumentation.low) && $util.isInteger(message.requestsWithoutFieldInstrumentation.high)))\n                return \"requestsWithoutFieldInstrumentation: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a QueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {QueryLatencyStats} message QueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    QueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.latencyCount = [];\n            object.cacheLatencyCount = [];\n            object.publicCacheTtlCount = [];\n            object.privateCacheTtlCount = [];\n        }\n        if (options.defaults) {\n            object.requestCount = 0;\n            object.cacheHits = 0;\n            object.persistedQueryHits = 0;\n            object.persistedQueryMisses = 0;\n            object.rootErrorStats = null;\n            object.requestsWithErrorsCount = 0;\n            object.registeredOperationCount = 0;\n            object.forbiddenOperationCount = 0;\n            object.requestsWithoutFieldInstrumentation = 0;\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (typeof message.requestCount === \"number\")\n                object.requestCount = options.longs === String ? String(message.requestCount) : message.requestCount;\n            else\n                object.requestCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestCount) : options.longs === Number ? new $util.LongBits(message.requestCount.low >>> 0, message.requestCount.high >>> 0).toNumber(true) : message.requestCount;\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (typeof message.cacheHits === \"number\")\n                object.cacheHits = options.longs === String ? String(message.cacheHits) : message.cacheHits;\n            else\n                object.cacheHits = options.longs === String ? $util.Long.prototype.toString.call(message.cacheHits) : options.longs === Number ? new $util.LongBits(message.cacheHits.low >>> 0, message.cacheHits.high >>> 0).toNumber(true) : message.cacheHits;\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (typeof message.persistedQueryHits === \"number\")\n                object.persistedQueryHits = options.longs === String ? String(message.persistedQueryHits) : message.persistedQueryHits;\n            else\n                object.persistedQueryHits = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryHits) : options.longs === Number ? new $util.LongBits(message.persistedQueryHits.low >>> 0, message.persistedQueryHits.high >>> 0).toNumber(true) : message.persistedQueryHits;\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (typeof message.persistedQueryMisses === \"number\")\n                object.persistedQueryMisses = options.longs === String ? String(message.persistedQueryMisses) : message.persistedQueryMisses;\n            else\n                object.persistedQueryMisses = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryMisses) : options.longs === Number ? new $util.LongBits(message.persistedQueryMisses.low >>> 0, message.persistedQueryMisses.high >>> 0).toNumber(true) : message.persistedQueryMisses;\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\"))\n            object.rootErrorStats = $root.PathErrorStats.toObject(message.rootErrorStats, options);\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (typeof message.registeredOperationCount === \"number\")\n                object.registeredOperationCount = options.longs === String ? String(message.registeredOperationCount) : message.registeredOperationCount;\n            else\n                object.registeredOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.registeredOperationCount) : options.longs === Number ? new $util.LongBits(message.registeredOperationCount.low >>> 0, message.registeredOperationCount.high >>> 0).toNumber(true) : message.registeredOperationCount;\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (typeof message.forbiddenOperationCount === \"number\")\n                object.forbiddenOperationCount = options.longs === String ? String(message.forbiddenOperationCount) : message.forbiddenOperationCount;\n            else\n                object.forbiddenOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.forbiddenOperationCount) : options.longs === Number ? new $util.LongBits(message.forbiddenOperationCount.low >>> 0, message.forbiddenOperationCount.high >>> 0).toNumber(true) : message.forbiddenOperationCount;\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (var j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        if (message.cacheLatencyCount && message.cacheLatencyCount.length) {\n            object.cacheLatencyCount = [];\n            for (var j = 0; j < message.cacheLatencyCount.length; ++j)\n                if (typeof message.cacheLatencyCount[j] === \"number\")\n                    object.cacheLatencyCount[j] = options.longs === String ? String(message.cacheLatencyCount[j]) : message.cacheLatencyCount[j];\n                else\n                    object.cacheLatencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheLatencyCount[j]) : options.longs === Number ? new $util.LongBits(message.cacheLatencyCount[j].low >>> 0, message.cacheLatencyCount[j].high >>> 0).toNumber() : message.cacheLatencyCount[j];\n        }\n        if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {\n            object.publicCacheTtlCount = [];\n            for (var j = 0; j < message.publicCacheTtlCount.length; ++j)\n                if (typeof message.publicCacheTtlCount[j] === \"number\")\n                    object.publicCacheTtlCount[j] = options.longs === String ? String(message.publicCacheTtlCount[j]) : message.publicCacheTtlCount[j];\n                else\n                    object.publicCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.publicCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.publicCacheTtlCount[j].low >>> 0, message.publicCacheTtlCount[j].high >>> 0).toNumber() : message.publicCacheTtlCount[j];\n        }\n        if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {\n            object.privateCacheTtlCount = [];\n            for (var j = 0; j < message.privateCacheTtlCount.length; ++j)\n                if (typeof message.privateCacheTtlCount[j] === \"number\")\n                    object.privateCacheTtlCount[j] = options.longs === String ? String(message.privateCacheTtlCount[j]) : message.privateCacheTtlCount[j];\n                else\n                    object.privateCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.privateCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.privateCacheTtlCount[j].low >>> 0, message.privateCacheTtlCount[j].high >>> 0).toNumber() : message.privateCacheTtlCount[j];\n        }\n        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty(\"requestsWithoutFieldInstrumentation\"))\n            if (typeof message.requestsWithoutFieldInstrumentation === \"number\")\n                object.requestsWithoutFieldInstrumentation = options.longs === String ? String(message.requestsWithoutFieldInstrumentation) : message.requestsWithoutFieldInstrumentation;\n            else\n                object.requestsWithoutFieldInstrumentation = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithoutFieldInstrumentation) : options.longs === Number ? new $util.LongBits(message.requestsWithoutFieldInstrumentation.low >>> 0, message.requestsWithoutFieldInstrumentation.high >>> 0).toNumber(true) : message.requestsWithoutFieldInstrumentation;\n        return object;\n    };\n\n    /**\n     * Converts this QueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof QueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    QueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return QueryLatencyStats;\n})();\n\n$root.StatsContext = (function() {\n\n    /**\n     * Properties of a StatsContext.\n     * @exports IStatsContext\n     * @interface IStatsContext\n     * @property {string|null} [clientName] StatsContext clientName\n     * @property {string|null} [clientVersion] StatsContext clientVersion\n     */\n\n    /**\n     * Constructs a new StatsContext.\n     * @exports StatsContext\n     * @classdesc Represents a StatsContext.\n     * @implements IStatsContext\n     * @constructor\n     * @param {IStatsContext=} [properties] Properties to set\n     */\n    function StatsContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * StatsContext clientName.\n     * @member {string} clientName\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientName = \"\";\n\n    /**\n     * StatsContext clientVersion.\n     * @member {string} clientVersion\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientVersion = \"\";\n\n    /**\n     * Creates a new StatsContext instance using the specified properties.\n     * @function create\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext=} [properties] Properties to set\n     * @returns {StatsContext} StatsContext instance\n     */\n    StatsContext.create = function create(properties) {\n        return new StatsContext(properties);\n    };\n\n    /**\n     * Encodes the specified StatsContext message. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encode\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.clientVersion);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified StatsContext message, length delimited. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StatsContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.clientName = reader.string();\n                break;\n            case 3:\n                message.clientVersion = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a StatsContext message.\n     * @function verify\n     * @memberof StatsContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    StatsContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a StatsContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof StatsContext\n     * @static\n     * @param {StatsContext} message StatsContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    StatsContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n        }\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        return object;\n    };\n\n    /**\n     * Converts this StatsContext to JSON.\n     * @function toJSON\n     * @memberof StatsContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    StatsContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return StatsContext;\n})();\n\n$root.ContextualizedQueryLatencyStats = (function() {\n\n    /**\n     * Properties of a ContextualizedQueryLatencyStats.\n     * @exports IContextualizedQueryLatencyStats\n     * @interface IContextualizedQueryLatencyStats\n     * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedQueryLatencyStats queryLatencyStats\n     * @property {IStatsContext|null} [context] ContextualizedQueryLatencyStats context\n     */\n\n    /**\n     * Constructs a new ContextualizedQueryLatencyStats.\n     * @exports ContextualizedQueryLatencyStats\n     * @classdesc Represents a ContextualizedQueryLatencyStats.\n     * @implements IContextualizedQueryLatencyStats\n     * @constructor\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     */\n    function ContextualizedQueryLatencyStats(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedQueryLatencyStats queryLatencyStats.\n     * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.queryLatencyStats = null;\n\n    /**\n     * ContextualizedQueryLatencyStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.context = null;\n\n    /**\n     * Creates a new ContextualizedQueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats instance\n     */\n    ContextualizedQueryLatencyStats.create = function create(properties) {\n        return new ContextualizedQueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\"))\n            $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message, length delimited. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedQueryLatencyStats();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedQueryLatencyStats message.\n     * @function verify\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedQueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n            var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n            if (error)\n                return \"queryLatencyStats.\" + error;\n        }\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedQueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {ContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedQueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.queryLatencyStats = null;\n            object.context = null;\n        }\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\"))\n            object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedQueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedQueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedQueryLatencyStats;\n})();\n\n$root.ContextualizedTypeStats = (function() {\n\n    /**\n     * Properties of a ContextualizedTypeStats.\n     * @exports IContextualizedTypeStats\n     * @interface IContextualizedTypeStats\n     * @property {IStatsContext|null} [context] ContextualizedTypeStats context\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedTypeStats perTypeStat\n     */\n\n    /**\n     * Constructs a new ContextualizedTypeStats.\n     * @exports ContextualizedTypeStats\n     * @classdesc Represents a ContextualizedTypeStats.\n     * @implements IContextualizedTypeStats\n     * @constructor\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     */\n    function ContextualizedTypeStats(properties) {\n        this.perTypeStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedTypeStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.context = null;\n\n    /**\n     * ContextualizedTypeStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * Creates a new ContextualizedTypeStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats instance\n     */\n    ContextualizedTypeStats.create = function create(properties) {\n        return new ContextualizedTypeStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message, length delimited. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedTypeStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            case 2:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedTypeStats message.\n     * @function verify\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedTypeStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            var key = Object.keys(message.perTypeStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedTypeStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {ContextualizedTypeStats} message ContextualizedTypeStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedTypeStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.perTypeStat = {};\n        if (options.defaults)\n            object.context = null;\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        var keys2;\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedTypeStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedTypeStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedTypeStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedTypeStats;\n})();\n\n$root.FieldStat = (function() {\n\n    /**\n     * Properties of a FieldStat.\n     * @exports IFieldStat\n     * @interface IFieldStat\n     * @property {string|null} [returnType] FieldStat returnType\n     * @property {number|null} [errorsCount] FieldStat errorsCount\n     * @property {number|null} [observedExecutionCount] FieldStat observedExecutionCount\n     * @property {number|null} [estimatedExecutionCount] FieldStat estimatedExecutionCount\n     * @property {number|null} [requestsWithErrorsCount] FieldStat requestsWithErrorsCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [latencyCount] FieldStat latencyCount\n     */\n\n    /**\n     * Constructs a new FieldStat.\n     * @exports FieldStat\n     * @classdesc Represents a FieldStat.\n     * @implements IFieldStat\n     * @constructor\n     * @param {IFieldStat=} [properties] Properties to set\n     */\n    function FieldStat(properties) {\n        this.latencyCount = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * FieldStat returnType.\n     * @member {string} returnType\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.returnType = \"\";\n\n    /**\n     * FieldStat errorsCount.\n     * @member {number} errorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.errorsCount = 0;\n\n    /**\n     * FieldStat observedExecutionCount.\n     * @member {number} observedExecutionCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.observedExecutionCount = 0;\n\n    /**\n     * FieldStat estimatedExecutionCount.\n     * @member {number} estimatedExecutionCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.estimatedExecutionCount = 0;\n\n    /**\n     * FieldStat requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.requestsWithErrorsCount = 0;\n\n    /**\n     * FieldStat latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * Creates a new FieldStat instance using the specified properties.\n     * @function create\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat=} [properties] Properties to set\n     * @returns {FieldStat} FieldStat instance\n     */\n    FieldStat.create = function create(properties) {\n        return new FieldStat(properties);\n    };\n\n    /**\n     * Encodes the specified FieldStat message. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encode\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.returnType);\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.observedExecutionCount != null && Object.hasOwnProperty.call(message, \"observedExecutionCount\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.observedExecutionCount);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.requestsWithErrorsCount);\n        var array9;\n        if (message.latencyCount != null && message.latencyCount.toArray)\n            array9 = message.latencyCount.toArray();\n        else\n            array9 = message.latencyCount;\n        if (array9 != null && array9.length) {\n            writer.uint32(/* id 9, wireType 2 =*/74).fork();\n            for (var i = 0; i < array9.length; ++i)\n                writer.sint64(array9[i]);\n            writer.ldelim();\n        }\n        if (message.estimatedExecutionCount != null && Object.hasOwnProperty.call(message, \"estimatedExecutionCount\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.estimatedExecutionCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified FieldStat message, length delimited. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FieldStat();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 3:\n                message.returnType = reader.string();\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.observedExecutionCount = reader.uint64();\n                break;\n            case 10:\n                message.estimatedExecutionCount = reader.uint64();\n                break;\n            case 6:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 9:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.sint64());\n                } else\n                    message.latencyCount.push(reader.sint64());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a FieldStat message.\n     * @function verify\n     * @memberof FieldStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    FieldStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            if (!$util.isString(message.returnType))\n                return \"returnType: string expected\";\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.observedExecutionCount != null && message.hasOwnProperty(\"observedExecutionCount\"))\n            if (!$util.isInteger(message.observedExecutionCount) && !(message.observedExecutionCount && $util.isInteger(message.observedExecutionCount.low) && $util.isInteger(message.observedExecutionCount.high)))\n                return \"observedExecutionCount: integer|Long expected\";\n        if (message.estimatedExecutionCount != null && message.hasOwnProperty(\"estimatedExecutionCount\"))\n            if (!$util.isInteger(message.estimatedExecutionCount) && !(message.estimatedExecutionCount && $util.isInteger(message.estimatedExecutionCount.low) && $util.isInteger(message.estimatedExecutionCount.high)))\n                return \"estimatedExecutionCount: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            var array9;\n            if (message.latencyCount != null && message.latencyCount.toArray)\n                array9 = message.latencyCount.toArray();\n            else\n                array9 = message.latencyCount;\n            if (!Array.isArray(array9))\n                return \"latencyCount: array expected\";\n            for (var i = 0; i < array9.length; ++i)\n                if (!$util.isInteger(array9[i]) && !(array9[i] && $util.isInteger(array9[i].low) && $util.isInteger(array9[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a FieldStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof FieldStat\n     * @static\n     * @param {FieldStat} message FieldStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FieldStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.latencyCount = [];\n        if (options.defaults) {\n            object.returnType = \"\";\n            object.errorsCount = 0;\n            object.observedExecutionCount = 0;\n            object.requestsWithErrorsCount = 0;\n            object.estimatedExecutionCount = 0;\n        }\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            object.returnType = message.returnType;\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.observedExecutionCount != null && message.hasOwnProperty(\"observedExecutionCount\"))\n            if (typeof message.observedExecutionCount === \"number\")\n                object.observedExecutionCount = options.longs === String ? String(message.observedExecutionCount) : message.observedExecutionCount;\n            else\n                object.observedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.observedExecutionCount) : options.longs === Number ? new $util.LongBits(message.observedExecutionCount.low >>> 0, message.observedExecutionCount.high >>> 0).toNumber(true) : message.observedExecutionCount;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (var j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        if (message.estimatedExecutionCount != null && message.hasOwnProperty(\"estimatedExecutionCount\"))\n            if (typeof message.estimatedExecutionCount === \"number\")\n                object.estimatedExecutionCount = options.longs === String ? String(message.estimatedExecutionCount) : message.estimatedExecutionCount;\n            else\n                object.estimatedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.estimatedExecutionCount) : options.longs === Number ? new $util.LongBits(message.estimatedExecutionCount.low >>> 0, message.estimatedExecutionCount.high >>> 0).toNumber(true) : message.estimatedExecutionCount;\n        return object;\n    };\n\n    /**\n     * Converts this FieldStat to JSON.\n     * @function toJSON\n     * @memberof FieldStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FieldStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return FieldStat;\n})();\n\n$root.TypeStat = (function() {\n\n    /**\n     * Properties of a TypeStat.\n     * @exports ITypeStat\n     * @interface ITypeStat\n     * @property {Object.<string,IFieldStat>|null} [perFieldStat] TypeStat perFieldStat\n     */\n\n    /**\n     * Constructs a new TypeStat.\n     * @exports TypeStat\n     * @classdesc Represents a TypeStat.\n     * @implements ITypeStat\n     * @constructor\n     * @param {ITypeStat=} [properties] Properties to set\n     */\n    function TypeStat(properties) {\n        this.perFieldStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TypeStat perFieldStat.\n     * @member {Object.<string,IFieldStat>} perFieldStat\n     * @memberof TypeStat\n     * @instance\n     */\n    TypeStat.prototype.perFieldStat = $util.emptyObject;\n\n    /**\n     * Creates a new TypeStat instance using the specified properties.\n     * @function create\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat=} [properties] Properties to set\n     * @returns {TypeStat} TypeStat instance\n     */\n    TypeStat.create = function create(properties) {\n        return new TypeStat(properties);\n    };\n\n    /**\n     * Encodes the specified TypeStat message. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encode\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.perFieldStat != null && Object.hasOwnProperty.call(message, \"perFieldStat\"))\n            for (var keys = Object.keys(message.perFieldStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.FieldStat.encode(message.perFieldStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TypeStat message, length delimited. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TypeStat(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 3:\n                reader.skip().pos++;\n                if (message.perFieldStat === $util.emptyObject)\n                    message.perFieldStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perFieldStat[key] = $root.FieldStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TypeStat message.\n     * @function verify\n     * @memberof TypeStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TypeStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.perFieldStat != null && message.hasOwnProperty(\"perFieldStat\")) {\n            if (!$util.isObject(message.perFieldStat))\n                return \"perFieldStat: object expected\";\n            var key = Object.keys(message.perFieldStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.FieldStat.verify(message.perFieldStat[key[i]]);\n                if (error)\n                    return \"perFieldStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a TypeStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TypeStat\n     * @static\n     * @param {TypeStat} message TypeStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TypeStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.perFieldStat = {};\n        var keys2;\n        if (message.perFieldStat && (keys2 = Object.keys(message.perFieldStat)).length) {\n            object.perFieldStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perFieldStat[keys2[j]] = $root.FieldStat.toObject(message.perFieldStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TypeStat to JSON.\n     * @function toJSON\n     * @memberof TypeStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TypeStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TypeStat;\n})();\n\n$root.ReferencedFieldsForType = (function() {\n\n    /**\n     * Properties of a ReferencedFieldsForType.\n     * @exports IReferencedFieldsForType\n     * @interface IReferencedFieldsForType\n     * @property {Array.<string>|null} [fieldNames] ReferencedFieldsForType fieldNames\n     * @property {boolean|null} [isInterface] ReferencedFieldsForType isInterface\n     */\n\n    /**\n     * Constructs a new ReferencedFieldsForType.\n     * @exports ReferencedFieldsForType\n     * @classdesc Represents a ReferencedFieldsForType.\n     * @implements IReferencedFieldsForType\n     * @constructor\n     * @param {IReferencedFieldsForType=} [properties] Properties to set\n     */\n    function ReferencedFieldsForType(properties) {\n        this.fieldNames = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReferencedFieldsForType fieldNames.\n     * @member {Array.<string>} fieldNames\n     * @memberof ReferencedFieldsForType\n     * @instance\n     */\n    ReferencedFieldsForType.prototype.fieldNames = $util.emptyArray;\n\n    /**\n     * ReferencedFieldsForType isInterface.\n     * @member {boolean} isInterface\n     * @memberof ReferencedFieldsForType\n     * @instance\n     */\n    ReferencedFieldsForType.prototype.isInterface = false;\n\n    /**\n     * Creates a new ReferencedFieldsForType instance using the specified properties.\n     * @function create\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType=} [properties] Properties to set\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType instance\n     */\n    ReferencedFieldsForType.create = function create(properties) {\n        return new ReferencedFieldsForType(properties);\n    };\n\n    /**\n     * Encodes the specified ReferencedFieldsForType message. Does not implicitly {@link ReferencedFieldsForType.verify|verify} messages.\n     * @function encode\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType} message ReferencedFieldsForType message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReferencedFieldsForType.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.fieldNames != null && message.fieldNames.length)\n            for (var i = 0; i < message.fieldNames.length; ++i)\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldNames[i]);\n        if (message.isInterface != null && Object.hasOwnProperty.call(message, \"isInterface\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isInterface);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReferencedFieldsForType message, length delimited. Does not implicitly {@link ReferencedFieldsForType.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType} message ReferencedFieldsForType message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReferencedFieldsForType.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReferencedFieldsForType message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReferencedFieldsForType.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReferencedFieldsForType();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.fieldNames && message.fieldNames.length))\n                    message.fieldNames = [];\n                message.fieldNames.push(reader.string());\n                break;\n            case 2:\n                message.isInterface = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReferencedFieldsForType message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReferencedFieldsForType.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReferencedFieldsForType message.\n     * @function verify\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReferencedFieldsForType.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.fieldNames != null && message.hasOwnProperty(\"fieldNames\")) {\n            if (!Array.isArray(message.fieldNames))\n                return \"fieldNames: array expected\";\n            for (var i = 0; i < message.fieldNames.length; ++i)\n                if (!$util.isString(message.fieldNames[i]))\n                    return \"fieldNames: string[] expected\";\n        }\n        if (message.isInterface != null && message.hasOwnProperty(\"isInterface\"))\n            if (typeof message.isInterface !== \"boolean\")\n                return \"isInterface: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ReferencedFieldsForType message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {ReferencedFieldsForType} message ReferencedFieldsForType\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReferencedFieldsForType.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.fieldNames = [];\n        if (options.defaults)\n            object.isInterface = false;\n        if (message.fieldNames && message.fieldNames.length) {\n            object.fieldNames = [];\n            for (var j = 0; j < message.fieldNames.length; ++j)\n                object.fieldNames[j] = message.fieldNames[j];\n        }\n        if (message.isInterface != null && message.hasOwnProperty(\"isInterface\"))\n            object.isInterface = message.isInterface;\n        return object;\n    };\n\n    /**\n     * Converts this ReferencedFieldsForType to JSON.\n     * @function toJSON\n     * @memberof ReferencedFieldsForType\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReferencedFieldsForType.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReferencedFieldsForType;\n})();\n\n$root.Report = (function() {\n\n    /**\n     * Properties of a Report.\n     * @exports IReport\n     * @interface IReport\n     * @property {IReportHeader|null} [header] Report header\n     * @property {Object.<string,ITracesAndStats>|null} [tracesPerQuery] Report tracesPerQuery\n     * @property {google.protobuf.ITimestamp|null} [endTime] Report endTime\n     * @property {number|null} [operationCount] Report operationCount\n     * @property {boolean|null} [tracesPreAggregated] Report tracesPreAggregated\n     */\n\n    /**\n     * Constructs a new Report.\n     * @exports Report\n     * @classdesc Represents a Report.\n     * @implements IReport\n     * @constructor\n     * @param {IReport=} [properties] Properties to set\n     */\n    function Report(properties) {\n        this.tracesPerQuery = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Report header.\n     * @member {IReportHeader|null|undefined} header\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.header = null;\n\n    /**\n     * Report tracesPerQuery.\n     * @member {Object.<string,ITracesAndStats>} tracesPerQuery\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.tracesPerQuery = $util.emptyObject;\n\n    /**\n     * Report endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.endTime = null;\n\n    /**\n     * Report operationCount.\n     * @member {number} operationCount\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.operationCount = 0;\n\n    /**\n     * Report tracesPreAggregated.\n     * @member {boolean} tracesPreAggregated\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.tracesPreAggregated = false;\n\n    /**\n     * Creates a new Report instance using the specified properties.\n     * @function create\n     * @memberof Report\n     * @static\n     * @param {IReport=} [properties] Properties to set\n     * @returns {Report} Report instance\n     */\n    Report.create = function create(properties) {\n        return new Report(properties);\n    };\n\n    /**\n     * Encodes the specified Report message. Does not implicitly {@link Report.verify|verify} messages.\n     * @function encode\n     * @memberof Report\n     * @static\n     * @param {IReport} message Report message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Report.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.header != null && Object.hasOwnProperty.call(message, \"header\"))\n            $root.ReportHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.tracesPerQuery != null && Object.hasOwnProperty.call(message, \"tracesPerQuery\"))\n            for (var keys = Object.keys(message.tracesPerQuery), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TracesAndStats.encode(message.tracesPerQuery[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.operationCount != null && Object.hasOwnProperty.call(message, \"operationCount\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.operationCount);\n        if (message.tracesPreAggregated != null && Object.hasOwnProperty.call(message, \"tracesPreAggregated\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.tracesPreAggregated);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Report message, length delimited. Does not implicitly {@link Report.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Report\n     * @static\n     * @param {IReport} message Report message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Report.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Report message from the specified reader or buffer.\n     * @function decode\n     * @memberof Report\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Report} Report\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Report.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Report(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.header = $root.ReportHeader.decode(reader, reader.uint32());\n                break;\n            case 5:\n                reader.skip().pos++;\n                if (message.tracesPerQuery === $util.emptyObject)\n                    message.tracesPerQuery = {};\n                key = reader.string();\n                reader.pos++;\n                message.tracesPerQuery[key] = $root.TracesAndStats.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 6:\n                message.operationCount = reader.uint64();\n                break;\n            case 7:\n                message.tracesPreAggregated = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Report message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Report\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Report} Report\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Report.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Report message.\n     * @function verify\n     * @memberof Report\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Report.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.header != null && message.hasOwnProperty(\"header\")) {\n            var error = $root.ReportHeader.verify(message.header);\n            if (error)\n                return \"header.\" + error;\n        }\n        if (message.tracesPerQuery != null && message.hasOwnProperty(\"tracesPerQuery\")) {\n            if (!$util.isObject(message.tracesPerQuery))\n                return \"tracesPerQuery: object expected\";\n            var key = Object.keys(message.tracesPerQuery);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TracesAndStats.verify(message.tracesPerQuery[key[i]]);\n                if (error)\n                    return \"tracesPerQuery.\" + error;\n            }\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        if (message.operationCount != null && message.hasOwnProperty(\"operationCount\"))\n            if (!$util.isInteger(message.operationCount) && !(message.operationCount && $util.isInteger(message.operationCount.low) && $util.isInteger(message.operationCount.high)))\n                return \"operationCount: integer|Long expected\";\n        if (message.tracesPreAggregated != null && message.hasOwnProperty(\"tracesPreAggregated\"))\n            if (typeof message.tracesPreAggregated !== \"boolean\")\n                return \"tracesPreAggregated: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a Report message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Report\n     * @static\n     * @param {Report} message Report\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Report.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.tracesPerQuery = {};\n        if (options.defaults) {\n            object.header = null;\n            object.endTime = null;\n            object.operationCount = 0;\n            object.tracesPreAggregated = false;\n        }\n        if (message.header != null && message.hasOwnProperty(\"header\"))\n            object.header = $root.ReportHeader.toObject(message.header, options);\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        var keys2;\n        if (message.tracesPerQuery && (keys2 = Object.keys(message.tracesPerQuery)).length) {\n            object.tracesPerQuery = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.tracesPerQuery[keys2[j]] = $root.TracesAndStats.toObject(message.tracesPerQuery[keys2[j]], options);\n        }\n        if (message.operationCount != null && message.hasOwnProperty(\"operationCount\"))\n            if (typeof message.operationCount === \"number\")\n                object.operationCount = options.longs === String ? String(message.operationCount) : message.operationCount;\n            else\n                object.operationCount = options.longs === String ? $util.Long.prototype.toString.call(message.operationCount) : options.longs === Number ? new $util.LongBits(message.operationCount.low >>> 0, message.operationCount.high >>> 0).toNumber(true) : message.operationCount;\n        if (message.tracesPreAggregated != null && message.hasOwnProperty(\"tracesPreAggregated\"))\n            object.tracesPreAggregated = message.tracesPreAggregated;\n        return object;\n    };\n\n    /**\n     * Converts this Report to JSON.\n     * @function toJSON\n     * @memberof Report\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Report.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Report;\n})();\n\n$root.ContextualizedStats = (function() {\n\n    /**\n     * Properties of a ContextualizedStats.\n     * @exports IContextualizedStats\n     * @interface IContextualizedStats\n     * @property {IStatsContext|null} [context] ContextualizedStats context\n     * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedStats queryLatencyStats\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedStats perTypeStat\n     */\n\n    /**\n     * Constructs a new ContextualizedStats.\n     * @exports ContextualizedStats\n     * @classdesc Represents a ContextualizedStats.\n     * @implements IContextualizedStats\n     * @constructor\n     * @param {IContextualizedStats=} [properties] Properties to set\n     */\n    function ContextualizedStats(properties) {\n        this.perTypeStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.context = null;\n\n    /**\n     * ContextualizedStats queryLatencyStats.\n     * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.queryLatencyStats = null;\n\n    /**\n     * ContextualizedStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * Creates a new ContextualizedStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats=} [properties] Properties to set\n     * @returns {ContextualizedStats} ContextualizedStats instance\n     */\n    ContextualizedStats.create = function create(properties) {\n        return new ContextualizedStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedStats message. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\"))\n            $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedStats message, length delimited. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedStats} ContextualizedStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n                break;\n            case 3:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedStats} ContextualizedStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedStats message.\n     * @function verify\n     * @memberof ContextualizedStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n            var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n            if (error)\n                return \"queryLatencyStats.\" + error;\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            var key = Object.keys(message.perTypeStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedStats\n     * @static\n     * @param {ContextualizedStats} message ContextualizedStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.perTypeStat = {};\n        if (options.defaults) {\n            object.context = null;\n            object.queryLatencyStats = null;\n        }\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\"))\n            object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n        var keys2;\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedStats;\n})();\n\n$root.TracesAndStats = (function() {\n\n    /**\n     * Properties of a TracesAndStats.\n     * @exports ITracesAndStats\n     * @interface ITracesAndStats\n     * @property {Array.<ITrace|Uint8Array>|null} [trace] TracesAndStats trace\n     * @property {$protobuf.ToArray.<IContextualizedStats>|Array.<IContextualizedStats>|null} [statsWithContext] TracesAndStats statsWithContext\n     * @property {Object.<string,IReferencedFieldsForType>|null} [referencedFieldsByType] TracesAndStats referencedFieldsByType\n     * @property {Array.<ITrace|Uint8Array>|null} [internalTracesContributingToStats] TracesAndStats internalTracesContributingToStats\n     */\n\n    /**\n     * Constructs a new TracesAndStats.\n     * @exports TracesAndStats\n     * @classdesc Represents a TracesAndStats.\n     * @implements ITracesAndStats\n     * @constructor\n     * @param {ITracesAndStats=} [properties] Properties to set\n     */\n    function TracesAndStats(properties) {\n        this.trace = [];\n        this.statsWithContext = [];\n        this.referencedFieldsByType = {};\n        this.internalTracesContributingToStats = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TracesAndStats trace.\n     * @member {Array.<ITrace|Uint8Array>} trace\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.trace = $util.emptyArray;\n\n    /**\n     * TracesAndStats statsWithContext.\n     * @member {Array.<IContextualizedStats>} statsWithContext\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.statsWithContext = $util.emptyArray;\n\n    /**\n     * TracesAndStats referencedFieldsByType.\n     * @member {Object.<string,IReferencedFieldsForType>} referencedFieldsByType\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.referencedFieldsByType = $util.emptyObject;\n\n    /**\n     * TracesAndStats internalTracesContributingToStats.\n     * @member {Array.<ITrace|Uint8Array>} internalTracesContributingToStats\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.internalTracesContributingToStats = $util.emptyArray;\n\n    /**\n     * Creates a new TracesAndStats instance using the specified properties.\n     * @function create\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats=} [properties] Properties to set\n     * @returns {TracesAndStats} TracesAndStats instance\n     */\n    TracesAndStats.create = function create(properties) {\n        return new TracesAndStats(properties);\n    };\n\n    /**\n     * Encodes the specified TracesAndStats message. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n     * @function encode\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesAndStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.trace != null && message.trace.length)\n            for (var i = 0; i < message.trace.length; ++i)\n                if (message.trace[i] instanceof Uint8Array) {\n                    writer.uint32(/* id 1, wireType 2 =*/10);\n                    writer.bytes(message.trace[i]);\n                } else\n                    $root.Trace.encode(message.trace[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        var array2;\n        if (message.statsWithContext != null && message.statsWithContext.toArray)\n            array2 = message.statsWithContext.toArray();\n        else\n            array2 = message.statsWithContext;\n        if (array2 != null && array2.length)\n            for (var i = 0; i < array2.length; ++i)\n                $root.ContextualizedStats.encode(array2[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.internalTracesContributingToStats != null && message.internalTracesContributingToStats.length)\n            for (var i = 0; i < message.internalTracesContributingToStats.length; ++i)\n                if (message.internalTracesContributingToStats[i] instanceof Uint8Array) {\n                    writer.uint32(/* id 3, wireType 2 =*/26);\n                    writer.bytes(message.internalTracesContributingToStats[i]);\n                } else\n                    $root.Trace.encode(message.internalTracesContributingToStats[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.referencedFieldsByType != null && Object.hasOwnProperty.call(message, \"referencedFieldsByType\"))\n            for (var keys = Object.keys(message.referencedFieldsByType), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.ReferencedFieldsForType.encode(message.referencedFieldsByType[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TracesAndStats message, length delimited. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesAndStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TracesAndStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof TracesAndStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TracesAndStats} TracesAndStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesAndStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TracesAndStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.trace && message.trace.length))\n                    message.trace = [];\n                message.trace.push($root.Trace.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                if (!(message.statsWithContext && message.statsWithContext.length))\n                    message.statsWithContext = [];\n                message.statsWithContext.push($root.ContextualizedStats.decode(reader, reader.uint32()));\n                break;\n            case 4:\n                reader.skip().pos++;\n                if (message.referencedFieldsByType === $util.emptyObject)\n                    message.referencedFieldsByType = {};\n                key = reader.string();\n                reader.pos++;\n                message.referencedFieldsByType[key] = $root.ReferencedFieldsForType.decode(reader, reader.uint32());\n                break;\n            case 3:\n                if (!(message.internalTracesContributingToStats && message.internalTracesContributingToStats.length))\n                    message.internalTracesContributingToStats = [];\n                message.internalTracesContributingToStats.push($root.Trace.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TracesAndStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TracesAndStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TracesAndStats} TracesAndStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesAndStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TracesAndStats message.\n     * @function verify\n     * @memberof TracesAndStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TracesAndStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n            if (!Array.isArray(message.trace))\n                return \"trace: array expected\";\n            for (var i = 0; i < message.trace.length; ++i)\n                if (!(message.trace[i] instanceof Uint8Array)) {\n                    var error = $root.Trace.verify(message.trace[i]);\n                    if (error)\n                        return \"trace.\" + error;\n                }\n        }\n        if (message.statsWithContext != null && message.hasOwnProperty(\"statsWithContext\")) {\n            var array2;\n            if (message.statsWithContext != null && message.statsWithContext.toArray)\n                array2 = message.statsWithContext.toArray();\n            else\n                array2 = message.statsWithContext;\n            if (!Array.isArray(array2))\n                return \"statsWithContext: array expected\";\n            for (var i = 0; i < array2.length; ++i) {\n                var error = $root.ContextualizedStats.verify(array2[i]);\n                if (error)\n                    return \"statsWithContext.\" + error;\n            }\n        }\n        if (message.referencedFieldsByType != null && message.hasOwnProperty(\"referencedFieldsByType\")) {\n            if (!$util.isObject(message.referencedFieldsByType))\n                return \"referencedFieldsByType: object expected\";\n            var key = Object.keys(message.referencedFieldsByType);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.ReferencedFieldsForType.verify(message.referencedFieldsByType[key[i]]);\n                if (error)\n                    return \"referencedFieldsByType.\" + error;\n            }\n        }\n        if (message.internalTracesContributingToStats != null && message.hasOwnProperty(\"internalTracesContributingToStats\")) {\n            if (!Array.isArray(message.internalTracesContributingToStats))\n                return \"internalTracesContributingToStats: array expected\";\n            for (var i = 0; i < message.internalTracesContributingToStats.length; ++i)\n                if (!(message.internalTracesContributingToStats[i] instanceof Uint8Array)) {\n                    var error = $root.Trace.verify(message.internalTracesContributingToStats[i]);\n                    if (error)\n                        return \"internalTracesContributingToStats.\" + error;\n                }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a TracesAndStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TracesAndStats\n     * @static\n     * @param {TracesAndStats} message TracesAndStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TracesAndStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.trace = [];\n            object.statsWithContext = [];\n            object.internalTracesContributingToStats = [];\n        }\n        if (options.objects || options.defaults)\n            object.referencedFieldsByType = {};\n        if (message.trace && message.trace.length) {\n            object.trace = [];\n            for (var j = 0; j < message.trace.length; ++j)\n                object.trace[j] = $root.Trace.toObject(message.trace[j], options);\n        }\n        if (message.statsWithContext && message.statsWithContext.length) {\n            object.statsWithContext = [];\n            for (var j = 0; j < message.statsWithContext.length; ++j)\n                object.statsWithContext[j] = $root.ContextualizedStats.toObject(message.statsWithContext[j], options);\n        }\n        if (message.internalTracesContributingToStats && message.internalTracesContributingToStats.length) {\n            object.internalTracesContributingToStats = [];\n            for (var j = 0; j < message.internalTracesContributingToStats.length; ++j)\n                object.internalTracesContributingToStats[j] = $root.Trace.toObject(message.internalTracesContributingToStats[j], options);\n        }\n        var keys2;\n        if (message.referencedFieldsByType && (keys2 = Object.keys(message.referencedFieldsByType)).length) {\n            object.referencedFieldsByType = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.referencedFieldsByType[keys2[j]] = $root.ReferencedFieldsForType.toObject(message.referencedFieldsByType[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TracesAndStats to JSON.\n     * @function toJSON\n     * @memberof TracesAndStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TracesAndStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TracesAndStats;\n})();\n\n$root.google = (function() {\n\n    /**\n     * Namespace google.\n     * @exports google\n     * @namespace\n     */\n    var google = {};\n\n    google.protobuf = (function() {\n\n        /**\n         * Namespace protobuf.\n         * @memberof google\n         * @namespace\n         */\n        var protobuf = {};\n\n        protobuf.Timestamp = (function() {\n\n            /**\n             * Properties of a Timestamp.\n             * @memberof google.protobuf\n             * @interface ITimestamp\n             * @property {number|null} [seconds] Timestamp seconds\n             * @property {number|null} [nanos] Timestamp nanos\n             */\n\n            /**\n             * Constructs a new Timestamp.\n             * @memberof google.protobuf\n             * @classdesc Represents a Timestamp.\n             * @implements ITimestamp\n             * @constructor\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             */\n            function Timestamp(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Timestamp seconds.\n             * @member {number} seconds\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.seconds = 0;\n\n            /**\n             * Timestamp nanos.\n             * @member {number} nanos\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.nanos = 0;\n\n            /**\n             * Creates a new Timestamp instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             * @returns {google.protobuf.Timestamp} Timestamp instance\n             */\n            Timestamp.create = function create(properties) {\n                return new Timestamp(properties);\n            };\n\n            /**\n             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);\n                if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.seconds = reader.int64();\n                        break;\n                    case 2:\n                        message.nanos = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Timestamp message.\n             * @function verify\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Timestamp.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))\n                        return \"seconds: integer|Long expected\";\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    if (!$util.isInteger(message.nanos))\n                        return \"nanos: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.Timestamp} message Timestamp\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Timestamp.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.seconds = 0;\n                    object.nanos = 0;\n                }\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (typeof message.seconds === \"number\")\n                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;\n                    else\n                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    object.nanos = message.nanos;\n                return object;\n            };\n\n            /**\n             * Converts this Timestamp to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Timestamp.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Timestamp;\n        })();\n\n        return protobuf;\n    })();\n\n    return google;\n})();\n\nmodule.exports = $root;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby91c2FnZS1yZXBvcnRpbmctcHJvdG9idWYvZ2VuZXJhdGVkL2Nqcy9wcm90b2J1Zi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUNhOztBQUViLGdCQUFnQixtQkFBTyxDQUFDLHNGQUE0Qjs7QUFFcEQ7QUFDQTs7QUFFQTtBQUNBLDBFQUEwRTs7QUFFMUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUNBQWlDO0FBQ25ELGtCQUFrQixpQ0FBaUM7QUFDbkQsa0JBQWtCLGFBQWE7QUFDL0Isa0JBQWtCLGtCQUFrQjtBQUNwQyxrQkFBa0IsY0FBYztBQUNoQyxrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IscUJBQXFCO0FBQ3ZDLGtCQUFrQixhQUFhO0FBQy9CLGtCQUFrQixhQUFhO0FBQy9CLGtCQUFrQixrQkFBa0I7QUFDcEMsa0JBQWtCLHlCQUF5QjtBQUMzQyxrQkFBa0IsMkJBQTJCO0FBQzdDLGtCQUFrQixjQUFjO0FBQ2hDLGtCQUFrQixjQUFjO0FBQ2hDLGtCQUFrQixjQUFjO0FBQ2hDLGtCQUFrQixjQUFjO0FBQ2hDLGtCQUFrQixjQUFjO0FBQ2hDLGtCQUFrQixhQUFhO0FBQy9COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QjtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsaUJBQWlCO0FBQzdFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLDJDQUEyQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLDJDQUEyQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQiw0QkFBNEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsK0JBQStCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQiw0QkFBNEI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixtQ0FBbUM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixxQ0FBcUM7QUFDckQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsU0FBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixpQkFBaUIsT0FBTztBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlFQUFpRSwyQkFBMkI7QUFDNUY7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsa0JBQWtCO0FBQ2pDLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtRkFBbUYsMkJBQTJCO0FBQzlHO0FBQ0E7QUFDQTtBQUNBLGVBQWUsUUFBUTtBQUN2QixlQUFlLGtCQUFrQjtBQUNqQyxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLE9BQU87QUFDeEIsZ0JBQWdCLE9BQU87QUFDdkIsZ0JBQWdCLDhCQUE4QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNkJBQTZCO0FBQzVDLGlCQUFpQixPQUFPO0FBQ3hCLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFtQjtBQUNsQyxpQkFBaUIsYUFBYTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLE9BQU87QUFDdEIsZUFBZSw4QkFBOEI7QUFDN0MsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsOEJBQThCO0FBQ3BELHNCQUFzQixhQUFhO0FBQ25DOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixxQkFBcUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLGlCQUFpQjtBQUNqRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQix5QkFBeUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIscUJBQXFCO0FBQ3hDLHFCQUFxQixtQkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyRUFBMkUsdUNBQXVDO0FBQ2xIO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixvQkFBb0I7QUFDdkMsbUJBQW1CLGtCQUFrQjtBQUNyQyxxQkFBcUIsa0JBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkZBQTZGLHVDQUF1QztBQUNwSTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsb0JBQW9CO0FBQ3ZDLG1CQUFtQixrQkFBa0I7QUFDckMscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDZCQUE2QjtBQUNoRCxtQkFBbUIsUUFBUTtBQUMzQixxQkFBcUIsbUJBQW1CO0FBQ3hDLG9CQUFvQixPQUFPO0FBQzNCLG9CQUFvQiw4QkFBOEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkJBQTZCO0FBQ2hELHFCQUFxQixtQkFBbUI7QUFDeEMsb0JBQW9CLE9BQU87QUFDM0Isb0JBQW9CLDhCQUE4QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixtQkFBbUI7QUFDdEMscUJBQXFCLGFBQWE7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbUJBQW1CO0FBQ3RDLG1CQUFtQiw4QkFBOEI7QUFDakQscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixtQkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLHNCQUFzQixRQUFRO0FBQzlCLHNCQUFzQixRQUFRO0FBQzlCLHNCQUFzQixRQUFRO0FBQzlCO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTOztBQUVUO0FBQ0EsS0FBSzs7QUFFTDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQiw2QkFBNkI7QUFDbkQsc0JBQXNCLGFBQWE7QUFDbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxpQkFBaUI7QUFDakY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0Isd0JBQXdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGlCQUFpQjtBQUNwQyxxQkFBcUIsZUFBZTtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVFQUF1RSxtQ0FBbUM7QUFDMUc7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGdCQUFnQjtBQUNuQyxtQkFBbUIsa0JBQWtCO0FBQ3JDLHFCQUFxQixrQkFBa0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwyRUFBMkUsaUJBQWlCO0FBQzVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHlGQUF5RixtQ0FBbUM7QUFDNUg7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGdCQUFnQjtBQUNuQyxtQkFBbUIsa0JBQWtCO0FBQ3JDLHFCQUFxQixrQkFBa0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw2QkFBNkI7QUFDaEQsbUJBQW1CLFFBQVE7QUFDM0IscUJBQXFCLGVBQWU7QUFDcEMsb0JBQW9CLE9BQU87QUFDM0Isb0JBQW9CLDhCQUE4QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkJBQTZCO0FBQ2hELHFCQUFxQixlQUFlO0FBQ3BDLG9CQUFvQixPQUFPO0FBQzNCLG9CQUFvQiw4QkFBOEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbUJBQW1CO0FBQ3RDLHFCQUFxQixhQUFhO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0MsZ0JBQWdCO0FBQ2hEO0FBQ0Esc0RBQXNELFVBQVU7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQyxtQkFBbUIsOEJBQThCO0FBQ2pELHFCQUFxQixtQkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxrQkFBa0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixtQkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGFBQWE7QUFDbkMsc0JBQXNCLDhCQUE4QjtBQUNwRCxzQkFBc0IsYUFBYTtBQUNuQyxzQkFBc0IsYUFBYTtBQUNuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxpQkFBaUI7QUFDakY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLHlCQUF5QjtBQUM3QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZUFBZTtBQUNsQyxxQkFBcUIsYUFBYTtBQUNsQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHFFQUFxRSxpQ0FBaUM7QUFDdEc7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGNBQWM7QUFDakMsbUJBQW1CLGtCQUFrQjtBQUNyQyxxQkFBcUIsa0JBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDZCQUE2QjtBQUM3RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVGQUF1RixpQ0FBaUM7QUFDeEg7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGNBQWM7QUFDakMsbUJBQW1CLGtCQUFrQjtBQUNyQyxxQkFBcUIsa0JBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkJBQTZCO0FBQ2hELG1CQUFtQixRQUFRO0FBQzNCLHFCQUFxQixhQUFhO0FBQ2xDLG9CQUFvQixPQUFPO0FBQzNCLG9CQUFvQiw4QkFBOEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDZCQUE2QjtBQUNoRCxxQkFBcUIsYUFBYTtBQUNsQyxvQkFBb0IsT0FBTztBQUMzQixvQkFBb0IsOEJBQThCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFtQjtBQUN0QyxxQkFBcUIsYUFBYTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw2QkFBNkI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixhQUFhO0FBQ2hDLG1CQUFtQiw4QkFBOEI7QUFDakQscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyw2QkFBNkI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isd0JBQXdCO0FBQzlDLHNCQUFzQix5Q0FBeUM7QUFDL0Qsc0JBQXNCLHlDQUF5QztBQUMvRCxzQkFBc0IsYUFBYTtBQUNuQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsY0FBYztBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0VBQWdFLGlCQUFpQjtBQUNqRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixtQkFBbUI7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixvQ0FBb0M7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixvQ0FBb0M7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsY0FBYztBQUNqQyxxQkFBcUIsWUFBWTtBQUNqQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG9FQUFvRSxnQ0FBZ0M7QUFDcEc7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGFBQWE7QUFDaEMsbUJBQW1CLGtCQUFrQjtBQUNyQyxxQkFBcUIsa0JBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEVBQTRFLGlCQUFpQjtBQUM3RjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZFQUE2RSxpQkFBaUI7QUFDOUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzRkFBc0YsZ0NBQWdDO0FBQ3RIO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixhQUFhO0FBQ2hDLG1CQUFtQixrQkFBa0I7QUFDckMscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDZCQUE2QjtBQUNoRCxtQkFBbUIsUUFBUTtBQUMzQixxQkFBcUIsWUFBWTtBQUNqQyxvQkFBb0IsT0FBTztBQUMzQixvQkFBb0IsOEJBQThCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkJBQTZCO0FBQ2hELHFCQUFxQixZQUFZO0FBQ2pDLG9CQUFvQixPQUFPO0FBQzNCLG9CQUFvQiw4QkFBOEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbUJBQW1CO0FBQ3RDLHFCQUFxQixhQUFhO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxnQkFBZ0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLGdCQUFnQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFlBQVk7QUFDL0IsbUJBQW1CLDhCQUE4QjtBQUNqRCxxQkFBcUIsbUJBQW1CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxrQkFBa0I7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQ0FBZ0Msa0JBQWtCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixxQkFBcUI7QUFDL0M7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLHFCQUFxQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxpQkFBaUI7QUFDckY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IsZ0JBQWdCO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIscUJBQXFCO0FBQzVDLHlCQUF5QixtQkFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwRUFBMEUsdUNBQXVDO0FBQ2pIO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixvQkFBb0I7QUFDM0MsdUJBQXVCLGtCQUFrQjtBQUN6Qyx5QkFBeUIsa0JBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsMEJBQTBCO0FBQzlEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDRGQUE0Rix1Q0FBdUM7QUFDbkk7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG9CQUFvQjtBQUMzQyx1QkFBdUIsa0JBQWtCO0FBQ3pDLHlCQUF5QixrQkFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQsdUJBQXVCLFFBQVE7QUFDL0IseUJBQXlCLG1CQUFtQjtBQUM1Qyx3QkFBd0IsT0FBTztBQUMvQix3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQseUJBQXlCLG1CQUFtQjtBQUM1Qyx3QkFBd0IsT0FBTztBQUMvQix3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFtQjtBQUMxQyx5QkFBeUIsYUFBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywwQkFBMEI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFtQjtBQUMxQyx1QkFBdUIsOEJBQThCO0FBQ3JELHlCQUF5QixtQkFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDBCQUEwQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCLHNCQUFzQixRQUFRO0FBQzlCLHNCQUFzQixRQUFRO0FBQzlCLHNCQUFzQixRQUFRO0FBQzlCLHNCQUFzQixRQUFRO0FBQzlCLHNCQUFzQixRQUFRO0FBQzlCLHNCQUFzQixRQUFRO0FBQzlCLHNCQUFzQixRQUFRO0FBQzlCLHNCQUFzQixRQUFRO0FBQzlCLHNCQUFzQixRQUFRO0FBQzlCLHNCQUFzQixRQUFRO0FBQzlCO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGFBQWE7QUFDbkMsc0JBQXNCLGFBQWE7QUFDbkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGtCQUFrQjtBQUNyQztBQUNBO0FBQ0E7QUFDQSxnRUFBZ0UsaUJBQWlCO0FBQ2pGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsa0JBQWtCO0FBQ3JDLHFCQUFxQixnQkFBZ0I7QUFDckM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx3RUFBd0Usb0NBQW9DO0FBQzVHO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixpQkFBaUI7QUFDcEMsbUJBQW1CLGtCQUFrQjtBQUNyQyxxQkFBcUIsa0JBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEZBQTBGLG9DQUFvQztBQUM5SDtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDLG1CQUFtQixrQkFBa0I7QUFDckMscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDZCQUE2QjtBQUNoRCxtQkFBbUIsUUFBUTtBQUMzQixxQkFBcUIsZ0JBQWdCO0FBQ3JDLG9CQUFvQixPQUFPO0FBQzNCLG9CQUFvQiw4QkFBOEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkJBQTZCO0FBQ2hELHFCQUFxQixnQkFBZ0I7QUFDckMsb0JBQW9CLE9BQU87QUFDM0Isb0JBQW9CLDhCQUE4QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixtQkFBbUI7QUFDdEMscUJBQXFCLGFBQWE7QUFDbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsZ0JBQWdCO0FBQ25DLG1CQUFtQiw4QkFBOEI7QUFDakQscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQixtQkFBbUI7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLGFBQWE7QUFDbkMsc0JBQXNCLGFBQWE7QUFDbkMsc0JBQXNCLGFBQWE7QUFDbkMsc0JBQXNCLGFBQWE7QUFDbkMsc0JBQXNCLGFBQWE7QUFDbkMsc0JBQXNCLHlCQUF5QjtBQUMvQyxzQkFBc0IsYUFBYTtBQUNuQyxzQkFBc0IsYUFBYTtBQUNuQyxzQkFBc0IsMkJBQTJCO0FBQ2pELHNCQUFzQiwwQkFBMEI7QUFDaEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLGNBQWM7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxpQkFBaUI7QUFDakY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLFFBQVE7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixtQ0FBbUM7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQixRQUFRO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsUUFBUTtBQUM1QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLHNCQUFzQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLHFCQUFxQjtBQUN6QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0Isa0NBQWtDO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixjQUFjO0FBQ2pDLHFCQUFxQixZQUFZO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esb0VBQW9FLGdDQUFnQztBQUNwRztBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsYUFBYTtBQUNoQyxtQkFBbUIsa0JBQWtCO0FBQ3JDLHFCQUFxQixrQkFBa0I7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywwQkFBMEI7QUFDMUQ7QUFDQTtBQUNBLGdDQUFnQywwQkFBMEI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzRkFBc0YsZ0NBQWdDO0FBQ3RIO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixhQUFhO0FBQ2hDLG1CQUFtQixrQkFBa0I7QUFDckMscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLDZCQUE2QjtBQUNoRCxtQkFBbUIsUUFBUTtBQUMzQixxQkFBcUIsWUFBWTtBQUNqQyxvQkFBb0IsT0FBTztBQUMzQixvQkFBb0IsOEJBQThCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkJBQTZCO0FBQ2hELHFCQUFxQixZQUFZO0FBQ2pDLG9CQUFvQixPQUFPO0FBQzNCLG9CQUFvQiw4QkFBOEI7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsbUJBQW1CO0FBQ3RDLHFCQUFxQixhQUFhO0FBQ2xDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDBCQUEwQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDBCQUEwQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLFlBQVk7QUFDL0IsbUJBQW1CLDhCQUE4QjtBQUNqRCxxQkFBcUIsbUJBQW1CO0FBQ3hDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0NBQWdDLDBCQUEwQjtBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQywwQkFBMEI7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7O0FBRUw7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isd0NBQXdDO0FBQzlELHNCQUFzQix3Q0FBd0M7QUFDOUQsc0JBQXNCLHFDQUFxQztBQUMzRCxzQkFBc0IsdUNBQXVDO0FBQzdELHNCQUFzQixxQ0FBcUM7QUFDM0Qsc0JBQXNCLHlDQUF5QztBQUMvRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsdUJBQXVCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBLGdFQUFnRSxpQkFBaUI7QUFDakY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0Isa0RBQWtEO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0Isa0RBQWtEO0FBQ3RFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsK0NBQStDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsaURBQWlEO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsK0NBQStDO0FBQ25FO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQkFBb0IsbURBQW1EO0FBQ3ZFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9CQUFvQix1RUFBdUU7QUFDM0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLHVCQUF1QjtBQUMxQyxxQkFBcUIscUJBQXFCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkVBQTZFLHlDQUF5QztBQUN0SDtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsc0JBQXNCO0FBQ3pDLG1CQUFtQixrQkFBa0I7QUFDckMscUJBQXFCLGtCQUFrQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrRkFBK0YseUNBQXlDO0FBQ3hJO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQixzQkFBc0I7QUFDekMsbUJBQW1CLGtCQUFrQjtBQUNyQyxxQkFBcUIsa0JBQWtCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIsNkJBQTZCO0FBQ2hELG1CQUFtQixRQUFRO0FBQzNCLHFCQUFxQixxQkFBcUI7QUFDMUMsb0JBQW9CLE9BQU87QUFDM0Isb0JBQW9CLDhCQUE4QjtBQUNsRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG1CQUFtQiw2QkFBNkI7QUFDaEQscUJBQXFCLHFCQUFxQjtBQUMxQyxvQkFBb0IsT0FBTztBQUMzQixvQkFBb0IsOEJBQThCO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLG1CQUFtQjtBQUN0QyxxQkFBcUIsYUFBYTtBQUNsQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUIscUJBQXFCO0FBQ3hDLG1CQUFtQiw4QkFBOEI7QUFDakQscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG1CQUFtQjtBQUN4QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQixtQ0FBbUM7QUFDN0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG9DQUFvQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxpQkFBaUI7QUFDckY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsb0NBQW9DO0FBQzNELHlCQUF5QixrQ0FBa0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnRkFBZ0Ysc0RBQXNEO0FBQ3RJO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtQ0FBbUM7QUFDMUQsdUJBQXVCLGtCQUFrQjtBQUN6Qyx5QkFBeUIsa0JBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsMEJBQTBCO0FBQzlEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtHQUFrRyxzREFBc0Q7QUFDeEo7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1DQUFtQztBQUMxRCx1QkFBdUIsa0JBQWtCO0FBQ3pDLHlCQUF5QixrQkFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQsdUJBQXVCLFFBQVE7QUFDL0IseUJBQXlCLGtDQUFrQztBQUMzRCx3QkFBd0IsT0FBTztBQUMvQix3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQseUJBQXlCLGtDQUFrQztBQUMzRCx3QkFBd0IsT0FBTztBQUMvQix3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFtQjtBQUMxQyx5QkFBeUIsYUFBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywwQkFBMEI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixrQ0FBa0M7QUFDekQsdUJBQXVCLDhCQUE4QjtBQUNyRCx5QkFBeUIsbUJBQW1CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywwQkFBMEI7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtQkFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTOztBQUVUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLG1DQUFtQztBQUM3RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsb0NBQW9DO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLGlCQUFpQjtBQUNyRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3Qiw4QkFBOEI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixvQ0FBb0M7QUFDM0QseUJBQXlCLGtDQUFrQztBQUMzRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGdGQUFnRixzREFBc0Q7QUFDdEk7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1DQUFtQztBQUMxRCx1QkFBdUIsa0JBQWtCO0FBQ3pDLHlCQUF5QixrQkFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQywwQkFBMEI7QUFDOUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0dBQWtHLHNEQUFzRDtBQUN4SjtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUNBQW1DO0FBQzFELHVCQUF1QixrQkFBa0I7QUFDekMseUJBQXlCLGtCQUFrQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDZCQUE2QjtBQUNwRCx1QkFBdUIsUUFBUTtBQUMvQix5QkFBeUIsa0NBQWtDO0FBQzNELHdCQUF3QixPQUFPO0FBQy9CLHdCQUF3Qiw4QkFBOEI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDZCQUE2QjtBQUNwRCx5QkFBeUIsa0NBQWtDO0FBQzNELHdCQUF3QixPQUFPO0FBQy9CLHdCQUF3Qiw4QkFBOEI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQW1CO0FBQzFDLHlCQUF5QixhQUFhO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDBCQUEwQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGtDQUFrQztBQUN6RCx1QkFBdUIsOEJBQThCO0FBQ3JELHlCQUF5QixtQkFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDBCQUEwQjtBQUM5RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7O0FBRVQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsYUFBYTtBQUN2QywwQkFBMEIsY0FBYztBQUN4QywwQkFBMEIsYUFBYTtBQUN2QywwQkFBMEIsYUFBYTtBQUN2QywwQkFBMEIsaUNBQWlDO0FBQzNELDBCQUEwQixpQ0FBaUM7QUFDM0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlDQUFpQztBQUN4RDtBQUNBO0FBQ0E7QUFDQSxvRUFBb0UsaUJBQWlCO0FBQ3JGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixTQUFTO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IsdUJBQXVCO0FBQy9DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLDJDQUEyQztBQUNuRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLDJDQUEyQztBQUNuRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlDQUFpQztBQUN4RCx5QkFBeUIsK0JBQStCO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNkVBQTZFLG1EQUFtRDtBQUNoSTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsZ0NBQWdDO0FBQ3ZELHVCQUF1QixrQkFBa0I7QUFDekMseUJBQXlCLGtCQUFrQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrRkFBK0YsbURBQW1EO0FBQ2xKO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixnQ0FBZ0M7QUFDdkQsdUJBQXVCLGtCQUFrQjtBQUN6Qyx5QkFBeUIsa0JBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkJBQTZCO0FBQ3BELHVCQUF1QixRQUFRO0FBQy9CLHlCQUF5QiwrQkFBK0I7QUFDeEQsd0JBQXdCLE9BQU87QUFDL0Isd0JBQXdCLDhCQUE4QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQseUJBQXlCLCtCQUErQjtBQUN4RCx3QkFBd0IsT0FBTztBQUMvQix3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFtQjtBQUMxQyx5QkFBeUIsYUFBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwrQkFBK0I7QUFDdEQsdUJBQXVCLDhCQUE4QjtBQUNyRCx5QkFBeUIsbUJBQW1CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7O0FBRVQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsdURBQXVEO0FBQ2pGLDBCQUEwQiwyQkFBMkI7QUFDckQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1DQUFtQztBQUMxRDtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxpQkFBaUI7QUFDckY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0Isa0RBQWtEO0FBQzFFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IscUNBQXFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUNBQW1DO0FBQzFELHlCQUF5QixpQ0FBaUM7QUFDMUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwrRUFBK0UscURBQXFEO0FBQ3BJO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixrQ0FBa0M7QUFDekQsdUJBQXVCLGtCQUFrQjtBQUN6Qyx5QkFBeUIsa0JBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsaUNBQWlDO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpR0FBaUcscURBQXFEO0FBQ3RKO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixrQ0FBa0M7QUFDekQsdUJBQXVCLGtCQUFrQjtBQUN6Qyx5QkFBeUIsa0JBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkJBQTZCO0FBQ3BELHVCQUF1QixRQUFRO0FBQy9CLHlCQUF5QixpQ0FBaUM7QUFDMUQsd0JBQXdCLE9BQU87QUFDL0Isd0JBQXdCLDhCQUE4QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkJBQTZCO0FBQ3BELHlCQUF5QixpQ0FBaUM7QUFDMUQsd0JBQXdCLE9BQU87QUFDL0Isd0JBQXdCLDhCQUE4QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtQkFBbUI7QUFDMUMseUJBQXlCLGFBQWE7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsaUNBQWlDO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGlDQUFpQztBQUN4RCx1QkFBdUIsOEJBQThCO0FBQ3JELHlCQUF5QixtQkFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyxpQ0FBaUM7QUFDckU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsbUJBQW1CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUzs7QUFFVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQiw0Q0FBNEM7QUFDdEUsMEJBQTBCLGdEQUFnRDtBQUMxRTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsaUNBQWlDO0FBQ3hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLGlCQUFpQjtBQUNyRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixzREFBc0Q7QUFDOUU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QiwyQ0FBMkM7QUFDbkU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixpQ0FBaUM7QUFDeEQseUJBQXlCLCtCQUErQjtBQUN4RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZFQUE2RSxtREFBbUQ7QUFDaEk7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGdDQUFnQztBQUN2RCx1QkFBdUIsa0JBQWtCO0FBQ3pDLHlCQUF5QixrQkFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsNkJBQTZCO0FBQ2pFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLCtGQUErRixtREFBbUQ7QUFDbEo7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGdDQUFnQztBQUN2RCx1QkFBdUIsa0JBQWtCO0FBQ3pDLHlCQUF5QixrQkFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQsdUJBQXVCLFFBQVE7QUFDL0IseUJBQXlCLCtCQUErQjtBQUN4RCx3QkFBd0IsT0FBTztBQUMvQix3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQseUJBQXlCLCtCQUErQjtBQUN4RCx3QkFBd0IsT0FBTztBQUMvQix3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFtQjtBQUMxQyx5QkFBeUIsYUFBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsNkJBQTZCO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsK0JBQStCO0FBQ3RELHVCQUF1Qiw4QkFBOEI7QUFDckQseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyw2QkFBNkI7QUFDakU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtQkFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTOztBQUVUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGFBQWE7QUFDdkMsMEJBQTBCLDJCQUEyQjtBQUNyRCwwQkFBMEIsMkJBQTJCO0FBQ3JEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixxQ0FBcUM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0Esb0VBQW9FLGlCQUFpQjtBQUNyRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IscUNBQXFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IscUNBQXFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIscUNBQXFDO0FBQzVELHlCQUF5QixtQ0FBbUM7QUFDNUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxpRkFBaUYsdURBQXVEO0FBQ3hJO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixvQ0FBb0M7QUFDM0QsdUJBQXVCLGtCQUFrQjtBQUN6Qyx5QkFBeUIsa0JBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLG1HQUFtRyx1REFBdUQ7QUFDMUo7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG9DQUFvQztBQUMzRCx1QkFBdUIsa0JBQWtCO0FBQ3pDLHlCQUF5QixrQkFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQsdUJBQXVCLFFBQVE7QUFDL0IseUJBQXlCLG1DQUFtQztBQUM1RCx3QkFBd0IsT0FBTztBQUMvQix3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDZCQUE2QjtBQUNwRCx5QkFBeUIsbUNBQW1DO0FBQzVELHdCQUF3QixPQUFPO0FBQy9CLHdCQUF3Qiw4QkFBOEI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUJBQW1CO0FBQzFDLHlCQUF5QixhQUFhO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUNBQW1DO0FBQzFELHVCQUF1Qiw4QkFBOEI7QUFDckQseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtQkFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTOztBQUVUOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLDJCQUEyQjtBQUNyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsd0NBQXdDO0FBQy9EO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxpQkFBaUI7QUFDckY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IscUNBQXFDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsd0NBQXdDO0FBQy9ELHlCQUF5QixzQ0FBc0M7QUFDL0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvRkFBb0YsMERBQTBEO0FBQzlJO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix1Q0FBdUM7QUFDOUQsdUJBQXVCLGtCQUFrQjtBQUN6Qyx5QkFBeUIsa0JBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzR0FBc0csMERBQTBEO0FBQ2hLO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix1Q0FBdUM7QUFDOUQsdUJBQXVCLGtCQUFrQjtBQUN6Qyx5QkFBeUIsa0JBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkJBQTZCO0FBQ3BELHVCQUF1QixRQUFRO0FBQy9CLHlCQUF5QixzQ0FBc0M7QUFDL0Qsd0JBQXdCLE9BQU87QUFDL0Isd0JBQXdCLDhCQUE4QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQseUJBQXlCLHNDQUFzQztBQUMvRCx3QkFBd0IsT0FBTztBQUMvQix3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFtQjtBQUMxQyx5QkFBeUIsYUFBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsc0NBQXNDO0FBQzdELHVCQUF1Qiw4QkFBOEI7QUFDckQseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5QkFBeUIsbUJBQW1CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsU0FBUzs7QUFFVDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDBCQUEwQix1REFBdUQ7QUFDakYsMEJBQTBCLGFBQWE7QUFDdkMsMEJBQTBCLHVEQUF1RDtBQUNqRiwwQkFBMEIsMkJBQTJCO0FBQ3JEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixvQ0FBb0M7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxpQkFBaUI7QUFDckY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0Isa0RBQWtEO0FBQzFFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLGtEQUFrRDtBQUMxRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLHFDQUFxQztBQUM3RDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG9DQUFvQztBQUMzRCx5QkFBeUIsa0NBQWtDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsZ0ZBQWdGLHNEQUFzRDtBQUN0STtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsbUNBQW1DO0FBQzFELHVCQUF1QixrQkFBa0I7QUFDekMseUJBQXlCLGtCQUFrQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDRCQUE0QjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9DQUFvQyx5QkFBeUI7QUFDN0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtHQUFrRyxzREFBc0Q7QUFDeEo7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1DQUFtQztBQUMxRCx1QkFBdUIsa0JBQWtCO0FBQ3pDLHlCQUF5QixrQkFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQsdUJBQXVCLFFBQVE7QUFDL0IseUJBQXlCLGtDQUFrQztBQUMzRCx3QkFBd0IsT0FBTztBQUMvQix3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkJBQTZCO0FBQ3BELHlCQUF5QixrQ0FBa0M7QUFDM0Qsd0JBQXdCLE9BQU87QUFDL0Isd0JBQXdCLDhCQUE4QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtQkFBbUI7QUFDMUMseUJBQXlCLGFBQWE7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MsNEJBQTRCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MseUJBQXlCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLGtDQUFrQztBQUN6RCx1QkFBdUIsOEJBQThCO0FBQ3JELHlCQUF5QixtQkFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLDRCQUE0QjtBQUNoRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0MseUJBQXlCO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7O0FBRVQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsYUFBYTtBQUN2QywwQkFBMEIsYUFBYTtBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMkNBQTJDO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxpQkFBaUI7QUFDckY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwyQ0FBMkM7QUFDbEUseUJBQXlCLHlDQUF5QztBQUNsRTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVGQUF1Riw2REFBNkQ7QUFDcEo7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDBDQUEwQztBQUNqRSx1QkFBdUIsa0JBQWtCO0FBQ3pDLHlCQUF5QixrQkFBa0I7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx5R0FBeUcsNkRBQTZEO0FBQ3RLO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwwQ0FBMEM7QUFDakUsdUJBQXVCLGtCQUFrQjtBQUN6Qyx5QkFBeUIsa0JBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkJBQTZCO0FBQ3BELHVCQUF1QixRQUFRO0FBQy9CLHlCQUF5Qix5Q0FBeUM7QUFDbEUsd0JBQXdCLE9BQU87QUFDL0Isd0JBQXdCLDhCQUE4QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw2QkFBNkI7QUFDcEQseUJBQXlCLHlDQUF5QztBQUNsRSx3QkFBd0IsT0FBTztBQUMvQix3QkFBd0IsOEJBQThCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLG1CQUFtQjtBQUMxQyx5QkFBeUIsYUFBYTtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix5Q0FBeUM7QUFDaEUsdUJBQXVCLDhCQUE4QjtBQUNyRCx5QkFBeUIsbUJBQW1CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFNBQVM7O0FBRVQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsYUFBYTtBQUN2QywwQkFBMEIsYUFBYTtBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMkNBQTJDO0FBQ2xFO0FBQ0E7QUFDQTtBQUNBLG9FQUFvRSxpQkFBaUI7QUFDckY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3QkFBd0IsUUFBUTtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLCtCQUErQjtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMkNBQTJDO0FBQ2xFLHlCQUF5Qix5Q0FBeUM7QUFDbEU7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1RkFBdUYsNkRBQTZEO0FBQ3BKO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QiwwQ0FBMEM7QUFDakUsdUJBQXVCLGtCQUFrQjtBQUN6Qyx5QkFBeUIsa0JBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EseUdBQXlHLDZEQUE2RDtBQUN0SztBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMENBQTBDO0FBQ2pFLHVCQUF1QixrQkFBa0I7QUFDekMseUJBQXlCLGtCQUFrQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDZCQUE2QjtBQUNwRCx1QkFBdUIsUUFBUTtBQUMvQix5QkFBeUIseUNBQXlDO0FBQ2xFLHdCQUF3QixPQUFPO0FBQy9CLHdCQUF3Qiw4QkFBOEI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkJBQTZCO0FBQ3BELHlCQUF5Qix5Q0FBeUM7QUFDbEUsd0JBQXdCLE9BQU87QUFDL0Isd0JBQXdCLDhCQUE4QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtQkFBbUI7QUFDMUMseUJBQXlCLGFBQWE7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix5Q0FBeUM7QUFDaEUsdUJBQXVCLDhCQUE4QjtBQUNyRCx5QkFBeUIsbUJBQW1CO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtQkFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTOztBQUVUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsYUFBYTtBQUMvQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsaUJBQWlCO0FBQzdFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZ0JBQWdCO0FBQy9CLGlCQUFpQixjQUFjO0FBQy9CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esd0VBQXdFLGtDQUFrQztBQUMxRztBQUNBO0FBQ0E7QUFDQSxlQUFlLGVBQWU7QUFDOUIsZUFBZSxrQkFBa0I7QUFDakMsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEZBQTBGLGtDQUFrQztBQUM1SDtBQUNBO0FBQ0E7QUFDQSxlQUFlLGVBQWU7QUFDOUIsZUFBZSxrQkFBa0I7QUFDakMsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw2QkFBNkI7QUFDNUMsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixjQUFjO0FBQy9CLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxpQkFBaUIsY0FBYztBQUMvQixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEMsaUJBQWlCLGFBQWE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGNBQWM7QUFDN0IsZUFBZSw4QkFBOEI7QUFDN0MsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHNDQUFzQztBQUN4RCxrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsYUFBYTtBQUMvQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGtCQUFrQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxpQkFBaUI7QUFDN0U7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsaUNBQWlDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0JBQWtCO0FBQ2pDLGlCQUFpQixnQkFBZ0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwRUFBMEUsb0NBQW9DO0FBQzlHO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDLGVBQWUsa0JBQWtCO0FBQ2pDLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxpQkFBaUI7QUFDbkY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEZBQTRGLG9DQUFvQztBQUNoSTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQyxlQUFlLGtCQUFrQjtBQUNqQyxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLGdCQUFnQjtBQUNqQyxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNkJBQTZCO0FBQzVDLGlCQUFpQixnQkFBZ0I7QUFDakMsZ0JBQWdCLE9BQU87QUFDdkIsZ0JBQWdCLDhCQUE4QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQW1CO0FBQ2xDLGlCQUFpQixhQUFhO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0JBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQixlQUFlLDhCQUE4QjtBQUM3QyxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsa0JBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdEQUFnRDtBQUNsRSxrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsZ0RBQWdEO0FBQ2xFLGtCQUFrQixzQkFBc0I7QUFDeEMsa0JBQWtCLGFBQWE7QUFDL0Isa0JBQWtCLGdEQUFnRDtBQUNsRSxrQkFBa0IsZ0RBQWdEO0FBQ2xFLGtCQUFrQixhQUFhO0FBQy9CLGtCQUFrQixhQUFhO0FBQy9CLGtCQUFrQixhQUFhO0FBQy9COztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscUJBQXFCO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELGlCQUFpQjtBQUM3RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixnQkFBZ0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0JBQWdCO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsZ0NBQWdDO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxxQkFBcUI7QUFDcEMsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDZFQUE2RSx1Q0FBdUM7QUFDcEg7QUFDQTtBQUNBO0FBQ0EsZUFBZSxvQkFBb0I7QUFDbkMsZUFBZSxrQkFBa0I7QUFDakMsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsb0JBQW9CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG9CQUFvQjtBQUNoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixvQkFBb0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsb0JBQW9CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0ZBQStGLHVDQUF1QztBQUN0STtBQUNBO0FBQ0E7QUFDQSxlQUFlLG9CQUFvQjtBQUNuQyxlQUFlLGtCQUFrQjtBQUNqQyxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLG1CQUFtQjtBQUNwQyxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNkJBQTZCO0FBQzVDLGlCQUFpQixtQkFBbUI7QUFDcEMsZ0JBQWdCLE9BQU87QUFDdkIsZ0JBQWdCLDhCQUE4QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQW1CO0FBQ2xDLGlCQUFpQixhQUFhO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixvQkFBb0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixvQkFBb0I7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsb0JBQW9CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsb0JBQW9CO0FBQ2hEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUJBQW1CO0FBQ2xDLGVBQWUsOEJBQThCO0FBQzdDLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaUNBQWlDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLHNDQUFzQztBQUNsRTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0Qix3Q0FBd0M7QUFDcEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIseUNBQXlDO0FBQ3JFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsYUFBYTtBQUMvQixrQkFBa0IsYUFBYTtBQUMvQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQjtBQUNBO0FBQ0E7QUFDQSw0REFBNEQsaUJBQWlCO0FBQzdFO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGdCQUFnQjtBQUMvQixpQkFBaUIsY0FBYztBQUMvQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdFQUF3RSxrQ0FBa0M7QUFDMUc7QUFDQTtBQUNBO0FBQ0EsZUFBZSxlQUFlO0FBQzlCLGVBQWUsa0JBQWtCO0FBQ2pDLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwwRkFBMEYsa0NBQWtDO0FBQzVIO0FBQ0E7QUFDQTtBQUNBLGVBQWUsZUFBZTtBQUM5QixlQUFlLGtCQUFrQjtBQUNqQyxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLGNBQWM7QUFDL0IsZ0JBQWdCLE9BQU87QUFDdkIsZ0JBQWdCLDhCQUE4QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNkJBQTZCO0FBQzVDLGlCQUFpQixjQUFjO0FBQy9CLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFtQjtBQUNsQyxpQkFBaUIsYUFBYTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsY0FBYztBQUM3QixlQUFlLDhCQUE4QjtBQUM3QyxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IseUJBQXlCO0FBQzNDLGtCQUFrQixvQkFBb0I7QUFDdEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQ0FBbUM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0EsNERBQTRELGlCQUFpQjtBQUM3RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixtQ0FBbUM7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsbUNBQW1DO0FBQ2xELGlCQUFpQixpQ0FBaUM7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSwyRkFBMkYscURBQXFEO0FBQ2hKO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0NBQWtDO0FBQ2pELGVBQWUsa0JBQWtCO0FBQ2pDLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2R0FBNkcscURBQXFEO0FBQ2xLO0FBQ0E7QUFDQTtBQUNBLGVBQWUsa0NBQWtDO0FBQ2pELGVBQWUsa0JBQWtCO0FBQ2pDLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNkJBQTZCO0FBQzVDLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsaUNBQWlDO0FBQ2xELGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxpQkFBaUIsaUNBQWlDO0FBQ2xELGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFtQjtBQUNsQyxpQkFBaUIsYUFBYTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxpQ0FBaUM7QUFDaEQsZUFBZSw4QkFBOEI7QUFDN0MsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLG9CQUFvQjtBQUN0QyxrQkFBa0IsZ0NBQWdDO0FBQ2xEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkJBQTJCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELGlCQUFpQjtBQUM3RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQiwyQkFBMkI7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkJBQTJCO0FBQzFDLGlCQUFpQix5QkFBeUI7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxtRkFBbUYsNkNBQTZDO0FBQ2hJO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMEJBQTBCO0FBQ3pDLGVBQWUsa0JBQWtCO0FBQ2pDLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRUFBcUUsaUJBQWlCO0FBQ3RGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxR0FBcUcsNkNBQTZDO0FBQ2xKO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMEJBQTBCO0FBQ3pDLGVBQWUsa0JBQWtCO0FBQ2pDLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNkJBQTZCO0FBQzVDLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIseUJBQXlCO0FBQzFDLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw2QkFBNkI7QUFDNUMsaUJBQWlCLHlCQUF5QjtBQUMxQyxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEMsaUJBQWlCLGFBQWE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0JBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHlCQUF5QjtBQUN4QyxlQUFlLDhCQUE4QjtBQUM3QyxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsa0JBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixhQUFhO0FBQy9CLGtCQUFrQixhQUFhO0FBQy9CLGtCQUFrQixhQUFhO0FBQy9CLGtCQUFrQixhQUFhO0FBQy9CLGtCQUFrQixhQUFhO0FBQy9CLGtCQUFrQixnREFBZ0Q7QUFDbEU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELGlCQUFpQjtBQUM3RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFFBQVE7QUFDeEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixRQUFRO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLGdCQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxhQUFhO0FBQzVCLGlCQUFpQixXQUFXO0FBQzVCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EscUVBQXFFLCtCQUErQjtBQUNwRztBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0IsZUFBZSxrQkFBa0I7QUFDakMsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixtQkFBbUI7QUFDL0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSx1RkFBdUYsK0JBQStCO0FBQ3RIO0FBQ0E7QUFDQTtBQUNBLGVBQWUsWUFBWTtBQUMzQixlQUFlLGtCQUFrQjtBQUNqQyxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLFdBQVc7QUFDNUIsZ0JBQWdCLE9BQU87QUFDdkIsZ0JBQWdCLDhCQUE4QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxpQkFBaUIsV0FBVztBQUM1QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEMsaUJBQWlCLGFBQWE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLG1CQUFtQjtBQUMvQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFdBQVc7QUFDMUIsZUFBZSw4QkFBOEI7QUFDN0MsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsaUNBQWlDO0FBQzdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IsaUNBQWlDO0FBQ25EOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsWUFBWTtBQUMzQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxpQkFBaUI7QUFDN0U7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsNEJBQTRCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLFlBQVk7QUFDM0IsaUJBQWlCLFVBQVU7QUFDM0I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvRUFBb0UsOEJBQThCO0FBQ2xHO0FBQ0E7QUFDQTtBQUNBLGVBQWUsV0FBVztBQUMxQixlQUFlLGtCQUFrQjtBQUNqQyxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzRUFBc0UsaUJBQWlCO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxzRkFBc0YsOEJBQThCO0FBQ3BIO0FBQ0E7QUFDQTtBQUNBLGVBQWUsV0FBVztBQUMxQixlQUFlLGtCQUFrQjtBQUNqQyxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLFVBQVU7QUFDM0IsZ0JBQWdCLE9BQU87QUFDdkIsZ0JBQWdCLDhCQUE4QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxpQkFBaUIsVUFBVTtBQUMzQixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEMsaUJBQWlCLGFBQWE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixnQkFBZ0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixlQUFlLDhCQUE4QjtBQUM3QyxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLGtCQUFrQjtBQUM5QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IscUJBQXFCO0FBQ3ZDLGtCQUFrQixjQUFjO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMkJBQTJCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNERBQTRELGlCQUFpQjtBQUM3RTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixnQkFBZ0I7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDJCQUEyQjtBQUMxQyxpQkFBaUIseUJBQXlCO0FBQzFDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsbUZBQW1GLDZDQUE2QztBQUNoSTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDBCQUEwQjtBQUN6QyxlQUFlLGtCQUFrQjtBQUNqQyxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsK0JBQStCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxxR0FBcUcsNkNBQTZDO0FBQ2xKO0FBQ0E7QUFDQTtBQUNBLGVBQWUsMEJBQTBCO0FBQ3pDLGVBQWUsa0JBQWtCO0FBQ2pDLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNkJBQTZCO0FBQzVDLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIseUJBQXlCO0FBQzFDLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw2QkFBNkI7QUFDNUMsaUJBQWlCLHlCQUF5QjtBQUMxQyxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEMsaUJBQWlCLGFBQWE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsK0JBQStCO0FBQzNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUseUJBQXlCO0FBQ3hDLGVBQWUsOEJBQThCO0FBQzdDLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwrQkFBK0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQixvQkFBb0I7QUFDdEMsa0JBQWtCLHNDQUFzQztBQUN4RCxrQkFBa0IsaUNBQWlDO0FBQ25ELGtCQUFrQixhQUFhO0FBQy9CLGtCQUFrQixjQUFjO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxpQkFBaUI7QUFDN0U7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsaUNBQWlDO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsMkNBQTJDO0FBQzNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsUUFBUTtBQUN4QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0JBQWdCLFNBQVM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsVUFBVTtBQUN6QixpQkFBaUIsUUFBUTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGtFQUFrRSw0QkFBNEI7QUFDOUY7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCLGVBQWUsa0JBQWtCO0FBQ2pDLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0VBQXdFLGlCQUFpQjtBQUN6RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvRkFBb0YsNEJBQTRCO0FBQ2hIO0FBQ0E7QUFDQTtBQUNBLGVBQWUsU0FBUztBQUN4QixlQUFlLGtCQUFrQjtBQUNqQyxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxlQUFlLFFBQVE7QUFDdkIsaUJBQWlCLFFBQVE7QUFDekIsZ0JBQWdCLE9BQU87QUFDdkIsZ0JBQWdCLDhCQUE4QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxpQkFBaUIsUUFBUTtBQUN6QixnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEMsaUJBQWlCLGFBQWE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0JBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxRQUFRO0FBQ3ZCLGVBQWUsOEJBQThCO0FBQzdDLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixrQkFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0Isb0JBQW9CO0FBQ3RDLGtCQUFrQix5QkFBeUI7QUFDM0Msa0JBQWtCLGdDQUFnQztBQUNsRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHVCQUF1QjtBQUN0QztBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxpQkFBaUI7QUFDN0U7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsbUNBQW1DO0FBQ25EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsMkJBQTJCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHVCQUF1QjtBQUN0QyxpQkFBaUIscUJBQXFCO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0VBQStFLHlDQUF5QztBQUN4SDtBQUNBO0FBQ0E7QUFDQSxlQUFlLHNCQUFzQjtBQUNyQyxlQUFlLGtCQUFrQjtBQUNqQyxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFFQUFxRSxpQkFBaUI7QUFDdEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlHQUFpRyx5Q0FBeUM7QUFDMUk7QUFDQTtBQUNBO0FBQ0EsZUFBZSxzQkFBc0I7QUFDckMsZUFBZSxrQkFBa0I7QUFDakMsaUJBQWlCLGtCQUFrQjtBQUNuQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw2QkFBNkI7QUFDNUMsZUFBZSxRQUFRO0FBQ3ZCLGlCQUFpQixxQkFBcUI7QUFDdEMsZ0JBQWdCLE9BQU87QUFDdkIsZ0JBQWdCLDhCQUE4QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLDZCQUE2QjtBQUM1QyxpQkFBaUIscUJBQXFCO0FBQ3RDLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLG1CQUFtQjtBQUNsQyxpQkFBaUIsYUFBYTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsZ0JBQWdCO0FBQzVDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLHFCQUFxQjtBQUNwQyxlQUFlLDhCQUE4QjtBQUM3QyxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixrQkFBa0I7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdDQUFnQztBQUNsRCxrQkFBa0IsNEVBQTRFO0FBQzlGLGtCQUFrQiwrQ0FBK0M7QUFDakUsa0JBQWtCLGdDQUFnQztBQUNsRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGtCQUFrQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxpQkFBaUI7QUFDN0U7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsMkJBQTJCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsMENBQTBDO0FBQzFEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxnQkFBZ0IsMkJBQTJCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlLGtCQUFrQjtBQUNqQyxpQkFBaUIsZ0JBQWdCO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsMEVBQTBFLG9DQUFvQztBQUM5RztBQUNBO0FBQ0E7QUFDQSxlQUFlLGlCQUFpQjtBQUNoQyxlQUFlLGtCQUFrQjtBQUNqQyxpQkFBaUIsa0JBQWtCO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsMEJBQTBCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixtQkFBbUI7QUFDL0M7QUFDQTtBQUNBLDRCQUE0QixzREFBc0Q7QUFDbEY7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCO0FBQ2xCO0FBQ0E7QUFDQSxnRkFBZ0YsaUJBQWlCO0FBQ2pHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw0RkFBNEYsb0NBQW9DO0FBQ2hJO0FBQ0E7QUFDQTtBQUNBLGVBQWUsaUJBQWlCO0FBQ2hDLGVBQWUsa0JBQWtCO0FBQ2pDLGlCQUFpQixrQkFBa0I7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUsNkJBQTZCO0FBQzVDLGVBQWUsUUFBUTtBQUN2QixpQkFBaUIsZ0JBQWdCO0FBQ2pDLGdCQUFnQixPQUFPO0FBQ3ZCLGdCQUFnQiw4QkFBOEI7QUFDOUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSw2QkFBNkI7QUFDNUMsaUJBQWlCLGdCQUFnQjtBQUNqQyxnQkFBZ0IsT0FBTztBQUN2QixnQkFBZ0IsOEJBQThCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtQkFBbUI7QUFDbEMsaUJBQWlCLGFBQWE7QUFDOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsMEJBQTBCO0FBQ3REO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsbUJBQW1CO0FBQy9DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixnQkFBZ0I7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixzREFBc0Q7QUFDbEY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxnQkFBZ0I7QUFDL0IsZUFBZSw4QkFBOEI7QUFDN0MsaUJBQWlCLG1CQUFtQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNEJBQTRCLDBCQUEwQjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QixxQ0FBcUM7QUFDakU7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsc0RBQXNEO0FBQ2xGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsa0JBQWtCO0FBQzlDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMEJBQTBCLGFBQWE7QUFDdkMsMEJBQTBCLGFBQWE7QUFDdkM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDZCQUE2QjtBQUNwRDtBQUNBO0FBQ0E7QUFDQSxvRUFBb0UsaUJBQWlCO0FBQ3JGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esd0JBQXdCLFFBQVE7QUFDaEM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixRQUFRO0FBQ2hDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkJBQTZCO0FBQ3BELHlCQUF5QiwyQkFBMkI7QUFDcEQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw2RUFBNkUsK0NBQStDO0FBQzVIO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qiw0QkFBNEI7QUFDbkQsdUJBQXVCLGtCQUFrQjtBQUN6Qyx5QkFBeUIsa0JBQWtCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsK0ZBQStGLCtDQUErQztBQUM5STtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNEJBQTRCO0FBQ25ELHVCQUF1QixrQkFBa0I7QUFDekMseUJBQXlCLGtCQUFrQjtBQUMzQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUJBQXVCLDZCQUE2QjtBQUNwRCx1QkFBdUIsUUFBUTtBQUMvQix5QkFBeUIsMkJBQTJCO0FBQ3BELHdCQUF3QixPQUFPO0FBQy9CLHdCQUF3Qiw4QkFBOEI7QUFDdEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsNkJBQTZCO0FBQ3BELHlCQUF5QiwyQkFBMkI7QUFDcEQsd0JBQXdCLE9BQU87QUFDL0Isd0JBQXdCLDhCQUE4QjtBQUN0RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1QixtQkFBbUI7QUFDMUMseUJBQXlCLGFBQWE7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1QkFBdUIsMkJBQTJCO0FBQ2xELHVCQUF1Qiw4QkFBOEI7QUFDckQseUJBQXlCLG1CQUFtQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QixtQkFBbUI7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTOztBQUVUO0FBQ0EsS0FBSzs7QUFFTDtBQUNBLENBQUM7O0FBRUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby91c2FnZS1yZXBvcnRpbmctcHJvdG9idWYvZ2VuZXJhdGVkL2Nqcy9wcm90b2J1Zi5qcz82NTIzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qZXNsaW50LWRpc2FibGUgYmxvY2stc2NvcGVkLXZhciwgaWQtbGVuZ3RoLCBuby1jb250cm9sLXJlZ2V4LCBuby1tYWdpYy1udW1iZXJzLCBuby1wcm90b3R5cGUtYnVpbHRpbnMsIG5vLXJlZGVjbGFyZSwgbm8tc2hhZG93LCBuby12YXIsIHNvcnQtdmFycyovXG5cInVzZSBzdHJpY3RcIjtcblxudmFyICRwcm90b2J1ZiA9IHJlcXVpcmUoXCJAYXBvbGxvL3Byb3RvYnVmanMvbWluaW1hbFwiKTtcblxuLy8gQ29tbW9uIGFsaWFzZXNcbnZhciAkUmVhZGVyID0gJHByb3RvYnVmLlJlYWRlciwgJFdyaXRlciA9ICRwcm90b2J1Zi5Xcml0ZXIsICR1dGlsID0gJHByb3RvYnVmLnV0aWw7XG5cbi8vIEV4cG9ydGVkIHJvb3QgbmFtZXNwYWNlXG52YXIgJHJvb3QgPSAkcHJvdG9idWYucm9vdHNbXCJkZWZhdWx0XCJdIHx8ICgkcHJvdG9idWYucm9vdHNbXCJkZWZhdWx0XCJdID0ge30pO1xuXG4kcm9vdC5UcmFjZSA9IChmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBUcmFjZS5cbiAgICAgKiBAZXhwb3J0cyBJVHJhY2VcbiAgICAgKiBAaW50ZXJmYWNlIElUcmFjZVxuICAgICAqIEBwcm9wZXJ0eSB7Z29vZ2xlLnByb3RvYnVmLklUaW1lc3RhbXB8bnVsbH0gW3N0YXJ0VGltZV0gVHJhY2Ugc3RhcnRUaW1lXG4gICAgICogQHByb3BlcnR5IHtnb29nbGUucHJvdG9idWYuSVRpbWVzdGFtcHxudWxsfSBbZW5kVGltZV0gVHJhY2UgZW5kVGltZVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtkdXJhdGlvbk5zXSBUcmFjZSBkdXJhdGlvbk5zXG4gICAgICogQHByb3BlcnR5IHtUcmFjZS5JTm9kZXxudWxsfSBbcm9vdF0gVHJhY2Ugcm9vdFxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbnxudWxsfSBbaXNJbmNvbXBsZXRlXSBUcmFjZSBpc0luY29tcGxldGVcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbc2lnbmF0dXJlXSBUcmFjZSBzaWduYXR1cmVcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbdW5leGVjdXRlZE9wZXJhdGlvbkJvZHldIFRyYWNlIHVuZXhlY3V0ZWRPcGVyYXRpb25Cb2R5XG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3VuZXhlY3V0ZWRPcGVyYXRpb25OYW1lXSBUcmFjZSB1bmV4ZWN1dGVkT3BlcmF0aW9uTmFtZVxuICAgICAqIEBwcm9wZXJ0eSB7VHJhY2UuSURldGFpbHN8bnVsbH0gW2RldGFpbHNdIFRyYWNlIGRldGFpbHNcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbY2xpZW50TmFtZV0gVHJhY2UgY2xpZW50TmFtZVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtjbGllbnRWZXJzaW9uXSBUcmFjZSBjbGllbnRWZXJzaW9uXG4gICAgICogQHByb3BlcnR5IHtUcmFjZS5JSFRUUHxudWxsfSBbaHR0cF0gVHJhY2UgaHR0cFxuICAgICAqIEBwcm9wZXJ0eSB7VHJhY2UuSUNhY2hlUG9saWN5fG51bGx9IFtjYWNoZVBvbGljeV0gVHJhY2UgY2FjaGVQb2xpY3lcbiAgICAgKiBAcHJvcGVydHkge1RyYWNlLklRdWVyeVBsYW5Ob2RlfG51bGx9IFtxdWVyeVBsYW5dIFRyYWNlIHF1ZXJ5UGxhblxuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbnxudWxsfSBbZnVsbFF1ZXJ5Q2FjaGVIaXRdIFRyYWNlIGZ1bGxRdWVyeUNhY2hlSGl0XG4gICAgICogQHByb3BlcnR5IHtib29sZWFufG51bGx9IFtwZXJzaXN0ZWRRdWVyeUhpdF0gVHJhY2UgcGVyc2lzdGVkUXVlcnlIaXRcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW58bnVsbH0gW3BlcnNpc3RlZFF1ZXJ5UmVnaXN0ZXJdIFRyYWNlIHBlcnNpc3RlZFF1ZXJ5UmVnaXN0ZXJcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW58bnVsbH0gW3JlZ2lzdGVyZWRPcGVyYXRpb25dIFRyYWNlIHJlZ2lzdGVyZWRPcGVyYXRpb25cbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW58bnVsbH0gW2ZvcmJpZGRlbk9wZXJhdGlvbl0gVHJhY2UgZm9yYmlkZGVuT3BlcmF0aW9uXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2ZpZWxkRXhlY3V0aW9uV2VpZ2h0XSBUcmFjZSBmaWVsZEV4ZWN1dGlvbldlaWdodFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBUcmFjZS5cbiAgICAgKiBAZXhwb3J0cyBUcmFjZVxuICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFRyYWNlLlxuICAgICAqIEBpbXBsZW1lbnRzIElUcmFjZVxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7SVRyYWNlPX0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICovXG4gICAgZnVuY3Rpb24gVHJhY2UocHJvcGVydGllcykge1xuICAgICAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW2tleXNbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5c1tpXV0gPSBwcm9wZXJ0aWVzW2tleXNbaV1dO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFRyYWNlIHN0YXJ0VGltZS5cbiAgICAgKiBAbWVtYmVyIHtnb29nbGUucHJvdG9idWYuSVRpbWVzdGFtcHxudWxsfHVuZGVmaW5lZH0gc3RhcnRUaW1lXG4gICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgVHJhY2UucHJvdG90eXBlLnN0YXJ0VGltZSA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUcmFjZSBlbmRUaW1lLlxuICAgICAqIEBtZW1iZXIge2dvb2dsZS5wcm90b2J1Zi5JVGltZXN0YW1wfG51bGx8dW5kZWZpbmVkfSBlbmRUaW1lXG4gICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgVHJhY2UucHJvdG90eXBlLmVuZFRpbWUgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVHJhY2UgZHVyYXRpb25Ocy5cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGR1cmF0aW9uTnNcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2VcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBUcmFjZS5wcm90b3R5cGUuZHVyYXRpb25OcyA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBUcmFjZSByb290LlxuICAgICAqIEBtZW1iZXIge1RyYWNlLklOb2RlfG51bGx8dW5kZWZpbmVkfSByb290XG4gICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgVHJhY2UucHJvdG90eXBlLnJvb3QgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVHJhY2UgaXNJbmNvbXBsZXRlLlxuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59IGlzSW5jb21wbGV0ZVxuICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFRyYWNlLnByb3RvdHlwZS5pc0luY29tcGxldGUgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFRyYWNlIHNpZ25hdHVyZS5cbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHNpZ25hdHVyZVxuICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFRyYWNlLnByb3RvdHlwZS5zaWduYXR1cmUgPSBcIlwiO1xuXG4gICAgLyoqXG4gICAgICogVHJhY2UgdW5leGVjdXRlZE9wZXJhdGlvbkJvZHkuXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSB1bmV4ZWN1dGVkT3BlcmF0aW9uQm9keVxuICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFRyYWNlLnByb3RvdHlwZS51bmV4ZWN1dGVkT3BlcmF0aW9uQm9keSA9IFwiXCI7XG5cbiAgICAvKipcbiAgICAgKiBUcmFjZSB1bmV4ZWN1dGVkT3BlcmF0aW9uTmFtZS5cbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHVuZXhlY3V0ZWRPcGVyYXRpb25OYW1lXG4gICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgVHJhY2UucHJvdG90eXBlLnVuZXhlY3V0ZWRPcGVyYXRpb25OYW1lID0gXCJcIjtcblxuICAgIC8qKlxuICAgICAqIFRyYWNlIGRldGFpbHMuXG4gICAgICogQG1lbWJlciB7VHJhY2UuSURldGFpbHN8bnVsbHx1bmRlZmluZWR9IGRldGFpbHNcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2VcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBUcmFjZS5wcm90b3R5cGUuZGV0YWlscyA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBUcmFjZSBjbGllbnROYW1lLlxuICAgICAqIEBtZW1iZXIge3N0cmluZ30gY2xpZW50TmFtZVxuICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFRyYWNlLnByb3RvdHlwZS5jbGllbnROYW1lID0gXCJcIjtcblxuICAgIC8qKlxuICAgICAqIFRyYWNlIGNsaWVudFZlcnNpb24uXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSBjbGllbnRWZXJzaW9uXG4gICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgVHJhY2UucHJvdG90eXBlLmNsaWVudFZlcnNpb24gPSBcIlwiO1xuXG4gICAgLyoqXG4gICAgICogVHJhY2UgaHR0cC5cbiAgICAgKiBAbWVtYmVyIHtUcmFjZS5JSFRUUHxudWxsfHVuZGVmaW5lZH0gaHR0cFxuICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFRyYWNlLnByb3RvdHlwZS5odHRwID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRyYWNlIGNhY2hlUG9saWN5LlxuICAgICAqIEBtZW1iZXIge1RyYWNlLklDYWNoZVBvbGljeXxudWxsfHVuZGVmaW5lZH0gY2FjaGVQb2xpY3lcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2VcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBUcmFjZS5wcm90b3R5cGUuY2FjaGVQb2xpY3kgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogVHJhY2UgcXVlcnlQbGFuLlxuICAgICAqIEBtZW1iZXIge1RyYWNlLklRdWVyeVBsYW5Ob2RlfG51bGx8dW5kZWZpbmVkfSBxdWVyeVBsYW5cbiAgICAgKiBAbWVtYmVyb2YgVHJhY2VcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBUcmFjZS5wcm90b3R5cGUucXVlcnlQbGFuID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFRyYWNlIGZ1bGxRdWVyeUNhY2hlSGl0LlxuICAgICAqIEBtZW1iZXIge2Jvb2xlYW59IGZ1bGxRdWVyeUNhY2hlSGl0XG4gICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgVHJhY2UucHJvdG90eXBlLmZ1bGxRdWVyeUNhY2hlSGl0ID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUcmFjZSBwZXJzaXN0ZWRRdWVyeUhpdC5cbiAgICAgKiBAbWVtYmVyIHtib29sZWFufSBwZXJzaXN0ZWRRdWVyeUhpdFxuICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFRyYWNlLnByb3RvdHlwZS5wZXJzaXN0ZWRRdWVyeUhpdCA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVHJhY2UgcGVyc2lzdGVkUXVlcnlSZWdpc3Rlci5cbiAgICAgKiBAbWVtYmVyIHtib29sZWFufSBwZXJzaXN0ZWRRdWVyeVJlZ2lzdGVyXG4gICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgVHJhY2UucHJvdG90eXBlLnBlcnNpc3RlZFF1ZXJ5UmVnaXN0ZXIgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFRyYWNlIHJlZ2lzdGVyZWRPcGVyYXRpb24uXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn0gcmVnaXN0ZXJlZE9wZXJhdGlvblxuICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFRyYWNlLnByb3RvdHlwZS5yZWdpc3RlcmVkT3BlcmF0aW9uID0gZmFsc2U7XG5cbiAgICAvKipcbiAgICAgKiBUcmFjZSBmb3JiaWRkZW5PcGVyYXRpb24uXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn0gZm9yYmlkZGVuT3BlcmF0aW9uXG4gICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgVHJhY2UucHJvdG90eXBlLmZvcmJpZGRlbk9wZXJhdGlvbiA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogVHJhY2UgZmllbGRFeGVjdXRpb25XZWlnaHQuXG4gICAgICogQG1lbWJlciB7bnVtYmVyfSBmaWVsZEV4ZWN1dGlvbldlaWdodFxuICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFRyYWNlLnByb3RvdHlwZS5maWVsZEV4ZWN1dGlvbldlaWdodCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IFRyYWNlIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SVRyYWNlPX0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICogQHJldHVybnMge1RyYWNlfSBUcmFjZSBpbnN0YW5jZVxuICAgICAqL1xuICAgIFRyYWNlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHJldHVybiBuZXcgVHJhY2UocHJvcGVydGllcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBUcmFjZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUcmFjZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SVRyYWNlfSBtZXNzYWdlIFRyYWNlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgKi9cbiAgICBUcmFjZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgIGlmICghd3JpdGVyKVxuICAgICAgICAgICAgd3JpdGVyID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZW5kVGltZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwiZW5kVGltZVwiKSlcbiAgICAgICAgICAgICRyb290Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAuZW5jb2RlKG1lc3NhZ2UuZW5kVGltZSwgd3JpdGVyLnVpbnQzMigvKiBpZCAzLCB3aXJlVHlwZSAyID0qLzI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICBpZiAobWVzc2FnZS5zdGFydFRpbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInN0YXJ0VGltZVwiKSlcbiAgICAgICAgICAgICRyb290Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAuZW5jb2RlKG1lc3NhZ2Uuc3RhcnRUaW1lLCB3cml0ZXIudWludDMyKC8qIGlkIDQsIHdpcmVUeXBlIDIgPSovMzQpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIGlmIChtZXNzYWdlLmRldGFpbHMgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImRldGFpbHNcIikpXG4gICAgICAgICAgICAkcm9vdC5UcmFjZS5EZXRhaWxzLmVuY29kZShtZXNzYWdlLmRldGFpbHMsIHdyaXRlci51aW50MzIoLyogaWQgNiwgd2lyZVR5cGUgMiA9Ki81MCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY2xpZW50TmFtZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwiY2xpZW50TmFtZVwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgNywgd2lyZVR5cGUgMiA9Ki81OCkuc3RyaW5nKG1lc3NhZ2UuY2xpZW50TmFtZSk7XG4gICAgICAgIGlmIChtZXNzYWdlLmNsaWVudFZlcnNpb24gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImNsaWVudFZlcnNpb25cIikpXG4gICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDgsIHdpcmVUeXBlIDIgPSovNjYpLnN0cmluZyhtZXNzYWdlLmNsaWVudFZlcnNpb24pO1xuICAgICAgICBpZiAobWVzc2FnZS5odHRwICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJodHRwXCIpKVxuICAgICAgICAgICAgJHJvb3QuVHJhY2UuSFRUUC5lbmNvZGUobWVzc2FnZS5odHRwLCB3cml0ZXIudWludDMyKC8qIGlkIDEwLCB3aXJlVHlwZSAyID0qLzgyKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICBpZiAobWVzc2FnZS5kdXJhdGlvbk5zICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJkdXJhdGlvbk5zXCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAxMSwgd2lyZVR5cGUgMCA9Ki84OCkudWludDY0KG1lc3NhZ2UuZHVyYXRpb25Ocyk7XG4gICAgICAgIGlmIChtZXNzYWdlLnJvb3QgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInJvb3RcIikpXG4gICAgICAgICAgICAkcm9vdC5UcmFjZS5Ob2RlLmVuY29kZShtZXNzYWdlLnJvb3QsIHdyaXRlci51aW50MzIoLyogaWQgMTQsIHdpcmVUeXBlIDIgPSovMTE0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICBpZiAobWVzc2FnZS5jYWNoZVBvbGljeSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwiY2FjaGVQb2xpY3lcIikpXG4gICAgICAgICAgICAkcm9vdC5UcmFjZS5DYWNoZVBvbGljeS5lbmNvZGUobWVzc2FnZS5jYWNoZVBvbGljeSwgd3JpdGVyLnVpbnQzMigvKiBpZCAxOCwgd2lyZVR5cGUgMiA9Ki8xNDYpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIGlmIChtZXNzYWdlLnNpZ25hdHVyZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwic2lnbmF0dXJlXCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAxOSwgd2lyZVR5cGUgMiA9Ki8xNTQpLnN0cmluZyhtZXNzYWdlLnNpZ25hdHVyZSk7XG4gICAgICAgIGlmIChtZXNzYWdlLmZ1bGxRdWVyeUNhY2hlSGl0ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJmdWxsUXVlcnlDYWNoZUhpdFwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMjAsIHdpcmVUeXBlIDAgPSovMTYwKS5ib29sKG1lc3NhZ2UuZnVsbFF1ZXJ5Q2FjaGVIaXQpO1xuICAgICAgICBpZiAobWVzc2FnZS5wZXJzaXN0ZWRRdWVyeUhpdCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwicGVyc2lzdGVkUXVlcnlIaXRcIikpXG4gICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDIxLCB3aXJlVHlwZSAwID0qLzE2OCkuYm9vbChtZXNzYWdlLnBlcnNpc3RlZFF1ZXJ5SGl0KTtcbiAgICAgICAgaWYgKG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlSZWdpc3RlciAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwicGVyc2lzdGVkUXVlcnlSZWdpc3RlclwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMjIsIHdpcmVUeXBlIDAgPSovMTc2KS5ib29sKG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlSZWdpc3Rlcik7XG4gICAgICAgIGlmIChtZXNzYWdlLnJlZ2lzdGVyZWRPcGVyYXRpb24gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInJlZ2lzdGVyZWRPcGVyYXRpb25cIikpXG4gICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDI0LCB3aXJlVHlwZSAwID0qLzE5MikuYm9vbChtZXNzYWdlLnJlZ2lzdGVyZWRPcGVyYXRpb24pO1xuICAgICAgICBpZiAobWVzc2FnZS5mb3JiaWRkZW5PcGVyYXRpb24gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImZvcmJpZGRlbk9wZXJhdGlvblwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMjUsIHdpcmVUeXBlIDAgPSovMjAwKS5ib29sKG1lc3NhZ2UuZm9yYmlkZGVuT3BlcmF0aW9uKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UucXVlcnlQbGFuICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJxdWVyeVBsYW5cIikpXG4gICAgICAgICAgICAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLmVuY29kZShtZXNzYWdlLnF1ZXJ5UGxhbiwgd3JpdGVyLnVpbnQzMigvKiBpZCAyNiwgd2lyZVR5cGUgMiA9Ki8yMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIGlmIChtZXNzYWdlLnVuZXhlY3V0ZWRPcGVyYXRpb25Cb2R5ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJ1bmV4ZWN1dGVkT3BlcmF0aW9uQm9keVwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMjcsIHdpcmVUeXBlIDIgPSovMjE4KS5zdHJpbmcobWVzc2FnZS51bmV4ZWN1dGVkT3BlcmF0aW9uQm9keSk7XG4gICAgICAgIGlmIChtZXNzYWdlLnVuZXhlY3V0ZWRPcGVyYXRpb25OYW1lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJ1bmV4ZWN1dGVkT3BlcmF0aW9uTmFtZVwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMjgsIHdpcmVUeXBlIDIgPSovMjI2KS5zdHJpbmcobWVzc2FnZS51bmV4ZWN1dGVkT3BlcmF0aW9uTmFtZSk7XG4gICAgICAgIGlmIChtZXNzYWdlLmZpZWxkRXhlY3V0aW9uV2VpZ2h0ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJmaWVsZEV4ZWN1dGlvbldlaWdodFwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMzEsIHdpcmVUeXBlIDEgPSovMjQ5KS5kb3VibGUobWVzc2FnZS5maWVsZEV4ZWN1dGlvbldlaWdodCk7XG4gICAgICAgIGlmIChtZXNzYWdlLmlzSW5jb21wbGV0ZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwiaXNJbmNvbXBsZXRlXCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAzMywgd2lyZVR5cGUgMCA9Ki8yNjQpLmJvb2wobWVzc2FnZS5pc0luY29tcGxldGUpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgVHJhY2UgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICogQGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZFxuICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0lUcmFjZX0gbWVzc2FnZSBUcmFjZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICovXG4gICAgVHJhY2UuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGUobWVzc2FnZSwgd3JpdGVyKS5sZGVsaW0oKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIFRyYWNlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAqIEByZXR1cm5zIHtUcmFjZX0gVHJhY2VcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIFRyYWNlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgIHJlYWRlciA9ICRSZWFkZXIuY3JlYXRlKHJlYWRlcik7XG4gICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LlRyYWNlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnN0YXJ0VGltZSA9ICRyb290Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmVuZFRpbWUgPSAkcm9vdC5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuZHVyYXRpb25OcyA9IHJlYWRlci51aW50NjQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTQ6XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5yb290ID0gJHJvb3QuVHJhY2UuTm9kZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzMzpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmlzSW5jb21wbGV0ZSA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE5OlxuICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc2lnbmF0dXJlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyNzpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnVuZXhlY3V0ZWRPcGVyYXRpb25Cb2R5ID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyODpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnVuZXhlY3V0ZWRPcGVyYXRpb25OYW1lID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGV0YWlscyA9ICRyb290LlRyYWNlLkRldGFpbHMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmNsaWVudE5hbWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5jbGllbnRWZXJzaW9uID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMDpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmh0dHAgPSAkcm9vdC5UcmFjZS5IVFRQLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE4OlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2FjaGVQb2xpY3kgPSAkcm9vdC5UcmFjZS5DYWNoZVBvbGljeS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyNjpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnF1ZXJ5UGxhbiA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjA6XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5mdWxsUXVlcnlDYWNoZUhpdCA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDIxOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlIaXQgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyMjpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnBlcnNpc3RlZFF1ZXJ5UmVnaXN0ZXIgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyNDpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnJlZ2lzdGVyZWRPcGVyYXRpb24gPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyNTpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmZvcmJpZGRlbk9wZXJhdGlvbiA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDMxOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmllbGRFeGVjdXRpb25XZWlnaHQgPSByZWFkZXIuZG91YmxlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIFRyYWNlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIsIGxlbmd0aCBkZWxpbWl0ZWQuXG4gICAgICogQGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZFxuICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcmV0dXJucyB7VHJhY2V9IFRyYWNlXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgKi9cbiAgICBUcmFjZS5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgcmVhZGVyID0gbmV3ICRSZWFkZXIocmVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgYSBUcmFjZSBtZXNzYWdlLlxuICAgICAqIEBmdW5jdGlvbiB2ZXJpZnlcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2VcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgKi9cbiAgICBUcmFjZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSkge1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5zdGFydFRpbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwic3RhcnRUaW1lXCIpKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wLnZlcmlmeShtZXNzYWdlLnN0YXJ0VGltZSk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic3RhcnRUaW1lLlwiICsgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZW5kVGltZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJlbmRUaW1lXCIpKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wLnZlcmlmeShtZXNzYWdlLmVuZFRpbWUpO1xuICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImVuZFRpbWUuXCIgKyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5kdXJhdGlvbk5zICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImR1cmF0aW9uTnNcIikpXG4gICAgICAgICAgICBpZiAoISR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLmR1cmF0aW9uTnMpICYmICEobWVzc2FnZS5kdXJhdGlvbk5zICYmICR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLmR1cmF0aW9uTnMubG93KSAmJiAkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5kdXJhdGlvbk5zLmhpZ2gpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJkdXJhdGlvbk5zOiBpbnRlZ2VyfExvbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgaWYgKG1lc3NhZ2Uucm9vdCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJyb290XCIpKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5Ob2RlLnZlcmlmeShtZXNzYWdlLnJvb3QpO1xuICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgIHJldHVybiBcInJvb3QuXCIgKyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pc0luY29tcGxldGUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiaXNJbmNvbXBsZXRlXCIpKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLmlzSW5jb21wbGV0ZSAhPT0gXCJib29sZWFuXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaXNJbmNvbXBsZXRlOiBib29sZWFuIGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLnNpZ25hdHVyZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJzaWduYXR1cmVcIikpXG4gICAgICAgICAgICBpZiAoISR1dGlsLmlzU3RyaW5nKG1lc3NhZ2Uuc2lnbmF0dXJlKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzaWduYXR1cmU6IHN0cmluZyBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS51bmV4ZWN1dGVkT3BlcmF0aW9uQm9keSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJ1bmV4ZWN1dGVkT3BlcmF0aW9uQm9keVwiKSlcbiAgICAgICAgICAgIGlmICghJHV0aWwuaXNTdHJpbmcobWVzc2FnZS51bmV4ZWN1dGVkT3BlcmF0aW9uQm9keSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidW5leGVjdXRlZE9wZXJhdGlvbkJvZHk6IHN0cmluZyBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS51bmV4ZWN1dGVkT3BlcmF0aW9uTmFtZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJ1bmV4ZWN1dGVkT3BlcmF0aW9uTmFtZVwiKSlcbiAgICAgICAgICAgIGlmICghJHV0aWwuaXNTdHJpbmcobWVzc2FnZS51bmV4ZWN1dGVkT3BlcmF0aW9uTmFtZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidW5leGVjdXRlZE9wZXJhdGlvbk5hbWU6IHN0cmluZyBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5kZXRhaWxzICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImRldGFpbHNcIikpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9ICRyb290LlRyYWNlLkRldGFpbHMudmVyaWZ5KG1lc3NhZ2UuZGV0YWlscyk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZGV0YWlscy5cIiArIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNsaWVudE5hbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiY2xpZW50TmFtZVwiKSlcbiAgICAgICAgICAgIGlmICghJHV0aWwuaXNTdHJpbmcobWVzc2FnZS5jbGllbnROYW1lKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjbGllbnROYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY2xpZW50VmVyc2lvbiAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJjbGllbnRWZXJzaW9uXCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc1N0cmluZyhtZXNzYWdlLmNsaWVudFZlcnNpb24pKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImNsaWVudFZlcnNpb246IHN0cmluZyBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5odHRwICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImh0dHBcIikpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9ICRyb290LlRyYWNlLkhUVFAudmVyaWZ5KG1lc3NhZ2UuaHR0cCk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiaHR0cC5cIiArIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmNhY2hlUG9saWN5ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImNhY2hlUG9saWN5XCIpKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5DYWNoZVBvbGljeS52ZXJpZnkobWVzc2FnZS5jYWNoZVBvbGljeSk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY2FjaGVQb2xpY3kuXCIgKyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5xdWVyeVBsYW4gIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicXVlcnlQbGFuXCIpKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLnZlcmlmeShtZXNzYWdlLnF1ZXJ5UGxhbik7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicXVlcnlQbGFuLlwiICsgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZnVsbFF1ZXJ5Q2FjaGVIaXQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZnVsbFF1ZXJ5Q2FjaGVIaXRcIikpXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UuZnVsbFF1ZXJ5Q2FjaGVIaXQgIT09IFwiYm9vbGVhblwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImZ1bGxRdWVyeUNhY2hlSGl0OiBib29sZWFuIGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLnBlcnNpc3RlZFF1ZXJ5SGl0ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInBlcnNpc3RlZFF1ZXJ5SGl0XCIpKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLnBlcnNpc3RlZFF1ZXJ5SGl0ICE9PSBcImJvb2xlYW5cIilcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJwZXJzaXN0ZWRRdWVyeUhpdDogYm9vbGVhbiBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5wZXJzaXN0ZWRRdWVyeVJlZ2lzdGVyICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInBlcnNpc3RlZFF1ZXJ5UmVnaXN0ZXJcIikpXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlSZWdpc3RlciAhPT0gXCJib29sZWFuXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicGVyc2lzdGVkUXVlcnlSZWdpc3RlcjogYm9vbGVhbiBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5yZWdpc3RlcmVkT3BlcmF0aW9uICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInJlZ2lzdGVyZWRPcGVyYXRpb25cIikpXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UucmVnaXN0ZXJlZE9wZXJhdGlvbiAhPT0gXCJib29sZWFuXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicmVnaXN0ZXJlZE9wZXJhdGlvbjogYm9vbGVhbiBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5mb3JiaWRkZW5PcGVyYXRpb24gIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZm9yYmlkZGVuT3BlcmF0aW9uXCIpKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLmZvcmJpZGRlbk9wZXJhdGlvbiAhPT0gXCJib29sZWFuXCIpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZm9yYmlkZGVuT3BlcmF0aW9uOiBib29sZWFuIGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLmZpZWxkRXhlY3V0aW9uV2VpZ2h0ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImZpZWxkRXhlY3V0aW9uV2VpZ2h0XCIpKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLmZpZWxkRXhlY3V0aW9uV2VpZ2h0ICE9PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImZpZWxkRXhlY3V0aW9uV2VpZ2h0OiBudW1iZXIgZXhwZWN0ZWRcIjtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFRyYWNlIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2VcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtUcmFjZX0gbWVzc2FnZSBUcmFjZVxuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICovXG4gICAgVHJhY2UudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5kZWZhdWx0cykge1xuICAgICAgICAgICAgb2JqZWN0LmVuZFRpbWUgPSBudWxsO1xuICAgICAgICAgICAgb2JqZWN0LnN0YXJ0VGltZSA9IG51bGw7XG4gICAgICAgICAgICBvYmplY3QuZGV0YWlscyA9IG51bGw7XG4gICAgICAgICAgICBvYmplY3QuY2xpZW50TmFtZSA9IFwiXCI7XG4gICAgICAgICAgICBvYmplY3QuY2xpZW50VmVyc2lvbiA9IFwiXCI7XG4gICAgICAgICAgICBvYmplY3QuaHR0cCA9IG51bGw7XG4gICAgICAgICAgICBvYmplY3QuZHVyYXRpb25OcyA9IDA7XG4gICAgICAgICAgICBvYmplY3Qucm9vdCA9IG51bGw7XG4gICAgICAgICAgICBvYmplY3QuY2FjaGVQb2xpY3kgPSBudWxsO1xuICAgICAgICAgICAgb2JqZWN0LnNpZ25hdHVyZSA9IFwiXCI7XG4gICAgICAgICAgICBvYmplY3QuZnVsbFF1ZXJ5Q2FjaGVIaXQgPSBmYWxzZTtcbiAgICAgICAgICAgIG9iamVjdC5wZXJzaXN0ZWRRdWVyeUhpdCA9IGZhbHNlO1xuICAgICAgICAgICAgb2JqZWN0LnBlcnNpc3RlZFF1ZXJ5UmVnaXN0ZXIgPSBmYWxzZTtcbiAgICAgICAgICAgIG9iamVjdC5yZWdpc3RlcmVkT3BlcmF0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICBvYmplY3QuZm9yYmlkZGVuT3BlcmF0aW9uID0gZmFsc2U7XG4gICAgICAgICAgICBvYmplY3QucXVlcnlQbGFuID0gbnVsbDtcbiAgICAgICAgICAgIG9iamVjdC51bmV4ZWN1dGVkT3BlcmF0aW9uQm9keSA9IFwiXCI7XG4gICAgICAgICAgICBvYmplY3QudW5leGVjdXRlZE9wZXJhdGlvbk5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgb2JqZWN0LmZpZWxkRXhlY3V0aW9uV2VpZ2h0ID0gMDtcbiAgICAgICAgICAgIG9iamVjdC5pc0luY29tcGxldGUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lbmRUaW1lICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImVuZFRpbWVcIikpXG4gICAgICAgICAgICBvYmplY3QuZW5kVGltZSA9ICRyb290Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAudG9PYmplY3QobWVzc2FnZS5lbmRUaW1lLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhcnRUaW1lICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInN0YXJ0VGltZVwiKSlcbiAgICAgICAgICAgIG9iamVjdC5zdGFydFRpbWUgPSAkcm9vdC5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wLnRvT2JqZWN0KG1lc3NhZ2Uuc3RhcnRUaW1lLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZGV0YWlscyAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJkZXRhaWxzXCIpKVxuICAgICAgICAgICAgb2JqZWN0LmRldGFpbHMgPSAkcm9vdC5UcmFjZS5EZXRhaWxzLnRvT2JqZWN0KG1lc3NhZ2UuZGV0YWlscywgb3B0aW9ucyk7XG4gICAgICAgIGlmIChtZXNzYWdlLmNsaWVudE5hbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiY2xpZW50TmFtZVwiKSlcbiAgICAgICAgICAgIG9iamVjdC5jbGllbnROYW1lID0gbWVzc2FnZS5jbGllbnROYW1lO1xuICAgICAgICBpZiAobWVzc2FnZS5jbGllbnRWZXJzaW9uICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImNsaWVudFZlcnNpb25cIikpXG4gICAgICAgICAgICBvYmplY3QuY2xpZW50VmVyc2lvbiA9IG1lc3NhZ2UuY2xpZW50VmVyc2lvbjtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaHR0cCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJodHRwXCIpKVxuICAgICAgICAgICAgb2JqZWN0Lmh0dHAgPSAkcm9vdC5UcmFjZS5IVFRQLnRvT2JqZWN0KG1lc3NhZ2UuaHR0cCwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChtZXNzYWdlLmR1cmF0aW9uTnMgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZHVyYXRpb25Oc1wiKSlcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5kdXJhdGlvbk5zID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIG9iamVjdC5kdXJhdGlvbk5zID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG1lc3NhZ2UuZHVyYXRpb25OcykgOiBtZXNzYWdlLmR1cmF0aW9uTnM7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgb2JqZWN0LmR1cmF0aW9uTnMgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1lc3NhZ2UuZHVyYXRpb25OcykgOiBvcHRpb25zLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobWVzc2FnZS5kdXJhdGlvbk5zLmxvdyA+Pj4gMCwgbWVzc2FnZS5kdXJhdGlvbk5zLmhpZ2ggPj4+IDApLnRvTnVtYmVyKHRydWUpIDogbWVzc2FnZS5kdXJhdGlvbk5zO1xuICAgICAgICBpZiAobWVzc2FnZS5yb290ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInJvb3RcIikpXG4gICAgICAgICAgICBvYmplY3Qucm9vdCA9ICRyb290LlRyYWNlLk5vZGUudG9PYmplY3QobWVzc2FnZS5yb290LCBvcHRpb25zKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY2FjaGVQb2xpY3kgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiY2FjaGVQb2xpY3lcIikpXG4gICAgICAgICAgICBvYmplY3QuY2FjaGVQb2xpY3kgPSAkcm9vdC5UcmFjZS5DYWNoZVBvbGljeS50b09iamVjdChtZXNzYWdlLmNhY2hlUG9saWN5LCBvcHRpb25zKTtcbiAgICAgICAgaWYgKG1lc3NhZ2Uuc2lnbmF0dXJlICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInNpZ25hdHVyZVwiKSlcbiAgICAgICAgICAgIG9iamVjdC5zaWduYXR1cmUgPSBtZXNzYWdlLnNpZ25hdHVyZTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZnVsbFF1ZXJ5Q2FjaGVIaXQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZnVsbFF1ZXJ5Q2FjaGVIaXRcIikpXG4gICAgICAgICAgICBvYmplY3QuZnVsbFF1ZXJ5Q2FjaGVIaXQgPSBtZXNzYWdlLmZ1bGxRdWVyeUNhY2hlSGl0O1xuICAgICAgICBpZiAobWVzc2FnZS5wZXJzaXN0ZWRRdWVyeUhpdCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJwZXJzaXN0ZWRRdWVyeUhpdFwiKSlcbiAgICAgICAgICAgIG9iamVjdC5wZXJzaXN0ZWRRdWVyeUhpdCA9IG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlIaXQ7XG4gICAgICAgIGlmIChtZXNzYWdlLnBlcnNpc3RlZFF1ZXJ5UmVnaXN0ZXIgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicGVyc2lzdGVkUXVlcnlSZWdpc3RlclwiKSlcbiAgICAgICAgICAgIG9iamVjdC5wZXJzaXN0ZWRRdWVyeVJlZ2lzdGVyID0gbWVzc2FnZS5wZXJzaXN0ZWRRdWVyeVJlZ2lzdGVyO1xuICAgICAgICBpZiAobWVzc2FnZS5yZWdpc3RlcmVkT3BlcmF0aW9uICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInJlZ2lzdGVyZWRPcGVyYXRpb25cIikpXG4gICAgICAgICAgICBvYmplY3QucmVnaXN0ZXJlZE9wZXJhdGlvbiA9IG1lc3NhZ2UucmVnaXN0ZXJlZE9wZXJhdGlvbjtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZm9yYmlkZGVuT3BlcmF0aW9uICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImZvcmJpZGRlbk9wZXJhdGlvblwiKSlcbiAgICAgICAgICAgIG9iamVjdC5mb3JiaWRkZW5PcGVyYXRpb24gPSBtZXNzYWdlLmZvcmJpZGRlbk9wZXJhdGlvbjtcbiAgICAgICAgaWYgKG1lc3NhZ2UucXVlcnlQbGFuICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInF1ZXJ5UGxhblwiKSlcbiAgICAgICAgICAgIG9iamVjdC5xdWVyeVBsYW4gPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLnRvT2JqZWN0KG1lc3NhZ2UucXVlcnlQbGFuLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UudW5leGVjdXRlZE9wZXJhdGlvbkJvZHkgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwidW5leGVjdXRlZE9wZXJhdGlvbkJvZHlcIikpXG4gICAgICAgICAgICBvYmplY3QudW5leGVjdXRlZE9wZXJhdGlvbkJvZHkgPSBtZXNzYWdlLnVuZXhlY3V0ZWRPcGVyYXRpb25Cb2R5O1xuICAgICAgICBpZiAobWVzc2FnZS51bmV4ZWN1dGVkT3BlcmF0aW9uTmFtZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJ1bmV4ZWN1dGVkT3BlcmF0aW9uTmFtZVwiKSlcbiAgICAgICAgICAgIG9iamVjdC51bmV4ZWN1dGVkT3BlcmF0aW9uTmFtZSA9IG1lc3NhZ2UudW5leGVjdXRlZE9wZXJhdGlvbk5hbWU7XG4gICAgICAgIGlmIChtZXNzYWdlLmZpZWxkRXhlY3V0aW9uV2VpZ2h0ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImZpZWxkRXhlY3V0aW9uV2VpZ2h0XCIpKVxuICAgICAgICAgICAgb2JqZWN0LmZpZWxkRXhlY3V0aW9uV2VpZ2h0ID0gb3B0aW9ucy5qc29uICYmICFpc0Zpbml0ZShtZXNzYWdlLmZpZWxkRXhlY3V0aW9uV2VpZ2h0KSA/IFN0cmluZyhtZXNzYWdlLmZpZWxkRXhlY3V0aW9uV2VpZ2h0KSA6IG1lc3NhZ2UuZmllbGRFeGVjdXRpb25XZWlnaHQ7XG4gICAgICAgIGlmIChtZXNzYWdlLmlzSW5jb21wbGV0ZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJpc0luY29tcGxldGVcIikpXG4gICAgICAgICAgICBvYmplY3QuaXNJbmNvbXBsZXRlID0gbWVzc2FnZS5pc0luY29tcGxldGU7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoaXMgVHJhY2UgdG8gSlNPTi5cbiAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAqL1xuICAgIFRyYWNlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgIH07XG5cbiAgICBUcmFjZS5DYWNoZVBvbGljeSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIENhY2hlUG9saWN5LlxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2VcbiAgICAgICAgICogQGludGVyZmFjZSBJQ2FjaGVQb2xpY3lcbiAgICAgICAgICogQHByb3BlcnR5IHtUcmFjZS5DYWNoZVBvbGljeS5TY29wZXxudWxsfSBbc2NvcGVdIENhY2hlUG9saWN5IHNjb3BlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFttYXhBZ2VOc10gQ2FjaGVQb2xpY3kgbWF4QWdlTnNcbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgQ2FjaGVQb2xpY3kuXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBDYWNoZVBvbGljeS5cbiAgICAgICAgICogQGltcGxlbWVudHMgSUNhY2hlUG9saWN5XG4gICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLklDYWNoZVBvbGljeT19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gQ2FjaGVQb2xpY3kocHJvcGVydGllcykge1xuICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW2tleXNbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDYWNoZVBvbGljeSBzY29wZS5cbiAgICAgICAgICogQG1lbWJlciB7VHJhY2UuQ2FjaGVQb2xpY3kuU2NvcGV9IHNjb3BlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5DYWNoZVBvbGljeVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIENhY2hlUG9saWN5LnByb3RvdHlwZS5zY29wZSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENhY2hlUG9saWN5IG1heEFnZU5zLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IG1heEFnZU5zXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5DYWNoZVBvbGljeVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIENhY2hlUG9saWN5LnByb3RvdHlwZS5tYXhBZ2VOcyA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBuZXcgQ2FjaGVQb2xpY3kgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5DYWNoZVBvbGljeVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuSUNhY2hlUG9saWN5PX0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5DYWNoZVBvbGljeX0gQ2FjaGVQb2xpY3kgaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIENhY2hlUG9saWN5LmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IENhY2hlUG9saWN5KHByb3BlcnRpZXMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgQ2FjaGVQb2xpY3kgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuQ2FjaGVQb2xpY3kudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkNhY2hlUG9saWN5XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5JQ2FjaGVQb2xpY3l9IG1lc3NhZ2UgQ2FjaGVQb2xpY3kgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBDYWNoZVBvbGljeS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgICAgICBpZiAoIXdyaXRlcilcbiAgICAgICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc2NvcGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInNjb3BlXCIpKVxuICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMCA9Ki84KS5pbnQzMihtZXNzYWdlLnNjb3BlKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLm1heEFnZU5zICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJtYXhBZ2VOc1wiKSlcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDIsIHdpcmVUeXBlIDAgPSovMTYpLmludDY0KG1lc3NhZ2UubWF4QWdlTnMpO1xuICAgICAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIENhY2hlUG9saWN5IG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFRyYWNlLkNhY2hlUG9saWN5LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5DYWNoZVBvbGljeVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuSUNhY2hlUG9saWN5fSBtZXNzYWdlIENhY2hlUG9saWN5IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgQ2FjaGVQb2xpY3kuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikubGRlbGltKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBDYWNoZVBvbGljeSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5DYWNoZVBvbGljeVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuQ2FjaGVQb2xpY3l9IENhY2hlUG9saWN5XG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgQ2FjaGVQb2xpY3kuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHJlYWRlciwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByZWFkZXIgPSAkUmVhZGVyLmNyZWF0ZShyZWFkZXIpO1xuICAgICAgICAgICAgdmFyIGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGgsIG1lc3NhZ2UgPSBuZXcgJHJvb3QuVHJhY2UuQ2FjaGVQb2xpY3koKTtcbiAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zY29wZSA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWF4QWdlTnMgPSByZWFkZXIuaW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIENhY2hlUG9saWN5IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIsIGxlbmd0aCBkZWxpbWl0ZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkNhY2hlUG9saWN5XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5DYWNoZVBvbGljeX0gQ2FjaGVQb2xpY3lcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBDYWNoZVBvbGljeS5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByZWFkZXIgPSBuZXcgJFJlYWRlcihyZWFkZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVmVyaWZpZXMgYSBDYWNoZVBvbGljeSBtZXNzYWdlLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdmVyaWZ5XG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5DYWNoZVBvbGljeVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAgICAgKi9cbiAgICAgICAgQ2FjaGVQb2xpY3kudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJvYmplY3RcIiB8fCBtZXNzYWdlID09PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc2NvcGUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwic2NvcGVcIikpXG4gICAgICAgICAgICAgICAgc3dpdGNoIChtZXNzYWdlLnNjb3BlKSB7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwic2NvcGU6IGVudW0gdmFsdWUgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UubWF4QWdlTnMgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwibWF4QWdlTnNcIikpXG4gICAgICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5tYXhBZ2VOcykgJiYgIShtZXNzYWdlLm1heEFnZU5zICYmICR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLm1heEFnZU5zLmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UubWF4QWdlTnMuaGlnaCkpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJtYXhBZ2VOczogaW50ZWdlcnxMb25nIGV4cGVjdGVkXCI7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgQ2FjaGVQb2xpY3kgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkNhY2hlUG9saWN5XG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5DYWNoZVBvbGljeX0gbWVzc2FnZSBDYWNoZVBvbGljeVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIENhY2hlUG9saWN5LnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnNjb3BlID0gb3B0aW9ucy5lbnVtcyA9PT0gU3RyaW5nID8gXCJVTktOT1dOXCIgOiAwO1xuICAgICAgICAgICAgICAgIG9iamVjdC5tYXhBZ2VOcyA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5zY29wZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJzY29wZVwiKSlcbiAgICAgICAgICAgICAgICBvYmplY3Quc2NvcGUgPSBvcHRpb25zLmVudW1zID09PSBTdHJpbmcgPyAkcm9vdC5UcmFjZS5DYWNoZVBvbGljeS5TY29wZVttZXNzYWdlLnNjb3BlXSA6IG1lc3NhZ2Uuc2NvcGU7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5tYXhBZ2VOcyAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJtYXhBZ2VOc1wiKSlcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UubWF4QWdlTnMgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5tYXhBZ2VOcyA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtZXNzYWdlLm1heEFnZU5zKSA6IG1lc3NhZ2UubWF4QWdlTnM7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QubWF4QWdlTnMgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1lc3NhZ2UubWF4QWdlTnMpIDogb3B0aW9ucy5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG1lc3NhZ2UubWF4QWdlTnMubG93ID4+PiAwLCBtZXNzYWdlLm1heEFnZU5zLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtZXNzYWdlLm1heEFnZU5zO1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBDYWNoZVBvbGljeSB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5DYWNoZVBvbGljeVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgQ2FjaGVQb2xpY3kucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTY29wZSBlbnVtLlxuICAgICAgICAgKiBAbmFtZSBUcmFjZS5DYWNoZVBvbGljeS5TY29wZVxuICAgICAgICAgKiBAZW51bSB7c3RyaW5nfVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gVU5LTk9XTj0wIFVOS05PV04gdmFsdWVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFBVQkxJQz0xIFBVQkxJQyB2YWx1ZVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gUFJJVkFURT0yIFBSSVZBVEUgdmFsdWVcbiAgICAgICAgICovXG4gICAgICAgIENhY2hlUG9saWN5LlNjb3BlID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlc0J5SWQgPSB7fSwgdmFsdWVzID0gT2JqZWN0LmNyZWF0ZSh2YWx1ZXNCeUlkKTtcbiAgICAgICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzBdID0gXCJVTktOT1dOXCJdID0gMDtcbiAgICAgICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzFdID0gXCJQVUJMSUNcIl0gPSAxO1xuICAgICAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbMl0gPSBcIlBSSVZBVEVcIl0gPSAyO1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfSkoKTtcblxuICAgICAgICByZXR1cm4gQ2FjaGVQb2xpY3k7XG4gICAgfSkoKTtcblxuICAgIFRyYWNlLkRldGFpbHMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBEZXRhaWxzLlxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2VcbiAgICAgICAgICogQGludGVyZmFjZSBJRGV0YWlsc1xuICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLHN0cmluZz58bnVsbH0gW3ZhcmlhYmxlc0pzb25dIERldGFpbHMgdmFyaWFibGVzSnNvblxuICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbb3BlcmF0aW9uTmFtZV0gRGV0YWlscyBvcGVyYXRpb25OYW1lXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IERldGFpbHMuXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBEZXRhaWxzLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJRGV0YWlsc1xuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5JRGV0YWlscz19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gRGV0YWlscyhwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICB0aGlzLnZhcmlhYmxlc0pzb24gPSB7fTtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllc1trZXlzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trZXlzW2ldXSA9IHByb3BlcnRpZXNba2V5c1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRGV0YWlscyB2YXJpYWJsZXNKc29uLlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3QuPHN0cmluZyxzdHJpbmc+fSB2YXJpYWJsZXNKc29uXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5EZXRhaWxzXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgRGV0YWlscy5wcm90b3R5cGUudmFyaWFibGVzSnNvbiA9ICR1dGlsLmVtcHR5T2JqZWN0O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZXRhaWxzIG9wZXJhdGlvbk5hbWUuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gb3BlcmF0aW9uTmFtZVxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuRGV0YWlsc1xuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIERldGFpbHMucHJvdG90eXBlLm9wZXJhdGlvbk5hbWUgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IERldGFpbHMgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5EZXRhaWxzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5JRGV0YWlscz19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuRGV0YWlsc30gRGV0YWlscyBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgRGV0YWlscy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBEZXRhaWxzKHByb3BlcnRpZXMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgRGV0YWlscyBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUcmFjZS5EZXRhaWxzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5EZXRhaWxzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5JRGV0YWlsc30gbWVzc2FnZSBEZXRhaWxzIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgRGV0YWlscy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgICAgICBpZiAoIXdyaXRlcilcbiAgICAgICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uub3BlcmF0aW9uTmFtZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwib3BlcmF0aW9uTmFtZVwiKSlcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDMsIHdpcmVUeXBlIDIgPSovMjYpLnN0cmluZyhtZXNzYWdlLm9wZXJhdGlvbk5hbWUpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UudmFyaWFibGVzSnNvbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwidmFyaWFibGVzSnNvblwiKSlcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMobWVzc2FnZS52YXJpYWJsZXNKc29uKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDQsIHdpcmVUeXBlIDIgPSovMzQpLmZvcmsoKS51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMiA9Ki8xMCkuc3RyaW5nKGtleXNbaV0pLnVpbnQzMigvKiBpZCAyLCB3aXJlVHlwZSAyID0qLzE4KS5zdHJpbmcobWVzc2FnZS52YXJpYWJsZXNKc29uW2tleXNbaV1dKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBEZXRhaWxzIG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFRyYWNlLkRldGFpbHMudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkRldGFpbHNcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLklEZXRhaWxzfSBtZXNzYWdlIERldGFpbHMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBEZXRhaWxzLmVuY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZChtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVuY29kZShtZXNzYWdlLCB3cml0ZXIpLmxkZWxpbSgpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgRGV0YWlscyBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5EZXRhaWxzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5EZXRhaWxzfSBEZXRhaWxzXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgRGV0YWlscy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUocmVhZGVyLCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHJlYWRlciA9ICRSZWFkZXIuY3JlYXRlKHJlYWRlcik7XG4gICAgICAgICAgICB2YXIgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aCwgbWVzc2FnZSA9IG5ldyAkcm9vdC5UcmFjZS5EZXRhaWxzKCksIGtleTtcbiAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXAoKS5wb3MrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudmFyaWFibGVzSnNvbiA9PT0gJHV0aWwuZW1wdHlPYmplY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhcmlhYmxlc0pzb24gPSB7fTtcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICByZWFkZXIucG9zKys7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudmFyaWFibGVzSnNvbltrZXldID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uub3BlcmF0aW9uTmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIERldGFpbHMgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZFxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuRGV0YWlsc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuRGV0YWlsc30gRGV0YWlsc1xuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIERldGFpbHMuZGVjb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkKHJlYWRlcikge1xuICAgICAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgcmVhZGVyID0gbmV3ICRSZWFkZXIocmVhZGVyKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFZlcmlmaWVzIGEgRGV0YWlscyBtZXNzYWdlLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdmVyaWZ5XG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5EZXRhaWxzXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gICAgICAgICAqL1xuICAgICAgICBEZXRhaWxzLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJvYmplY3QgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnZhcmlhYmxlc0pzb24gIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwidmFyaWFibGVzSnNvblwiKSkge1xuICAgICAgICAgICAgICAgIGlmICghJHV0aWwuaXNPYmplY3QobWVzc2FnZS52YXJpYWJsZXNKc29uKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwidmFyaWFibGVzSnNvbjogb2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IE9iamVjdC5rZXlzKG1lc3NhZ2UudmFyaWFibGVzSnNvbik7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmICghJHV0aWwuaXNTdHJpbmcobWVzc2FnZS52YXJpYWJsZXNKc29uW2tleVtpXV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwidmFyaWFibGVzSnNvbjogc3RyaW5ne2s6c3RyaW5nfSBleHBlY3RlZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uub3BlcmF0aW9uTmFtZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJvcGVyYXRpb25OYW1lXCIpKVxuICAgICAgICAgICAgICAgIGlmICghJHV0aWwuaXNTdHJpbmcobWVzc2FnZS5vcGVyYXRpb25OYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwib3BlcmF0aW9uTmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgRGV0YWlscyBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuRGV0YWlsc1xuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuRGV0YWlsc30gbWVzc2FnZSBEZXRhaWxzXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgRGV0YWlscy50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vYmplY3RzIHx8IG9wdGlvbnMuZGVmYXVsdHMpXG4gICAgICAgICAgICAgICAgb2JqZWN0LnZhcmlhYmxlc0pzb24gPSB7fTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRlZmF1bHRzKVxuICAgICAgICAgICAgICAgIG9iamVjdC5vcGVyYXRpb25OYW1lID0gXCJcIjtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLm9wZXJhdGlvbk5hbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwib3BlcmF0aW9uTmFtZVwiKSlcbiAgICAgICAgICAgICAgICBvYmplY3Qub3BlcmF0aW9uTmFtZSA9IG1lc3NhZ2Uub3BlcmF0aW9uTmFtZTtcbiAgICAgICAgICAgIHZhciBrZXlzMjtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnZhcmlhYmxlc0pzb24gJiYgKGtleXMyID0gT2JqZWN0LmtleXMobWVzc2FnZS52YXJpYWJsZXNKc29uKSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnZhcmlhYmxlc0pzb24gPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMyLmxlbmd0aDsgKytqKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QudmFyaWFibGVzSnNvbltrZXlzMltqXV0gPSBtZXNzYWdlLnZhcmlhYmxlc0pzb25ba2V5czJbal1dO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBEZXRhaWxzIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkRldGFpbHNcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIERldGFpbHMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBEZXRhaWxzO1xuICAgIH0pKCk7XG5cbiAgICBUcmFjZS5FcnJvciA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhbiBFcnJvci5cbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSUVycm9yXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFttZXNzYWdlXSBFcnJvciBtZXNzYWdlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPFRyYWNlLklMb2NhdGlvbj58bnVsbH0gW2xvY2F0aW9uXSBFcnJvciBsb2NhdGlvblxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbdGltZU5zXSBFcnJvciB0aW1lTnNcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW2pzb25dIEVycm9yIGpzb25cbiAgICAgICAgICovXG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgRXJyb3IuXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYW4gRXJyb3IuXG4gICAgICAgICAqIEBpbXBsZW1lbnRzIElFcnJvclxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5JRXJyb3I9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIEVycm9yKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHRoaXMubG9jYXRpb24gPSBbXTtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllc1trZXlzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trZXlzW2ldXSA9IHByb3BlcnRpZXNba2V5c1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogRXJyb3IgbWVzc2FnZS5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBtZXNzYWdlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5FcnJvclxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEVycm9yLnByb3RvdHlwZS5tZXNzYWdlID0gXCJcIjtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRXJyb3IgbG9jYXRpb24uXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxUcmFjZS5JTG9jYXRpb24+fSBsb2NhdGlvblxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuRXJyb3JcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBFcnJvci5wcm90b3R5cGUubG9jYXRpb24gPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFcnJvciB0aW1lTnMuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gdGltZU5zXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5FcnJvclxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEVycm9yLnByb3RvdHlwZS50aW1lTnMgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFcnJvciBqc29uLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IGpzb25cbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkVycm9yXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgRXJyb3IucHJvdG90eXBlLmpzb24gPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IEVycm9yIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGNyZWF0ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuRXJyb3JcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLklFcnJvcj19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuRXJyb3J9IEVycm9yIGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBFcnJvci5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBFcnJvcihwcm9wZXJ0aWVzKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEVycm9yIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFRyYWNlLkVycm9yLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5FcnJvclxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuSUVycm9yfSBtZXNzYWdlIEVycm9yIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgRXJyb3IuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgaWYgKCF3cml0ZXIpXG4gICAgICAgICAgICAgICAgd3JpdGVyID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLm1lc3NhZ2UgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcIm1lc3NhZ2VcIikpXG4gICAgICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAxLCB3aXJlVHlwZSAyID0qLzEwKS5zdHJpbmcobWVzc2FnZS5tZXNzYWdlKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmxvY2F0aW9uICE9IG51bGwgJiYgbWVzc2FnZS5sb2NhdGlvbi5sZW5ndGgpXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXNzYWdlLmxvY2F0aW9uLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAkcm9vdC5UcmFjZS5Mb2NhdGlvbi5lbmNvZGUobWVzc2FnZS5sb2NhdGlvbltpXSwgd3JpdGVyLnVpbnQzMigvKiBpZCAyLCB3aXJlVHlwZSAyID0qLzE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UudGltZU5zICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJ0aW1lTnNcIikpXG4gICAgICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAzLCB3aXJlVHlwZSAwID0qLzI0KS51aW50NjQobWVzc2FnZS50aW1lTnMpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuanNvbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwianNvblwiKSlcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDQsIHdpcmVUeXBlIDIgPSovMzQpLnN0cmluZyhtZXNzYWdlLmpzb24pO1xuICAgICAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEVycm9yIG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFRyYWNlLkVycm9yLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5FcnJvclxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuSUVycm9yfSBtZXNzYWdlIEVycm9yIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgRXJyb3IuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikubGRlbGltKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYW4gRXJyb3IgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuRXJyb3JcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge1RyYWNlLkVycm9yfSBFcnJvclxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIEVycm9yLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgcmVhZGVyID0gJFJlYWRlci5jcmVhdGUocmVhZGVyKTtcbiAgICAgICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LlRyYWNlLkVycm9yKCk7XG4gICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgICAgIHZhciB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubWVzc2FnZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIShtZXNzYWdlLmxvY2F0aW9uICYmIG1lc3NhZ2UubG9jYXRpb24ubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubG9jYXRpb24gPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5sb2NhdGlvbi5wdXNoKCRyb290LlRyYWNlLkxvY2F0aW9uLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudGltZU5zID0gcmVhZGVyLnVpbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuanNvbiA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhbiBFcnJvciBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5FcnJvclxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuRXJyb3J9IEVycm9yXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgRXJyb3IuZGVjb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkKHJlYWRlcikge1xuICAgICAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgcmVhZGVyID0gbmV3ICRSZWFkZXIocmVhZGVyKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFZlcmlmaWVzIGFuIEVycm9yIG1lc3NhZ2UuXG4gICAgICAgICAqIEBmdW5jdGlvbiB2ZXJpZnlcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkVycm9yXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gICAgICAgICAqL1xuICAgICAgICBFcnJvci52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSBcIm9iamVjdFwiIHx8IG1lc3NhZ2UgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5tZXNzYWdlICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcIm1lc3NhZ2VcIikpXG4gICAgICAgICAgICAgICAgaWYgKCEkdXRpbC5pc1N0cmluZyhtZXNzYWdlLm1lc3NhZ2UpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJtZXNzYWdlOiBzdHJpbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmxvY2F0aW9uICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImxvY2F0aW9uXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1lc3NhZ2UubG9jYXRpb24pKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJsb2NhdGlvbjogYXJyYXkgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2UubG9jYXRpb24ubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuVHJhY2UuTG9jYXRpb24udmVyaWZ5KG1lc3NhZ2UubG9jYXRpb25baV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJsb2NhdGlvbi5cIiArIGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnRpbWVOcyAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJ0aW1lTnNcIikpXG4gICAgICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIobWVzc2FnZS50aW1lTnMpICYmICEobWVzc2FnZS50aW1lTnMgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UudGltZU5zLmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UudGltZU5zLmhpZ2gpKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwidGltZU5zOiBpbnRlZ2VyfExvbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmpzb24gIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwianNvblwiKSlcbiAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzU3RyaW5nKG1lc3NhZ2UuanNvbikpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImpzb246IHN0cmluZyBleHBlY3RlZFwiO1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhbiBFcnJvciBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuRXJyb3JcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLkVycm9yfSBtZXNzYWdlIEVycm9yXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgRXJyb3IudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMpXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuYXJyYXlzIHx8IG9wdGlvbnMuZGVmYXVsdHMpXG4gICAgICAgICAgICAgICAgb2JqZWN0LmxvY2F0aW9uID0gW107XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIG9iamVjdC5tZXNzYWdlID0gXCJcIjtcbiAgICAgICAgICAgICAgICBvYmplY3QudGltZU5zID0gMDtcbiAgICAgICAgICAgICAgICBvYmplY3QuanNvbiA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5tZXNzYWdlICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcIm1lc3NhZ2VcIikpXG4gICAgICAgICAgICAgICAgb2JqZWN0Lm1lc3NhZ2UgPSBtZXNzYWdlLm1lc3NhZ2U7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5sb2NhdGlvbiAmJiBtZXNzYWdlLmxvY2F0aW9uLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG9iamVjdC5sb2NhdGlvbiA9IFtdO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWVzc2FnZS5sb2NhdGlvbi5sZW5ndGg7ICsrailcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmxvY2F0aW9uW2pdID0gJHJvb3QuVHJhY2UuTG9jYXRpb24udG9PYmplY3QobWVzc2FnZS5sb2NhdGlvbltqXSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS50aW1lTnMgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwidGltZU5zXCIpKVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS50aW1lTnMgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC50aW1lTnMgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobWVzc2FnZS50aW1lTnMpIDogbWVzc2FnZS50aW1lTnM7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QudGltZU5zID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtZXNzYWdlLnRpbWVOcykgOiBvcHRpb25zLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobWVzc2FnZS50aW1lTnMubG93ID4+PiAwLCBtZXNzYWdlLnRpbWVOcy5oaWdoID4+PiAwKS50b051bWJlcih0cnVlKSA6IG1lc3NhZ2UudGltZU5zO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuanNvbiAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJqc29uXCIpKVxuICAgICAgICAgICAgICAgIG9iamVjdC5qc29uID0gbWVzc2FnZS5qc29uO1xuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBFcnJvciB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5FcnJvclxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgRXJyb3IucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBFcnJvcjtcbiAgICB9KSgpO1xuXG4gICAgVHJhY2UuSFRUUCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIEhUVFAuXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElIVFRQXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7VHJhY2UuSFRUUC5NZXRob2R8bnVsbH0gW21ldGhvZF0gSFRUUCBtZXRob2RcbiAgICAgICAgICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZyxUcmFjZS5IVFRQLklWYWx1ZXM+fG51bGx9IFtyZXF1ZXN0SGVhZGVyc10gSFRUUCByZXF1ZXN0SGVhZGVyc1xuICAgICAgICAgKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLFRyYWNlLkhUVFAuSVZhbHVlcz58bnVsbH0gW3Jlc3BvbnNlSGVhZGVyc10gSFRUUCByZXNwb25zZUhlYWRlcnNcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW3N0YXR1c0NvZGVdIEhUVFAgc3RhdHVzQ29kZVxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBIVFRQLlxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2VcbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgSFRUUC5cbiAgICAgICAgICogQGltcGxlbWVudHMgSUhUVFBcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuSUhUVFA9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIEhUVFAocHJvcGVydGllcykge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0SGVhZGVycyA9IHt9O1xuICAgICAgICAgICAgdGhpcy5yZXNwb25zZUhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllc1trZXlzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trZXlzW2ldXSA9IHByb3BlcnRpZXNba2V5c1tpXV07XG4gICAgICAgIH1cblxuICAgICAgICAvKipcbiAgICAgICAgICogSFRUUCBtZXRob2QuXG4gICAgICAgICAqIEBtZW1iZXIge1RyYWNlLkhUVFAuTWV0aG9kfSBtZXRob2RcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkhUVFBcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBIVFRQLnByb3RvdHlwZS5tZXRob2QgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBIVFRQIHJlcXVlc3RIZWFkZXJzLlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3QuPHN0cmluZyxUcmFjZS5IVFRQLklWYWx1ZXM+fSByZXF1ZXN0SGVhZGVyc1xuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuSFRUUFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEhUVFAucHJvdG90eXBlLnJlcXVlc3RIZWFkZXJzID0gJHV0aWwuZW1wdHlPYmplY3Q7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIEhUVFAgcmVzcG9uc2VIZWFkZXJzLlxuICAgICAgICAgKiBAbWVtYmVyIHtPYmplY3QuPHN0cmluZyxUcmFjZS5IVFRQLklWYWx1ZXM+fSByZXNwb25zZUhlYWRlcnNcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkhUVFBcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBIVFRQLnByb3RvdHlwZS5yZXNwb25zZUhlYWRlcnMgPSAkdXRpbC5lbXB0eU9iamVjdDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogSFRUUCBzdGF0dXNDb2RlLlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHN0YXR1c0NvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkhUVFBcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBIVFRQLnByb3RvdHlwZS5zdGF0dXNDb2RlID0gMDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBIVFRQIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGNyZWF0ZVxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuSFRUUFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuSUhUVFA9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICogQHJldHVybnMge1RyYWNlLkhUVFB9IEhUVFAgaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIEhUVFAuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgSFRUUChwcm9wZXJ0aWVzKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEhUVFAgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuSFRUUC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuSFRUUFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuSUhUVFB9IG1lc3NhZ2UgSFRUUCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIEhUVFAuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgaWYgKCF3cml0ZXIpXG4gICAgICAgICAgICAgICAgd3JpdGVyID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLm1ldGhvZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwibWV0aG9kXCIpKVxuICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMCA9Ki84KS5pbnQzMihtZXNzYWdlLm1ldGhvZCk7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5yZXF1ZXN0SGVhZGVycyAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwicmVxdWVzdEhlYWRlcnNcIikpXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKG1lc3NhZ2UucmVxdWVzdEhlYWRlcnMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCA0LCB3aXJlVHlwZSAyID0qLzM0KS5mb3JrKCkudWludDMyKC8qIGlkIDEsIHdpcmVUeXBlIDIgPSovMTApLnN0cmluZyhrZXlzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuVHJhY2UuSFRUUC5WYWx1ZXMuZW5jb2RlKG1lc3NhZ2UucmVxdWVzdEhlYWRlcnNba2V5c1tpXV0sIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMiA9Ki8xOCkuZm9yaygpKS5sZGVsaW0oKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5yZXNwb25zZUhlYWRlcnMgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInJlc3BvbnNlSGVhZGVyc1wiKSlcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMobWVzc2FnZS5yZXNwb25zZUhlYWRlcnMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCA1LCB3aXJlVHlwZSAyID0qLzQyKS5mb3JrKCkudWludDMyKC8qIGlkIDEsIHdpcmVUeXBlIDIgPSovMTApLnN0cmluZyhrZXlzW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuVHJhY2UuSFRUUC5WYWx1ZXMuZW5jb2RlKG1lc3NhZ2UucmVzcG9uc2VIZWFkZXJzW2tleXNbaV1dLCB3cml0ZXIudWludDMyKC8qIGlkIDIsIHdpcmVUeXBlIDIgPSovMTgpLmZvcmsoKSkubGRlbGltKCkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhdHVzQ29kZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwic3RhdHVzQ29kZVwiKSlcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDYsIHdpcmVUeXBlIDAgPSovNDgpLnVpbnQzMihtZXNzYWdlLnN0YXR1c0NvZGUpO1xuICAgICAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEhUVFAgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuSFRUUC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZFxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuSFRUUFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuSUhUVFB9IG1lc3NhZ2UgSFRUUCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIEhUVFAuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikubGRlbGltKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBIVFRQIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkhUVFBcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge1RyYWNlLkhUVFB9IEhUVFBcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBIVFRQLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgcmVhZGVyID0gJFJlYWRlci5jcmVhdGUocmVhZGVyKTtcbiAgICAgICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LlRyYWNlLkhUVFAoKSwga2V5O1xuICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm1ldGhvZCA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwKCkucG9zKys7XG4gICAgICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnJlcXVlc3RIZWFkZXJzID09PSAkdXRpbC5lbXB0eU9iamVjdClcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVxdWVzdEhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAga2V5ID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICByZWFkZXIucG9zKys7XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVxdWVzdEhlYWRlcnNba2V5XSA9ICRyb290LlRyYWNlLkhUVFAuVmFsdWVzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXAoKS5wb3MrKztcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucmVzcG9uc2VIZWFkZXJzID09PSAkdXRpbC5lbXB0eU9iamVjdClcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVzcG9uc2VIZWFkZXJzID0ge307XG4gICAgICAgICAgICAgICAgICAgIGtleSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnBvcysrO1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJlc3BvbnNlSGVhZGVyc1trZXldID0gJHJvb3QuVHJhY2UuSFRUUC5WYWx1ZXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSA2OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnN0YXR1c0NvZGUgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBIVFRQIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIsIGxlbmd0aCBkZWxpbWl0ZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkhUVFBcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHJldHVybnMge1RyYWNlLkhUVFB9IEhUVFBcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBIVFRQLmRlY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZChyZWFkZXIpIHtcbiAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHJlYWRlciA9IG5ldyAkUmVhZGVyKHJlYWRlcik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBWZXJpZmllcyBhIEhUVFAgbWVzc2FnZS5cbiAgICAgICAgICogQGZ1bmN0aW9uIHZlcmlmeVxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuSFRUUFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAgICAgKi9cbiAgICAgICAgSFRUUC52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSBcIm9iamVjdFwiIHx8IG1lc3NhZ2UgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5tZXRob2QgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwibWV0aG9kXCIpKVxuICAgICAgICAgICAgICAgIHN3aXRjaCAobWVzc2FnZS5tZXRob2QpIHtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJtZXRob2Q6IGVudW0gdmFsdWUgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnJlcXVlc3RIZWFkZXJzICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInJlcXVlc3RIZWFkZXJzXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkdXRpbC5pc09iamVjdChtZXNzYWdlLnJlcXVlc3RIZWFkZXJzKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicmVxdWVzdEhlYWRlcnM6IG9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBPYmplY3Qua2V5cyhtZXNzYWdlLnJlcXVlc3RIZWFkZXJzKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5IVFRQLlZhbHVlcy52ZXJpZnkobWVzc2FnZS5yZXF1ZXN0SGVhZGVyc1trZXlbaV1dKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicmVxdWVzdEhlYWRlcnMuXCIgKyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5yZXNwb25zZUhlYWRlcnMgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicmVzcG9uc2VIZWFkZXJzXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEkdXRpbC5pc09iamVjdChtZXNzYWdlLnJlc3BvbnNlSGVhZGVycykpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcInJlc3BvbnNlSGVhZGVyczogb2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IE9iamVjdC5rZXlzKG1lc3NhZ2UucmVzcG9uc2VIZWFkZXJzKTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5IVFRQLlZhbHVlcy52ZXJpZnkobWVzc2FnZS5yZXNwb25zZUhlYWRlcnNba2V5W2ldXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInJlc3BvbnNlSGVhZGVycy5cIiArIGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnN0YXR1c0NvZGUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwic3RhdHVzQ29kZVwiKSlcbiAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLnN0YXR1c0NvZGUpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJzdGF0dXNDb2RlOiBpbnRlZ2VyIGV4cGVjdGVkXCI7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgSFRUUCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuSFRUUFxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuSFRUUH0gbWVzc2FnZSBIVFRQXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgSFRUUC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vYmplY3RzIHx8IG9wdGlvbnMuZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBvYmplY3QucmVxdWVzdEhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgICBvYmplY3QucmVzcG9uc2VIZWFkZXJzID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIG9iamVjdC5tZXRob2QgPSBvcHRpb25zLmVudW1zID09PSBTdHJpbmcgPyBcIlVOS05PV05cIiA6IDA7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnN0YXR1c0NvZGUgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UubWV0aG9kICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcIm1ldGhvZFwiKSlcbiAgICAgICAgICAgICAgICBvYmplY3QubWV0aG9kID0gb3B0aW9ucy5lbnVtcyA9PT0gU3RyaW5nID8gJHJvb3QuVHJhY2UuSFRUUC5NZXRob2RbbWVzc2FnZS5tZXRob2RdIDogbWVzc2FnZS5tZXRob2Q7XG4gICAgICAgICAgICB2YXIga2V5czI7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5yZXF1ZXN0SGVhZGVycyAmJiAoa2V5czIgPSBPYmplY3Qua2V5cyhtZXNzYWdlLnJlcXVlc3RIZWFkZXJzKSkubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnJlcXVlc3RIZWFkZXJzID0ge307XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzMi5sZW5ndGg7ICsrailcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnJlcXVlc3RIZWFkZXJzW2tleXMyW2pdXSA9ICRyb290LlRyYWNlLkhUVFAuVmFsdWVzLnRvT2JqZWN0KG1lc3NhZ2UucmVxdWVzdEhlYWRlcnNba2V5czJbal1dLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnJlc3BvbnNlSGVhZGVycyAmJiAoa2V5czIgPSBPYmplY3Qua2V5cyhtZXNzYWdlLnJlc3BvbnNlSGVhZGVycykpLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgIG9iamVjdC5yZXNwb25zZUhlYWRlcnMgPSB7fTtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMyLmxlbmd0aDsgKytqKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QucmVzcG9uc2VIZWFkZXJzW2tleXMyW2pdXSA9ICRyb290LlRyYWNlLkhUVFAuVmFsdWVzLnRvT2JqZWN0KG1lc3NhZ2UucmVzcG9uc2VIZWFkZXJzW2tleXMyW2pdXSwgb3B0aW9ucyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5zdGF0dXNDb2RlICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInN0YXR1c0NvZGVcIikpXG4gICAgICAgICAgICAgICAgb2JqZWN0LnN0YXR1c0NvZGUgPSBtZXNzYWdlLnN0YXR1c0NvZGU7XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIEhUVFAgdG8gSlNPTi5cbiAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuSFRUUFxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgSFRUUC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgSFRUUC5WYWx1ZXMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFZhbHVlcy5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5IVFRQXG4gICAgICAgICAgICAgKiBAaW50ZXJmYWNlIElWYWx1ZXNcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPHN0cmluZz58bnVsbH0gW3ZhbHVlXSBWYWx1ZXMgdmFsdWVcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgVmFsdWVzLlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkhUVFBcbiAgICAgICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFZhbHVlcy5cbiAgICAgICAgICAgICAqIEBpbXBsZW1lbnRzIElWYWx1ZXNcbiAgICAgICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5IVFRQLklWYWx1ZXM9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gVmFsdWVzKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gW107XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNba2V5c1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBWYWx1ZXMgdmFsdWUuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48c3RyaW5nPn0gdmFsdWVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5IVFRQLlZhbHVlc1xuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFZhbHVlcy5wcm90b3R5cGUudmFsdWUgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBuZXcgVmFsdWVzIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBjcmVhdGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5IVFRQLlZhbHVlc1xuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5IVFRQLklWYWx1ZXM9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5IVFRQLlZhbHVlc30gVmFsdWVzIGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFZhbHVlcy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVmFsdWVzKHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgVmFsdWVzIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFRyYWNlLkhUVFAuVmFsdWVzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkhUVFAuVmFsdWVzXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLkhUVFAuSVZhbHVlc30gbWVzc2FnZSBWYWx1ZXMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgVmFsdWVzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdyaXRlcilcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVyID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS52YWx1ZSAhPSBudWxsICYmIG1lc3NhZ2UudmFsdWUubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2UudmFsdWUubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDEsIHdpcmVUeXBlIDIgPSovMTApLnN0cmluZyhtZXNzYWdlLnZhbHVlW2ldKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgVmFsdWVzIG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFRyYWNlLkhUVFAuVmFsdWVzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkhUVFAuVmFsdWVzXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLkhUVFAuSVZhbHVlc30gbWVzc2FnZSBWYWx1ZXMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgVmFsdWVzLmVuY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZChtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGUobWVzc2FnZSwgd3JpdGVyKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhIFZhbHVlcyBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkhUVFAuVmFsdWVzXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuSFRUUC5WYWx1ZXN9IFZhbHVlc1xuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBWYWx1ZXMuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHJlYWRlciwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlciA9ICRSZWFkZXIuY3JlYXRlKHJlYWRlcik7XG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGgsIG1lc3NhZ2UgPSBuZXcgJHJvb3QuVHJhY2UuSFRUUC5WYWx1ZXMoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShtZXNzYWdlLnZhbHVlICYmIG1lc3NhZ2UudmFsdWUubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbHVlID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnZhbHVlLnB1c2gocmVhZGVyLnN0cmluZygpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYSBWYWx1ZXMgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5IVFRQLlZhbHVlc1xuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuSFRUUC5WYWx1ZXN9IFZhbHVlc1xuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBWYWx1ZXMuZGVjb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkKHJlYWRlcikge1xuICAgICAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSBuZXcgJFJlYWRlcihyZWFkZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcmlmaWVzIGEgVmFsdWVzIG1lc3NhZ2UuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuSFRUUC5WYWx1ZXNcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAgICAgICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgVmFsdWVzLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSBcIm9iamVjdFwiIHx8IG1lc3NhZ2UgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnZhbHVlICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShtZXNzYWdlLnZhbHVlKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInZhbHVlOiBhcnJheSBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2UudmFsdWUubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzU3RyaW5nKG1lc3NhZ2UudmFsdWVbaV0pKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInZhbHVlOiBzdHJpbmdbXSBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgVmFsdWVzIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkhUVFAuVmFsdWVzXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLkhUVFAuVmFsdWVzfSBtZXNzYWdlIFZhbHVlc1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBWYWx1ZXMudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmFycmF5cyB8fCBvcHRpb25zLmRlZmF1bHRzKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QudmFsdWUgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS52YWx1ZSAmJiBtZXNzYWdlLnZhbHVlLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QudmFsdWUgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtZXNzYWdlLnZhbHVlLmxlbmd0aDsgKytqKVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnZhbHVlW2pdID0gbWVzc2FnZS52YWx1ZVtqXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBWYWx1ZXMgdG8gSlNPTi5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5IVFRQLlZhbHVlc1xuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFZhbHVlcy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIFZhbHVlcztcbiAgICAgICAgfSkoKTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTWV0aG9kIGVudW0uXG4gICAgICAgICAqIEBuYW1lIFRyYWNlLkhUVFAuTWV0aG9kXG4gICAgICAgICAqIEBlbnVtIHtzdHJpbmd9XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBVTktOT1dOPTAgVU5LTk9XTiB2YWx1ZVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gT1BUSU9OUz0xIE9QVElPTlMgdmFsdWVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IEdFVD0yIEdFVCB2YWx1ZVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gSEVBRD0zIEhFQUQgdmFsdWVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFBPU1Q9NCBQT1NUIHZhbHVlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfSBQVVQ9NSBQVVQgdmFsdWVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IERFTEVURT02IERFTEVURSB2YWx1ZVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gVFJBQ0U9NyBUUkFDRSB2YWx1ZVxuICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcn0gQ09OTkVDVD04IENPTk5FQ1QgdmFsdWVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ9IFBBVENIPTkgUEFUQ0ggdmFsdWVcbiAgICAgICAgICovXG4gICAgICAgIEhUVFAuTWV0aG9kID0gKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlc0J5SWQgPSB7fSwgdmFsdWVzID0gT2JqZWN0LmNyZWF0ZSh2YWx1ZXNCeUlkKTtcbiAgICAgICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzBdID0gXCJVTktOT1dOXCJdID0gMDtcbiAgICAgICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzFdID0gXCJPUFRJT05TXCJdID0gMTtcbiAgICAgICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzJdID0gXCJHRVRcIl0gPSAyO1xuICAgICAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbM10gPSBcIkhFQURcIl0gPSAzO1xuICAgICAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbNF0gPSBcIlBPU1RcIl0gPSA0O1xuICAgICAgICAgICAgdmFsdWVzW3ZhbHVlc0J5SWRbNV0gPSBcIlBVVFwiXSA9IDU7XG4gICAgICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFs2XSA9IFwiREVMRVRFXCJdID0gNjtcbiAgICAgICAgICAgIHZhbHVlc1t2YWx1ZXNCeUlkWzddID0gXCJUUkFDRVwiXSA9IDc7XG4gICAgICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFs4XSA9IFwiQ09OTkVDVFwiXSA9IDg7XG4gICAgICAgICAgICB2YWx1ZXNbdmFsdWVzQnlJZFs5XSA9IFwiUEFUQ0hcIl0gPSA5O1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICAgICAgfSkoKTtcblxuICAgICAgICByZXR1cm4gSFRUUDtcbiAgICB9KSgpO1xuXG4gICAgVHJhY2UuTG9jYXRpb24gPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBMb2NhdGlvbi5cbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSUxvY2F0aW9uXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtsaW5lXSBMb2NhdGlvbiBsaW5lXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtjb2x1bW5dIExvY2F0aW9uIGNvbHVtblxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBMb2NhdGlvbi5cbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIExvY2F0aW9uLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJTG9jYXRpb25cbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuSUxvY2F0aW9uPX0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqL1xuICAgICAgICBmdW5jdGlvbiBMb2NhdGlvbihwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNba2V5c1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba2V5c1tpXV0gPSBwcm9wZXJ0aWVzW2tleXNbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExvY2F0aW9uIGxpbmUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gbGluZVxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuTG9jYXRpb25cbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBMb2NhdGlvbi5wcm90b3R5cGUubGluZSA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIExvY2F0aW9uIGNvbHVtbi5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBjb2x1bW5cbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkxvY2F0aW9uXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTG9jYXRpb24ucHJvdG90eXBlLmNvbHVtbiA9IDA7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBuZXcgTG9jYXRpb24gaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5Mb2NhdGlvblxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuSUxvY2F0aW9uPX0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5Mb2NhdGlvbn0gTG9jYXRpb24gaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIExvY2F0aW9uLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3IExvY2F0aW9uKHByb3BlcnRpZXMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgTG9jYXRpb24gbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuTG9jYXRpb24udmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkxvY2F0aW9uXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5JTG9jYXRpb259IG1lc3NhZ2UgTG9jYXRpb24gbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBMb2NhdGlvbi5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgICAgICBpZiAoIXdyaXRlcilcbiAgICAgICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UubGluZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwibGluZVwiKSlcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDEsIHdpcmVUeXBlIDAgPSovOCkudWludDMyKG1lc3NhZ2UubGluZSk7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5jb2x1bW4gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImNvbHVtblwiKSlcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDIsIHdpcmVUeXBlIDAgPSovMTYpLnVpbnQzMihtZXNzYWdlLmNvbHVtbik7XG4gICAgICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgTG9jYXRpb24gbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuTG9jYXRpb24udmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkxvY2F0aW9uXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5JTG9jYXRpb259IG1lc3NhZ2UgTG9jYXRpb24gbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAqL1xuICAgICAgICBMb2NhdGlvbi5lbmNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGUobWVzc2FnZSwgd3JpdGVyKS5sZGVsaW0oKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIExvY2F0aW9uIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkxvY2F0aW9uXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5Mb2NhdGlvbn0gTG9jYXRpb25cbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBMb2NhdGlvbi5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUocmVhZGVyLCBsZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHJlYWRlciA9ICRSZWFkZXIuY3JlYXRlKHJlYWRlcik7XG4gICAgICAgICAgICB2YXIgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aCwgbWVzc2FnZSA9IG5ldyAkcm9vdC5UcmFjZS5Mb2NhdGlvbigpO1xuICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxpbmUgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5jb2x1bW4gPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBMb2NhdGlvbiBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5Mb2NhdGlvblxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuTG9jYXRpb259IExvY2F0aW9uXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgTG9jYXRpb24uZGVjb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkKHJlYWRlcikge1xuICAgICAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgcmVhZGVyID0gbmV3ICRSZWFkZXIocmVhZGVyKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFZlcmlmaWVzIGEgTG9jYXRpb24gbWVzc2FnZS5cbiAgICAgICAgICogQGZ1bmN0aW9uIHZlcmlmeVxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuTG9jYXRpb25cbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgICAgICovXG4gICAgICAgIExvY2F0aW9uLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJvYmplY3QgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmxpbmUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwibGluZVwiKSlcbiAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLmxpbmUpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJsaW5lOiBpbnRlZ2VyIGV4cGVjdGVkXCI7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5jb2x1bW4gIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiY29sdW1uXCIpKVxuICAgICAgICAgICAgICAgIGlmICghJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UuY29sdW1uKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29sdW1uOiBpbnRlZ2VyIGV4cGVjdGVkXCI7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgTG9jYXRpb24gbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkxvY2F0aW9uXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5Mb2NhdGlvbn0gbWVzc2FnZSBMb2NhdGlvblxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIExvY2F0aW9uLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0LmxpbmUgPSAwO1xuICAgICAgICAgICAgICAgIG9iamVjdC5jb2x1bW4gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UubGluZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJsaW5lXCIpKVxuICAgICAgICAgICAgICAgIG9iamVjdC5saW5lID0gbWVzc2FnZS5saW5lO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuY29sdW1uICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImNvbHVtblwiKSlcbiAgICAgICAgICAgICAgICBvYmplY3QuY29sdW1uID0gbWVzc2FnZS5jb2x1bW47XG4gICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIExvY2F0aW9uIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLkxvY2F0aW9uXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBMb2NhdGlvbi5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgIH07XG5cbiAgICAgICAgcmV0dXJuIExvY2F0aW9uO1xuICAgIH0pKCk7XG5cbiAgICBUcmFjZS5Ob2RlID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgTm9kZS5cbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlXG4gICAgICAgICAqIEBpbnRlcmZhY2UgSU5vZGVcbiAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3Jlc3BvbnNlTmFtZV0gTm9kZSByZXNwb25zZU5hbWVcbiAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2luZGV4XSBOb2RlIGluZGV4XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtvcmlnaW5hbEZpZWxkTmFtZV0gTm9kZSBvcmlnaW5hbEZpZWxkTmFtZVxuICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbdHlwZV0gTm9kZSB0eXBlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtwYXJlbnRUeXBlXSBOb2RlIHBhcmVudFR5cGVcbiAgICAgICAgICogQHByb3BlcnR5IHtUcmFjZS5JQ2FjaGVQb2xpY3l8bnVsbH0gW2NhY2hlUG9saWN5XSBOb2RlIGNhY2hlUG9saWN5XG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtzdGFydFRpbWVdIE5vZGUgc3RhcnRUaW1lXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtlbmRUaW1lXSBOb2RlIGVuZFRpbWVcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48VHJhY2UuSUVycm9yPnxudWxsfSBbZXJyb3JdIE5vZGUgZXJyb3JcbiAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48VHJhY2UuSU5vZGU+fG51bGx9IFtjaGlsZF0gTm9kZSBjaGlsZFxuICAgICAgICAgKi9cblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBOb2RlLlxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2VcbiAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgTm9kZS5cbiAgICAgICAgICogQGltcGxlbWVudHMgSU5vZGVcbiAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuSU5vZGU9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICovXG4gICAgICAgIGZ1bmN0aW9uIE5vZGUocHJvcGVydGllcykge1xuICAgICAgICAgICAgdGhpcy5lcnJvciA9IFtdO1xuICAgICAgICAgICAgdGhpcy5jaGlsZCA9IFtdO1xuICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW2tleXNbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb2RlIHJlc3BvbnNlTmFtZS5cbiAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSByZXNwb25zZU5hbWVcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLk5vZGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBOb2RlLnByb3RvdHlwZS5yZXNwb25zZU5hbWUgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb2RlIGluZGV4LlxuICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGluZGV4XG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5Ob2RlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTm9kZS5wcm90b3R5cGUuaW5kZXggPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb2RlIG9yaWdpbmFsRmllbGROYW1lLlxuICAgICAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IG9yaWdpbmFsRmllbGROYW1lXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5Ob2RlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTm9kZS5wcm90b3R5cGUub3JpZ2luYWxGaWVsZE5hbWUgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb2RlIHR5cGUuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gdHlwZVxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuTm9kZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE5vZGUucHJvdG90eXBlLnR5cGUgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb2RlIHBhcmVudFR5cGUuXG4gICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gcGFyZW50VHlwZVxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuTm9kZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE5vZGUucHJvdG90eXBlLnBhcmVudFR5cGUgPSBcIlwiO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb2RlIGNhY2hlUG9saWN5LlxuICAgICAgICAgKiBAbWVtYmVyIHtUcmFjZS5JQ2FjaGVQb2xpY3l8bnVsbHx1bmRlZmluZWR9IGNhY2hlUG9saWN5XG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5Ob2RlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTm9kZS5wcm90b3R5cGUuY2FjaGVQb2xpY3kgPSBudWxsO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb2RlIHN0YXJ0VGltZS5cbiAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBzdGFydFRpbWVcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLk5vZGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBOb2RlLnByb3RvdHlwZS5zdGFydFRpbWUgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb2RlIGVuZFRpbWUuXG4gICAgICAgICAqIEBtZW1iZXIge251bWJlcn0gZW5kVGltZVxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuTm9kZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIE5vZGUucHJvdG90eXBlLmVuZFRpbWUgPSAwO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb2RlIGVycm9yLlxuICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48VHJhY2UuSUVycm9yPn0gZXJyb3JcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLk5vZGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBOb2RlLnByb3RvdHlwZS5lcnJvciA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIE5vZGUgY2hpbGQuXG4gICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxUcmFjZS5JTm9kZT59IGNoaWxkXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5Ob2RlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTm9kZS5wcm90b3R5cGUuY2hpbGQgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgIC8vIE9uZU9mIGZpZWxkIG5hbWVzIGJvdW5kIHRvIHZpcnR1YWwgZ2V0dGVycyBhbmQgc2V0dGVyc1xuICAgICAgICB2YXIgJG9uZU9mRmllbGRzO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBOb2RlIGlkLlxuICAgICAgICAgKiBAbWVtYmVyIHtcInJlc3BvbnNlTmFtZVwifFwiaW5kZXhcInx1bmRlZmluZWR9IGlkXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5Ob2RlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE5vZGUucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgICAgIGdldDogJHV0aWwub25lT2ZHZXR0ZXIoJG9uZU9mRmllbGRzID0gW1wicmVzcG9uc2VOYW1lXCIsIFwiaW5kZXhcIl0pLFxuICAgICAgICAgICAgc2V0OiAkdXRpbC5vbmVPZlNldHRlcigkb25lT2ZGaWVsZHMpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IE5vZGUgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5Ob2RlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5JTm9kZT19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuTm9kZX0gTm9kZSBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgTm9kZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBOb2RlKHByb3BlcnRpZXMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgTm9kZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUcmFjZS5Ob2RlLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5Ob2RlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5JTm9kZX0gbWVzc2FnZSBOb2RlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgTm9kZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgICAgICBpZiAoIXdyaXRlcilcbiAgICAgICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UucmVzcG9uc2VOYW1lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJyZXNwb25zZU5hbWVcIikpXG4gICAgICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAxLCB3aXJlVHlwZSAyID0qLzEwKS5zdHJpbmcobWVzc2FnZS5yZXNwb25zZU5hbWUpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaW5kZXggIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImluZGV4XCIpKVxuICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMCA9Ki8xNikudWludDMyKG1lc3NhZ2UuaW5kZXgpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UudHlwZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwidHlwZVwiKSlcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDMsIHdpcmVUeXBlIDIgPSovMjYpLnN0cmluZyhtZXNzYWdlLnR5cGUpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuY2FjaGVQb2xpY3kgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImNhY2hlUG9saWN5XCIpKVxuICAgICAgICAgICAgICAgICRyb290LlRyYWNlLkNhY2hlUG9saWN5LmVuY29kZShtZXNzYWdlLmNhY2hlUG9saWN5LCB3cml0ZXIudWludDMyKC8qIGlkIDUsIHdpcmVUeXBlIDIgPSovNDIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5zdGFydFRpbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInN0YXJ0VGltZVwiKSlcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDgsIHdpcmVUeXBlIDAgPSovNjQpLnVpbnQ2NChtZXNzYWdlLnN0YXJ0VGltZSk7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5lbmRUaW1lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJlbmRUaW1lXCIpKVxuICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgOSwgd2lyZVR5cGUgMCA9Ki83MikudWludDY0KG1lc3NhZ2UuZW5kVGltZSk7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5lcnJvciAhPSBudWxsICYmIG1lc3NhZ2UuZXJyb3IubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZS5lcnJvci5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuVHJhY2UuRXJyb3IuZW5jb2RlKG1lc3NhZ2UuZXJyb3JbaV0sIHdyaXRlci51aW50MzIoLyogaWQgMTEsIHdpcmVUeXBlIDIgPSovOTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5jaGlsZCAhPSBudWxsICYmIG1lc3NhZ2UuY2hpbGQubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZS5jaGlsZC5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuVHJhY2UuTm9kZS5lbmNvZGUobWVzc2FnZS5jaGlsZFtpXSwgd3JpdGVyLnVpbnQzMigvKiBpZCAxMiwgd2lyZVR5cGUgMiA9Ki85OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnBhcmVudFR5cGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInBhcmVudFR5cGVcIikpXG4gICAgICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAxMywgd2lyZVR5cGUgMiA9Ki8xMDYpLnN0cmluZyhtZXNzYWdlLnBhcmVudFR5cGUpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uub3JpZ2luYWxGaWVsZE5hbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcIm9yaWdpbmFsRmllbGROYW1lXCIpKVxuICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMTQsIHdpcmVUeXBlIDIgPSovMTE0KS5zdHJpbmcobWVzc2FnZS5vcmlnaW5hbEZpZWxkTmFtZSk7XG4gICAgICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgTm9kZSBtZXNzYWdlLCBsZW5ndGggZGVsaW1pdGVkLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUcmFjZS5Ob2RlLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5Ob2RlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5JTm9kZX0gbWVzc2FnZSBOb2RlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgTm9kZS5lbmNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGUobWVzc2FnZSwgd3JpdGVyKS5sZGVsaW0oKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRGVjb2RlcyBhIE5vZGUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuTm9kZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuTm9kZX0gTm9kZVxuICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICovXG4gICAgICAgIE5vZGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHJlYWRlciwgbGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByZWFkZXIgPSAkUmVhZGVyLmNyZWF0ZShyZWFkZXIpO1xuICAgICAgICAgICAgdmFyIGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGgsIG1lc3NhZ2UgPSBuZXcgJHJvb3QuVHJhY2UuTm9kZSgpO1xuICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJlc3BvbnNlTmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmluZGV4ID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm9yaWdpbmFsRmllbGROYW1lID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UudHlwZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYXJlbnRUeXBlID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2FjaGVQb2xpY3kgPSAkcm9vdC5UcmFjZS5DYWNoZVBvbGljeS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDg6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uuc3RhcnRUaW1lID0gcmVhZGVyLnVpbnQ2NCgpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZW5kVGltZSA9IHJlYWRlci51aW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMTpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobWVzc2FnZS5lcnJvciAmJiBtZXNzYWdlLmVycm9yLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmVycm9yID0gW107XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXJyb3IucHVzaCgkcm9vdC5UcmFjZS5FcnJvci5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEobWVzc2FnZS5jaGlsZCAmJiBtZXNzYWdlLmNoaWxkLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNoaWxkID0gW107XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2hpbGQucHVzaCgkcm9vdC5UcmFjZS5Ob2RlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBEZWNvZGVzIGEgTm9kZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5Ob2RlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5Ob2RlfSBOb2RlXG4gICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgKi9cbiAgICAgICAgTm9kZS5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICByZWFkZXIgPSBuZXcgJFJlYWRlcihyZWFkZXIpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogVmVyaWZpZXMgYSBOb2RlIG1lc3NhZ2UuXG4gICAgICAgICAqIEBmdW5jdGlvbiB2ZXJpZnlcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLk5vZGVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAgICAgICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgICAgICovXG4gICAgICAgIE5vZGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJvYmplY3RcIiB8fCBtZXNzYWdlID09PSBudWxsKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICAgICAgdmFyIHByb3BlcnRpZXMgPSB7fTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnJlc3BvbnNlTmFtZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJyZXNwb25zZU5hbWVcIikpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLmlkID0gMTtcbiAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzU3RyaW5nKG1lc3NhZ2UucmVzcG9uc2VOYW1lKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicmVzcG9uc2VOYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmluZGV4ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImluZGV4XCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMuaWQgPT09IDEpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImlkOiBtdWx0aXBsZSB2YWx1ZXNcIjtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLmlkID0gMTtcbiAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLmluZGV4KSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiaW5kZXg6IGludGVnZXIgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXNzYWdlLm9yaWdpbmFsRmllbGROYW1lICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcIm9yaWdpbmFsRmllbGROYW1lXCIpKVxuICAgICAgICAgICAgICAgIGlmICghJHV0aWwuaXNTdHJpbmcobWVzc2FnZS5vcmlnaW5hbEZpZWxkTmFtZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm9yaWdpbmFsRmllbGROYW1lOiBzdHJpbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnR5cGUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwidHlwZVwiKSlcbiAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzU3RyaW5nKG1lc3NhZ2UudHlwZSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcInR5cGU6IHN0cmluZyBleHBlY3RlZFwiO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UucGFyZW50VHlwZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJwYXJlbnRUeXBlXCIpKVxuICAgICAgICAgICAgICAgIGlmICghJHV0aWwuaXNTdHJpbmcobWVzc2FnZS5wYXJlbnRUeXBlKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicGFyZW50VHlwZTogc3RyaW5nIGV4cGVjdGVkXCI7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5jYWNoZVBvbGljeSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJjYWNoZVBvbGljeVwiKSkge1xuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9ICRyb290LlRyYWNlLkNhY2hlUG9saWN5LnZlcmlmeShtZXNzYWdlLmNhY2hlUG9saWN5KTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNhY2hlUG9saWN5LlwiICsgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5zdGFydFRpbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwic3RhcnRUaW1lXCIpKVxuICAgICAgICAgICAgICAgIGlmICghJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2Uuc3RhcnRUaW1lKSAmJiAhKG1lc3NhZ2Uuc3RhcnRUaW1lICYmICR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLnN0YXJ0VGltZS5sb3cpICYmICR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLnN0YXJ0VGltZS5oaWdoKSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcInN0YXJ0VGltZTogaW50ZWdlcnxMb25nIGV4cGVjdGVkXCI7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5lbmRUaW1lICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImVuZFRpbWVcIikpXG4gICAgICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5lbmRUaW1lKSAmJiAhKG1lc3NhZ2UuZW5kVGltZSAmJiAkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5lbmRUaW1lLmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UuZW5kVGltZS5oaWdoKSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImVuZFRpbWU6IGludGVnZXJ8TG9uZyBleHBlY3RlZFwiO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZXJyb3IgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZXJyb3JcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobWVzc2FnZS5lcnJvcikpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImVycm9yOiBhcnJheSBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZS5lcnJvci5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5FcnJvci52ZXJpZnkobWVzc2FnZS5lcnJvcltpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImVycm9yLlwiICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuY2hpbGQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiY2hpbGRcIikpIHtcbiAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobWVzc2FnZS5jaGlsZCkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNoaWxkOiBhcnJheSBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZS5jaGlsZC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5Ob2RlLnZlcmlmeShtZXNzYWdlLmNoaWxkW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY2hpbGQuXCIgKyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgTm9kZSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuTm9kZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuTm9kZX0gbWVzc2FnZSBOb2RlXG4gICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgKi9cbiAgICAgICAgTm9kZS50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5hcnJheXMgfHwgb3B0aW9ucy5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgIG9iamVjdC5lcnJvciA9IFtdO1xuICAgICAgICAgICAgICAgIG9iamVjdC5jaGlsZCA9IFtdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICBvYmplY3QudHlwZSA9IFwiXCI7XG4gICAgICAgICAgICAgICAgb2JqZWN0LmNhY2hlUG9saWN5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBvYmplY3Quc3RhcnRUaW1lID0gMDtcbiAgICAgICAgICAgICAgICBvYmplY3QuZW5kVGltZSA9IDA7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnBhcmVudFR5cGUgPSBcIlwiO1xuICAgICAgICAgICAgICAgIG9iamVjdC5vcmlnaW5hbEZpZWxkTmFtZSA9IFwiXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5yZXNwb25zZU5hbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicmVzcG9uc2VOYW1lXCIpKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0LnJlc3BvbnNlTmFtZSA9IG1lc3NhZ2UucmVzcG9uc2VOYW1lO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm9uZW9mcylcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmlkID0gXCJyZXNwb25zZU5hbWVcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmluZGV4ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImluZGV4XCIpKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0LmluZGV4ID0gbWVzc2FnZS5pbmRleDtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vbmVvZnMpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5pZCA9IFwiaW5kZXhcIjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnR5cGUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwidHlwZVwiKSlcbiAgICAgICAgICAgICAgICBvYmplY3QudHlwZSA9IG1lc3NhZ2UudHlwZTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmNhY2hlUG9saWN5ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImNhY2hlUG9saWN5XCIpKVxuICAgICAgICAgICAgICAgIG9iamVjdC5jYWNoZVBvbGljeSA9ICRyb290LlRyYWNlLkNhY2hlUG9saWN5LnRvT2JqZWN0KG1lc3NhZ2UuY2FjaGVQb2xpY3ksIG9wdGlvbnMpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc3RhcnRUaW1lICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInN0YXJ0VGltZVwiKSlcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2Uuc3RhcnRUaW1lID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3Quc3RhcnRUaW1lID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG1lc3NhZ2Uuc3RhcnRUaW1lKSA6IG1lc3NhZ2Uuc3RhcnRUaW1lO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnN0YXJ0VGltZSA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobWVzc2FnZS5zdGFydFRpbWUpIDogb3B0aW9ucy5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG1lc3NhZ2Uuc3RhcnRUaW1lLmxvdyA+Pj4gMCwgbWVzc2FnZS5zdGFydFRpbWUuaGlnaCA+Pj4gMCkudG9OdW1iZXIodHJ1ZSkgOiBtZXNzYWdlLnN0YXJ0VGltZTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmVuZFRpbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZW5kVGltZVwiKSlcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UuZW5kVGltZSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmVuZFRpbWUgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobWVzc2FnZS5lbmRUaW1lKSA6IG1lc3NhZ2UuZW5kVGltZTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5lbmRUaW1lID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtZXNzYWdlLmVuZFRpbWUpIDogb3B0aW9ucy5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG1lc3NhZ2UuZW5kVGltZS5sb3cgPj4+IDAsIG1lc3NhZ2UuZW5kVGltZS5oaWdoID4+PiAwKS50b051bWJlcih0cnVlKSA6IG1lc3NhZ2UuZW5kVGltZTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmVycm9yICYmIG1lc3NhZ2UuZXJyb3IubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0LmVycm9yID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtZXNzYWdlLmVycm9yLmxlbmd0aDsgKytqKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QuZXJyb3Jbal0gPSAkcm9vdC5UcmFjZS5FcnJvci50b09iamVjdChtZXNzYWdlLmVycm9yW2pdLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmNoaWxkICYmIG1lc3NhZ2UuY2hpbGQubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0LmNoaWxkID0gW107XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtZXNzYWdlLmNoaWxkLmxlbmd0aDsgKytqKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QuY2hpbGRbal0gPSAkcm9vdC5UcmFjZS5Ob2RlLnRvT2JqZWN0KG1lc3NhZ2UuY2hpbGRbal0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UucGFyZW50VHlwZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJwYXJlbnRUeXBlXCIpKVxuICAgICAgICAgICAgICAgIG9iamVjdC5wYXJlbnRUeXBlID0gbWVzc2FnZS5wYXJlbnRUeXBlO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uub3JpZ2luYWxGaWVsZE5hbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwib3JpZ2luYWxGaWVsZE5hbWVcIikpXG4gICAgICAgICAgICAgICAgb2JqZWN0Lm9yaWdpbmFsRmllbGROYW1lID0gbWVzc2FnZS5vcmlnaW5hbEZpZWxkTmFtZTtcbiAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENvbnZlcnRzIHRoaXMgTm9kZSB0byBKU09OLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5Ob2RlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAqL1xuICAgICAgICBOb2RlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4gTm9kZTtcbiAgICB9KSgpO1xuXG4gICAgVHJhY2UuUXVlcnlQbGFuTm9kZSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFF1ZXJ5UGxhbk5vZGUuXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAgICAgKiBAaW50ZXJmYWNlIElRdWVyeVBsYW5Ob2RlXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JU2VxdWVuY2VOb2RlfG51bGx9IFtzZXF1ZW5jZV0gUXVlcnlQbGFuTm9kZSBzZXF1ZW5jZVxuICAgICAgICAgKiBAcHJvcGVydHkge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSVBhcmFsbGVsTm9kZXxudWxsfSBbcGFyYWxsZWxdIFF1ZXJ5UGxhbk5vZGUgcGFyYWxsZWxcbiAgICAgICAgICogQHByb3BlcnR5IHtUcmFjZS5RdWVyeVBsYW5Ob2RlLklGZXRjaE5vZGV8bnVsbH0gW2ZldGNoXSBRdWVyeVBsYW5Ob2RlIGZldGNoXG4gICAgICAgICAqIEBwcm9wZXJ0eSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRmxhdHRlbk5vZGV8bnVsbH0gW2ZsYXR0ZW5dIFF1ZXJ5UGxhbk5vZGUgZmxhdHRlblxuICAgICAgICAgKiBAcHJvcGVydHkge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSURlZmVyTm9kZXxudWxsfSBbZGVmZXJdIFF1ZXJ5UGxhbk5vZGUgZGVmZXJcbiAgICAgICAgICogQHByb3BlcnR5IHtUcmFjZS5RdWVyeVBsYW5Ob2RlLklDb25kaXRpb25Ob2RlfG51bGx9IFtjb25kaXRpb25dIFF1ZXJ5UGxhbk5vZGUgY29uZGl0aW9uXG4gICAgICAgICAqL1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFF1ZXJ5UGxhbk5vZGUuXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZVxuICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBRdWVyeVBsYW5Ob2RlLlxuICAgICAgICAgKiBAaW1wbGVtZW50cyBJUXVlcnlQbGFuTm9kZVxuICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5JUXVlcnlQbGFuTm9kZT19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKi9cbiAgICAgICAgZnVuY3Rpb24gUXVlcnlQbGFuTm9kZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNba2V5c1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba2V5c1tpXV0gPSBwcm9wZXJ0aWVzW2tleXNbaV1dO1xuICAgICAgICB9XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFF1ZXJ5UGxhbk5vZGUgc2VxdWVuY2UuXG4gICAgICAgICAqIEBtZW1iZXIge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSVNlcXVlbmNlTm9kZXxudWxsfHVuZGVmaW5lZH0gc2VxdWVuY2VcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBRdWVyeVBsYW5Ob2RlLnByb3RvdHlwZS5zZXF1ZW5jZSA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFF1ZXJ5UGxhbk5vZGUgcGFyYWxsZWwuXG4gICAgICAgICAqIEBtZW1iZXIge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSVBhcmFsbGVsTm9kZXxudWxsfHVuZGVmaW5lZH0gcGFyYWxsZWxcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBRdWVyeVBsYW5Ob2RlLnByb3RvdHlwZS5wYXJhbGxlbCA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFF1ZXJ5UGxhbk5vZGUgZmV0Y2guXG4gICAgICAgICAqIEBtZW1iZXIge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSUZldGNoTm9kZXxudWxsfHVuZGVmaW5lZH0gZmV0Y2hcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBRdWVyeVBsYW5Ob2RlLnByb3RvdHlwZS5mZXRjaCA9IG51bGw7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFF1ZXJ5UGxhbk5vZGUgZmxhdHRlbi5cbiAgICAgICAgICogQG1lbWJlciB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRmxhdHRlbk5vZGV8bnVsbHx1bmRlZmluZWR9IGZsYXR0ZW5cbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqL1xuICAgICAgICBRdWVyeVBsYW5Ob2RlLnByb3RvdHlwZS5mbGF0dGVuID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUXVlcnlQbGFuTm9kZSBkZWZlci5cbiAgICAgICAgICogQG1lbWJlciB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRGVmZXJOb2RlfG51bGx8dW5kZWZpbmVkfSBkZWZlclxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFF1ZXJ5UGxhbk5vZGUucHJvdG90eXBlLmRlZmVyID0gbnVsbDtcblxuICAgICAgICAvKipcbiAgICAgICAgICogUXVlcnlQbGFuTm9kZSBjb25kaXRpb24uXG4gICAgICAgICAqIEBtZW1iZXIge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSUNvbmRpdGlvbk5vZGV8bnVsbHx1bmRlZmluZWR9IGNvbmRpdGlvblxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZVxuICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICovXG4gICAgICAgIFF1ZXJ5UGxhbk5vZGUucHJvdG90eXBlLmNvbmRpdGlvbiA9IG51bGw7XG5cbiAgICAgICAgLy8gT25lT2YgZmllbGQgbmFtZXMgYm91bmQgdG8gdmlydHVhbCBnZXR0ZXJzIGFuZCBzZXR0ZXJzXG4gICAgICAgIHZhciAkb25lT2ZGaWVsZHM7XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIFF1ZXJ5UGxhbk5vZGUgbm9kZS5cbiAgICAgICAgICogQG1lbWJlciB7XCJzZXF1ZW5jZVwifFwicGFyYWxsZWxcInxcImZldGNoXCJ8XCJmbGF0dGVuXCJ8XCJkZWZlclwifFwiY29uZGl0aW9uXCJ8dW5kZWZpbmVkfSBub2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlXG4gICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFF1ZXJ5UGxhbk5vZGUucHJvdG90eXBlLCBcIm5vZGVcIiwge1xuICAgICAgICAgICAgZ2V0OiAkdXRpbC5vbmVPZkdldHRlcigkb25lT2ZGaWVsZHMgPSBbXCJzZXF1ZW5jZVwiLCBcInBhcmFsbGVsXCIsIFwiZmV0Y2hcIiwgXCJmbGF0dGVuXCIsIFwiZGVmZXJcIiwgXCJjb25kaXRpb25cIl0pLFxuICAgICAgICAgICAgc2V0OiAkdXRpbC5vbmVPZlNldHRlcigkb25lT2ZGaWVsZHMpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IFF1ZXJ5UGxhbk5vZGUgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5JUXVlcnlQbGFuTm9kZT19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuUXVlcnlQbGFuTm9kZX0gUXVlcnlQbGFuTm9kZSBpbnN0YW5jZVxuICAgICAgICAgKi9cbiAgICAgICAgUXVlcnlQbGFuTm9kZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBRdWVyeVBsYW5Ob2RlKHByb3BlcnRpZXMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUXVlcnlQbGFuTm9kZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUcmFjZS5RdWVyeVBsYW5Ob2RlLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlXG4gICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICogQHBhcmFtIHtUcmFjZS5JUXVlcnlQbGFuTm9kZX0gbWVzc2FnZSBRdWVyeVBsYW5Ob2RlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgKi9cbiAgICAgICAgUXVlcnlQbGFuTm9kZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgICAgICBpZiAoIXdyaXRlcilcbiAgICAgICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc2VxdWVuY2UgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInNlcXVlbmNlXCIpKVxuICAgICAgICAgICAgICAgICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuU2VxdWVuY2VOb2RlLmVuY29kZShtZXNzYWdlLnNlcXVlbmNlLCB3cml0ZXIudWludDMyKC8qIGlkIDEsIHdpcmVUeXBlIDIgPSovMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5wYXJhbGxlbCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwicGFyYWxsZWxcIikpXG4gICAgICAgICAgICAgICAgJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5QYXJhbGxlbE5vZGUuZW5jb2RlKG1lc3NhZ2UucGFyYWxsZWwsIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMiA9Ki8xOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmZldGNoICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJmZXRjaFwiKSlcbiAgICAgICAgICAgICAgICAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkZldGNoTm9kZS5lbmNvZGUobWVzc2FnZS5mZXRjaCwgd3JpdGVyLnVpbnQzMigvKiBpZCAzLCB3aXJlVHlwZSAyID0qLzI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZmxhdHRlbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwiZmxhdHRlblwiKSlcbiAgICAgICAgICAgICAgICAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkZsYXR0ZW5Ob2RlLmVuY29kZShtZXNzYWdlLmZsYXR0ZW4sIHdyaXRlci51aW50MzIoLyogaWQgNCwgd2lyZVR5cGUgMiA9Ki8zNCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmRlZmVyICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJkZWZlclwiKSlcbiAgICAgICAgICAgICAgICAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZS5lbmNvZGUobWVzc2FnZS5kZWZlciwgd3JpdGVyLnVpbnQzMigvKiBpZCA1LCB3aXJlVHlwZSAyID0qLzQyKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuY29uZGl0aW9uICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJjb25kaXRpb25cIikpXG4gICAgICAgICAgICAgICAgJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5Db25kaXRpb25Ob2RlLmVuY29kZShtZXNzYWdlLmNvbmRpdGlvbiwgd3JpdGVyLnVpbnQzMigvKiBpZCA2LCB3aXJlVHlwZSAyID0qLzUwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFF1ZXJ5UGxhbk5vZGUgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuUXVlcnlQbGFuTm9kZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZFxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7VHJhY2UuSVF1ZXJ5UGxhbk5vZGV9IG1lc3NhZ2UgUXVlcnlQbGFuTm9kZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICovXG4gICAgICAgIFF1ZXJ5UGxhbk5vZGUuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikubGRlbGltKCk7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBRdWVyeVBsYW5Ob2RlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGV9IFF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBRdWVyeVBsYW5Ob2RlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgcmVhZGVyID0gJFJlYWRlci5jcmVhdGUocmVhZGVyKTtcbiAgICAgICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUoKTtcbiAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZXF1ZW5jZSA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuU2VxdWVuY2VOb2RlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wYXJhbGxlbCA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuUGFyYWxsZWxOb2RlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5mZXRjaCA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuRmV0Y2hOb2RlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5mbGF0dGVuID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5GbGF0dGVuTm9kZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVmZXIgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29uZGl0aW9uID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5Db25kaXRpb25Ob2RlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIERlY29kZXMgYSBRdWVyeVBsYW5Ob2RlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIsIGxlbmd0aCBkZWxpbWl0ZWQuXG4gICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGV9IFF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAqL1xuICAgICAgICBRdWVyeVBsYW5Ob2RlLmRlY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZChyZWFkZXIpIHtcbiAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgIHJlYWRlciA9IG5ldyAkUmVhZGVyKHJlYWRlcik7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICB9O1xuXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBWZXJpZmllcyBhIFF1ZXJ5UGxhbk5vZGUgbWVzc2FnZS5cbiAgICAgICAgICogQGZ1bmN0aW9uIHZlcmlmeVxuICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZVxuICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAgICAgKi9cbiAgICAgICAgUXVlcnlQbGFuTm9kZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSBcIm9iamVjdFwiIHx8IG1lc3NhZ2UgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICB2YXIgcHJvcGVydGllcyA9IHt9O1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc2VxdWVuY2UgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwic2VxdWVuY2VcIikpIHtcbiAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLm5vZGUgPSAxO1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5TZXF1ZW5jZU5vZGUudmVyaWZ5KG1lc3NhZ2Uuc2VxdWVuY2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJzZXF1ZW5jZS5cIiArIGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnBhcmFsbGVsICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInBhcmFsbGVsXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMubm9kZSA9PT0gMSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibm9kZTogbXVsdGlwbGUgdmFsdWVzXCI7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5ub2RlID0gMTtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuUGFyYWxsZWxOb2RlLnZlcmlmeShtZXNzYWdlLnBhcmFsbGVsKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicGFyYWxsZWwuXCIgKyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5mZXRjaCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJmZXRjaFwiKSkge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLm5vZGUgPT09IDEpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm5vZGU6IG11bHRpcGxlIHZhbHVlc1wiO1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMubm9kZSA9IDE7XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkZldGNoTm9kZS52ZXJpZnkobWVzc2FnZS5mZXRjaCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImZldGNoLlwiICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZmxhdHRlbiAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJmbGF0dGVuXCIpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMubm9kZSA9PT0gMSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibm9kZTogbXVsdGlwbGUgdmFsdWVzXCI7XG4gICAgICAgICAgICAgICAgcHJvcGVydGllcy5ub2RlID0gMTtcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuRmxhdHRlbk5vZGUudmVyaWZ5KG1lc3NhZ2UuZmxhdHRlbik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImZsYXR0ZW4uXCIgKyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5kZWZlciAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJkZWZlclwiKSkge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLm5vZGUgPT09IDEpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm5vZGU6IG11bHRpcGxlIHZhbHVlc1wiO1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMubm9kZSA9IDE7XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZS52ZXJpZnkobWVzc2FnZS5kZWZlcik7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImRlZmVyLlwiICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuY29uZGl0aW9uICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImNvbmRpdGlvblwiKSkge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzLm5vZGUgPT09IDEpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm5vZGU6IG11bHRpcGxlIHZhbHVlc1wiO1xuICAgICAgICAgICAgICAgIHByb3BlcnRpZXMubm9kZSA9IDE7XG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkNvbmRpdGlvbk5vZGUudmVyaWZ5KG1lc3NhZ2UuY29uZGl0aW9uKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiY29uZGl0aW9uLlwiICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH07XG5cbiAgICAgICAgLyoqXG4gICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFF1ZXJ5UGxhbk5vZGUgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGV9IG1lc3NhZ2UgUXVlcnlQbGFuTm9kZVxuICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFF1ZXJ5UGxhbk5vZGUudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICBpZiAoIW9wdGlvbnMpXG4gICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc2VxdWVuY2UgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwic2VxdWVuY2VcIikpIHtcbiAgICAgICAgICAgICAgICBvYmplY3Quc2VxdWVuY2UgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLlNlcXVlbmNlTm9kZS50b09iamVjdChtZXNzYWdlLnNlcXVlbmNlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vbmVvZnMpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5ub2RlID0gXCJzZXF1ZW5jZVwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UucGFyYWxsZWwgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicGFyYWxsZWxcIikpIHtcbiAgICAgICAgICAgICAgICBvYmplY3QucGFyYWxsZWwgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLlBhcmFsbGVsTm9kZS50b09iamVjdChtZXNzYWdlLnBhcmFsbGVsLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vbmVvZnMpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5ub2RlID0gXCJwYXJhbGxlbFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZmV0Y2ggIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZmV0Y2hcIikpIHtcbiAgICAgICAgICAgICAgICBvYmplY3QuZmV0Y2ggPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkZldGNoTm9kZS50b09iamVjdChtZXNzYWdlLmZldGNoLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vbmVvZnMpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5ub2RlID0gXCJmZXRjaFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZmxhdHRlbiAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJmbGF0dGVuXCIpKSB7XG4gICAgICAgICAgICAgICAgb2JqZWN0LmZsYXR0ZW4gPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkZsYXR0ZW5Ob2RlLnRvT2JqZWN0KG1lc3NhZ2UuZmxhdHRlbiwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMub25lb2ZzKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3Qubm9kZSA9IFwiZmxhdHRlblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZGVmZXIgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZGVmZXJcIikpIHtcbiAgICAgICAgICAgICAgICBvYmplY3QuZGVmZXIgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZS50b09iamVjdChtZXNzYWdlLmRlZmVyLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vbmVvZnMpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5ub2RlID0gXCJkZWZlclwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuY29uZGl0aW9uICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImNvbmRpdGlvblwiKSkge1xuICAgICAgICAgICAgICAgIG9iamVjdC5jb25kaXRpb24gPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkNvbmRpdGlvbk5vZGUudG9PYmplY3QobWVzc2FnZS5jb25kaXRpb24sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLm9uZW9mcylcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm5vZGUgPSBcImNvbmRpdGlvblwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgfTtcblxuICAgICAgICAvKipcbiAgICAgICAgICogQ29udmVydHMgdGhpcyBRdWVyeVBsYW5Ob2RlIHRvIEpTT04uXG4gICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICovXG4gICAgICAgIFF1ZXJ5UGxhbk5vZGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICB9O1xuXG4gICAgICAgIFF1ZXJ5UGxhbk5vZGUuU2VxdWVuY2VOb2RlID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBTZXF1ZW5jZU5vZGUuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZVxuICAgICAgICAgICAgICogQGludGVyZmFjZSBJU2VxdWVuY2VOb2RlXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge0FycmF5LjxUcmFjZS5JUXVlcnlQbGFuTm9kZT58bnVsbH0gW25vZGVzXSBTZXF1ZW5jZU5vZGUgbm9kZXNcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgU2VxdWVuY2VOb2RlLlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFNlcXVlbmNlTm9kZS5cbiAgICAgICAgICAgICAqIEBpbXBsZW1lbnRzIElTZXF1ZW5jZU5vZGVcbiAgICAgICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLklTZXF1ZW5jZU5vZGU9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gU2VxdWVuY2VOb2RlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNba2V5c1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBTZXF1ZW5jZU5vZGUgbm9kZXMuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48VHJhY2UuSVF1ZXJ5UGxhbk5vZGU+fSBub2Rlc1xuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuU2VxdWVuY2VOb2RlXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgU2VxdWVuY2VOb2RlLnByb3RvdHlwZS5ub2RlcyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBTZXF1ZW5jZU5vZGUgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGNyZWF0ZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuU2VxdWVuY2VOb2RlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSVNlcXVlbmNlTm9kZT19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuU2VxdWVuY2VOb2RlfSBTZXF1ZW5jZU5vZGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgU2VxdWVuY2VOb2RlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBTZXF1ZW5jZU5vZGUocHJvcGVydGllcyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBTZXF1ZW5jZU5vZGUgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuUXVlcnlQbGFuTm9kZS5TZXF1ZW5jZU5vZGUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5TZXF1ZW5jZU5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JU2VxdWVuY2VOb2RlfSBtZXNzYWdlIFNlcXVlbmNlTm9kZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBTZXF1ZW5jZU5vZGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgICAgIGlmICghd3JpdGVyKVxuICAgICAgICAgICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLm5vZGVzICE9IG51bGwgJiYgbWVzc2FnZS5ub2Rlcy5sZW5ndGgpXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZS5ub2Rlcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuZW5jb2RlKG1lc3NhZ2Uubm9kZXNbaV0sIHdyaXRlci51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMiA9Ki8xMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgU2VxdWVuY2VOb2RlIG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuU2VxdWVuY2VOb2RlLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuU2VxdWVuY2VOb2RlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSVNlcXVlbmNlTm9kZX0gbWVzc2FnZSBTZXF1ZW5jZU5vZGUgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgU2VxdWVuY2VOb2RlLmVuY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZChtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGUobWVzc2FnZSwgd3JpdGVyKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhIFNlcXVlbmNlTm9kZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuU2VxdWVuY2VOb2RlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuUXVlcnlQbGFuTm9kZS5TZXF1ZW5jZU5vZGV9IFNlcXVlbmNlTm9kZVxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBTZXF1ZW5jZU5vZGUuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHJlYWRlciwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlciA9ICRSZWFkZXIuY3JlYXRlKHJlYWRlcik7XG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGgsIG1lc3NhZ2UgPSBuZXcgJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5TZXF1ZW5jZU5vZGUoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShtZXNzYWdlLm5vZGVzICYmIG1lc3NhZ2Uubm9kZXMubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5vZGVzLnB1c2goJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYSBTZXF1ZW5jZU5vZGUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLlNlcXVlbmNlTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuUXVlcnlQbGFuTm9kZS5TZXF1ZW5jZU5vZGV9IFNlcXVlbmNlTm9kZVxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBTZXF1ZW5jZU5vZGUuZGVjb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkKHJlYWRlcikge1xuICAgICAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSBuZXcgJFJlYWRlcihyZWFkZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcmlmaWVzIGEgU2VxdWVuY2VOb2RlIG1lc3NhZ2UuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5TZXF1ZW5jZU5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAgICAgICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgU2VxdWVuY2VOb2RlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSBcIm9iamVjdFwiIHx8IG1lc3NhZ2UgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLm5vZGVzICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcIm5vZGVzXCIpKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShtZXNzYWdlLm5vZGVzKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm5vZGVzOiBhcnJheSBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2Uubm9kZXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvciA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUudmVyaWZ5KG1lc3NhZ2Uubm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm5vZGVzLlwiICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFNlcXVlbmNlTm9kZSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLlNlcXVlbmNlTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLlNlcXVlbmNlTm9kZX0gbWVzc2FnZSBTZXF1ZW5jZU5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgU2VxdWVuY2VOb2RlLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5hcnJheXMgfHwgb3B0aW9ucy5kZWZhdWx0cylcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2Uubm9kZXMgJiYgbWVzc2FnZS5ub2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm5vZGVzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWVzc2FnZS5ub2Rlcy5sZW5ndGg7ICsrailcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5ub2Rlc1tqXSA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUudG9PYmplY3QobWVzc2FnZS5ub2Rlc1tqXSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnZlcnRzIHRoaXMgU2VxdWVuY2VOb2RlIHRvIEpTT04uXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5TZXF1ZW5jZU5vZGVcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBTZXF1ZW5jZU5vZGUucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBTZXF1ZW5jZU5vZGU7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgUXVlcnlQbGFuTm9kZS5QYXJhbGxlbE5vZGUgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFBhcmFsbGVsTm9kZS5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlXG4gICAgICAgICAgICAgKiBAaW50ZXJmYWNlIElQYXJhbGxlbE5vZGVcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPFRyYWNlLklRdWVyeVBsYW5Ob2RlPnxudWxsfSBbbm9kZXNdIFBhcmFsbGVsTm9kZSBub2Rlc1xuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBQYXJhbGxlbE5vZGUuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZVxuICAgICAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUGFyYWxsZWxOb2RlLlxuICAgICAgICAgICAgICogQGltcGxlbWVudHMgSVBhcmFsbGVsTm9kZVxuICAgICAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSVBhcmFsbGVsTm9kZT19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBQYXJhbGxlbE5vZGUocHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIHRoaXMubm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllc1trZXlzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba2V5c1tpXV0gPSBwcm9wZXJ0aWVzW2tleXNbaV1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFBhcmFsbGVsTm9kZSBub2Rlcy5cbiAgICAgICAgICAgICAqIEBtZW1iZXIge0FycmF5LjxUcmFjZS5JUXVlcnlQbGFuTm9kZT59IG5vZGVzXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5QYXJhbGxlbE5vZGVcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBQYXJhbGxlbE5vZGUucHJvdG90eXBlLm5vZGVzID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IFBhcmFsbGVsTm9kZSBpbnN0YW5jZSB1c2luZyB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5QYXJhbGxlbE5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JUGFyYWxsZWxOb2RlPX0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuUXVlcnlQbGFuTm9kZS5QYXJhbGxlbE5vZGV9IFBhcmFsbGVsTm9kZSBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBQYXJhbGxlbE5vZGUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFBhcmFsbGVsTm9kZShwcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFBhcmFsbGVsTm9kZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUcmFjZS5RdWVyeVBsYW5Ob2RlLlBhcmFsbGVsTm9kZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLlBhcmFsbGVsTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLklQYXJhbGxlbE5vZGV9IG1lc3NhZ2UgUGFyYWxsZWxOb2RlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFBhcmFsbGVsTm9kZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3cml0ZXIpXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlciA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2Uubm9kZXMgIT0gbnVsbCAmJiBtZXNzYWdlLm5vZGVzLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXNzYWdlLm5vZGVzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5lbmNvZGUobWVzc2FnZS5ub2Rlc1tpXSwgd3JpdGVyLnVpbnQzMigvKiBpZCAxLCB3aXJlVHlwZSAyID0qLzEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBQYXJhbGxlbE5vZGUgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuUXVlcnlQbGFuTm9kZS5QYXJhbGxlbE5vZGUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5QYXJhbGxlbE5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JUGFyYWxsZWxOb2RlfSBtZXNzYWdlIFBhcmFsbGVsTm9kZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBQYXJhbGxlbE5vZGUuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVuY29kZShtZXNzYWdlLCB3cml0ZXIpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgUGFyYWxsZWxOb2RlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5QYXJhbGxlbE5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLlBhcmFsbGVsTm9kZX0gUGFyYWxsZWxOb2RlXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFBhcmFsbGVsTm9kZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUocmVhZGVyLCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gJFJlYWRlci5jcmVhdGUocmVhZGVyKTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aCwgbWVzc2FnZSA9IG5ldyAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLlBhcmFsbGVsTm9kZSgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG1lc3NhZ2Uubm9kZXMgJiYgbWVzc2FnZS5ub2Rlcy5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uubm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2Uubm9kZXMucHVzaCgkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhIFBhcmFsbGVsTm9kZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuUGFyYWxsZWxOb2RlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLlBhcmFsbGVsTm9kZX0gUGFyYWxsZWxOb2RlXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFBhcmFsbGVsTm9kZS5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlciA9IG5ldyAkUmVhZGVyKHJlYWRlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVmVyaWZpZXMgYSBQYXJhbGxlbE5vZGUgbWVzc2FnZS5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB2ZXJpZnlcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLlBhcmFsbGVsTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBQYXJhbGxlbE5vZGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwib2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2Uubm9kZXMgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwibm9kZXNcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1lc3NhZ2Uubm9kZXMpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibm9kZXM6IGFycmF5IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZS5ub2Rlcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS52ZXJpZnkobWVzc2FnZS5ub2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibm9kZXMuXCIgKyBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUGFyYWxsZWxOb2RlIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuUGFyYWxsZWxOb2RlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuUGFyYWxsZWxOb2RlfSBtZXNzYWdlIFBhcmFsbGVsTm9kZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBQYXJhbGxlbE5vZGUudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmFycmF5cyB8fCBvcHRpb25zLmRlZmF1bHRzKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3Qubm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5ub2RlcyAmJiBtZXNzYWdlLm5vZGVzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3Qubm9kZXMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtZXNzYWdlLm5vZGVzLmxlbmd0aDsgKytqKVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm5vZGVzW2pdID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS50b09iamVjdChtZXNzYWdlLm5vZGVzW2pdLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBQYXJhbGxlbE5vZGUgdG8gSlNPTi5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLlBhcmFsbGVsTm9kZVxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFBhcmFsbGVsTm9kZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIFBhcmFsbGVsTm9kZTtcbiAgICAgICAgfSkoKTtcblxuICAgICAgICBRdWVyeVBsYW5Ob2RlLkZldGNoTm9kZSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgRmV0Y2hOb2RlLlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICAgICAqIEBpbnRlcmZhY2UgSUZldGNoTm9kZVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3NlcnZpY2VOYW1lXSBGZXRjaE5vZGUgc2VydmljZU5hbWVcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbnxudWxsfSBbdHJhY2VQYXJzaW5nRmFpbGVkXSBGZXRjaE5vZGUgdHJhY2VQYXJzaW5nRmFpbGVkXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge0lUcmFjZXxudWxsfSBbdHJhY2VdIEZldGNoTm9kZSB0cmFjZVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW3NlbnRUaW1lT2Zmc2V0XSBGZXRjaE5vZGUgc2VudFRpbWVPZmZzZXRcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7Z29vZ2xlLnByb3RvYnVmLklUaW1lc3RhbXB8bnVsbH0gW3NlbnRUaW1lXSBGZXRjaE5vZGUgc2VudFRpbWVcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7Z29vZ2xlLnByb3RvYnVmLklUaW1lc3RhbXB8bnVsbH0gW3JlY2VpdmVkVGltZV0gRmV0Y2hOb2RlIHJlY2VpdmVkVGltZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBGZXRjaE5vZGUuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZVxuICAgICAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgRmV0Y2hOb2RlLlxuICAgICAgICAgICAgICogQGltcGxlbWVudHMgSUZldGNoTm9kZVxuICAgICAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSUZldGNoTm9kZT19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBGZXRjaE5vZGUocHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW2tleXNbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trZXlzW2ldXSA9IHByb3BlcnRpZXNba2V5c1tpXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmV0Y2hOb2RlIHNlcnZpY2VOYW1lLlxuICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBzZXJ2aWNlTmFtZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRmV0Y2hOb2RlXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRmV0Y2hOb2RlLnByb3RvdHlwZS5zZXJ2aWNlTmFtZSA9IFwiXCI7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRmV0Y2hOb2RlIHRyYWNlUGFyc2luZ0ZhaWxlZC5cbiAgICAgICAgICAgICAqIEBtZW1iZXIge2Jvb2xlYW59IHRyYWNlUGFyc2luZ0ZhaWxlZFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRmV0Y2hOb2RlXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRmV0Y2hOb2RlLnByb3RvdHlwZS50cmFjZVBhcnNpbmdGYWlsZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGZXRjaE5vZGUgdHJhY2UuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtJVHJhY2V8bnVsbHx1bmRlZmluZWR9IHRyYWNlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5GZXRjaE5vZGVcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBGZXRjaE5vZGUucHJvdG90eXBlLnRyYWNlID0gbnVsbDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGZXRjaE5vZGUgc2VudFRpbWVPZmZzZXQuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHNlbnRUaW1lT2Zmc2V0XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5GZXRjaE5vZGVcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBGZXRjaE5vZGUucHJvdG90eXBlLnNlbnRUaW1lT2Zmc2V0ID0gMDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGZXRjaE5vZGUgc2VudFRpbWUuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtnb29nbGUucHJvdG9idWYuSVRpbWVzdGFtcHxudWxsfHVuZGVmaW5lZH0gc2VudFRpbWVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkZldGNoTm9kZVxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIEZldGNoTm9kZS5wcm90b3R5cGUuc2VudFRpbWUgPSBudWxsO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEZldGNoTm9kZSByZWNlaXZlZFRpbWUuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtnb29nbGUucHJvdG9idWYuSVRpbWVzdGFtcHxudWxsfHVuZGVmaW5lZH0gcmVjZWl2ZWRUaW1lXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5GZXRjaE5vZGVcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBGZXRjaE5vZGUucHJvdG90eXBlLnJlY2VpdmVkVGltZSA9IG51bGw7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBGZXRjaE5vZGUgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGNyZWF0ZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRmV0Y2hOb2RlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSUZldGNoTm9kZT19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuRmV0Y2hOb2RlfSBGZXRjaE5vZGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRmV0Y2hOb2RlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBGZXRjaE5vZGUocHJvcGVydGllcyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBGZXRjaE5vZGUgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuUXVlcnlQbGFuTm9kZS5GZXRjaE5vZGUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5GZXRjaE5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRmV0Y2hOb2RlfSBtZXNzYWdlIEZldGNoTm9kZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBGZXRjaE5vZGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgICAgIGlmICghd3JpdGVyKVxuICAgICAgICAgICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnNlcnZpY2VOYW1lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJzZXJ2aWNlTmFtZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAxLCB3aXJlVHlwZSAyID0qLzEwKS5zdHJpbmcobWVzc2FnZS5zZXJ2aWNlTmFtZSk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudHJhY2VQYXJzaW5nRmFpbGVkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJ0cmFjZVBhcnNpbmdGYWlsZWRcIikpXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMCA9Ki8xNikuYm9vbChtZXNzYWdlLnRyYWNlUGFyc2luZ0ZhaWxlZCk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudHJhY2UgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInRyYWNlXCIpKVxuICAgICAgICAgICAgICAgICAgICAkcm9vdC5UcmFjZS5lbmNvZGUobWVzc2FnZS50cmFjZSwgd3JpdGVyLnVpbnQzMigvKiBpZCAzLCB3aXJlVHlwZSAyID0qLzI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnNlbnRUaW1lT2Zmc2V0ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJzZW50VGltZU9mZnNldFwiKSlcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCA0LCB3aXJlVHlwZSAwID0qLzMyKS51aW50NjQobWVzc2FnZS5zZW50VGltZU9mZnNldCk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc2VudFRpbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInNlbnRUaW1lXCIpKVxuICAgICAgICAgICAgICAgICAgICAkcm9vdC5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wLmVuY29kZShtZXNzYWdlLnNlbnRUaW1lLCB3cml0ZXIudWludDMyKC8qIGlkIDUsIHdpcmVUeXBlIDIgPSovNDIpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucmVjZWl2ZWRUaW1lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJyZWNlaXZlZFRpbWVcIikpXG4gICAgICAgICAgICAgICAgICAgICRyb290Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAuZW5jb2RlKG1lc3NhZ2UucmVjZWl2ZWRUaW1lLCB3cml0ZXIudWludDMyKC8qIGlkIDYsIHdpcmVUeXBlIDIgPSovNTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEZldGNoTm9kZSBtZXNzYWdlLCBsZW5ndGggZGVsaW1pdGVkLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUcmFjZS5RdWVyeVBsYW5Ob2RlLkZldGNoTm9kZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkZldGNoTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLklGZXRjaE5vZGV9IG1lc3NhZ2UgRmV0Y2hOb2RlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIEZldGNoTm9kZS5lbmNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikubGRlbGltKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYSBGZXRjaE5vZGUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkZldGNoTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuRmV0Y2hOb2RlfSBGZXRjaE5vZGVcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRmV0Y2hOb2RlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSAkUmVhZGVyLmNyZWF0ZShyZWFkZXIpO1xuICAgICAgICAgICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuRmV0Y2hOb2RlKCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZXJ2aWNlTmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRyYWNlUGFyc2luZ0ZhaWxlZCA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50cmFjZSA9ICRyb290LlRyYWNlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZW50VGltZU9mZnNldCA9IHJlYWRlci51aW50NjQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnNlbnRUaW1lID0gJHJvb3QuZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVjZWl2ZWRUaW1lID0gJHJvb3QuZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhIEZldGNoTm9kZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRmV0Y2hOb2RlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLkZldGNoTm9kZX0gRmV0Y2hOb2RlXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIEZldGNoTm9kZS5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlciA9IG5ldyAkUmVhZGVyKHJlYWRlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVmVyaWZpZXMgYSBGZXRjaE5vZGUgbWVzc2FnZS5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB2ZXJpZnlcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkZldGNoTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBGZXRjaE5vZGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwib2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc2VydmljZU5hbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwic2VydmljZU5hbWVcIikpXG4gICAgICAgICAgICAgICAgICAgIGlmICghJHV0aWwuaXNTdHJpbmcobWVzc2FnZS5zZXJ2aWNlTmFtZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJzZXJ2aWNlTmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudHJhY2VQYXJzaW5nRmFpbGVkICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInRyYWNlUGFyc2luZ0ZhaWxlZFwiKSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLnRyYWNlUGFyc2luZ0ZhaWxlZCAhPT0gXCJib29sZWFuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFjZVBhcnNpbmdGYWlsZWQ6IGJvb2xlYW4gZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS50cmFjZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJ0cmFjZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS52ZXJpZnkobWVzc2FnZS50cmFjZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRyYWNlLlwiICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnNlbnRUaW1lT2Zmc2V0ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInNlbnRUaW1lT2Zmc2V0XCIpKVxuICAgICAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLnNlbnRUaW1lT2Zmc2V0KSAmJiAhKG1lc3NhZ2Uuc2VudFRpbWVPZmZzZXQgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2Uuc2VudFRpbWVPZmZzZXQubG93KSAmJiAkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5zZW50VGltZU9mZnNldC5oaWdoKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJzZW50VGltZU9mZnNldDogaW50ZWdlcnxMb25nIGV4cGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc2VudFRpbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwic2VudFRpbWVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC52ZXJpZnkobWVzc2FnZS5zZW50VGltZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInNlbnRUaW1lLlwiICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnJlY2VpdmVkVGltZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJyZWNlaXZlZFRpbWVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC52ZXJpZnkobWVzc2FnZS5yZWNlaXZlZFRpbWUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJyZWNlaXZlZFRpbWUuXCIgKyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIEZldGNoTm9kZSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkZldGNoTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLkZldGNoTm9kZX0gbWVzc2FnZSBGZXRjaE5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRmV0Y2hOb2RlLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3Quc2VydmljZU5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QudHJhY2VQYXJzaW5nRmFpbGVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC50cmFjZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5zZW50VGltZU9mZnNldCA9IDA7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5zZW50VGltZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5yZWNlaXZlZFRpbWUgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5zZXJ2aWNlTmFtZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJzZXJ2aWNlTmFtZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnNlcnZpY2VOYW1lID0gbWVzc2FnZS5zZXJ2aWNlTmFtZTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS50cmFjZVBhcnNpbmdGYWlsZWQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwidHJhY2VQYXJzaW5nRmFpbGVkXCIpKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QudHJhY2VQYXJzaW5nRmFpbGVkID0gbWVzc2FnZS50cmFjZVBhcnNpbmdGYWlsZWQ7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UudHJhY2UgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwidHJhY2VcIikpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC50cmFjZSA9ICRyb290LlRyYWNlLnRvT2JqZWN0KG1lc3NhZ2UudHJhY2UsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnNlbnRUaW1lT2Zmc2V0ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInNlbnRUaW1lT2Zmc2V0XCIpKVxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2Uuc2VudFRpbWVPZmZzZXQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Quc2VudFRpbWVPZmZzZXQgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobWVzc2FnZS5zZW50VGltZU9mZnNldCkgOiBtZXNzYWdlLnNlbnRUaW1lT2Zmc2V0O1xuICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Quc2VudFRpbWVPZmZzZXQgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1lc3NhZ2Uuc2VudFRpbWVPZmZzZXQpIDogb3B0aW9ucy5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG1lc3NhZ2Uuc2VudFRpbWVPZmZzZXQubG93ID4+PiAwLCBtZXNzYWdlLnNlbnRUaW1lT2Zmc2V0LmhpZ2ggPj4+IDApLnRvTnVtYmVyKHRydWUpIDogbWVzc2FnZS5zZW50VGltZU9mZnNldDtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5zZW50VGltZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJzZW50VGltZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnNlbnRUaW1lID0gJHJvb3QuZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC50b09iamVjdChtZXNzYWdlLnNlbnRUaW1lLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5yZWNlaXZlZFRpbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicmVjZWl2ZWRUaW1lXCIpKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QucmVjZWl2ZWRUaW1lID0gJHJvb3QuZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC50b09iamVjdChtZXNzYWdlLnJlY2VpdmVkVGltZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBGZXRjaE5vZGUgdG8gSlNPTi5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkZldGNoTm9kZVxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIEZldGNoTm9kZS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIEZldGNoTm9kZTtcbiAgICAgICAgfSkoKTtcblxuICAgICAgICBRdWVyeVBsYW5Ob2RlLkZsYXR0ZW5Ob2RlID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFByb3BlcnRpZXMgb2YgYSBGbGF0dGVuTm9kZS5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlXG4gICAgICAgICAgICAgKiBAaW50ZXJmYWNlIElGbGF0dGVuTm9kZVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtBcnJheS48VHJhY2UuUXVlcnlQbGFuTm9kZS5JUmVzcG9uc2VQYXRoRWxlbWVudD58bnVsbH0gW3Jlc3BvbnNlUGF0aF0gRmxhdHRlbk5vZGUgcmVzcG9uc2VQYXRoXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge1RyYWNlLklRdWVyeVBsYW5Ob2RlfG51bGx9IFtub2RlXSBGbGF0dGVuTm9kZSBub2RlXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IEZsYXR0ZW5Ob2RlLlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIEZsYXR0ZW5Ob2RlLlxuICAgICAgICAgICAgICogQGltcGxlbWVudHMgSUZsYXR0ZW5Ob2RlXG4gICAgICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRmxhdHRlbk5vZGU9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gRmxhdHRlbk5vZGUocHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIHRoaXMucmVzcG9uc2VQYXRoID0gW107XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNba2V5c1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGbGF0dGVuTm9kZSByZXNwb25zZVBhdGguXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtBcnJheS48VHJhY2UuUXVlcnlQbGFuTm9kZS5JUmVzcG9uc2VQYXRoRWxlbWVudD59IHJlc3BvbnNlUGF0aFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRmxhdHRlbk5vZGVcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBGbGF0dGVuTm9kZS5wcm90b3R5cGUucmVzcG9uc2VQYXRoID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBGbGF0dGVuTm9kZSBub2RlLlxuICAgICAgICAgICAgICogQG1lbWJlciB7VHJhY2UuSVF1ZXJ5UGxhbk5vZGV8bnVsbHx1bmRlZmluZWR9IG5vZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkZsYXR0ZW5Ob2RlXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRmxhdHRlbk5vZGUucHJvdG90eXBlLm5vZGUgPSBudWxsO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBuZXcgRmxhdHRlbk5vZGUgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGNyZWF0ZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRmxhdHRlbk5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRmxhdHRlbk5vZGU9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLkZsYXR0ZW5Ob2RlfSBGbGF0dGVuTm9kZSBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBGbGF0dGVuTm9kZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRmxhdHRlbk5vZGUocHJvcGVydGllcyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBGbGF0dGVuTm9kZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUcmFjZS5RdWVyeVBsYW5Ob2RlLkZsYXR0ZW5Ob2RlLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRmxhdHRlbk5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRmxhdHRlbk5vZGV9IG1lc3NhZ2UgRmxhdHRlbk5vZGUgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRmxhdHRlbk5vZGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgICAgIGlmICghd3JpdGVyKVxuICAgICAgICAgICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnJlc3BvbnNlUGF0aCAhPSBudWxsICYmIG1lc3NhZ2UucmVzcG9uc2VQYXRoLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXNzYWdlLnJlc3BvbnNlUGF0aC5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuUmVzcG9uc2VQYXRoRWxlbWVudC5lbmNvZGUobWVzc2FnZS5yZXNwb25zZVBhdGhbaV0sIHdyaXRlci51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMiA9Ki8xMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5ub2RlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJub2RlXCIpKVxuICAgICAgICAgICAgICAgICAgICAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLmVuY29kZShtZXNzYWdlLm5vZGUsIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMiA9Ki8xOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgRmxhdHRlbk5vZGUgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuUXVlcnlQbGFuTm9kZS5GbGF0dGVuTm9kZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkZsYXR0ZW5Ob2RlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSUZsYXR0ZW5Ob2RlfSBtZXNzYWdlIEZsYXR0ZW5Ob2RlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIEZsYXR0ZW5Ob2RlLmVuY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZChtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGUobWVzc2FnZSwgd3JpdGVyKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhIEZsYXR0ZW5Ob2RlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5GbGF0dGVuTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuRmxhdHRlbk5vZGV9IEZsYXR0ZW5Ob2RlXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIEZsYXR0ZW5Ob2RlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSAkUmVhZGVyLmNyZWF0ZShyZWFkZXIpO1xuICAgICAgICAgICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuRmxhdHRlbk5vZGUoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIShtZXNzYWdlLnJlc3BvbnNlUGF0aCAmJiBtZXNzYWdlLnJlc3BvbnNlUGF0aC5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVzcG9uc2VQYXRoID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJlc3BvbnNlUGF0aC5wdXNoKCRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuUmVzcG9uc2VQYXRoRWxlbWVudC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5vZGUgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgRmxhdHRlbk5vZGUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkZsYXR0ZW5Ob2RlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLkZsYXR0ZW5Ob2RlfSBGbGF0dGVuTm9kZVxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBGbGF0dGVuTm9kZS5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlciA9IG5ldyAkUmVhZGVyKHJlYWRlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVmVyaWZpZXMgYSBGbGF0dGVuTm9kZSBtZXNzYWdlLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHZlcmlmeVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRmxhdHRlbk5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAgICAgICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRmxhdHRlbk5vZGUudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwib2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucmVzcG9uc2VQYXRoICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInJlc3BvbnNlUGF0aFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobWVzc2FnZS5yZXNwb25zZVBhdGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicmVzcG9uc2VQYXRoOiBhcnJheSBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2UucmVzcG9uc2VQYXRoLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLlJlc3BvbnNlUGF0aEVsZW1lbnQudmVyaWZ5KG1lc3NhZ2UucmVzcG9uc2VQYXRoW2ldKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJyZXNwb25zZVBhdGguXCIgKyBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5ub2RlICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcIm5vZGVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS52ZXJpZnkobWVzc2FnZS5ub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibm9kZS5cIiArIGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgRmxhdHRlbk5vZGUgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5GbGF0dGVuTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLkZsYXR0ZW5Ob2RlfSBtZXNzYWdlIEZsYXR0ZW5Ob2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIEZsYXR0ZW5Ob2RlLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5hcnJheXMgfHwgb3B0aW9ucy5kZWZhdWx0cylcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnJlc3BvbnNlUGF0aCA9IFtdO1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmRlZmF1bHRzKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3Qubm9kZSA9IG51bGw7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucmVzcG9uc2VQYXRoICYmIG1lc3NhZ2UucmVzcG9uc2VQYXRoLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QucmVzcG9uc2VQYXRoID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWVzc2FnZS5yZXNwb25zZVBhdGgubGVuZ3RoOyArK2opXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QucmVzcG9uc2VQYXRoW2pdID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5SZXNwb25zZVBhdGhFbGVtZW50LnRvT2JqZWN0KG1lc3NhZ2UucmVzcG9uc2VQYXRoW2pdLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2Uubm9kZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJub2RlXCIpKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3Qubm9kZSA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUudG9PYmplY3QobWVzc2FnZS5ub2RlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIEZsYXR0ZW5Ob2RlIHRvIEpTT04uXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5GbGF0dGVuTm9kZVxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIEZsYXR0ZW5Ob2RlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gRmxhdHRlbk5vZGU7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgUXVlcnlQbGFuTm9kZS5EZWZlck5vZGUgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJvcGVydGllcyBvZiBhIERlZmVyTm9kZS5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlXG4gICAgICAgICAgICAgKiBAaW50ZXJmYWNlIElEZWZlck5vZGVcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRGVmZXJOb2RlUHJpbWFyeXxudWxsfSBbcHJpbWFyeV0gRGVmZXJOb2RlIHByaW1hcnlcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPFRyYWNlLlF1ZXJ5UGxhbk5vZGUuSURlZmVycmVkTm9kZT58bnVsbH0gW2RlZmVycmVkXSBEZWZlck5vZGUgZGVmZXJyZWRcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgRGVmZXJOb2RlLlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIERlZmVyTm9kZS5cbiAgICAgICAgICAgICAqIEBpbXBsZW1lbnRzIElEZWZlck5vZGVcbiAgICAgICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLklEZWZlck5vZGU9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gRGVmZXJOb2RlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlZmVycmVkID0gW107XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNba2V5c1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWZlck5vZGUgcHJpbWFyeS5cbiAgICAgICAgICAgICAqIEBtZW1iZXIge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSURlZmVyTm9kZVByaW1hcnl8bnVsbHx1bmRlZmluZWR9IHByaW1hcnlcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZVxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIERlZmVyTm9kZS5wcm90b3R5cGUucHJpbWFyeSA9IG51bGw7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVmZXJOb2RlIGRlZmVycmVkLlxuICAgICAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPFRyYWNlLlF1ZXJ5UGxhbk5vZGUuSURlZmVycmVkTm9kZT59IGRlZmVycmVkXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGVcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlck5vZGUucHJvdG90eXBlLmRlZmVycmVkID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgbmV3IERlZmVyTm9kZSBpbnN0YW5jZSB1c2luZyB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRGVmZXJOb2RlPX0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGV9IERlZmVyTm9kZSBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlck5vZGUuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IERlZmVyTm9kZShwcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIERlZmVyTm9kZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLklEZWZlck5vZGV9IG1lc3NhZ2UgRGVmZXJOb2RlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIERlZmVyTm9kZS5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3cml0ZXIpXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlciA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucHJpbWFyeSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwicHJpbWFyeVwiKSlcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGVQcmltYXJ5LmVuY29kZShtZXNzYWdlLnByaW1hcnksIHdyaXRlci51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMiA9Ki8xMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5kZWZlcnJlZCAhPSBudWxsICYmIG1lc3NhZ2UuZGVmZXJyZWQubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2UuZGVmZXJyZWQubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVycmVkTm9kZS5lbmNvZGUobWVzc2FnZS5kZWZlcnJlZFtpXSwgd3JpdGVyLnVpbnQzMigvKiBpZCAyLCB3aXJlVHlwZSAyID0qLzE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBEZWZlck5vZGUgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRGVmZXJOb2RlfSBtZXNzYWdlIERlZmVyTm9kZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlck5vZGUuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVuY29kZShtZXNzYWdlLCB3cml0ZXIpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgRGVmZXJOb2RlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZX0gRGVmZXJOb2RlXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIERlZmVyTm9kZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUocmVhZGVyLCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gJFJlYWRlci5jcmVhdGUocmVhZGVyKTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aCwgbWVzc2FnZSA9IG5ldyAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZSgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucHJpbWFyeSA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJOb2RlUHJpbWFyeS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG1lc3NhZ2UuZGVmZXJyZWQgJiYgbWVzc2FnZS5kZWZlcnJlZC5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVmZXJyZWQgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVmZXJyZWQucHVzaCgkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVycmVkTm9kZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYSBEZWZlck5vZGUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGV9IERlZmVyTm9kZVxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlck5vZGUuZGVjb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkKHJlYWRlcikge1xuICAgICAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSBuZXcgJFJlYWRlcihyZWFkZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcmlmaWVzIGEgRGVmZXJOb2RlIG1lc3NhZ2UuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAgICAgICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRGVmZXJOb2RlLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSBcIm9iamVjdFwiIHx8IG1lc3NhZ2UgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnByaW1hcnkgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicHJpbWFyeVwiKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZVByaW1hcnkudmVyaWZ5KG1lc3NhZ2UucHJpbWFyeSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInByaW1hcnkuXCIgKyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZGVmZXJyZWQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZGVmZXJyZWRcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1lc3NhZ2UuZGVmZXJyZWQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiZGVmZXJyZWQ6IGFycmF5IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZS5kZWZlcnJlZC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGUudmVyaWZ5KG1lc3NhZ2UuZGVmZXJyZWRbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImRlZmVycmVkLlwiICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIERlZmVyTm9kZSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZX0gbWVzc2FnZSBEZWZlck5vZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRGVmZXJOb2RlLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5hcnJheXMgfHwgb3B0aW9ucy5kZWZhdWx0cylcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmRlZmVycmVkID0gW107XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVmYXVsdHMpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5wcmltYXJ5ID0gbnVsbDtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5wcmltYXJ5ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInByaW1hcnlcIikpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5wcmltYXJ5ID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGVQcmltYXJ5LnRvT2JqZWN0KG1lc3NhZ2UucHJpbWFyeSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZGVmZXJyZWQgJiYgbWVzc2FnZS5kZWZlcnJlZC5sZW5ndGgpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmRlZmVycmVkID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWVzc2FnZS5kZWZlcnJlZC5sZW5ndGg7ICsrailcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdC5kZWZlcnJlZFtqXSA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlLnRvT2JqZWN0KG1lc3NhZ2UuZGVmZXJyZWRbal0sIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIERlZmVyTm9kZSB0byBKU09OLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJOb2RlXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRGVmZXJOb2RlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gRGVmZXJOb2RlO1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIFF1ZXJ5UGxhbk5vZGUuQ29uZGl0aW9uTm9kZSA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgQ29uZGl0aW9uTm9kZS5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlXG4gICAgICAgICAgICAgKiBAaW50ZXJmYWNlIElDb25kaXRpb25Ob2RlXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbY29uZGl0aW9uXSBDb25kaXRpb25Ob2RlIGNvbmRpdGlvblxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtUcmFjZS5JUXVlcnlQbGFuTm9kZXxudWxsfSBbaWZDbGF1c2VdIENvbmRpdGlvbk5vZGUgaWZDbGF1c2VcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7VHJhY2UuSVF1ZXJ5UGxhbk5vZGV8bnVsbH0gW2Vsc2VDbGF1c2VdIENvbmRpdGlvbk5vZGUgZWxzZUNsYXVzZVxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBDb25kaXRpb25Ob2RlLlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIENvbmRpdGlvbk5vZGUuXG4gICAgICAgICAgICAgKiBAaW1wbGVtZW50cyBJQ29uZGl0aW9uTm9kZVxuICAgICAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSUNvbmRpdGlvbk5vZGU9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gQ29uZGl0aW9uTm9kZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNba2V5c1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25kaXRpb25Ob2RlIGNvbmRpdGlvbi5cbiAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gY29uZGl0aW9uXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5Db25kaXRpb25Ob2RlXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgQ29uZGl0aW9uTm9kZS5wcm90b3R5cGUuY29uZGl0aW9uID0gXCJcIjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25kaXRpb25Ob2RlIGlmQ2xhdXNlLlxuICAgICAgICAgICAgICogQG1lbWJlciB7VHJhY2UuSVF1ZXJ5UGxhbk5vZGV8bnVsbHx1bmRlZmluZWR9IGlmQ2xhdXNlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5Db25kaXRpb25Ob2RlXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgQ29uZGl0aW9uTm9kZS5wcm90b3R5cGUuaWZDbGF1c2UgPSBudWxsO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbmRpdGlvbk5vZGUgZWxzZUNsYXVzZS5cbiAgICAgICAgICAgICAqIEBtZW1iZXIge1RyYWNlLklRdWVyeVBsYW5Ob2RlfG51bGx8dW5kZWZpbmVkfSBlbHNlQ2xhdXNlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5Db25kaXRpb25Ob2RlXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgQ29uZGl0aW9uTm9kZS5wcm90b3R5cGUuZWxzZUNsYXVzZSA9IG51bGw7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBDb25kaXRpb25Ob2RlIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBjcmVhdGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkNvbmRpdGlvbk5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JQ29uZGl0aW9uTm9kZT19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuQ29uZGl0aW9uTm9kZX0gQ29uZGl0aW9uTm9kZSBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBDb25kaXRpb25Ob2RlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25kaXRpb25Ob2RlKHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgQ29uZGl0aW9uTm9kZSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUcmFjZS5RdWVyeVBsYW5Ob2RlLkNvbmRpdGlvbk5vZGUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5Db25kaXRpb25Ob2RlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSUNvbmRpdGlvbk5vZGV9IG1lc3NhZ2UgQ29uZGl0aW9uTm9kZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBDb25kaXRpb25Ob2RlLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdyaXRlcilcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVyID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5jb25kaXRpb24gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImNvbmRpdGlvblwiKSlcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAxLCB3aXJlVHlwZSAyID0qLzEwKS5zdHJpbmcobWVzc2FnZS5jb25kaXRpb24pO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmlmQ2xhdXNlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJpZkNsYXVzZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5lbmNvZGUobWVzc2FnZS5pZkNsYXVzZSwgd3JpdGVyLnVpbnQzMigvKiBpZCAyLCB3aXJlVHlwZSAyID0qLzE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmVsc2VDbGF1c2UgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImVsc2VDbGF1c2VcIikpXG4gICAgICAgICAgICAgICAgICAgICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuZW5jb2RlKG1lc3NhZ2UuZWxzZUNsYXVzZSwgd3JpdGVyLnVpbnQzMigvKiBpZCAzLCB3aXJlVHlwZSAyID0qLzI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBDb25kaXRpb25Ob2RlIG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuQ29uZGl0aW9uTm9kZS52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkNvbmRpdGlvbk5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JQ29uZGl0aW9uTm9kZX0gbWVzc2FnZSBDb25kaXRpb25Ob2RlIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIENvbmRpdGlvbk5vZGUuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVuY29kZShtZXNzYWdlLCB3cml0ZXIpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgQ29uZGl0aW9uTm9kZSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuQ29uZGl0aW9uTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuQ29uZGl0aW9uTm9kZX0gQ29uZGl0aW9uTm9kZVxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBDb25kaXRpb25Ob2RlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSAkUmVhZGVyLmNyZWF0ZShyZWFkZXIpO1xuICAgICAgICAgICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuQ29uZGl0aW9uTm9kZSgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29uZGl0aW9uID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaWZDbGF1c2UgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5lbHNlQ2xhdXNlID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhIENvbmRpdGlvbk5vZGUgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkNvbmRpdGlvbk5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuQ29uZGl0aW9uTm9kZX0gQ29uZGl0aW9uTm9kZVxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBDb25kaXRpb25Ob2RlLmRlY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZChyZWFkZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gbmV3ICRSZWFkZXIocmVhZGVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBWZXJpZmllcyBhIENvbmRpdGlvbk5vZGUgbWVzc2FnZS5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB2ZXJpZnlcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkNvbmRpdGlvbk5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAgICAgICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgQ29uZGl0aW9uTm9kZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJvYmplY3RcIiB8fCBtZXNzYWdlID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJvYmplY3QgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5jb25kaXRpb24gIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiY29uZGl0aW9uXCIpKVxuICAgICAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzU3RyaW5nKG1lc3NhZ2UuY29uZGl0aW9uKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNvbmRpdGlvbjogc3RyaW5nIGV4cGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaWZDbGF1c2UgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiaWZDbGF1c2VcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS52ZXJpZnkobWVzc2FnZS5pZkNsYXVzZSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImlmQ2xhdXNlLlwiICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmVsc2VDbGF1c2UgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZWxzZUNsYXVzZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLnZlcmlmeShtZXNzYWdlLmVsc2VDbGF1c2UpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJlbHNlQ2xhdXNlLlwiICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBDb25kaXRpb25Ob2RlIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuQ29uZGl0aW9uTm9kZVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLkNvbmRpdGlvbk5vZGV9IG1lc3NhZ2UgQ29uZGl0aW9uTm9kZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBDb25kaXRpb25Ob2RlLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kZWZhdWx0cykge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuY29uZGl0aW9uID0gXCJcIjtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmlmQ2xhdXNlID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmVsc2VDbGF1c2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5jb25kaXRpb24gIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiY29uZGl0aW9uXCIpKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QuY29uZGl0aW9uID0gbWVzc2FnZS5jb25kaXRpb247XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaWZDbGF1c2UgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiaWZDbGF1c2VcIikpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5pZkNsYXVzZSA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUudG9PYmplY3QobWVzc2FnZS5pZkNsYXVzZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZWxzZUNsYXVzZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJlbHNlQ2xhdXNlXCIpKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QuZWxzZUNsYXVzZSA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUudG9PYmplY3QobWVzc2FnZS5lbHNlQ2xhdXNlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIENvbmRpdGlvbk5vZGUgdG8gSlNPTi5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkNvbmRpdGlvbk5vZGVcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBDb25kaXRpb25Ob2RlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gQ29uZGl0aW9uTm9kZTtcbiAgICAgICAgfSkoKTtcblxuICAgICAgICBRdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZVByaW1hcnkgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJvcGVydGllcyBvZiBhIERlZmVyTm9kZVByaW1hcnkuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZVxuICAgICAgICAgICAgICogQGludGVyZmFjZSBJRGVmZXJOb2RlUHJpbWFyeVxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtUcmFjZS5JUXVlcnlQbGFuTm9kZXxudWxsfSBbbm9kZV0gRGVmZXJOb2RlUHJpbWFyeSBub2RlXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IERlZmVyTm9kZVByaW1hcnkuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZVxuICAgICAgICAgICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgRGVmZXJOb2RlUHJpbWFyeS5cbiAgICAgICAgICAgICAqIEBpbXBsZW1lbnRzIElEZWZlck5vZGVQcmltYXJ5XG4gICAgICAgICAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRGVmZXJOb2RlUHJpbWFyeT19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBEZWZlck5vZGVQcmltYXJ5KHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllc1trZXlzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba2V5c1tpXV0gPSBwcm9wZXJ0aWVzW2tleXNbaV1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlZmVyTm9kZVByaW1hcnkgbm9kZS5cbiAgICAgICAgICAgICAqIEBtZW1iZXIge1RyYWNlLklRdWVyeVBsYW5Ob2RlfG51bGx8dW5kZWZpbmVkfSBub2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGVQcmltYXJ5XG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRGVmZXJOb2RlUHJpbWFyeS5wcm90b3R5cGUubm9kZSA9IG51bGw7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBEZWZlck5vZGVQcmltYXJ5IGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBjcmVhdGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZVByaW1hcnlcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRGVmZXJOb2RlUHJpbWFyeT19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJOb2RlUHJpbWFyeX0gRGVmZXJOb2RlUHJpbWFyeSBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlck5vZGVQcmltYXJ5LmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEZWZlck5vZGVQcmltYXJ5KHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgRGVmZXJOb2RlUHJpbWFyeSBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZVByaW1hcnkudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGVQcmltYXJ5XG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSURlZmVyTm9kZVByaW1hcnl9IG1lc3NhZ2UgRGVmZXJOb2RlUHJpbWFyeSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlck5vZGVQcmltYXJ5LmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdyaXRlcilcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVyID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5ub2RlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJub2RlXCIpKVxuICAgICAgICAgICAgICAgICAgICAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLmVuY29kZShtZXNzYWdlLm5vZGUsIHdyaXRlci51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMiA9Ki8xMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgRGVmZXJOb2RlUHJpbWFyeSBtZXNzYWdlLCBsZW5ndGggZGVsaW1pdGVkLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZVByaW1hcnkudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGVQcmltYXJ5XG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSURlZmVyTm9kZVByaW1hcnl9IG1lc3NhZ2UgRGVmZXJOb2RlUHJpbWFyeSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlck5vZGVQcmltYXJ5LmVuY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZChtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGUobWVzc2FnZSwgd3JpdGVyKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhIERlZmVyTm9kZVByaW1hcnkgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZVByaW1hcnlcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZVByaW1hcnl9IERlZmVyTm9kZVByaW1hcnlcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRGVmZXJOb2RlUHJpbWFyeS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUocmVhZGVyLCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gJFJlYWRlci5jcmVhdGUocmVhZGVyKTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aCwgbWVzc2FnZSA9IG5ldyAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZVByaW1hcnkoKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5vZGUgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgRGVmZXJOb2RlUHJpbWFyeSBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJOb2RlUHJpbWFyeVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGVQcmltYXJ5fSBEZWZlck5vZGVQcmltYXJ5XG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIERlZmVyTm9kZVByaW1hcnkuZGVjb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkKHJlYWRlcikge1xuICAgICAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSBuZXcgJFJlYWRlcihyZWFkZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcmlmaWVzIGEgRGVmZXJOb2RlUHJpbWFyeSBtZXNzYWdlLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHZlcmlmeVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJOb2RlUHJpbWFyeVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlck5vZGVQcmltYXJ5LnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSBcIm9iamVjdFwiIHx8IG1lc3NhZ2UgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLm5vZGUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwibm9kZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLnZlcmlmeShtZXNzYWdlLm5vZGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJub2RlLlwiICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBEZWZlck5vZGVQcmltYXJ5IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJOb2RlUHJpbWFyeVxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVyTm9kZVByaW1hcnl9IG1lc3NhZ2UgRGVmZXJOb2RlUHJpbWFyeVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlck5vZGVQcmltYXJ5LnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICAgICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICAgICAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5kZWZhdWx0cylcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm5vZGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLm5vZGUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwibm9kZVwiKSlcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0Lm5vZGUgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLnRvT2JqZWN0KG1lc3NhZ2Uubm9kZSwgb3B0aW9ucyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBEZWZlck5vZGVQcmltYXJ5IHRvIEpTT04uXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlck5vZGVQcmltYXJ5XG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRGVmZXJOb2RlUHJpbWFyeS5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgcmV0dXJuIERlZmVyTm9kZVByaW1hcnk7XG4gICAgICAgIH0pKCk7XG5cbiAgICAgICAgUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGUgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJvcGVydGllcyBvZiBhIERlZmVycmVkTm9kZS5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlXG4gICAgICAgICAgICAgKiBAaW50ZXJmYWNlIElEZWZlcnJlZE5vZGVcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPFRyYWNlLlF1ZXJ5UGxhbk5vZGUuSURlZmVycmVkTm9kZURlcGVuZHM+fG51bGx9IFtkZXBlbmRzXSBEZWZlcnJlZE5vZGUgZGVwZW5kc1xuICAgICAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW2xhYmVsXSBEZWZlcnJlZE5vZGUgbGFiZWxcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPFRyYWNlLlF1ZXJ5UGxhbk5vZGUuSVJlc3BvbnNlUGF0aEVsZW1lbnQ+fG51bGx9IFtwYXRoXSBEZWZlcnJlZE5vZGUgcGF0aFxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtUcmFjZS5JUXVlcnlQbGFuTm9kZXxudWxsfSBbbm9kZV0gRGVmZXJyZWROb2RlIG5vZGVcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgRGVmZXJyZWROb2RlLlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIERlZmVycmVkTm9kZS5cbiAgICAgICAgICAgICAqIEBpbXBsZW1lbnRzIElEZWZlcnJlZE5vZGVcbiAgICAgICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLklEZWZlcnJlZE5vZGU9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gRGVmZXJyZWROb2RlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRlcGVuZHMgPSBbXTtcbiAgICAgICAgICAgICAgICB0aGlzLnBhdGggPSBbXTtcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllc1trZXlzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNba2V5c1tpXV0gPSBwcm9wZXJ0aWVzW2tleXNbaV1dO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlZmVycmVkTm9kZSBkZXBlbmRzLlxuICAgICAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPFRyYWNlLlF1ZXJ5UGxhbk5vZGUuSURlZmVycmVkTm9kZURlcGVuZHM+fSBkZXBlbmRzXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlcnJlZE5vZGUucHJvdG90eXBlLmRlcGVuZHMgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlZmVycmVkTm9kZSBsYWJlbC5cbiAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gbGFiZWxcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVycmVkTm9kZVxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIERlZmVycmVkTm9kZS5wcm90b3R5cGUubGFiZWwgPSBcIlwiO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlZmVycmVkTm9kZSBwYXRoLlxuICAgICAgICAgICAgICogQG1lbWJlciB7QXJyYXkuPFRyYWNlLlF1ZXJ5UGxhbk5vZGUuSVJlc3BvbnNlUGF0aEVsZW1lbnQ+fSBwYXRoXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlcnJlZE5vZGUucHJvdG90eXBlLnBhdGggPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlZmVycmVkTm9kZSBub2RlLlxuICAgICAgICAgICAgICogQG1lbWJlciB7VHJhY2UuSVF1ZXJ5UGxhbk5vZGV8bnVsbHx1bmRlZmluZWR9IG5vZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVycmVkTm9kZVxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIERlZmVycmVkTm9kZS5wcm90b3R5cGUubm9kZSA9IG51bGw7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBEZWZlcnJlZE5vZGUgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGNyZWF0ZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSURlZmVycmVkTm9kZT19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlfSBEZWZlcnJlZE5vZGUgaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRGVmZXJyZWROb2RlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEZWZlcnJlZE5vZGUocHJvcGVydGllcyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBEZWZlcnJlZE5vZGUgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRGVmZXJyZWROb2RlfSBtZXNzYWdlIERlZmVycmVkTm9kZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlcnJlZE5vZGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgICAgIGlmICghd3JpdGVyKVxuICAgICAgICAgICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmRlcGVuZHMgIT0gbnVsbCAmJiBtZXNzYWdlLmRlcGVuZHMubGVuZ3RoKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2UuZGVwZW5kcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlRGVwZW5kcy5lbmNvZGUobWVzc2FnZS5kZXBlbmRzW2ldLCB3cml0ZXIudWludDMyKC8qIGlkIDEsIHdpcmVUeXBlIDIgPSovMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UubGFiZWwgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImxhYmVsXCIpKVxuICAgICAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDIsIHdpcmVUeXBlIDIgPSovMTgpLnN0cmluZyhtZXNzYWdlLmxhYmVsKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5wYXRoICE9IG51bGwgJiYgbWVzc2FnZS5wYXRoLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXNzYWdlLnBhdGgubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLlJlc3BvbnNlUGF0aEVsZW1lbnQuZW5jb2RlKG1lc3NhZ2UucGF0aFtpXSwgd3JpdGVyLnVpbnQzMigvKiBpZCAzLCB3aXJlVHlwZSAyID0qLzI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLm5vZGUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcIm5vZGVcIikpXG4gICAgICAgICAgICAgICAgICAgICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuZW5jb2RlKG1lc3NhZ2Uubm9kZSwgd3JpdGVyLnVpbnQzMigvKiBpZCA0LCB3aXJlVHlwZSAyID0qLzM0KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBEZWZlcnJlZE5vZGUgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRGVmZXJyZWROb2RlfSBtZXNzYWdlIERlZmVycmVkTm9kZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlcnJlZE5vZGUuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVuY29kZShtZXNzYWdlLCB3cml0ZXIpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgRGVmZXJyZWROb2RlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVycmVkTm9kZX0gRGVmZXJyZWROb2RlXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIERlZmVycmVkTm9kZS5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUocmVhZGVyLCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gJFJlYWRlci5jcmVhdGUocmVhZGVyKTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aCwgbWVzc2FnZSA9IG5ldyAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVycmVkTm9kZSgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG1lc3NhZ2UuZGVwZW5kcyAmJiBtZXNzYWdlLmRlcGVuZHMubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRlcGVuZHMgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZGVwZW5kcy5wdXNoKCRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlRGVwZW5kcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmxhYmVsID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghKG1lc3NhZ2UucGF0aCAmJiBtZXNzYWdlLnBhdGgubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnBhdGggPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGF0aC5wdXNoKCRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuUmVzcG9uc2VQYXRoRWxlbWVudC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLm5vZGUgPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgRGVmZXJyZWROb2RlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIsIGxlbmd0aCBkZWxpbWl0ZWQuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlfSBEZWZlcnJlZE5vZGVcbiAgICAgICAgICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRGVmZXJyZWROb2RlLmRlY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZChyZWFkZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gbmV3ICRSZWFkZXIocmVhZGVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBWZXJpZmllcyBhIERlZmVycmVkTm9kZSBtZXNzYWdlLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHZlcmlmeVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIERlZmVycmVkTm9kZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJvYmplY3RcIiB8fCBtZXNzYWdlID09PSBudWxsKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJvYmplY3QgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5kZXBlbmRzICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImRlcGVuZHNcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1lc3NhZ2UuZGVwZW5kcykpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJkZXBlbmRzOiBhcnJheSBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2UuZGVwZW5kcy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVEZXBlbmRzLnZlcmlmeShtZXNzYWdlLmRlcGVuZHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImRlcGVuZHMuXCIgKyBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5sYWJlbCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJsYWJlbFwiKSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkdXRpbC5pc1N0cmluZyhtZXNzYWdlLmxhYmVsKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImxhYmVsOiBzdHJpbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5wYXRoICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInBhdGhcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1lc3NhZ2UucGF0aCkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJwYXRoOiBhcnJheSBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2UucGF0aC5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5SZXNwb25zZVBhdGhFbGVtZW50LnZlcmlmeShtZXNzYWdlLnBhdGhbaV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInBhdGguXCIgKyBlcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5ub2RlICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcIm5vZGVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS52ZXJpZnkobWVzc2FnZS5ub2RlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibm9kZS5cIiArIGVycm9yO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgRGVmZXJyZWROb2RlIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlfSBtZXNzYWdlIERlZmVycmVkTm9kZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlcnJlZE5vZGUudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmFycmF5cyB8fCBvcHRpb25zLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5kZXBlbmRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5wYXRoID0gW107XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5sYWJlbCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5ub2RlID0gbnVsbDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZGVwZW5kcyAmJiBtZXNzYWdlLmRlcGVuZHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5kZXBlbmRzID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWVzc2FnZS5kZXBlbmRzLmxlbmd0aDsgKytqKVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmRlcGVuZHNbal0gPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVycmVkTm9kZURlcGVuZHMudG9PYmplY3QobWVzc2FnZS5kZXBlbmRzW2pdLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UubGFiZWwgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwibGFiZWxcIikpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5sYWJlbCA9IG1lc3NhZ2UubGFiZWw7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucGF0aCAmJiBtZXNzYWdlLnBhdGgubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5wYXRoID0gW107XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWVzc2FnZS5wYXRoLmxlbmd0aDsgKytqKVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnBhdGhbal0gPSAkcm9vdC5UcmFjZS5RdWVyeVBsYW5Ob2RlLlJlc3BvbnNlUGF0aEVsZW1lbnQudG9PYmplY3QobWVzc2FnZS5wYXRoW2pdLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2Uubm9kZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJub2RlXCIpKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3Qubm9kZSA9ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUudG9PYmplY3QobWVzc2FnZS5ub2RlLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIERlZmVycmVkTm9kZSB0byBKU09OLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRGVmZXJyZWROb2RlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gRGVmZXJyZWROb2RlO1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIFF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlRGVwZW5kcyA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgRGVmZXJyZWROb2RlRGVwZW5kcy5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlXG4gICAgICAgICAgICAgKiBAaW50ZXJmYWNlIElEZWZlcnJlZE5vZGVEZXBlbmRzXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbaWRdIERlZmVycmVkTm9kZURlcGVuZHMgaWRcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtkZWZlckxhYmVsXSBEZWZlcnJlZE5vZGVEZXBlbmRzIGRlZmVyTGFiZWxcbiAgICAgICAgICAgICAqL1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnN0cnVjdHMgYSBuZXcgRGVmZXJyZWROb2RlRGVwZW5kcy5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlXG4gICAgICAgICAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBEZWZlcnJlZE5vZGVEZXBlbmRzLlxuICAgICAgICAgICAgICogQGltcGxlbWVudHMgSURlZmVycmVkTm9kZURlcGVuZHNcbiAgICAgICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLklEZWZlcnJlZE5vZGVEZXBlbmRzPX0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIGZ1bmN0aW9uIERlZmVycmVkTm9kZURlcGVuZHMocHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW2tleXNbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trZXlzW2ldXSA9IHByb3BlcnRpZXNba2V5c1tpXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVmZXJyZWROb2RlRGVwZW5kcyBpZC5cbiAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gaWRcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVycmVkTm9kZURlcGVuZHNcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlcnJlZE5vZGVEZXBlbmRzLnByb3RvdHlwZS5pZCA9IFwiXCI7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVmZXJyZWROb2RlRGVwZW5kcyBkZWZlckxhYmVsLlxuICAgICAgICAgICAgICogQG1lbWJlciB7c3RyaW5nfSBkZWZlckxhYmVsXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVEZXBlbmRzXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRGVmZXJyZWROb2RlRGVwZW5kcy5wcm90b3R5cGUuZGVmZXJMYWJlbCA9IFwiXCI7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ3JlYXRlcyBhIG5ldyBEZWZlcnJlZE5vZGVEZXBlbmRzIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBjcmVhdGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVycmVkTm9kZURlcGVuZHNcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JRGVmZXJyZWROb2RlRGVwZW5kcz19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlRGVwZW5kc30gRGVmZXJyZWROb2RlRGVwZW5kcyBpbnN0YW5jZVxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlcnJlZE5vZGVEZXBlbmRzLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEZWZlcnJlZE5vZGVEZXBlbmRzKHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgRGVmZXJyZWROb2RlRGVwZW5kcyBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVycmVkTm9kZURlcGVuZHMudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVEZXBlbmRzXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSURlZmVycmVkTm9kZURlcGVuZHN9IG1lc3NhZ2UgRGVmZXJyZWROb2RlRGVwZW5kcyBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAgICAgICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlcnJlZE5vZGVEZXBlbmRzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdyaXRlcilcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVyID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pZCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwiaWRcIikpXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMiA9Ki8xMCkuc3RyaW5nKG1lc3NhZ2UuaWQpO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmRlZmVyTGFiZWwgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImRlZmVyTGFiZWxcIikpXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMiA9Ki8xOCkuc3RyaW5nKG1lc3NhZ2UuZGVmZXJMYWJlbCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIERlZmVycmVkTm9kZURlcGVuZHMgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVEZXBlbmRzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlRGVwZW5kc1xuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLklEZWZlcnJlZE5vZGVEZXBlbmRzfSBtZXNzYWdlIERlZmVycmVkTm9kZURlcGVuZHMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgRGVmZXJyZWROb2RlRGVwZW5kcy5lbmNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikubGRlbGltKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYSBEZWZlcnJlZE5vZGVEZXBlbmRzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVEZXBlbmRzXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVEZXBlbmRzfSBEZWZlcnJlZE5vZGVEZXBlbmRzXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIERlZmVycmVkTm9kZURlcGVuZHMuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHJlYWRlciwgbGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICAgICAgICAgIHJlYWRlciA9ICRSZWFkZXIuY3JlYXRlKHJlYWRlcik7XG4gICAgICAgICAgICAgICAgdmFyIGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGgsIG1lc3NhZ2UgPSBuZXcgJHJvb3QuVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVEZXBlbmRzKCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5pZCA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmRlZmVyTGFiZWwgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgRGVmZXJyZWROb2RlRGVwZW5kcyBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlRGVwZW5kc1xuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVEZXBlbmRzfSBEZWZlcnJlZE5vZGVEZXBlbmRzXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIERlZmVycmVkTm9kZURlcGVuZHMuZGVjb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkKHJlYWRlcikge1xuICAgICAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSBuZXcgJFJlYWRlcihyZWFkZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcmlmaWVzIGEgRGVmZXJyZWROb2RlRGVwZW5kcyBtZXNzYWdlLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHZlcmlmeVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlRGVwZW5kc1xuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlcnJlZE5vZGVEZXBlbmRzLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSBcIm9iamVjdFwiIHx8IG1lc3NhZ2UgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmlkICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImlkXCIpKVxuICAgICAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzU3RyaW5nKG1lc3NhZ2UuaWQpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiaWQ6IHN0cmluZyBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmRlZmVyTGFiZWwgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZGVmZXJMYWJlbFwiKSlcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkdXRpbC5pc1N0cmluZyhtZXNzYWdlLmRlZmVyTGFiZWwpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiZGVmZXJMYWJlbDogc3RyaW5nIGV4cGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIERlZmVycmVkTm9kZURlcGVuZHMgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5EZWZlcnJlZE5vZGVEZXBlbmRzXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuRGVmZXJyZWROb2RlRGVwZW5kc30gbWVzc2FnZSBEZWZlcnJlZE5vZGVEZXBlbmRzXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIERlZmVycmVkTm9kZURlcGVuZHMudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5pZCA9IFwiXCI7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5kZWZlckxhYmVsID0gXCJcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaWQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiaWRcIikpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5pZCA9IG1lc3NhZ2UuaWQ7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZGVmZXJMYWJlbCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJkZWZlckxhYmVsXCIpKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QuZGVmZXJMYWJlbCA9IG1lc3NhZ2UuZGVmZXJMYWJlbDtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb252ZXJ0cyB0aGlzIERlZmVycmVkTm9kZURlcGVuZHMgdG8gSlNPTi5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLkRlZmVycmVkTm9kZURlcGVuZHNcbiAgICAgICAgICAgICAqIEBpbnN0YW5jZVxuICAgICAgICAgICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBEZWZlcnJlZE5vZGVEZXBlbmRzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gRGVmZXJyZWROb2RlRGVwZW5kcztcbiAgICAgICAgfSkoKTtcblxuICAgICAgICBRdWVyeVBsYW5Ob2RlLlJlc3BvbnNlUGF0aEVsZW1lbnQgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogUHJvcGVydGllcyBvZiBhIFJlc3BvbnNlUGF0aEVsZW1lbnQuXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZVxuICAgICAgICAgICAgICogQGludGVyZmFjZSBJUmVzcG9uc2VQYXRoRWxlbWVudFxuICAgICAgICAgICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW2ZpZWxkTmFtZV0gUmVzcG9uc2VQYXRoRWxlbWVudCBmaWVsZE5hbWVcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtpbmRleF0gUmVzcG9uc2VQYXRoRWxlbWVudCBpbmRleFxuICAgICAgICAgICAgICovXG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29uc3RydWN0cyBhIG5ldyBSZXNwb25zZVBhdGhFbGVtZW50LlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGVcbiAgICAgICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlc3BvbnNlUGF0aEVsZW1lbnQuXG4gICAgICAgICAgICAgKiBAaW1wbGVtZW50cyBJUmVzcG9uc2VQYXRoRWxlbWVudFxuICAgICAgICAgICAgICogQGNvbnN0cnVjdG9yXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSVJlc3BvbnNlUGF0aEVsZW1lbnQ9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgZnVuY3Rpb24gUmVzcG9uc2VQYXRoRWxlbWVudChwcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNba2V5c1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXNwb25zZVBhdGhFbGVtZW50IGZpZWxkTmFtZS5cbiAgICAgICAgICAgICAqIEBtZW1iZXIge3N0cmluZ30gZmllbGROYW1lXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5SZXNwb25zZVBhdGhFbGVtZW50XG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUmVzcG9uc2VQYXRoRWxlbWVudC5wcm90b3R5cGUuZmllbGROYW1lID0gXCJcIjtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBSZXNwb25zZVBhdGhFbGVtZW50IGluZGV4LlxuICAgICAgICAgICAgICogQG1lbWJlciB7bnVtYmVyfSBpbmRleFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuUmVzcG9uc2VQYXRoRWxlbWVudFxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFJlc3BvbnNlUGF0aEVsZW1lbnQucHJvdG90eXBlLmluZGV4ID0gMDtcblxuICAgICAgICAgICAgLy8gT25lT2YgZmllbGQgbmFtZXMgYm91bmQgdG8gdmlydHVhbCBnZXR0ZXJzIGFuZCBzZXR0ZXJzXG4gICAgICAgICAgICB2YXIgJG9uZU9mRmllbGRzO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFJlc3BvbnNlUGF0aEVsZW1lbnQgaWQuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtcImZpZWxkTmFtZVwifFwiaW5kZXhcInx1bmRlZmluZWR9IGlkXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5SZXNwb25zZVBhdGhFbGVtZW50XG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFJlc3BvbnNlUGF0aEVsZW1lbnQucHJvdG90eXBlLCBcImlkXCIsIHtcbiAgICAgICAgICAgICAgICBnZXQ6ICR1dGlsLm9uZU9mR2V0dGVyKCRvbmVPZkZpZWxkcyA9IFtcImZpZWxkTmFtZVwiLCBcImluZGV4XCJdKSxcbiAgICAgICAgICAgICAgICBzZXQ6ICR1dGlsLm9uZU9mU2V0dGVyKCRvbmVPZkZpZWxkcylcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBuZXcgUmVzcG9uc2VQYXRoRWxlbWVudCBpbnN0YW5jZSB1c2luZyB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5SZXNwb25zZVBhdGhFbGVtZW50XG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuSVJlc3BvbnNlUGF0aEVsZW1lbnQ9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLlJlc3BvbnNlUGF0aEVsZW1lbnR9IFJlc3BvbnNlUGF0aEVsZW1lbnQgaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUmVzcG9uc2VQYXRoRWxlbWVudC5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVzcG9uc2VQYXRoRWxlbWVudChwcm9wZXJ0aWVzKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlc3BvbnNlUGF0aEVsZW1lbnQgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2UuUXVlcnlQbGFuTm9kZS5SZXNwb25zZVBhdGhFbGVtZW50LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuUmVzcG9uc2VQYXRoRWxlbWVudFxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtUcmFjZS5RdWVyeVBsYW5Ob2RlLklSZXNwb25zZVBhdGhFbGVtZW50fSBtZXNzYWdlIFJlc3BvbnNlUGF0aEVsZW1lbnQgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgUmVzcG9uc2VQYXRoRWxlbWVudC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF3cml0ZXIpXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlciA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZmllbGROYW1lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJmaWVsZE5hbWVcIikpXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMiA9Ki8xMCkuc3RyaW5nKG1lc3NhZ2UuZmllbGROYW1lKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pbmRleCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwiaW5kZXhcIikpXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMCA9Ki8xNikudWludDMyKG1lc3NhZ2UuaW5kZXgpO1xuICAgICAgICAgICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXNwb25zZVBhdGhFbGVtZW50IG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuUmVzcG9uc2VQYXRoRWxlbWVudC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWRcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBUcmFjZS5RdWVyeVBsYW5Ob2RlLlJlc3BvbnNlUGF0aEVsZW1lbnRcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7VHJhY2UuUXVlcnlQbGFuTm9kZS5JUmVzcG9uc2VQYXRoRWxlbWVudH0gbWVzc2FnZSBSZXNwb25zZVBhdGhFbGVtZW50IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFJlc3BvbnNlUGF0aEVsZW1lbnQuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVuY29kZShtZXNzYWdlLCB3cml0ZXIpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgUmVzcG9uc2VQYXRoRWxlbWVudCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuUmVzcG9uc2VQYXRoRWxlbWVudFxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAgICAgICAgICogQHJldHVybnMge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuUmVzcG9uc2VQYXRoRWxlbWVudH0gUmVzcG9uc2VQYXRoRWxlbWVudFxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBSZXNwb25zZVBhdGhFbGVtZW50LmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSAkUmVhZGVyLmNyZWF0ZShyZWFkZXIpO1xuICAgICAgICAgICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LlRyYWNlLlF1ZXJ5UGxhbk5vZGUuUmVzcG9uc2VQYXRoRWxlbWVudCgpO1xuICAgICAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmllbGROYW1lID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW5kZXggPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBEZWNvZGVzIGEgUmVzcG9uc2VQYXRoRWxlbWVudCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuUmVzcG9uc2VQYXRoRWxlbWVudFxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7VHJhY2UuUXVlcnlQbGFuTm9kZS5SZXNwb25zZVBhdGhFbGVtZW50fSBSZXNwb25zZVBhdGhFbGVtZW50XG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFJlc3BvbnNlUGF0aEVsZW1lbnQuZGVjb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkKHJlYWRlcikge1xuICAgICAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSBuZXcgJFJlYWRlcihyZWFkZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcmlmaWVzIGEgUmVzcG9uc2VQYXRoRWxlbWVudCBtZXNzYWdlLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHZlcmlmeVxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuUmVzcG9uc2VQYXRoRWxlbWVudFxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBSZXNwb25zZVBhdGhFbGVtZW50LnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSBcIm9iamVjdFwiIHx8IG1lc3NhZ2UgPT09IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0aWVzID0ge307XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuZmllbGROYW1lICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImZpZWxkTmFtZVwiKSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wZXJ0aWVzLmlkID0gMTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEkdXRpbC5pc1N0cmluZyhtZXNzYWdlLmZpZWxkTmFtZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJmaWVsZE5hbWU6IHN0cmluZyBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pbmRleCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJpbmRleFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllcy5pZCA9PT0gMSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImlkOiBtdWx0aXBsZSB2YWx1ZXNcIjtcbiAgICAgICAgICAgICAgICAgICAgcHJvcGVydGllcy5pZCA9IDE7XG4gICAgICAgICAgICAgICAgICAgIGlmICghJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UuaW5kZXgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiaW5kZXg6IGludGVnZXIgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlc3BvbnNlUGF0aEVsZW1lbnQgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgVHJhY2UuUXVlcnlQbGFuTm9kZS5SZXNwb25zZVBhdGhFbGVtZW50XG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge1RyYWNlLlF1ZXJ5UGxhbk5vZGUuUmVzcG9uc2VQYXRoRWxlbWVudH0gbWVzc2FnZSBSZXNwb25zZVBhdGhFbGVtZW50XG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFJlc3BvbnNlUGF0aEVsZW1lbnQudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgICAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLmZpZWxkTmFtZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJmaWVsZE5hbWVcIikpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmZpZWxkTmFtZSA9IG1lc3NhZ2UuZmllbGROYW1lO1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vbmVvZnMpXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuaWQgPSBcImZpZWxkTmFtZVwiO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pbmRleCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJpbmRleFwiKSkge1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QuaW5kZXggPSBtZXNzYWdlLmluZGV4O1xuICAgICAgICAgICAgICAgICAgICBpZiAob3B0aW9ucy5vbmVvZnMpXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3QuaWQgPSBcImluZGV4XCI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENvbnZlcnRzIHRoaXMgUmVzcG9uc2VQYXRoRWxlbWVudCB0byBKU09OLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIFRyYWNlLlF1ZXJ5UGxhbk5vZGUuUmVzcG9uc2VQYXRoRWxlbWVudFxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFJlc3BvbnNlUGF0aEVsZW1lbnQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHJldHVybiBSZXNwb25zZVBhdGhFbGVtZW50O1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIHJldHVybiBRdWVyeVBsYW5Ob2RlO1xuICAgIH0pKCk7XG5cbiAgICByZXR1cm4gVHJhY2U7XG59KSgpO1xuXG4kcm9vdC5SZXBvcnRIZWFkZXIgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVwb3J0SGVhZGVyLlxuICAgICAqIEBleHBvcnRzIElSZXBvcnRIZWFkZXJcbiAgICAgKiBAaW50ZXJmYWNlIElSZXBvcnRIZWFkZXJcbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbZ3JhcGhSZWZdIFJlcG9ydEhlYWRlciBncmFwaFJlZlxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtob3N0bmFtZV0gUmVwb3J0SGVhZGVyIGhvc3RuYW1lXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW2FnZW50VmVyc2lvbl0gUmVwb3J0SGVhZGVyIGFnZW50VmVyc2lvblxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtzZXJ2aWNlVmVyc2lvbl0gUmVwb3J0SGVhZGVyIHNlcnZpY2VWZXJzaW9uXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW3J1bnRpbWVWZXJzaW9uXSBSZXBvcnRIZWFkZXIgcnVudGltZVZlcnNpb25cbiAgICAgKiBAcHJvcGVydHkge3N0cmluZ3xudWxsfSBbdW5hbWVdIFJlcG9ydEhlYWRlciB1bmFtZVxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtleGVjdXRhYmxlU2NoZW1hSWRdIFJlcG9ydEhlYWRlciBleGVjdXRhYmxlU2NoZW1hSWRcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgUmVwb3J0SGVhZGVyLlxuICAgICAqIEBleHBvcnRzIFJlcG9ydEhlYWRlclxuICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFJlcG9ydEhlYWRlci5cbiAgICAgKiBAaW1wbGVtZW50cyBJUmVwb3J0SGVhZGVyXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtJUmVwb3J0SGVhZGVyPX0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICovXG4gICAgZnVuY3Rpb24gUmVwb3J0SGVhZGVyKHByb3BlcnRpZXMpIHtcbiAgICAgICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllc1trZXlzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBvcnRIZWFkZXIgZ3JhcGhSZWYuXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSBncmFwaFJlZlxuICAgICAqIEBtZW1iZXJvZiBSZXBvcnRIZWFkZXJcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBSZXBvcnRIZWFkZXIucHJvdG90eXBlLmdyYXBoUmVmID0gXCJcIjtcblxuICAgIC8qKlxuICAgICAqIFJlcG9ydEhlYWRlciBob3N0bmFtZS5cbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IGhvc3RuYW1lXG4gICAgICogQG1lbWJlcm9mIFJlcG9ydEhlYWRlclxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFJlcG9ydEhlYWRlci5wcm90b3R5cGUuaG9zdG5hbWUgPSBcIlwiO1xuXG4gICAgLyoqXG4gICAgICogUmVwb3J0SGVhZGVyIGFnZW50VmVyc2lvbi5cbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IGFnZW50VmVyc2lvblxuICAgICAqIEBtZW1iZXJvZiBSZXBvcnRIZWFkZXJcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBSZXBvcnRIZWFkZXIucHJvdG90eXBlLmFnZW50VmVyc2lvbiA9IFwiXCI7XG5cbiAgICAvKipcbiAgICAgKiBSZXBvcnRIZWFkZXIgc2VydmljZVZlcnNpb24uXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSBzZXJ2aWNlVmVyc2lvblxuICAgICAqIEBtZW1iZXJvZiBSZXBvcnRIZWFkZXJcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBSZXBvcnRIZWFkZXIucHJvdG90eXBlLnNlcnZpY2VWZXJzaW9uID0gXCJcIjtcblxuICAgIC8qKlxuICAgICAqIFJlcG9ydEhlYWRlciBydW50aW1lVmVyc2lvbi5cbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IHJ1bnRpbWVWZXJzaW9uXG4gICAgICogQG1lbWJlcm9mIFJlcG9ydEhlYWRlclxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFJlcG9ydEhlYWRlci5wcm90b3R5cGUucnVudGltZVZlcnNpb24gPSBcIlwiO1xuXG4gICAgLyoqXG4gICAgICogUmVwb3J0SGVhZGVyIHVuYW1lLlxuICAgICAqIEBtZW1iZXIge3N0cmluZ30gdW5hbWVcbiAgICAgKiBAbWVtYmVyb2YgUmVwb3J0SGVhZGVyXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgUmVwb3J0SGVhZGVyLnByb3RvdHlwZS51bmFtZSA9IFwiXCI7XG5cbiAgICAvKipcbiAgICAgKiBSZXBvcnRIZWFkZXIgZXhlY3V0YWJsZVNjaGVtYUlkLlxuICAgICAqIEBtZW1iZXIge3N0cmluZ30gZXhlY3V0YWJsZVNjaGVtYUlkXG4gICAgICogQG1lbWJlcm9mIFJlcG9ydEhlYWRlclxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFJlcG9ydEhlYWRlci5wcm90b3R5cGUuZXhlY3V0YWJsZVNjaGVtYUlkID0gXCJcIjtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgUmVwb3J0SGVhZGVyIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICogQG1lbWJlcm9mIFJlcG9ydEhlYWRlclxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0lSZXBvcnRIZWFkZXI9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgKiBAcmV0dXJucyB7UmVwb3J0SGVhZGVyfSBSZXBvcnRIZWFkZXIgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBSZXBvcnRIZWFkZXIuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXBvcnRIZWFkZXIocHJvcGVydGllcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXBvcnRIZWFkZXIgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgUmVwb3J0SGVhZGVyLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgKiBAbWVtYmVyb2YgUmVwb3J0SGVhZGVyXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SVJlcG9ydEhlYWRlcn0gbWVzc2FnZSBSZXBvcnRIZWFkZXIgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAqL1xuICAgIFJlcG9ydEhlYWRlci5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgIGlmICghd3JpdGVyKVxuICAgICAgICAgICAgd3JpdGVyID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaG9zdG5hbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImhvc3RuYW1lXCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCA1LCB3aXJlVHlwZSAyID0qLzQyKS5zdHJpbmcobWVzc2FnZS5ob3N0bmFtZSk7XG4gICAgICAgIGlmIChtZXNzYWdlLmFnZW50VmVyc2lvbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwiYWdlbnRWZXJzaW9uXCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCA2LCB3aXJlVHlwZSAyID0qLzUwKS5zdHJpbmcobWVzc2FnZS5hZ2VudFZlcnNpb24pO1xuICAgICAgICBpZiAobWVzc2FnZS5zZXJ2aWNlVmVyc2lvbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwic2VydmljZVZlcnNpb25cIikpXG4gICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDcsIHdpcmVUeXBlIDIgPSovNTgpLnN0cmluZyhtZXNzYWdlLnNlcnZpY2VWZXJzaW9uKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UucnVudGltZVZlcnNpb24gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInJ1bnRpbWVWZXJzaW9uXCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCA4LCB3aXJlVHlwZSAyID0qLzY2KS5zdHJpbmcobWVzc2FnZS5ydW50aW1lVmVyc2lvbik7XG4gICAgICAgIGlmIChtZXNzYWdlLnVuYW1lICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJ1bmFtZVwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgOSwgd2lyZVR5cGUgMiA9Ki83NCkuc3RyaW5nKG1lc3NhZ2UudW5hbWUpO1xuICAgICAgICBpZiAobWVzc2FnZS5leGVjdXRhYmxlU2NoZW1hSWQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImV4ZWN1dGFibGVTY2hlbWFJZFwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMTEsIHdpcmVUeXBlIDIgPSovOTApLnN0cmluZyhtZXNzYWdlLmV4ZWN1dGFibGVTY2hlbWFJZCk7XG4gICAgICAgIGlmIChtZXNzYWdlLmdyYXBoUmVmICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJncmFwaFJlZlwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMTIsIHdpcmVUeXBlIDIgPSovOTgpLnN0cmluZyhtZXNzYWdlLmdyYXBoUmVmKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFJlcG9ydEhlYWRlciBtZXNzYWdlLCBsZW5ndGggZGVsaW1pdGVkLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBSZXBvcnRIZWFkZXIudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICogQGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZFxuICAgICAqIEBtZW1iZXJvZiBSZXBvcnRIZWFkZXJcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJUmVwb3J0SGVhZGVyfSBtZXNzYWdlIFJlcG9ydEhlYWRlciBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICovXG4gICAgUmVwb3J0SGVhZGVyLmVuY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZChtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikubGRlbGltKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYSBSZXBvcnRIZWFkZXIgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICogQG1lbWJlcm9mIFJlcG9ydEhlYWRlclxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAqIEByZXR1cm5zIHtSZXBvcnRIZWFkZXJ9IFJlcG9ydEhlYWRlclxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICovXG4gICAgUmVwb3J0SGVhZGVyLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgIHJlYWRlciA9ICRSZWFkZXIuY3JlYXRlKHJlYWRlcik7XG4gICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LlJlcG9ydEhlYWRlcigpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgdmFyIHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICBjYXNlIDEyOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuZ3JhcGhSZWYgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5ob3N0bmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmFnZW50VmVyc2lvbiA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnNlcnZpY2VWZXJzaW9uID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA4OlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UucnVudGltZVZlcnNpb24gPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgbWVzc2FnZS51bmFtZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTE6XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5leGVjdXRhYmxlU2NoZW1hSWQgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIFJlcG9ydEhlYWRlciBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAqIEBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWRcbiAgICAgKiBAbWVtYmVyb2YgUmVwb3J0SGVhZGVyXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAqIEByZXR1cm5zIHtSZXBvcnRIZWFkZXJ9IFJlcG9ydEhlYWRlclxuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICovXG4gICAgUmVwb3J0SGVhZGVyLmRlY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZChyZWFkZXIpIHtcbiAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICByZWFkZXIgPSBuZXcgJFJlYWRlcihyZWFkZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBWZXJpZmllcyBhIFJlcG9ydEhlYWRlciBtZXNzYWdlLlxuICAgICAqIEBmdW5jdGlvbiB2ZXJpZnlcbiAgICAgKiBAbWVtYmVyb2YgUmVwb3J0SGVhZGVyXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gICAgICovXG4gICAgUmVwb3J0SGVhZGVyLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJvYmplY3RcIiB8fCBtZXNzYWdlID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIFwib2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLmdyYXBoUmVmICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImdyYXBoUmVmXCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc1N0cmluZyhtZXNzYWdlLmdyYXBoUmVmKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJncmFwaFJlZjogc3RyaW5nIGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLmhvc3RuYW1lICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImhvc3RuYW1lXCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc1N0cmluZyhtZXNzYWdlLmhvc3RuYW1lKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJob3N0bmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLmFnZW50VmVyc2lvbiAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJhZ2VudFZlcnNpb25cIikpXG4gICAgICAgICAgICBpZiAoISR1dGlsLmlzU3RyaW5nKG1lc3NhZ2UuYWdlbnRWZXJzaW9uKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJhZ2VudFZlcnNpb246IHN0cmluZyBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5zZXJ2aWNlVmVyc2lvbiAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJzZXJ2aWNlVmVyc2lvblwiKSlcbiAgICAgICAgICAgIGlmICghJHV0aWwuaXNTdHJpbmcobWVzc2FnZS5zZXJ2aWNlVmVyc2lvbikpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2VydmljZVZlcnNpb246IHN0cmluZyBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5ydW50aW1lVmVyc2lvbiAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJydW50aW1lVmVyc2lvblwiKSlcbiAgICAgICAgICAgIGlmICghJHV0aWwuaXNTdHJpbmcobWVzc2FnZS5ydW50aW1lVmVyc2lvbikpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicnVudGltZVZlcnNpb246IHN0cmluZyBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS51bmFtZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJ1bmFtZVwiKSlcbiAgICAgICAgICAgIGlmICghJHV0aWwuaXNTdHJpbmcobWVzc2FnZS51bmFtZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwidW5hbWU6IHN0cmluZyBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5leGVjdXRhYmxlU2NoZW1hSWQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZXhlY3V0YWJsZVNjaGVtYUlkXCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc1N0cmluZyhtZXNzYWdlLmV4ZWN1dGFibGVTY2hlbWFJZCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZXhlY3V0YWJsZVNjaGVtYUlkOiBzdHJpbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlcG9ydEhlYWRlciBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICogQG1lbWJlcm9mIFJlcG9ydEhlYWRlclxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge1JlcG9ydEhlYWRlcn0gbWVzc2FnZSBSZXBvcnRIZWFkZXJcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAqL1xuICAgIFJlcG9ydEhlYWRlci50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICAgIGlmIChvcHRpb25zLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICBvYmplY3QuaG9zdG5hbWUgPSBcIlwiO1xuICAgICAgICAgICAgb2JqZWN0LmFnZW50VmVyc2lvbiA9IFwiXCI7XG4gICAgICAgICAgICBvYmplY3Quc2VydmljZVZlcnNpb24gPSBcIlwiO1xuICAgICAgICAgICAgb2JqZWN0LnJ1bnRpbWVWZXJzaW9uID0gXCJcIjtcbiAgICAgICAgICAgIG9iamVjdC51bmFtZSA9IFwiXCI7XG4gICAgICAgICAgICBvYmplY3QuZXhlY3V0YWJsZVNjaGVtYUlkID0gXCJcIjtcbiAgICAgICAgICAgIG9iamVjdC5ncmFwaFJlZiA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaG9zdG5hbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiaG9zdG5hbWVcIikpXG4gICAgICAgICAgICBvYmplY3QuaG9zdG5hbWUgPSBtZXNzYWdlLmhvc3RuYW1lO1xuICAgICAgICBpZiAobWVzc2FnZS5hZ2VudFZlcnNpb24gIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiYWdlbnRWZXJzaW9uXCIpKVxuICAgICAgICAgICAgb2JqZWN0LmFnZW50VmVyc2lvbiA9IG1lc3NhZ2UuYWdlbnRWZXJzaW9uO1xuICAgICAgICBpZiAobWVzc2FnZS5zZXJ2aWNlVmVyc2lvbiAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJzZXJ2aWNlVmVyc2lvblwiKSlcbiAgICAgICAgICAgIG9iamVjdC5zZXJ2aWNlVmVyc2lvbiA9IG1lc3NhZ2Uuc2VydmljZVZlcnNpb247XG4gICAgICAgIGlmIChtZXNzYWdlLnJ1bnRpbWVWZXJzaW9uICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInJ1bnRpbWVWZXJzaW9uXCIpKVxuICAgICAgICAgICAgb2JqZWN0LnJ1bnRpbWVWZXJzaW9uID0gbWVzc2FnZS5ydW50aW1lVmVyc2lvbjtcbiAgICAgICAgaWYgKG1lc3NhZ2UudW5hbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwidW5hbWVcIikpXG4gICAgICAgICAgICBvYmplY3QudW5hbWUgPSBtZXNzYWdlLnVuYW1lO1xuICAgICAgICBpZiAobWVzc2FnZS5leGVjdXRhYmxlU2NoZW1hSWQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZXhlY3V0YWJsZVNjaGVtYUlkXCIpKVxuICAgICAgICAgICAgb2JqZWN0LmV4ZWN1dGFibGVTY2hlbWFJZCA9IG1lc3NhZ2UuZXhlY3V0YWJsZVNjaGVtYUlkO1xuICAgICAgICBpZiAobWVzc2FnZS5ncmFwaFJlZiAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJncmFwaFJlZlwiKSlcbiAgICAgICAgICAgIG9iamVjdC5ncmFwaFJlZiA9IG1lc3NhZ2UuZ3JhcGhSZWY7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoaXMgUmVwb3J0SGVhZGVyIHRvIEpTT04uXG4gICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAqIEBtZW1iZXJvZiBSZXBvcnRIZWFkZXJcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICovXG4gICAgUmVwb3J0SGVhZGVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVwb3J0SGVhZGVyO1xufSkoKTtcblxuJHJvb3QuUGF0aEVycm9yU3RhdHMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUGF0aEVycm9yU3RhdHMuXG4gICAgICogQGV4cG9ydHMgSVBhdGhFcnJvclN0YXRzXG4gICAgICogQGludGVyZmFjZSBJUGF0aEVycm9yU3RhdHNcbiAgICAgKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLElQYXRoRXJyb3JTdGF0cz58bnVsbH0gW2NoaWxkcmVuXSBQYXRoRXJyb3JTdGF0cyBjaGlsZHJlblxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtlcnJvcnNDb3VudF0gUGF0aEVycm9yU3RhdHMgZXJyb3JzQ291bnRcbiAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbcmVxdWVzdHNXaXRoRXJyb3JzQ291bnRdIFBhdGhFcnJvclN0YXRzIHJlcXVlc3RzV2l0aEVycm9yc0NvdW50XG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFBhdGhFcnJvclN0YXRzLlxuICAgICAqIEBleHBvcnRzIFBhdGhFcnJvclN0YXRzXG4gICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUGF0aEVycm9yU3RhdHMuXG4gICAgICogQGltcGxlbWVudHMgSVBhdGhFcnJvclN0YXRzXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtJUGF0aEVycm9yU3RhdHM9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBQYXRoRXJyb3JTdGF0cyhwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSB7fTtcbiAgICAgICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllc1trZXlzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXRoRXJyb3JTdGF0cyBjaGlsZHJlbi5cbiAgICAgKiBAbWVtYmVyIHtPYmplY3QuPHN0cmluZyxJUGF0aEVycm9yU3RhdHM+fSBjaGlsZHJlblxuICAgICAqIEBtZW1iZXJvZiBQYXRoRXJyb3JTdGF0c1xuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFBhdGhFcnJvclN0YXRzLnByb3RvdHlwZS5jaGlsZHJlbiA9ICR1dGlsLmVtcHR5T2JqZWN0O1xuXG4gICAgLyoqXG4gICAgICogUGF0aEVycm9yU3RhdHMgZXJyb3JzQ291bnQuXG4gICAgICogQG1lbWJlciB7bnVtYmVyfSBlcnJvcnNDb3VudFxuICAgICAqIEBtZW1iZXJvZiBQYXRoRXJyb3JTdGF0c1xuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFBhdGhFcnJvclN0YXRzLnByb3RvdHlwZS5lcnJvcnNDb3VudCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBQYXRoRXJyb3JTdGF0cyByZXF1ZXN0c1dpdGhFcnJvcnNDb3VudC5cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHJlcXVlc3RzV2l0aEVycm9yc0NvdW50XG4gICAgICogQG1lbWJlcm9mIFBhdGhFcnJvclN0YXRzXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgUGF0aEVycm9yU3RhdHMucHJvdG90eXBlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50ID0gMDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgUGF0aEVycm9yU3RhdHMgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAqIEBmdW5jdGlvbiBjcmVhdGVcbiAgICAgKiBAbWVtYmVyb2YgUGF0aEVycm9yU3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJUGF0aEVycm9yU3RhdHM9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgKiBAcmV0dXJucyB7UGF0aEVycm9yU3RhdHN9IFBhdGhFcnJvclN0YXRzIGluc3RhbmNlXG4gICAgICovXG4gICAgUGF0aEVycm9yU3RhdHMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQYXRoRXJyb3JTdGF0cyhwcm9wZXJ0aWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFBhdGhFcnJvclN0YXRzIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFBhdGhFcnJvclN0YXRzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgKiBAbWVtYmVyb2YgUGF0aEVycm9yU3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJUGF0aEVycm9yU3RhdHN9IG1lc3NhZ2UgUGF0aEVycm9yU3RhdHMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAqL1xuICAgIFBhdGhFcnJvclN0YXRzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgaWYgKCF3cml0ZXIpXG4gICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICBpZiAobWVzc2FnZS5jaGlsZHJlbiAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwiY2hpbGRyZW5cIikpXG4gICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMobWVzc2FnZS5jaGlsZHJlbiksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMiA9Ki8xMCkuZm9yaygpLnVpbnQzMigvKiBpZCAxLCB3aXJlVHlwZSAyID0qLzEwKS5zdHJpbmcoa2V5c1tpXSk7XG4gICAgICAgICAgICAgICAgJHJvb3QuUGF0aEVycm9yU3RhdHMuZW5jb2RlKG1lc3NhZ2UuY2hpbGRyZW5ba2V5c1tpXV0sIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMiA9Ki8xOCkuZm9yaygpKS5sZGVsaW0oKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuZXJyb3JzQ291bnQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImVycm9yc0NvdW50XCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCA0LCB3aXJlVHlwZSAwID0qLzMyKS51aW50NjQobWVzc2FnZS5lcnJvcnNDb3VudCk7XG4gICAgICAgIGlmIChtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJyZXF1ZXN0c1dpdGhFcnJvcnNDb3VudFwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgNSwgd2lyZVR5cGUgMCA9Ki80MCkudWludDY0KG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUGF0aEVycm9yU3RhdHMgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgUGF0aEVycm9yU3RhdHMudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICogQGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZFxuICAgICAqIEBtZW1iZXJvZiBQYXRoRXJyb3JTdGF0c1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0lQYXRoRXJyb3JTdGF0c30gbWVzc2FnZSBQYXRoRXJyb3JTdGF0cyBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICovXG4gICAgUGF0aEVycm9yU3RhdHMuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGUobWVzc2FnZSwgd3JpdGVyKS5sZGVsaW0oKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIFBhdGhFcnJvclN0YXRzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAqIEBtZW1iZXJvZiBQYXRoRXJyb3JTdGF0c1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAqIEByZXR1cm5zIHtQYXRoRXJyb3JTdGF0c30gUGF0aEVycm9yU3RhdHNcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIFBhdGhFcnJvclN0YXRzLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgIHJlYWRlciA9ICRSZWFkZXIuY3JlYXRlKHJlYWRlcik7XG4gICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LlBhdGhFcnJvclN0YXRzKCksIGtleTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIHZhciB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIHJlYWRlci5za2lwKCkucG9zKys7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UuY2hpbGRyZW4gPT09ICR1dGlsLmVtcHR5T2JqZWN0KVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNoaWxkcmVuID0ge307XG4gICAgICAgICAgICAgICAga2V5ID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgIHJlYWRlci5wb3MrKztcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmNoaWxkcmVuW2tleV0gPSAkcm9vdC5QYXRoRXJyb3JTdGF0cy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuZXJyb3JzQ291bnQgPSByZWFkZXIudWludDY0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCA9IHJlYWRlci51aW50NjQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGEgUGF0aEVycm9yU3RhdHMgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgKiBAZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkXG4gICAgICogQG1lbWJlcm9mIFBhdGhFcnJvclN0YXRzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAqIEByZXR1cm5zIHtQYXRoRXJyb3JTdGF0c30gUGF0aEVycm9yU3RhdHNcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIFBhdGhFcnJvclN0YXRzLmRlY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZChyZWFkZXIpIHtcbiAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICByZWFkZXIgPSBuZXcgJFJlYWRlcihyZWFkZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBWZXJpZmllcyBhIFBhdGhFcnJvclN0YXRzIG1lc3NhZ2UuXG4gICAgICogQGZ1bmN0aW9uIHZlcmlmeVxuICAgICAqIEBtZW1iZXJvZiBQYXRoRXJyb3JTdGF0c1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAqL1xuICAgIFBhdGhFcnJvclN0YXRzLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJvYmplY3RcIiB8fCBtZXNzYWdlID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIFwib2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLmNoaWxkcmVuICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImNoaWxkcmVuXCIpKSB7XG4gICAgICAgICAgICBpZiAoISR1dGlsLmlzT2JqZWN0KG1lc3NhZ2UuY2hpbGRyZW4pKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImNoaWxkcmVuOiBvYmplY3QgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgIHZhciBrZXkgPSBPYmplY3Qua2V5cyhtZXNzYWdlLmNoaWxkcmVuKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuUGF0aEVycm9yU3RhdHMudmVyaWZ5KG1lc3NhZ2UuY2hpbGRyZW5ba2V5W2ldXSk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJjaGlsZHJlbi5cIiArIGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLmVycm9yc0NvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImVycm9yc0NvdW50XCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5lcnJvcnNDb3VudCkgJiYgIShtZXNzYWdlLmVycm9yc0NvdW50ICYmICR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLmVycm9yc0NvdW50LmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UuZXJyb3JzQ291bnQuaGlnaCkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImVycm9yc0NvdW50OiBpbnRlZ2VyfExvbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgaWYgKG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicmVxdWVzdHNXaXRoRXJyb3JzQ291bnRcIikpXG4gICAgICAgICAgICBpZiAoISR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50KSAmJiAhKG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQubG93KSAmJiAkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudC5oaWdoKSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicmVxdWVzdHNXaXRoRXJyb3JzQ291bnQ6IGludGVnZXJ8TG9uZyBleHBlY3RlZFwiO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIHBsYWluIG9iamVjdCBmcm9tIGEgUGF0aEVycm9yU3RhdHMgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAqIEBtZW1iZXJvZiBQYXRoRXJyb3JTdGF0c1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge1BhdGhFcnJvclN0YXRzfSBtZXNzYWdlIFBhdGhFcnJvclN0YXRzXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgKi9cbiAgICBQYXRoRXJyb3JTdGF0cy50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICAgIGlmIChvcHRpb25zLm9iamVjdHMgfHwgb3B0aW9ucy5kZWZhdWx0cylcbiAgICAgICAgICAgIG9iamVjdC5jaGlsZHJlbiA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5kZWZhdWx0cykge1xuICAgICAgICAgICAgb2JqZWN0LmVycm9yc0NvdW50ID0gMDtcbiAgICAgICAgICAgIG9iamVjdC5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGtleXMyO1xuICAgICAgICBpZiAobWVzc2FnZS5jaGlsZHJlbiAmJiAoa2V5czIgPSBPYmplY3Qua2V5cyhtZXNzYWdlLmNoaWxkcmVuKSkubGVuZ3RoKSB7XG4gICAgICAgICAgICBvYmplY3QuY2hpbGRyZW4gPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga2V5czIubGVuZ3RoOyArK2opXG4gICAgICAgICAgICAgICAgb2JqZWN0LmNoaWxkcmVuW2tleXMyW2pdXSA9ICRyb290LlBhdGhFcnJvclN0YXRzLnRvT2JqZWN0KG1lc3NhZ2UuY2hpbGRyZW5ba2V5czJbal1dLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lcnJvcnNDb3VudCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJlcnJvcnNDb3VudFwiKSlcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5lcnJvcnNDb3VudCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICBvYmplY3QuZXJyb3JzQ291bnQgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobWVzc2FnZS5lcnJvcnNDb3VudCkgOiBtZXNzYWdlLmVycm9yc0NvdW50O1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG9iamVjdC5lcnJvcnNDb3VudCA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobWVzc2FnZS5lcnJvcnNDb3VudCkgOiBvcHRpb25zLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobWVzc2FnZS5lcnJvcnNDb3VudC5sb3cgPj4+IDAsIG1lc3NhZ2UuZXJyb3JzQ291bnQuaGlnaCA+Pj4gMCkudG9OdW1iZXIodHJ1ZSkgOiBtZXNzYWdlLmVycm9yc0NvdW50O1xuICAgICAgICBpZiAobWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJyZXF1ZXN0c1dpdGhFcnJvcnNDb3VudFwiKSlcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICBvYmplY3QucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCkgOiBtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50O1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG9iamVjdC5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCkgOiBvcHRpb25zLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudC5sb3cgPj4+IDAsIG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQuaGlnaCA+Pj4gMCkudG9OdW1iZXIodHJ1ZSkgOiBtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50O1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGlzIFBhdGhFcnJvclN0YXRzIHRvIEpTT04uXG4gICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAqIEBtZW1iZXJvZiBQYXRoRXJyb3JTdGF0c1xuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgKi9cbiAgICBQYXRoRXJyb3JTdGF0cy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFBhdGhFcnJvclN0YXRzO1xufSkoKTtcblxuJHJvb3QuUXVlcnlMYXRlbmN5U3RhdHMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUXVlcnlMYXRlbmN5U3RhdHMuXG4gICAgICogQGV4cG9ydHMgSVF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQGludGVyZmFjZSBJUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAcHJvcGVydHkgeyRwcm90b2J1Zi5Ub0FycmF5LjxudW1iZXI+fEFycmF5LjxudW1iZXI+fG51bGx9IFtsYXRlbmN5Q291bnRdIFF1ZXJ5TGF0ZW5jeVN0YXRzIGxhdGVuY3lDb3VudFxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtyZXF1ZXN0Q291bnRdIFF1ZXJ5TGF0ZW5jeVN0YXRzIHJlcXVlc3RDb3VudFxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtjYWNoZUhpdHNdIFF1ZXJ5TGF0ZW5jeVN0YXRzIGNhY2hlSGl0c1xuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtwZXJzaXN0ZWRRdWVyeUhpdHNdIFF1ZXJ5TGF0ZW5jeVN0YXRzIHBlcnNpc3RlZFF1ZXJ5SGl0c1xuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtwZXJzaXN0ZWRRdWVyeU1pc3Nlc10gUXVlcnlMYXRlbmN5U3RhdHMgcGVyc2lzdGVkUXVlcnlNaXNzZXNcbiAgICAgKiBAcHJvcGVydHkgeyRwcm90b2J1Zi5Ub0FycmF5LjxudW1iZXI+fEFycmF5LjxudW1iZXI+fG51bGx9IFtjYWNoZUxhdGVuY3lDb3VudF0gUXVlcnlMYXRlbmN5U3RhdHMgY2FjaGVMYXRlbmN5Q291bnRcbiAgICAgKiBAcHJvcGVydHkge0lQYXRoRXJyb3JTdGF0c3xudWxsfSBbcm9vdEVycm9yU3RhdHNdIFF1ZXJ5TGF0ZW5jeVN0YXRzIHJvb3RFcnJvclN0YXRzXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW3JlcXVlc3RzV2l0aEVycm9yc0NvdW50XSBRdWVyeUxhdGVuY3lTdGF0cyByZXF1ZXN0c1dpdGhFcnJvcnNDb3VudFxuICAgICAqIEBwcm9wZXJ0eSB7JHByb3RvYnVmLlRvQXJyYXkuPG51bWJlcj58QXJyYXkuPG51bWJlcj58bnVsbH0gW3B1YmxpY0NhY2hlVHRsQ291bnRdIFF1ZXJ5TGF0ZW5jeVN0YXRzIHB1YmxpY0NhY2hlVHRsQ291bnRcbiAgICAgKiBAcHJvcGVydHkgeyRwcm90b2J1Zi5Ub0FycmF5LjxudW1iZXI+fEFycmF5LjxudW1iZXI+fG51bGx9IFtwcml2YXRlQ2FjaGVUdGxDb3VudF0gUXVlcnlMYXRlbmN5U3RhdHMgcHJpdmF0ZUNhY2hlVHRsQ291bnRcbiAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbcmVnaXN0ZXJlZE9wZXJhdGlvbkNvdW50XSBRdWVyeUxhdGVuY3lTdGF0cyByZWdpc3RlcmVkT3BlcmF0aW9uQ291bnRcbiAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbZm9yYmlkZGVuT3BlcmF0aW9uQ291bnRdIFF1ZXJ5TGF0ZW5jeVN0YXRzIGZvcmJpZGRlbk9wZXJhdGlvbkNvdW50XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW3JlcXVlc3RzV2l0aG91dEZpZWxkSW5zdHJ1bWVudGF0aW9uXSBRdWVyeUxhdGVuY3lTdGF0cyByZXF1ZXN0c1dpdGhvdXRGaWVsZEluc3RydW1lbnRhdGlvblxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBRdWVyeUxhdGVuY3lTdGF0cy5cbiAgICAgKiBAZXhwb3J0cyBRdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFF1ZXJ5TGF0ZW5jeVN0YXRzLlxuICAgICAqIEBpbXBsZW1lbnRzIElRdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7SVF1ZXJ5TGF0ZW5jeVN0YXRzPX0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICovXG4gICAgZnVuY3Rpb24gUXVlcnlMYXRlbmN5U3RhdHMocHJvcGVydGllcykge1xuICAgICAgICB0aGlzLmxhdGVuY3lDb3VudCA9IFtdO1xuICAgICAgICB0aGlzLmNhY2hlTGF0ZW5jeUNvdW50ID0gW107XG4gICAgICAgIHRoaXMucHVibGljQ2FjaGVUdGxDb3VudCA9IFtdO1xuICAgICAgICB0aGlzLnByaXZhdGVDYWNoZVR0bENvdW50ID0gW107XG4gICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNba2V5c1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgdGhpc1trZXlzW2ldXSA9IHByb3BlcnRpZXNba2V5c1tpXV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUXVlcnlMYXRlbmN5U3RhdHMgbGF0ZW5jeUNvdW50LlxuICAgICAqIEBtZW1iZXIge0FycmF5LjxudW1iZXI+fSBsYXRlbmN5Q291bnRcbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBRdWVyeUxhdGVuY3lTdGF0cy5wcm90b3R5cGUubGF0ZW5jeUNvdW50ID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgIC8qKlxuICAgICAqIFF1ZXJ5TGF0ZW5jeVN0YXRzIHJlcXVlc3RDb3VudC5cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHJlcXVlc3RDb3VudFxuICAgICAqIEBtZW1iZXJvZiBRdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFF1ZXJ5TGF0ZW5jeVN0YXRzLnByb3RvdHlwZS5yZXF1ZXN0Q291bnQgPSAwO1xuXG4gICAgLyoqXG4gICAgICogUXVlcnlMYXRlbmN5U3RhdHMgY2FjaGVIaXRzLlxuICAgICAqIEBtZW1iZXIge251bWJlcn0gY2FjaGVIaXRzXG4gICAgICogQG1lbWJlcm9mIFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgUXVlcnlMYXRlbmN5U3RhdHMucHJvdG90eXBlLmNhY2hlSGl0cyA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBRdWVyeUxhdGVuY3lTdGF0cyBwZXJzaXN0ZWRRdWVyeUhpdHMuXG4gICAgICogQG1lbWJlciB7bnVtYmVyfSBwZXJzaXN0ZWRRdWVyeUhpdHNcbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBRdWVyeUxhdGVuY3lTdGF0cy5wcm90b3R5cGUucGVyc2lzdGVkUXVlcnlIaXRzID0gMDtcblxuICAgIC8qKlxuICAgICAqIFF1ZXJ5TGF0ZW5jeVN0YXRzIHBlcnNpc3RlZFF1ZXJ5TWlzc2VzLlxuICAgICAqIEBtZW1iZXIge251bWJlcn0gcGVyc2lzdGVkUXVlcnlNaXNzZXNcbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBRdWVyeUxhdGVuY3lTdGF0cy5wcm90b3R5cGUucGVyc2lzdGVkUXVlcnlNaXNzZXMgPSAwO1xuXG4gICAgLyoqXG4gICAgICogUXVlcnlMYXRlbmN5U3RhdHMgY2FjaGVMYXRlbmN5Q291bnQuXG4gICAgICogQG1lbWJlciB7QXJyYXkuPG51bWJlcj59IGNhY2hlTGF0ZW5jeUNvdW50XG4gICAgICogQG1lbWJlcm9mIFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgUXVlcnlMYXRlbmN5U3RhdHMucHJvdG90eXBlLmNhY2hlTGF0ZW5jeUNvdW50ID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgIC8qKlxuICAgICAqIFF1ZXJ5TGF0ZW5jeVN0YXRzIHJvb3RFcnJvclN0YXRzLlxuICAgICAqIEBtZW1iZXIge0lQYXRoRXJyb3JTdGF0c3xudWxsfHVuZGVmaW5lZH0gcm9vdEVycm9yU3RhdHNcbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBRdWVyeUxhdGVuY3lTdGF0cy5wcm90b3R5cGUucm9vdEVycm9yU3RhdHMgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogUXVlcnlMYXRlbmN5U3RhdHMgcmVxdWVzdHNXaXRoRXJyb3JzQ291bnQuXG4gICAgICogQG1lbWJlciB7bnVtYmVyfSByZXF1ZXN0c1dpdGhFcnJvcnNDb3VudFxuICAgICAqIEBtZW1iZXJvZiBRdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFF1ZXJ5TGF0ZW5jeVN0YXRzLnByb3RvdHlwZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBRdWVyeUxhdGVuY3lTdGF0cyBwdWJsaWNDYWNoZVR0bENvdW50LlxuICAgICAqIEBtZW1iZXIge0FycmF5LjxudW1iZXI+fSBwdWJsaWNDYWNoZVR0bENvdW50XG4gICAgICogQG1lbWJlcm9mIFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgUXVlcnlMYXRlbmN5U3RhdHMucHJvdG90eXBlLnB1YmxpY0NhY2hlVHRsQ291bnQgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgLyoqXG4gICAgICogUXVlcnlMYXRlbmN5U3RhdHMgcHJpdmF0ZUNhY2hlVHRsQ291bnQuXG4gICAgICogQG1lbWJlciB7QXJyYXkuPG51bWJlcj59IHByaXZhdGVDYWNoZVR0bENvdW50XG4gICAgICogQG1lbWJlcm9mIFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgUXVlcnlMYXRlbmN5U3RhdHMucHJvdG90eXBlLnByaXZhdGVDYWNoZVR0bENvdW50ID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgIC8qKlxuICAgICAqIFF1ZXJ5TGF0ZW5jeVN0YXRzIHJlZ2lzdGVyZWRPcGVyYXRpb25Db3VudC5cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHJlZ2lzdGVyZWRPcGVyYXRpb25Db3VudFxuICAgICAqIEBtZW1iZXJvZiBRdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFF1ZXJ5TGF0ZW5jeVN0YXRzLnByb3RvdHlwZS5yZWdpc3RlcmVkT3BlcmF0aW9uQ291bnQgPSAwO1xuXG4gICAgLyoqXG4gICAgICogUXVlcnlMYXRlbmN5U3RhdHMgZm9yYmlkZGVuT3BlcmF0aW9uQ291bnQuXG4gICAgICogQG1lbWJlciB7bnVtYmVyfSBmb3JiaWRkZW5PcGVyYXRpb25Db3VudFxuICAgICAqIEBtZW1iZXJvZiBRdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFF1ZXJ5TGF0ZW5jeVN0YXRzLnByb3RvdHlwZS5mb3JiaWRkZW5PcGVyYXRpb25Db3VudCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBRdWVyeUxhdGVuY3lTdGF0cyByZXF1ZXN0c1dpdGhvdXRGaWVsZEluc3RydW1lbnRhdGlvbi5cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHJlcXVlc3RzV2l0aG91dEZpZWxkSW5zdHJ1bWVudGF0aW9uXG4gICAgICogQG1lbWJlcm9mIFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgUXVlcnlMYXRlbmN5U3RhdHMucHJvdG90eXBlLnJlcXVlc3RzV2l0aG91dEZpZWxkSW5zdHJ1bWVudGF0aW9uID0gMDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgUXVlcnlMYXRlbmN5U3RhdHMgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAqIEBmdW5jdGlvbiBjcmVhdGVcbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJUXVlcnlMYXRlbmN5U3RhdHM9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgKiBAcmV0dXJucyB7UXVlcnlMYXRlbmN5U3RhdHN9IFF1ZXJ5TGF0ZW5jeVN0YXRzIGluc3RhbmNlXG4gICAgICovXG4gICAgUXVlcnlMYXRlbmN5U3RhdHMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBRdWVyeUxhdGVuY3lTdGF0cyhwcm9wZXJ0aWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFF1ZXJ5TGF0ZW5jeVN0YXRzIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFF1ZXJ5TGF0ZW5jeVN0YXRzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJUXVlcnlMYXRlbmN5U3RhdHN9IG1lc3NhZ2UgUXVlcnlMYXRlbmN5U3RhdHMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAqL1xuICAgIFF1ZXJ5TGF0ZW5jeVN0YXRzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgaWYgKCF3cml0ZXIpXG4gICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICBpZiAobWVzc2FnZS5yZXF1ZXN0Q291bnQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInJlcXVlc3RDb3VudFwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMCA9Ki8xNikudWludDY0KG1lc3NhZ2UucmVxdWVzdENvdW50KTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY2FjaGVIaXRzICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJjYWNoZUhpdHNcIikpXG4gICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDMsIHdpcmVUeXBlIDAgPSovMjQpLnVpbnQ2NChtZXNzYWdlLmNhY2hlSGl0cyk7XG4gICAgICAgIGlmIChtZXNzYWdlLnBlcnNpc3RlZFF1ZXJ5SGl0cyAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwicGVyc2lzdGVkUXVlcnlIaXRzXCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCA0LCB3aXJlVHlwZSAwID0qLzMyKS51aW50NjQobWVzc2FnZS5wZXJzaXN0ZWRRdWVyeUhpdHMpO1xuICAgICAgICBpZiAobWVzc2FnZS5wZXJzaXN0ZWRRdWVyeU1pc3NlcyAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwicGVyc2lzdGVkUXVlcnlNaXNzZXNcIikpXG4gICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDUsIHdpcmVUeXBlIDAgPSovNDApLnVpbnQ2NChtZXNzYWdlLnBlcnNpc3RlZFF1ZXJ5TWlzc2VzKTtcbiAgICAgICAgaWYgKG1lc3NhZ2Uucm9vdEVycm9yU3RhdHMgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInJvb3RFcnJvclN0YXRzXCIpKVxuICAgICAgICAgICAgJHJvb3QuUGF0aEVycm9yU3RhdHMuZW5jb2RlKG1lc3NhZ2Uucm9vdEVycm9yU3RhdHMsIHdyaXRlci51aW50MzIoLyogaWQgNywgd2lyZVR5cGUgMiA9Ki81OCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInJlcXVlc3RzV2l0aEVycm9yc0NvdW50XCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCA4LCB3aXJlVHlwZSAwID0qLzY0KS51aW50NjQobWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCk7XG4gICAgICAgIGlmIChtZXNzYWdlLnJlZ2lzdGVyZWRPcGVyYXRpb25Db3VudCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwicmVnaXN0ZXJlZE9wZXJhdGlvbkNvdW50XCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAxMSwgd2lyZVR5cGUgMCA9Ki84OCkudWludDY0KG1lc3NhZ2UucmVnaXN0ZXJlZE9wZXJhdGlvbkNvdW50KTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZm9yYmlkZGVuT3BlcmF0aW9uQ291bnQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImZvcmJpZGRlbk9wZXJhdGlvbkNvdW50XCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAxMiwgd2lyZVR5cGUgMCA9Ki85NikudWludDY0KG1lc3NhZ2UuZm9yYmlkZGVuT3BlcmF0aW9uQ291bnQpO1xuICAgICAgICB2YXIgYXJyYXkxMztcbiAgICAgICAgaWYgKG1lc3NhZ2UubGF0ZW5jeUNvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5sYXRlbmN5Q291bnQudG9BcnJheSlcbiAgICAgICAgICAgIGFycmF5MTMgPSBtZXNzYWdlLmxhdGVuY3lDb3VudC50b0FycmF5KCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGFycmF5MTMgPSBtZXNzYWdlLmxhdGVuY3lDb3VudDtcbiAgICAgICAgaWYgKGFycmF5MTMgIT0gbnVsbCAmJiBhcnJheTEzLmxlbmd0aCkge1xuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAxMywgd2lyZVR5cGUgMiA9Ki8xMDYpLmZvcmsoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkxMy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICB3cml0ZXIuc2ludDY0KGFycmF5MTNbaV0pO1xuICAgICAgICAgICAgd3JpdGVyLmxkZWxpbSgpO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhcnJheTE0O1xuICAgICAgICBpZiAobWVzc2FnZS5jYWNoZUxhdGVuY3lDb3VudCAhPSBudWxsICYmIG1lc3NhZ2UuY2FjaGVMYXRlbmN5Q291bnQudG9BcnJheSlcbiAgICAgICAgICAgIGFycmF5MTQgPSBtZXNzYWdlLmNhY2hlTGF0ZW5jeUNvdW50LnRvQXJyYXkoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYXJyYXkxNCA9IG1lc3NhZ2UuY2FjaGVMYXRlbmN5Q291bnQ7XG4gICAgICAgIGlmIChhcnJheTE0ICE9IG51bGwgJiYgYXJyYXkxNC5sZW5ndGgpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMTQsIHdpcmVUeXBlIDIgPSovMTE0KS5mb3JrKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5MTQubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgd3JpdGVyLnNpbnQ2NChhcnJheTE0W2ldKTtcbiAgICAgICAgICAgIHdyaXRlci5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJyYXkxNTtcbiAgICAgICAgaWYgKG1lc3NhZ2UucHVibGljQ2FjaGVUdGxDb3VudCAhPSBudWxsICYmIG1lc3NhZ2UucHVibGljQ2FjaGVUdGxDb3VudC50b0FycmF5KVxuICAgICAgICAgICAgYXJyYXkxNSA9IG1lc3NhZ2UucHVibGljQ2FjaGVUdGxDb3VudC50b0FycmF5KCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGFycmF5MTUgPSBtZXNzYWdlLnB1YmxpY0NhY2hlVHRsQ291bnQ7XG4gICAgICAgIGlmIChhcnJheTE1ICE9IG51bGwgJiYgYXJyYXkxNS5sZW5ndGgpIHtcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMTUsIHdpcmVUeXBlIDIgPSovMTIyKS5mb3JrKCk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5MTUubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgd3JpdGVyLnNpbnQ2NChhcnJheTE1W2ldKTtcbiAgICAgICAgICAgIHdyaXRlci5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYXJyYXkxNjtcbiAgICAgICAgaWYgKG1lc3NhZ2UucHJpdmF0ZUNhY2hlVHRsQ291bnQgIT0gbnVsbCAmJiBtZXNzYWdlLnByaXZhdGVDYWNoZVR0bENvdW50LnRvQXJyYXkpXG4gICAgICAgICAgICBhcnJheTE2ID0gbWVzc2FnZS5wcml2YXRlQ2FjaGVUdGxDb3VudC50b0FycmF5KCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGFycmF5MTYgPSBtZXNzYWdlLnByaXZhdGVDYWNoZVR0bENvdW50O1xuICAgICAgICBpZiAoYXJyYXkxNiAhPSBudWxsICYmIGFycmF5MTYubGVuZ3RoKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDE2LCB3aXJlVHlwZSAyID0qLzEzMCkuZm9yaygpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheTE2Lmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIHdyaXRlci5zaW50NjQoYXJyYXkxNltpXSk7XG4gICAgICAgICAgICB3cml0ZXIubGRlbGltKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucmVxdWVzdHNXaXRob3V0RmllbGRJbnN0cnVtZW50YXRpb24gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInJlcXVlc3RzV2l0aG91dEZpZWxkSW5zdHJ1bWVudGF0aW9uXCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAxNywgd2lyZVR5cGUgMCA9Ki8xMzYpLnVpbnQ2NChtZXNzYWdlLnJlcXVlc3RzV2l0aG91dEZpZWxkSW5zdHJ1bWVudGF0aW9uKTtcbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFF1ZXJ5TGF0ZW5jeVN0YXRzIG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFF1ZXJ5TGF0ZW5jeVN0YXRzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAqIEBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWRcbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJUXVlcnlMYXRlbmN5U3RhdHN9IG1lc3NhZ2UgUXVlcnlMYXRlbmN5U3RhdHMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAqL1xuICAgIFF1ZXJ5TGF0ZW5jeVN0YXRzLmVuY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZChtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikubGRlbGltKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYSBRdWVyeUxhdGVuY3lTdGF0cyBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgKiBAcmV0dXJucyB7UXVlcnlMYXRlbmN5U3RhdHN9IFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgKi9cbiAgICBRdWVyeUxhdGVuY3lTdGF0cy5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUocmVhZGVyLCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICByZWFkZXIgPSAkUmVhZGVyLmNyZWF0ZShyZWFkZXIpO1xuICAgICAgICB2YXIgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aCwgbWVzc2FnZSA9IG5ldyAkcm9vdC5RdWVyeUxhdGVuY3lTdGF0cygpO1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgdmFyIHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICBjYXNlIDEzOlxuICAgICAgICAgICAgICAgIGlmICghKG1lc3NhZ2UubGF0ZW5jeUNvdW50ICYmIG1lc3NhZ2UubGF0ZW5jeUNvdW50Lmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubGF0ZW5jeUNvdW50ID0gW107XG4gICAgICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kMiA9IHJlYWRlci51aW50MzIoKSArIHJlYWRlci5wb3M7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kMilcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubGF0ZW5jeUNvdW50LnB1c2gocmVhZGVyLnNpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5sYXRlbmN5Q291bnQucHVzaChyZWFkZXIuc2ludDY0KCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVxdWVzdENvdW50ID0gcmVhZGVyLnVpbnQ2NCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2FjaGVIaXRzID0gcmVhZGVyLnVpbnQ2NCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA0OlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlIaXRzID0gcmVhZGVyLnVpbnQ2NCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlNaXNzZXMgPSByZWFkZXIudWludDY0KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDE0OlxuICAgICAgICAgICAgICAgIGlmICghKG1lc3NhZ2UuY2FjaGVMYXRlbmN5Q291bnQgJiYgbWVzc2FnZS5jYWNoZUxhdGVuY3lDb3VudC5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNhY2hlTGF0ZW5jeUNvdW50ID0gW107XG4gICAgICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kMiA9IHJlYWRlci51aW50MzIoKSArIHJlYWRlci5wb3M7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kMilcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuY2FjaGVMYXRlbmN5Q291bnQucHVzaChyZWFkZXIuc2ludDY0KCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmNhY2hlTGF0ZW5jeUNvdW50LnB1c2gocmVhZGVyLnNpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnJvb3RFcnJvclN0YXRzID0gJHJvb3QuUGF0aEVycm9yU3RhdHMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgODpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50ID0gcmVhZGVyLnVpbnQ2NCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxNTpcbiAgICAgICAgICAgICAgICBpZiAoIShtZXNzYWdlLnB1YmxpY0NhY2hlVHRsQ291bnQgJiYgbWVzc2FnZS5wdWJsaWNDYWNoZVR0bENvdW50Lmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucHVibGljQ2FjaGVUdGxDb3VudCA9IFtdO1xuICAgICAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZDIgPSByZWFkZXIudWludDMyKCkgKyByZWFkZXIucG9zO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZDIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnB1YmxpY0NhY2hlVHRsQ291bnQucHVzaChyZWFkZXIuc2ludDY0KCkpO1xuICAgICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnB1YmxpY0NhY2hlVHRsQ291bnQucHVzaChyZWFkZXIuc2ludDY0KCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxNjpcbiAgICAgICAgICAgICAgICBpZiAoIShtZXNzYWdlLnByaXZhdGVDYWNoZVR0bENvdW50ICYmIG1lc3NhZ2UucHJpdmF0ZUNhY2hlVHRsQ291bnQubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wcml2YXRlQ2FjaGVUdGxDb3VudCA9IFtdO1xuICAgICAgICAgICAgICAgIGlmICgodGFnICYgNykgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVuZDIgPSByZWFkZXIudWludDMyKCkgKyByZWFkZXIucG9zO1xuICAgICAgICAgICAgICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZDIpXG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnByaXZhdGVDYWNoZVR0bENvdW50LnB1c2gocmVhZGVyLnNpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wcml2YXRlQ2FjaGVUdGxDb3VudC5wdXNoKHJlYWRlci5zaW50NjQoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVnaXN0ZXJlZE9wZXJhdGlvbkNvdW50ID0gcmVhZGVyLnVpbnQ2NCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxMjpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmZvcmJpZGRlbk9wZXJhdGlvbkNvdW50ID0gcmVhZGVyLnVpbnQ2NCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAxNzpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnJlcXVlc3RzV2l0aG91dEZpZWxkSW5zdHJ1bWVudGF0aW9uID0gcmVhZGVyLnVpbnQ2NCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYSBRdWVyeUxhdGVuY3lTdGF0cyBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAqIEBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWRcbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICogQHJldHVybnMge1F1ZXJ5TGF0ZW5jeVN0YXRzfSBRdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICovXG4gICAgUXVlcnlMYXRlbmN5U3RhdHMuZGVjb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkKHJlYWRlcikge1xuICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgIHJlYWRlciA9IG5ldyAkUmVhZGVyKHJlYWRlcik7XG4gICAgICAgIHJldHVybiB0aGlzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIFZlcmlmaWVzIGEgUXVlcnlMYXRlbmN5U3RhdHMgbWVzc2FnZS5cbiAgICAgKiBAZnVuY3Rpb24gdmVyaWZ5XG4gICAgICogQG1lbWJlcm9mIFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gICAgICovXG4gICAgUXVlcnlMYXRlbmN5U3RhdHMudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlICE9PSBcIm9iamVjdFwiIHx8IG1lc3NhZ2UgPT09IG51bGwpXG4gICAgICAgICAgICByZXR1cm4gXCJvYmplY3QgZXhwZWN0ZWRcIjtcbiAgICAgICAgaWYgKG1lc3NhZ2UubGF0ZW5jeUNvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImxhdGVuY3lDb3VudFwiKSkge1xuICAgICAgICAgICAgdmFyIGFycmF5MTM7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5sYXRlbmN5Q291bnQgIT0gbnVsbCAmJiBtZXNzYWdlLmxhdGVuY3lDb3VudC50b0FycmF5KVxuICAgICAgICAgICAgICAgIGFycmF5MTMgPSBtZXNzYWdlLmxhdGVuY3lDb3VudC50b0FycmF5KCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYXJyYXkxMyA9IG1lc3NhZ2UubGF0ZW5jeUNvdW50O1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGFycmF5MTMpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImxhdGVuY3lDb3VudDogYXJyYXkgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkxMy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzSW50ZWdlcihhcnJheTEzW2ldKSAmJiAhKGFycmF5MTNbaV0gJiYgJHV0aWwuaXNJbnRlZ2VyKGFycmF5MTNbaV0ubG93KSAmJiAkdXRpbC5pc0ludGVnZXIoYXJyYXkxM1tpXS5oaWdoKSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImxhdGVuY3lDb3VudDogaW50ZWdlcnxMb25nW10gZXhwZWN0ZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5yZXF1ZXN0Q291bnQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicmVxdWVzdENvdW50XCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5yZXF1ZXN0Q291bnQpICYmICEobWVzc2FnZS5yZXF1ZXN0Q291bnQgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UucmVxdWVzdENvdW50LmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UucmVxdWVzdENvdW50LmhpZ2gpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJyZXF1ZXN0Q291bnQ6IGludGVnZXJ8TG9uZyBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5jYWNoZUhpdHMgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiY2FjaGVIaXRzXCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5jYWNoZUhpdHMpICYmICEobWVzc2FnZS5jYWNoZUhpdHMgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UuY2FjaGVIaXRzLmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UuY2FjaGVIaXRzLmhpZ2gpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjYWNoZUhpdHM6IGludGVnZXJ8TG9uZyBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5wZXJzaXN0ZWRRdWVyeUhpdHMgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicGVyc2lzdGVkUXVlcnlIaXRzXCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5wZXJzaXN0ZWRRdWVyeUhpdHMpICYmICEobWVzc2FnZS5wZXJzaXN0ZWRRdWVyeUhpdHMgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlIaXRzLmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlIaXRzLmhpZ2gpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJwZXJzaXN0ZWRRdWVyeUhpdHM6IGludGVnZXJ8TG9uZyBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5wZXJzaXN0ZWRRdWVyeU1pc3NlcyAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJwZXJzaXN0ZWRRdWVyeU1pc3Nlc1wiKSlcbiAgICAgICAgICAgIGlmICghJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlNaXNzZXMpICYmICEobWVzc2FnZS5wZXJzaXN0ZWRRdWVyeU1pc3NlcyAmJiAkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5wZXJzaXN0ZWRRdWVyeU1pc3Nlcy5sb3cpICYmICR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLnBlcnNpc3RlZFF1ZXJ5TWlzc2VzLmhpZ2gpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJwZXJzaXN0ZWRRdWVyeU1pc3NlczogaW50ZWdlcnxMb25nIGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLmNhY2hlTGF0ZW5jeUNvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImNhY2hlTGF0ZW5jeUNvdW50XCIpKSB7XG4gICAgICAgICAgICB2YXIgYXJyYXkxNDtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmNhY2hlTGF0ZW5jeUNvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5jYWNoZUxhdGVuY3lDb3VudC50b0FycmF5KVxuICAgICAgICAgICAgICAgIGFycmF5MTQgPSBtZXNzYWdlLmNhY2hlTGF0ZW5jeUNvdW50LnRvQXJyYXkoKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBhcnJheTE0ID0gbWVzc2FnZS5jYWNoZUxhdGVuY3lDb3VudDtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheTE0KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjYWNoZUxhdGVuY3lDb3VudDogYXJyYXkgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkxNC5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzSW50ZWdlcihhcnJheTE0W2ldKSAmJiAhKGFycmF5MTRbaV0gJiYgJHV0aWwuaXNJbnRlZ2VyKGFycmF5MTRbaV0ubG93KSAmJiAkdXRpbC5pc0ludGVnZXIoYXJyYXkxNFtpXS5oaWdoKSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImNhY2hlTGF0ZW5jeUNvdW50OiBpbnRlZ2VyfExvbmdbXSBleHBlY3RlZFwiO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnJvb3RFcnJvclN0YXRzICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInJvb3RFcnJvclN0YXRzXCIpKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5QYXRoRXJyb3JTdGF0cy52ZXJpZnkobWVzc2FnZS5yb290RXJyb3JTdGF0cyk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicm9vdEVycm9yU3RhdHMuXCIgKyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJyZXF1ZXN0c1dpdGhFcnJvcnNDb3VudFwiKSlcbiAgICAgICAgICAgIGlmICghJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQpICYmICEobWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCAmJiAkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudC5sb3cpICYmICR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50LmhpZ2gpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJyZXF1ZXN0c1dpdGhFcnJvcnNDb3VudDogaW50ZWdlcnxMb25nIGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLnB1YmxpY0NhY2hlVHRsQ291bnQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicHVibGljQ2FjaGVUdGxDb3VudFwiKSkge1xuICAgICAgICAgICAgdmFyIGFycmF5MTU7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5wdWJsaWNDYWNoZVR0bENvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5wdWJsaWNDYWNoZVR0bENvdW50LnRvQXJyYXkpXG4gICAgICAgICAgICAgICAgYXJyYXkxNSA9IG1lc3NhZ2UucHVibGljQ2FjaGVUdGxDb3VudC50b0FycmF5KCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYXJyYXkxNSA9IG1lc3NhZ2UucHVibGljQ2FjaGVUdGxDb3VudDtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheTE1KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJwdWJsaWNDYWNoZVR0bENvdW50OiBhcnJheSBleHBlY3RlZFwiO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheTE1Lmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGlmICghJHV0aWwuaXNJbnRlZ2VyKGFycmF5MTVbaV0pICYmICEoYXJyYXkxNVtpXSAmJiAkdXRpbC5pc0ludGVnZXIoYXJyYXkxNVtpXS5sb3cpICYmICR1dGlsLmlzSW50ZWdlcihhcnJheTE1W2ldLmhpZ2gpKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicHVibGljQ2FjaGVUdGxDb3VudDogaW50ZWdlcnxMb25nW10gZXhwZWN0ZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wcml2YXRlQ2FjaGVUdGxDb3VudCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJwcml2YXRlQ2FjaGVUdGxDb3VudFwiKSkge1xuICAgICAgICAgICAgdmFyIGFycmF5MTY7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5wcml2YXRlQ2FjaGVUdGxDb3VudCAhPSBudWxsICYmIG1lc3NhZ2UucHJpdmF0ZUNhY2hlVHRsQ291bnQudG9BcnJheSlcbiAgICAgICAgICAgICAgICBhcnJheTE2ID0gbWVzc2FnZS5wcml2YXRlQ2FjaGVUdGxDb3VudC50b0FycmF5KCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYXJyYXkxNiA9IG1lc3NhZ2UucHJpdmF0ZUNhY2hlVHRsQ291bnQ7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkxNikpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicHJpdmF0ZUNhY2hlVHRsQ291bnQ6IGFycmF5IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5MTYubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIoYXJyYXkxNltpXSkgJiYgIShhcnJheTE2W2ldICYmICR1dGlsLmlzSW50ZWdlcihhcnJheTE2W2ldLmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKGFycmF5MTZbaV0uaGlnaCkpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJwcml2YXRlQ2FjaGVUdGxDb3VudDogaW50ZWdlcnxMb25nW10gZXhwZWN0ZWRcIjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5yZWdpc3RlcmVkT3BlcmF0aW9uQ291bnQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicmVnaXN0ZXJlZE9wZXJhdGlvbkNvdW50XCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5yZWdpc3RlcmVkT3BlcmF0aW9uQ291bnQpICYmICEobWVzc2FnZS5yZWdpc3RlcmVkT3BlcmF0aW9uQ291bnQgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UucmVnaXN0ZXJlZE9wZXJhdGlvbkNvdW50LmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UucmVnaXN0ZXJlZE9wZXJhdGlvbkNvdW50LmhpZ2gpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJyZWdpc3RlcmVkT3BlcmF0aW9uQ291bnQ6IGludGVnZXJ8TG9uZyBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5mb3JiaWRkZW5PcGVyYXRpb25Db3VudCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJmb3JiaWRkZW5PcGVyYXRpb25Db3VudFwiKSlcbiAgICAgICAgICAgIGlmICghJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UuZm9yYmlkZGVuT3BlcmF0aW9uQ291bnQpICYmICEobWVzc2FnZS5mb3JiaWRkZW5PcGVyYXRpb25Db3VudCAmJiAkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5mb3JiaWRkZW5PcGVyYXRpb25Db3VudC5sb3cpICYmICR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLmZvcmJpZGRlbk9wZXJhdGlvbkNvdW50LmhpZ2gpKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJmb3JiaWRkZW5PcGVyYXRpb25Db3VudDogaW50ZWdlcnxMb25nIGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLnJlcXVlc3RzV2l0aG91dEZpZWxkSW5zdHJ1bWVudGF0aW9uICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInJlcXVlc3RzV2l0aG91dEZpZWxkSW5zdHJ1bWVudGF0aW9uXCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5yZXF1ZXN0c1dpdGhvdXRGaWVsZEluc3RydW1lbnRhdGlvbikgJiYgIShtZXNzYWdlLnJlcXVlc3RzV2l0aG91dEZpZWxkSW5zdHJ1bWVudGF0aW9uICYmICR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLnJlcXVlc3RzV2l0aG91dEZpZWxkSW5zdHJ1bWVudGF0aW9uLmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UucmVxdWVzdHNXaXRob3V0RmllbGRJbnN0cnVtZW50YXRpb24uaGlnaCkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcInJlcXVlc3RzV2l0aG91dEZpZWxkSW5zdHJ1bWVudGF0aW9uOiBpbnRlZ2VyfExvbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFF1ZXJ5TGF0ZW5jeVN0YXRzIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgKiBAbWVtYmVyb2YgUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtRdWVyeUxhdGVuY3lTdGF0c30gbWVzc2FnZSBRdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICovXG4gICAgUXVlcnlMYXRlbmN5U3RhdHMudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5hcnJheXMgfHwgb3B0aW9ucy5kZWZhdWx0cykge1xuICAgICAgICAgICAgb2JqZWN0LmxhdGVuY3lDb3VudCA9IFtdO1xuICAgICAgICAgICAgb2JqZWN0LmNhY2hlTGF0ZW5jeUNvdW50ID0gW107XG4gICAgICAgICAgICBvYmplY3QucHVibGljQ2FjaGVUdGxDb3VudCA9IFtdO1xuICAgICAgICAgICAgb2JqZWN0LnByaXZhdGVDYWNoZVR0bENvdW50ID0gW107XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZGVmYXVsdHMpIHtcbiAgICAgICAgICAgIG9iamVjdC5yZXF1ZXN0Q291bnQgPSAwO1xuICAgICAgICAgICAgb2JqZWN0LmNhY2hlSGl0cyA9IDA7XG4gICAgICAgICAgICBvYmplY3QucGVyc2lzdGVkUXVlcnlIaXRzID0gMDtcbiAgICAgICAgICAgIG9iamVjdC5wZXJzaXN0ZWRRdWVyeU1pc3NlcyA9IDA7XG4gICAgICAgICAgICBvYmplY3Qucm9vdEVycm9yU3RhdHMgPSBudWxsO1xuICAgICAgICAgICAgb2JqZWN0LnJlcXVlc3RzV2l0aEVycm9yc0NvdW50ID0gMDtcbiAgICAgICAgICAgIG9iamVjdC5yZWdpc3RlcmVkT3BlcmF0aW9uQ291bnQgPSAwO1xuICAgICAgICAgICAgb2JqZWN0LmZvcmJpZGRlbk9wZXJhdGlvbkNvdW50ID0gMDtcbiAgICAgICAgICAgIG9iamVjdC5yZXF1ZXN0c1dpdGhvdXRGaWVsZEluc3RydW1lbnRhdGlvbiA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucmVxdWVzdENvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInJlcXVlc3RDb3VudFwiKSlcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5yZXF1ZXN0Q291bnQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgb2JqZWN0LnJlcXVlc3RDb3VudCA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtZXNzYWdlLnJlcXVlc3RDb3VudCkgOiBtZXNzYWdlLnJlcXVlc3RDb3VudDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvYmplY3QucmVxdWVzdENvdW50ID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtZXNzYWdlLnJlcXVlc3RDb3VudCkgOiBvcHRpb25zLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobWVzc2FnZS5yZXF1ZXN0Q291bnQubG93ID4+PiAwLCBtZXNzYWdlLnJlcXVlc3RDb3VudC5oaWdoID4+PiAwKS50b051bWJlcih0cnVlKSA6IG1lc3NhZ2UucmVxdWVzdENvdW50O1xuICAgICAgICBpZiAobWVzc2FnZS5jYWNoZUhpdHMgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiY2FjaGVIaXRzXCIpKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLmNhY2hlSGl0cyA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICBvYmplY3QuY2FjaGVIaXRzID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG1lc3NhZ2UuY2FjaGVIaXRzKSA6IG1lc3NhZ2UuY2FjaGVIaXRzO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG9iamVjdC5jYWNoZUhpdHMgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1lc3NhZ2UuY2FjaGVIaXRzKSA6IG9wdGlvbnMubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtZXNzYWdlLmNhY2hlSGl0cy5sb3cgPj4+IDAsIG1lc3NhZ2UuY2FjaGVIaXRzLmhpZ2ggPj4+IDApLnRvTnVtYmVyKHRydWUpIDogbWVzc2FnZS5jYWNoZUhpdHM7XG4gICAgICAgIGlmIChtZXNzYWdlLnBlcnNpc3RlZFF1ZXJ5SGl0cyAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJwZXJzaXN0ZWRRdWVyeUhpdHNcIikpXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlIaXRzID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIG9iamVjdC5wZXJzaXN0ZWRRdWVyeUhpdHMgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobWVzc2FnZS5wZXJzaXN0ZWRRdWVyeUhpdHMpIDogbWVzc2FnZS5wZXJzaXN0ZWRRdWVyeUhpdHM7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgb2JqZWN0LnBlcnNpc3RlZFF1ZXJ5SGl0cyA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobWVzc2FnZS5wZXJzaXN0ZWRRdWVyeUhpdHMpIDogb3B0aW9ucy5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlIaXRzLmxvdyA+Pj4gMCwgbWVzc2FnZS5wZXJzaXN0ZWRRdWVyeUhpdHMuaGlnaCA+Pj4gMCkudG9OdW1iZXIodHJ1ZSkgOiBtZXNzYWdlLnBlcnNpc3RlZFF1ZXJ5SGl0cztcbiAgICAgICAgaWYgKG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlNaXNzZXMgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicGVyc2lzdGVkUXVlcnlNaXNzZXNcIikpXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlNaXNzZXMgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgb2JqZWN0LnBlcnNpc3RlZFF1ZXJ5TWlzc2VzID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlNaXNzZXMpIDogbWVzc2FnZS5wZXJzaXN0ZWRRdWVyeU1pc3NlcztcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvYmplY3QucGVyc2lzdGVkUXVlcnlNaXNzZXMgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlNaXNzZXMpIDogb3B0aW9ucy5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG1lc3NhZ2UucGVyc2lzdGVkUXVlcnlNaXNzZXMubG93ID4+PiAwLCBtZXNzYWdlLnBlcnNpc3RlZFF1ZXJ5TWlzc2VzLmhpZ2ggPj4+IDApLnRvTnVtYmVyKHRydWUpIDogbWVzc2FnZS5wZXJzaXN0ZWRRdWVyeU1pc3NlcztcbiAgICAgICAgaWYgKG1lc3NhZ2Uucm9vdEVycm9yU3RhdHMgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicm9vdEVycm9yU3RhdHNcIikpXG4gICAgICAgICAgICBvYmplY3Qucm9vdEVycm9yU3RhdHMgPSAkcm9vdC5QYXRoRXJyb3JTdGF0cy50b09iamVjdChtZXNzYWdlLnJvb3RFcnJvclN0YXRzLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicmVxdWVzdHNXaXRoRXJyb3JzQ291bnRcIikpXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgb2JqZWN0LnJlcXVlc3RzV2l0aEVycm9yc0NvdW50ID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQpIDogbWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvYmplY3QucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQpIDogb3B0aW9ucy5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQubG93ID4+PiAwLCBtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50LmhpZ2ggPj4+IDApLnRvTnVtYmVyKHRydWUpIDogbWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudDtcbiAgICAgICAgaWYgKG1lc3NhZ2UucmVnaXN0ZXJlZE9wZXJhdGlvbkNvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInJlZ2lzdGVyZWRPcGVyYXRpb25Db3VudFwiKSlcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5yZWdpc3RlcmVkT3BlcmF0aW9uQ291bnQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgb2JqZWN0LnJlZ2lzdGVyZWRPcGVyYXRpb25Db3VudCA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtZXNzYWdlLnJlZ2lzdGVyZWRPcGVyYXRpb25Db3VudCkgOiBtZXNzYWdlLnJlZ2lzdGVyZWRPcGVyYXRpb25Db3VudDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvYmplY3QucmVnaXN0ZXJlZE9wZXJhdGlvbkNvdW50ID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtZXNzYWdlLnJlZ2lzdGVyZWRPcGVyYXRpb25Db3VudCkgOiBvcHRpb25zLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobWVzc2FnZS5yZWdpc3RlcmVkT3BlcmF0aW9uQ291bnQubG93ID4+PiAwLCBtZXNzYWdlLnJlZ2lzdGVyZWRPcGVyYXRpb25Db3VudC5oaWdoID4+PiAwKS50b051bWJlcih0cnVlKSA6IG1lc3NhZ2UucmVnaXN0ZXJlZE9wZXJhdGlvbkNvdW50O1xuICAgICAgICBpZiAobWVzc2FnZS5mb3JiaWRkZW5PcGVyYXRpb25Db3VudCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJmb3JiaWRkZW5PcGVyYXRpb25Db3VudFwiKSlcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5mb3JiaWRkZW5PcGVyYXRpb25Db3VudCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICBvYmplY3QuZm9yYmlkZGVuT3BlcmF0aW9uQ291bnQgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobWVzc2FnZS5mb3JiaWRkZW5PcGVyYXRpb25Db3VudCkgOiBtZXNzYWdlLmZvcmJpZGRlbk9wZXJhdGlvbkNvdW50O1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG9iamVjdC5mb3JiaWRkZW5PcGVyYXRpb25Db3VudCA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobWVzc2FnZS5mb3JiaWRkZW5PcGVyYXRpb25Db3VudCkgOiBvcHRpb25zLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobWVzc2FnZS5mb3JiaWRkZW5PcGVyYXRpb25Db3VudC5sb3cgPj4+IDAsIG1lc3NhZ2UuZm9yYmlkZGVuT3BlcmF0aW9uQ291bnQuaGlnaCA+Pj4gMCkudG9OdW1iZXIodHJ1ZSkgOiBtZXNzYWdlLmZvcmJpZGRlbk9wZXJhdGlvbkNvdW50O1xuICAgICAgICBpZiAobWVzc2FnZS5sYXRlbmN5Q291bnQgJiYgbWVzc2FnZS5sYXRlbmN5Q291bnQubGVuZ3RoKSB7XG4gICAgICAgICAgICBvYmplY3QubGF0ZW5jeUNvdW50ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1lc3NhZ2UubGF0ZW5jeUNvdW50Lmxlbmd0aDsgKytqKVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5sYXRlbmN5Q291bnRbal0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5sYXRlbmN5Q291bnRbal0gPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobWVzc2FnZS5sYXRlbmN5Q291bnRbal0pIDogbWVzc2FnZS5sYXRlbmN5Q291bnRbal07XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QubGF0ZW5jeUNvdW50W2pdID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtZXNzYWdlLmxhdGVuY3lDb3VudFtqXSkgOiBvcHRpb25zLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobWVzc2FnZS5sYXRlbmN5Q291bnRbal0ubG93ID4+PiAwLCBtZXNzYWdlLmxhdGVuY3lDb3VudFtqXS5oaWdoID4+PiAwKS50b051bWJlcigpIDogbWVzc2FnZS5sYXRlbmN5Q291bnRbal07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY2FjaGVMYXRlbmN5Q291bnQgJiYgbWVzc2FnZS5jYWNoZUxhdGVuY3lDb3VudC5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9iamVjdC5jYWNoZUxhdGVuY3lDb3VudCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtZXNzYWdlLmNhY2hlTGF0ZW5jeUNvdW50Lmxlbmd0aDsgKytqKVxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5jYWNoZUxhdGVuY3lDb3VudFtqXSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmNhY2hlTGF0ZW5jeUNvdW50W2pdID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG1lc3NhZ2UuY2FjaGVMYXRlbmN5Q291bnRbal0pIDogbWVzc2FnZS5jYWNoZUxhdGVuY3lDb3VudFtqXTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5jYWNoZUxhdGVuY3lDb3VudFtqXSA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobWVzc2FnZS5jYWNoZUxhdGVuY3lDb3VudFtqXSkgOiBvcHRpb25zLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobWVzc2FnZS5jYWNoZUxhdGVuY3lDb3VudFtqXS5sb3cgPj4+IDAsIG1lc3NhZ2UuY2FjaGVMYXRlbmN5Q291bnRbal0uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG1lc3NhZ2UuY2FjaGVMYXRlbmN5Q291bnRbal07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucHVibGljQ2FjaGVUdGxDb3VudCAmJiBtZXNzYWdlLnB1YmxpY0NhY2hlVHRsQ291bnQubGVuZ3RoKSB7XG4gICAgICAgICAgICBvYmplY3QucHVibGljQ2FjaGVUdGxDb3VudCA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBtZXNzYWdlLnB1YmxpY0NhY2hlVHRsQ291bnQubGVuZ3RoOyArK2opXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLnB1YmxpY0NhY2hlVHRsQ291bnRbal0gPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5wdWJsaWNDYWNoZVR0bENvdW50W2pdID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG1lc3NhZ2UucHVibGljQ2FjaGVUdGxDb3VudFtqXSkgOiBtZXNzYWdlLnB1YmxpY0NhY2hlVHRsQ291bnRbal07XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QucHVibGljQ2FjaGVUdGxDb3VudFtqXSA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobWVzc2FnZS5wdWJsaWNDYWNoZVR0bENvdW50W2pdKSA6IG9wdGlvbnMubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtZXNzYWdlLnB1YmxpY0NhY2hlVHRsQ291bnRbal0ubG93ID4+PiAwLCBtZXNzYWdlLnB1YmxpY0NhY2hlVHRsQ291bnRbal0uaGlnaCA+Pj4gMCkudG9OdW1iZXIoKSA6IG1lc3NhZ2UucHVibGljQ2FjaGVUdGxDb3VudFtqXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5wcml2YXRlQ2FjaGVUdGxDb3VudCAmJiBtZXNzYWdlLnByaXZhdGVDYWNoZVR0bENvdW50Lmxlbmd0aCkge1xuICAgICAgICAgICAgb2JqZWN0LnByaXZhdGVDYWNoZVR0bENvdW50ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1lc3NhZ2UucHJpdmF0ZUNhY2hlVHRsQ291bnQubGVuZ3RoOyArK2opXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLnByaXZhdGVDYWNoZVR0bENvdW50W2pdID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICBvYmplY3QucHJpdmF0ZUNhY2hlVHRsQ291bnRbal0gPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobWVzc2FnZS5wcml2YXRlQ2FjaGVUdGxDb3VudFtqXSkgOiBtZXNzYWdlLnByaXZhdGVDYWNoZVR0bENvdW50W2pdO1xuICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnByaXZhdGVDYWNoZVR0bENvdW50W2pdID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtZXNzYWdlLnByaXZhdGVDYWNoZVR0bENvdW50W2pdKSA6IG9wdGlvbnMubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtZXNzYWdlLnByaXZhdGVDYWNoZVR0bENvdW50W2pdLmxvdyA+Pj4gMCwgbWVzc2FnZS5wcml2YXRlQ2FjaGVUdGxDb3VudFtqXS5oaWdoID4+PiAwKS50b051bWJlcigpIDogbWVzc2FnZS5wcml2YXRlQ2FjaGVUdGxDb3VudFtqXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5yZXF1ZXN0c1dpdGhvdXRGaWVsZEluc3RydW1lbnRhdGlvbiAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJyZXF1ZXN0c1dpdGhvdXRGaWVsZEluc3RydW1lbnRhdGlvblwiKSlcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5yZXF1ZXN0c1dpdGhvdXRGaWVsZEluc3RydW1lbnRhdGlvbiA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICBvYmplY3QucmVxdWVzdHNXaXRob3V0RmllbGRJbnN0cnVtZW50YXRpb24gPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobWVzc2FnZS5yZXF1ZXN0c1dpdGhvdXRGaWVsZEluc3RydW1lbnRhdGlvbikgOiBtZXNzYWdlLnJlcXVlc3RzV2l0aG91dEZpZWxkSW5zdHJ1bWVudGF0aW9uO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG9iamVjdC5yZXF1ZXN0c1dpdGhvdXRGaWVsZEluc3RydW1lbnRhdGlvbiA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobWVzc2FnZS5yZXF1ZXN0c1dpdGhvdXRGaWVsZEluc3RydW1lbnRhdGlvbikgOiBvcHRpb25zLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobWVzc2FnZS5yZXF1ZXN0c1dpdGhvdXRGaWVsZEluc3RydW1lbnRhdGlvbi5sb3cgPj4+IDAsIG1lc3NhZ2UucmVxdWVzdHNXaXRob3V0RmllbGRJbnN0cnVtZW50YXRpb24uaGlnaCA+Pj4gMCkudG9OdW1iZXIodHJ1ZSkgOiBtZXNzYWdlLnJlcXVlc3RzV2l0aG91dEZpZWxkSW5zdHJ1bWVudGF0aW9uO1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGlzIFF1ZXJ5TGF0ZW5jeVN0YXRzIHRvIEpTT04uXG4gICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAqIEBtZW1iZXJvZiBRdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgKi9cbiAgICBRdWVyeUxhdGVuY3lTdGF0cy5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFF1ZXJ5TGF0ZW5jeVN0YXRzO1xufSkoKTtcblxuJHJvb3QuU3RhdHNDb250ZXh0ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIFN0YXRzQ29udGV4dC5cbiAgICAgKiBAZXhwb3J0cyBJU3RhdHNDb250ZXh0XG4gICAgICogQGludGVyZmFjZSBJU3RhdHNDb250ZXh0XG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW2NsaWVudE5hbWVdIFN0YXRzQ29udGV4dCBjbGllbnROYW1lXG4gICAgICogQHByb3BlcnR5IHtzdHJpbmd8bnVsbH0gW2NsaWVudFZlcnNpb25dIFN0YXRzQ29udGV4dCBjbGllbnRWZXJzaW9uXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFN0YXRzQ29udGV4dC5cbiAgICAgKiBAZXhwb3J0cyBTdGF0c0NvbnRleHRcbiAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBTdGF0c0NvbnRleHQuXG4gICAgICogQGltcGxlbWVudHMgSVN0YXRzQ29udGV4dFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7SVN0YXRzQ29udGV4dD19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFN0YXRzQ29udGV4dChwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNba2V5c1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgdGhpc1trZXlzW2ldXSA9IHByb3BlcnRpZXNba2V5c1tpXV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RhdHNDb250ZXh0IGNsaWVudE5hbWUuXG4gICAgICogQG1lbWJlciB7c3RyaW5nfSBjbGllbnROYW1lXG4gICAgICogQG1lbWJlcm9mIFN0YXRzQ29udGV4dFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFN0YXRzQ29udGV4dC5wcm90b3R5cGUuY2xpZW50TmFtZSA9IFwiXCI7XG5cbiAgICAvKipcbiAgICAgKiBTdGF0c0NvbnRleHQgY2xpZW50VmVyc2lvbi5cbiAgICAgKiBAbWVtYmVyIHtzdHJpbmd9IGNsaWVudFZlcnNpb25cbiAgICAgKiBAbWVtYmVyb2YgU3RhdHNDb250ZXh0XG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgU3RhdHNDb250ZXh0LnByb3RvdHlwZS5jbGllbnRWZXJzaW9uID0gXCJcIjtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgU3RhdHNDb250ZXh0IGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICogQG1lbWJlcm9mIFN0YXRzQ29udGV4dFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0lTdGF0c0NvbnRleHQ9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgKiBAcmV0dXJucyB7U3RhdHNDb250ZXh0fSBTdGF0c0NvbnRleHQgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBTdGF0c0NvbnRleHQuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdGF0c0NvbnRleHQocHJvcGVydGllcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBTdGF0c0NvbnRleHQgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgU3RhdHNDb250ZXh0LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgKiBAbWVtYmVyb2YgU3RhdHNDb250ZXh0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SVN0YXRzQ29udGV4dH0gbWVzc2FnZSBTdGF0c0NvbnRleHQgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAqL1xuICAgIFN0YXRzQ29udGV4dC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgIGlmICghd3JpdGVyKVxuICAgICAgICAgICAgd3JpdGVyID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY2xpZW50TmFtZSAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwiY2xpZW50TmFtZVwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMiA9Ki8xOCkuc3RyaW5nKG1lc3NhZ2UuY2xpZW50TmFtZSk7XG4gICAgICAgIGlmIChtZXNzYWdlLmNsaWVudFZlcnNpb24gIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImNsaWVudFZlcnNpb25cIikpXG4gICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDMsIHdpcmVUeXBlIDIgPSovMjYpLnN0cmluZyhtZXNzYWdlLmNsaWVudFZlcnNpb24pO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgU3RhdHNDb250ZXh0IG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFN0YXRzQ29udGV4dC52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgKiBAZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkXG4gICAgICogQG1lbWJlcm9mIFN0YXRzQ29udGV4dFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0lTdGF0c0NvbnRleHR9IG1lc3NhZ2UgU3RhdHNDb250ZXh0IG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgKi9cbiAgICBTdGF0c0NvbnRleHQuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGUobWVzc2FnZSwgd3JpdGVyKS5sZGVsaW0oKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIFN0YXRzQ29udGV4dCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgKiBAbWVtYmVyb2YgU3RhdHNDb250ZXh0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICogQHJldHVybnMge1N0YXRzQ29udGV4dH0gU3RhdHNDb250ZXh0XG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgKi9cbiAgICBTdGF0c0NvbnRleHQuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHJlYWRlciwgbGVuZ3RoKSB7XG4gICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgcmVhZGVyID0gJFJlYWRlci5jcmVhdGUocmVhZGVyKTtcbiAgICAgICAgdmFyIGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGgsIG1lc3NhZ2UgPSBuZXcgJHJvb3QuU3RhdHNDb250ZXh0KCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmNsaWVudE5hbWUgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5jbGllbnRWZXJzaW9uID0gcmVhZGVyLnN0cmluZygpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYSBTdGF0c0NvbnRleHQgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgKiBAZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkXG4gICAgICogQG1lbWJlcm9mIFN0YXRzQ29udGV4dFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcmV0dXJucyB7U3RhdHNDb250ZXh0fSBTdGF0c0NvbnRleHRcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIFN0YXRzQ29udGV4dC5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgcmVhZGVyID0gbmV3ICRSZWFkZXIocmVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgYSBTdGF0c0NvbnRleHQgbWVzc2FnZS5cbiAgICAgKiBAZnVuY3Rpb24gdmVyaWZ5XG4gICAgICogQG1lbWJlcm9mIFN0YXRzQ29udGV4dFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAqL1xuICAgIFN0YXRzQ29udGV4dC52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSkge1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5jbGllbnROYW1lICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImNsaWVudE5hbWVcIikpXG4gICAgICAgICAgICBpZiAoISR1dGlsLmlzU3RyaW5nKG1lc3NhZ2UuY2xpZW50TmFtZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiY2xpZW50TmFtZTogc3RyaW5nIGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLmNsaWVudFZlcnNpb24gIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiY2xpZW50VmVyc2lvblwiKSlcbiAgICAgICAgICAgIGlmICghJHV0aWwuaXNTdHJpbmcobWVzc2FnZS5jbGllbnRWZXJzaW9uKSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjbGllbnRWZXJzaW9uOiBzdHJpbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFN0YXRzQ29udGV4dCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICogQG1lbWJlcm9mIFN0YXRzQ29udGV4dFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge1N0YXRzQ29udGV4dH0gbWVzc2FnZSBTdGF0c0NvbnRleHRcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAqL1xuICAgIFN0YXRzQ29udGV4dC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICAgIGlmIChvcHRpb25zLmRlZmF1bHRzKSB7XG4gICAgICAgICAgICBvYmplY3QuY2xpZW50TmFtZSA9IFwiXCI7XG4gICAgICAgICAgICBvYmplY3QuY2xpZW50VmVyc2lvbiA9IFwiXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuY2xpZW50TmFtZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJjbGllbnROYW1lXCIpKVxuICAgICAgICAgICAgb2JqZWN0LmNsaWVudE5hbWUgPSBtZXNzYWdlLmNsaWVudE5hbWU7XG4gICAgICAgIGlmIChtZXNzYWdlLmNsaWVudFZlcnNpb24gIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiY2xpZW50VmVyc2lvblwiKSlcbiAgICAgICAgICAgIG9iamVjdC5jbGllbnRWZXJzaW9uID0gbWVzc2FnZS5jbGllbnRWZXJzaW9uO1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGlzIFN0YXRzQ29udGV4dCB0byBKU09OLlxuICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgKiBAbWVtYmVyb2YgU3RhdHNDb250ZXh0XG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAqL1xuICAgIFN0YXRzQ29udGV4dC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFN0YXRzQ29udGV4dDtcbn0pKCk7XG5cbiRyb290LkNvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0cy5cbiAgICAgKiBAZXhwb3J0cyBJQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBpbnRlcmZhY2UgSUNvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAcHJvcGVydHkge0lRdWVyeUxhdGVuY3lTdGF0c3xudWxsfSBbcXVlcnlMYXRlbmN5U3RhdHNdIENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHMgcXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAcHJvcGVydHkge0lTdGF0c0NvbnRleHR8bnVsbH0gW2NvbnRleHRdIENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHMgY29udGV4dFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzLlxuICAgICAqIEBleHBvcnRzIENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzLlxuICAgICAqIEBpbXBsZW1lbnRzIElDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtJQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0cz19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHMocHJvcGVydGllcykge1xuICAgICAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW2tleXNbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5c1tpXV0gPSBwcm9wZXJ0aWVzW2tleXNbaV1dO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHMgcXVlcnlMYXRlbmN5U3RhdHMuXG4gICAgICogQG1lbWJlciB7SVF1ZXJ5TGF0ZW5jeVN0YXRzfG51bGx8dW5kZWZpbmVkfSBxdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBtZW1iZXJvZiBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0cy5wcm90b3R5cGUucXVlcnlMYXRlbmN5U3RhdHMgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0cyBjb250ZXh0LlxuICAgICAqIEBtZW1iZXIge0lTdGF0c0NvbnRleHR8bnVsbHx1bmRlZmluZWR9IGNvbnRleHRcbiAgICAgKiBAbWVtYmVyb2YgQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHMucHJvdG90eXBlLmNvbnRleHQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICogQG1lbWJlcm9mIENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0cz19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAqIEByZXR1cm5zIHtDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzfSBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzIGluc3RhbmNlXG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0cy5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgICAgICByZXR1cm4gbmV3IENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHMocHJvcGVydGllcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHMudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAqIEBtZW1iZXJvZiBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SUNvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHN9IG1lc3NhZ2UgQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0cyBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0cy5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgIGlmICghd3JpdGVyKVxuICAgICAgICAgICAgd3JpdGVyID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UucXVlcnlMYXRlbmN5U3RhdHMgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInF1ZXJ5TGF0ZW5jeVN0YXRzXCIpKVxuICAgICAgICAgICAgJHJvb3QuUXVlcnlMYXRlbmN5U3RhdHMuZW5jb2RlKG1lc3NhZ2UucXVlcnlMYXRlbmN5U3RhdHMsIHdyaXRlci51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMiA9Ki8xMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY29udGV4dCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwiY29udGV4dFwiKSlcbiAgICAgICAgICAgICRyb290LlN0YXRzQ29udGV4dC5lbmNvZGUobWVzc2FnZS5jb250ZXh0LCB3cml0ZXIudWludDMyKC8qIGlkIDIsIHdpcmVUeXBlIDIgPSovMTgpLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzIG1lc3NhZ2UsIGxlbmd0aCBkZWxpbWl0ZWQuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHMudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICogQGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZFxuICAgICAqIEBtZW1iZXJvZiBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SUNvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHN9IG1lc3NhZ2UgQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0cyBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0cy5lbmNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuY29kZShtZXNzYWdlLCB3cml0ZXIpLmxkZWxpbSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGEgQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0cyBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLlxuICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgKiBAbWVtYmVyb2YgQ29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAqIEByZXR1cm5zIHtDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzfSBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgKi9cbiAgICBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgIHJlYWRlciA9ICRSZWFkZXIuY3JlYXRlKHJlYWRlcik7XG4gICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LkNvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHMoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIHZhciB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UucXVlcnlMYXRlbmN5U3RhdHMgPSAkcm9vdC5RdWVyeUxhdGVuY3lTdGF0cy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UuY29udGV4dCA9ICRyb290LlN0YXRzQ29udGV4dC5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYSBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIsIGxlbmd0aCBkZWxpbWl0ZWQuXG4gICAgICogQGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZFxuICAgICAqIEBtZW1iZXJvZiBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAqIEByZXR1cm5zIHtDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzfSBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgKi9cbiAgICBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzLmRlY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZChyZWFkZXIpIHtcbiAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICByZWFkZXIgPSBuZXcgJFJlYWRlcihyZWFkZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBWZXJpZmllcyBhIENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHMgbWVzc2FnZS5cbiAgICAgKiBAZnVuY3Rpb24gdmVyaWZ5XG4gICAgICogQG1lbWJlcm9mIENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgKi9cbiAgICBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzLnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJvYmplY3RcIiB8fCBtZXNzYWdlID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIFwib2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLnF1ZXJ5TGF0ZW5jeVN0YXRzICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInF1ZXJ5TGF0ZW5jeVN0YXRzXCIpKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5RdWVyeUxhdGVuY3lTdGF0cy52ZXJpZnkobWVzc2FnZS5xdWVyeUxhdGVuY3lTdGF0cyk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicXVlcnlMYXRlbmN5U3RhdHMuXCIgKyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb250ZXh0ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImNvbnRleHRcIikpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9ICRyb290LlN0YXRzQ29udGV4dC52ZXJpZnkobWVzc2FnZS5jb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250ZXh0LlwiICsgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHMgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAqIEBtZW1iZXJvZiBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7Q29udGV4dHVhbGl6ZWRRdWVyeUxhdGVuY3lTdGF0c30gbWVzc2FnZSBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgKi9cbiAgICBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMpXG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGVmYXVsdHMpIHtcbiAgICAgICAgICAgIG9iamVjdC5xdWVyeUxhdGVuY3lTdGF0cyA9IG51bGw7XG4gICAgICAgICAgICBvYmplY3QuY29udGV4dCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucXVlcnlMYXRlbmN5U3RhdHMgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicXVlcnlMYXRlbmN5U3RhdHNcIikpXG4gICAgICAgICAgICBvYmplY3QucXVlcnlMYXRlbmN5U3RhdHMgPSAkcm9vdC5RdWVyeUxhdGVuY3lTdGF0cy50b09iamVjdChtZXNzYWdlLnF1ZXJ5TGF0ZW5jeVN0YXRzLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuY29udGV4dCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJjb250ZXh0XCIpKVxuICAgICAgICAgICAgb2JqZWN0LmNvbnRleHQgPSAkcm9vdC5TdGF0c0NvbnRleHQudG9PYmplY3QobWVzc2FnZS5jb250ZXh0LCBvcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhpcyBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzIHRvIEpTT04uXG4gICAgICogQGZ1bmN0aW9uIHRvSlNPTlxuICAgICAqIEBtZW1iZXJvZiBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAqL1xuICAgIENvbnRleHR1YWxpemVkUXVlcnlMYXRlbmN5U3RhdHMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb250ZXh0dWFsaXplZFF1ZXJ5TGF0ZW5jeVN0YXRzO1xufSkoKTtcblxuJHJvb3QuQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMuXG4gICAgICogQGV4cG9ydHMgSUNvbnRleHR1YWxpemVkVHlwZVN0YXRzXG4gICAgICogQGludGVyZmFjZSBJQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHNcbiAgICAgKiBAcHJvcGVydHkge0lTdGF0c0NvbnRleHR8bnVsbH0gW2NvbnRleHRdIENvbnRleHR1YWxpemVkVHlwZVN0YXRzIGNvbnRleHRcbiAgICAgKiBAcHJvcGVydHkge09iamVjdC48c3RyaW5nLElUeXBlU3RhdD58bnVsbH0gW3BlclR5cGVTdGF0XSBDb250ZXh0dWFsaXplZFR5cGVTdGF0cyBwZXJUeXBlU3RhdFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBDb250ZXh0dWFsaXplZFR5cGVTdGF0cy5cbiAgICAgKiBAZXhwb3J0cyBDb250ZXh0dWFsaXplZFR5cGVTdGF0c1xuICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIENvbnRleHR1YWxpemVkVHlwZVN0YXRzLlxuICAgICAqIEBpbXBsZW1lbnRzIElDb250ZXh0dWFsaXplZFR5cGVTdGF0c1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7SUNvbnRleHR1YWxpemVkVHlwZVN0YXRzPX0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICovXG4gICAgZnVuY3Rpb24gQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMocHJvcGVydGllcykge1xuICAgICAgICB0aGlzLnBlclR5cGVTdGF0ID0ge307XG4gICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNba2V5c1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgdGhpc1trZXlzW2ldXSA9IHByb3BlcnRpZXNba2V5c1tpXV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMgY29udGV4dC5cbiAgICAgKiBAbWVtYmVyIHtJU3RhdHNDb250ZXh0fG51bGx8dW5kZWZpbmVkfSBjb250ZXh0XG4gICAgICogQG1lbWJlcm9mIENvbnRleHR1YWxpemVkVHlwZVN0YXRzXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMucHJvdG90eXBlLmNvbnRleHQgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMgcGVyVHlwZVN0YXQuXG4gICAgICogQG1lbWJlciB7T2JqZWN0LjxzdHJpbmcsSVR5cGVTdGF0Pn0gcGVyVHlwZVN0YXRcbiAgICAgKiBAbWVtYmVyb2YgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHNcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBDb250ZXh0dWFsaXplZFR5cGVTdGF0cy5wcm90b3R5cGUucGVyVHlwZVN0YXQgPSAkdXRpbC5lbXB0eU9iamVjdDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAqIEBmdW5jdGlvbiBjcmVhdGVcbiAgICAgKiBAbWVtYmVyb2YgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHM9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgKiBAcmV0dXJucyB7Q29udGV4dHVhbGl6ZWRUeXBlU3RhdHN9IENvbnRleHR1YWxpemVkVHlwZVN0YXRzIGluc3RhbmNlXG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250ZXh0dWFsaXplZFR5cGVTdGF0cyhwcm9wZXJ0aWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIENvbnRleHR1YWxpemVkVHlwZVN0YXRzIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIENvbnRleHR1YWxpemVkVHlwZVN0YXRzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgKiBAbWVtYmVyb2YgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHN9IG1lc3NhZ2UgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAqL1xuICAgIENvbnRleHR1YWxpemVkVHlwZVN0YXRzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgaWYgKCF3cml0ZXIpXG4gICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICBpZiAobWVzc2FnZS5jb250ZXh0ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJjb250ZXh0XCIpKVxuICAgICAgICAgICAgJHJvb3QuU3RhdHNDb250ZXh0LmVuY29kZShtZXNzYWdlLmNvbnRleHQsIHdyaXRlci51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMiA9Ki8xMCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UucGVyVHlwZVN0YXQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInBlclR5cGVTdGF0XCIpKVxuICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKG1lc3NhZ2UucGVyVHlwZVN0YXQpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDIsIHdpcmVUeXBlIDIgPSovMTgpLmZvcmsoKS51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMiA9Ki8xMCkuc3RyaW5nKGtleXNbaV0pO1xuICAgICAgICAgICAgICAgICRyb290LlR5cGVTdGF0LmVuY29kZShtZXNzYWdlLnBlclR5cGVTdGF0W2tleXNbaV1dLCB3cml0ZXIudWludDMyKC8qIGlkIDIsIHdpcmVUeXBlIDIgPSovMTgpLmZvcmsoKSkubGRlbGltKCkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBDb250ZXh0dWFsaXplZFR5cGVTdGF0cyBtZXNzYWdlLCBsZW5ndGggZGVsaW1pdGVkLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBDb250ZXh0dWFsaXplZFR5cGVTdGF0cy52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgKiBAZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkXG4gICAgICogQG1lbWJlcm9mIENvbnRleHR1YWxpemVkVHlwZVN0YXRzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SUNvbnRleHR1YWxpemVkVHlwZVN0YXRzfSBtZXNzYWdlIENvbnRleHR1YWxpemVkVHlwZVN0YXRzIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgKi9cbiAgICBDb250ZXh0dWFsaXplZFR5cGVTdGF0cy5lbmNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuY29kZShtZXNzYWdlLCB3cml0ZXIpLmxkZWxpbSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGEgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgKiBAZnVuY3Rpb24gZGVjb2RlXG4gICAgICogQG1lbWJlcm9mIENvbnRleHR1YWxpemVkVHlwZVN0YXRzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICogQHJldHVybnMge0NvbnRleHR1YWxpemVkVHlwZVN0YXRzfSBDb250ZXh0dWFsaXplZFR5cGVTdGF0c1xuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHJlYWRlciwgbGVuZ3RoKSB7XG4gICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgcmVhZGVyID0gJFJlYWRlci5jcmVhdGUocmVhZGVyKTtcbiAgICAgICAgdmFyIGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGgsIG1lc3NhZ2UgPSBuZXcgJHJvb3QuQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMoKSwga2V5O1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgdmFyIHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5jb250ZXh0ID0gJHJvb3QuU3RhdHNDb250ZXh0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmVhZGVyLnNraXAoKS5wb3MrKztcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5wZXJUeXBlU3RhdCA9PT0gJHV0aWwuZW1wdHlPYmplY3QpXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UucGVyVHlwZVN0YXQgPSB7fTtcbiAgICAgICAgICAgICAgICBrZXkgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnBvcysrO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UucGVyVHlwZVN0YXRba2V5XSA9ICRyb290LlR5cGVTdGF0LmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIENvbnRleHR1YWxpemVkVHlwZVN0YXRzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIsIGxlbmd0aCBkZWxpbWl0ZWQuXG4gICAgICogQGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZFxuICAgICAqIEBtZW1iZXJvZiBDb250ZXh0dWFsaXplZFR5cGVTdGF0c1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcmV0dXJucyB7Q29udGV4dHVhbGl6ZWRUeXBlU3RhdHN9IENvbnRleHR1YWxpemVkVHlwZVN0YXRzXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgKi9cbiAgICBDb250ZXh0dWFsaXplZFR5cGVTdGF0cy5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgcmVhZGVyID0gbmV3ICRSZWFkZXIocmVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgYSBDb250ZXh0dWFsaXplZFR5cGVTdGF0cyBtZXNzYWdlLlxuICAgICAqIEBmdW5jdGlvbiB2ZXJpZnlcbiAgICAgKiBAbWVtYmVyb2YgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgKi9cbiAgICBDb250ZXh0dWFsaXplZFR5cGVTdGF0cy52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSkge1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5jb250ZXh0ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImNvbnRleHRcIikpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9ICRyb290LlN0YXRzQ29udGV4dC52ZXJpZnkobWVzc2FnZS5jb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250ZXh0LlwiICsgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucGVyVHlwZVN0YXQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicGVyVHlwZVN0YXRcIikpIHtcbiAgICAgICAgICAgIGlmICghJHV0aWwuaXNPYmplY3QobWVzc2FnZS5wZXJUeXBlU3RhdCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicGVyVHlwZVN0YXQ6IG9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICAgICAgdmFyIGtleSA9IE9iamVjdC5rZXlzKG1lc3NhZ2UucGVyVHlwZVN0YXQpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UeXBlU3RhdC52ZXJpZnkobWVzc2FnZS5wZXJUeXBlU3RhdFtrZXlbaV1dKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcInBlclR5cGVTdGF0LlwiICsgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIENvbnRleHR1YWxpemVkVHlwZVN0YXRzIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgKiBAbWVtYmVyb2YgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtDb250ZXh0dWFsaXplZFR5cGVTdGF0c30gbWVzc2FnZSBDb250ZXh0dWFsaXplZFR5cGVTdGF0c1xuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5vYmplY3RzIHx8IG9wdGlvbnMuZGVmYXVsdHMpXG4gICAgICAgICAgICBvYmplY3QucGVyVHlwZVN0YXQgPSB7fTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGVmYXVsdHMpXG4gICAgICAgICAgICBvYmplY3QuY29udGV4dCA9IG51bGw7XG4gICAgICAgIGlmIChtZXNzYWdlLmNvbnRleHQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiY29udGV4dFwiKSlcbiAgICAgICAgICAgIG9iamVjdC5jb250ZXh0ID0gJHJvb3QuU3RhdHNDb250ZXh0LnRvT2JqZWN0KG1lc3NhZ2UuY29udGV4dCwgb3B0aW9ucyk7XG4gICAgICAgIHZhciBrZXlzMjtcbiAgICAgICAgaWYgKG1lc3NhZ2UucGVyVHlwZVN0YXQgJiYgKGtleXMyID0gT2JqZWN0LmtleXMobWVzc2FnZS5wZXJUeXBlU3RhdCkpLmxlbmd0aCkge1xuICAgICAgICAgICAgb2JqZWN0LnBlclR5cGVTdGF0ID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMyLmxlbmd0aDsgKytqKVxuICAgICAgICAgICAgICAgIG9iamVjdC5wZXJUeXBlU3RhdFtrZXlzMltqXV0gPSAkcm9vdC5UeXBlU3RhdC50b09iamVjdChtZXNzYWdlLnBlclR5cGVTdGF0W2tleXMyW2pdXSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhpcyBDb250ZXh0dWFsaXplZFR5cGVTdGF0cyB0byBKU09OLlxuICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgKiBAbWVtYmVyb2YgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHNcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRUeXBlU3RhdHMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb250ZXh0dWFsaXplZFR5cGVTdGF0cztcbn0pKCk7XG5cbiRyb290LkZpZWxkU3RhdCA9IChmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIFByb3BlcnRpZXMgb2YgYSBGaWVsZFN0YXQuXG4gICAgICogQGV4cG9ydHMgSUZpZWxkU3RhdFxuICAgICAqIEBpbnRlcmZhY2UgSUZpZWxkU3RhdFxuICAgICAqIEBwcm9wZXJ0eSB7c3RyaW5nfG51bGx9IFtyZXR1cm5UeXBlXSBGaWVsZFN0YXQgcmV0dXJuVHlwZVxuICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtlcnJvcnNDb3VudF0gRmllbGRTdGF0IGVycm9yc0NvdW50XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW29ic2VydmVkRXhlY3V0aW9uQ291bnRdIEZpZWxkU3RhdCBvYnNlcnZlZEV4ZWN1dGlvbkNvdW50XG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW2VzdGltYXRlZEV4ZWN1dGlvbkNvdW50XSBGaWVsZFN0YXQgZXN0aW1hdGVkRXhlY3V0aW9uQ291bnRcbiAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbcmVxdWVzdHNXaXRoRXJyb3JzQ291bnRdIEZpZWxkU3RhdCByZXF1ZXN0c1dpdGhFcnJvcnNDb3VudFxuICAgICAqIEBwcm9wZXJ0eSB7JHByb3RvYnVmLlRvQXJyYXkuPG51bWJlcj58QXJyYXkuPG51bWJlcj58bnVsbH0gW2xhdGVuY3lDb3VudF0gRmllbGRTdGF0IGxhdGVuY3lDb3VudFxuICAgICAqL1xuXG4gICAgLyoqXG4gICAgICogQ29uc3RydWN0cyBhIG5ldyBGaWVsZFN0YXQuXG4gICAgICogQGV4cG9ydHMgRmllbGRTdGF0XG4gICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgRmllbGRTdGF0LlxuICAgICAqIEBpbXBsZW1lbnRzIElGaWVsZFN0YXRcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0lGaWVsZFN0YXQ9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBGaWVsZFN0YXQocHJvcGVydGllcykge1xuICAgICAgICB0aGlzLmxhdGVuY3lDb3VudCA9IFtdO1xuICAgICAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW2tleXNbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5c1tpXV0gPSBwcm9wZXJ0aWVzW2tleXNbaV1dO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEZpZWxkU3RhdCByZXR1cm5UeXBlLlxuICAgICAqIEBtZW1iZXIge3N0cmluZ30gcmV0dXJuVHlwZVxuICAgICAqIEBtZW1iZXJvZiBGaWVsZFN0YXRcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBGaWVsZFN0YXQucHJvdG90eXBlLnJldHVyblR5cGUgPSBcIlwiO1xuXG4gICAgLyoqXG4gICAgICogRmllbGRTdGF0IGVycm9yc0NvdW50LlxuICAgICAqIEBtZW1iZXIge251bWJlcn0gZXJyb3JzQ291bnRcbiAgICAgKiBAbWVtYmVyb2YgRmllbGRTdGF0XG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgRmllbGRTdGF0LnByb3RvdHlwZS5lcnJvcnNDb3VudCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBGaWVsZFN0YXQgb2JzZXJ2ZWRFeGVjdXRpb25Db3VudC5cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IG9ic2VydmVkRXhlY3V0aW9uQ291bnRcbiAgICAgKiBAbWVtYmVyb2YgRmllbGRTdGF0XG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgRmllbGRTdGF0LnByb3RvdHlwZS5vYnNlcnZlZEV4ZWN1dGlvbkNvdW50ID0gMDtcblxuICAgIC8qKlxuICAgICAqIEZpZWxkU3RhdCBlc3RpbWF0ZWRFeGVjdXRpb25Db3VudC5cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IGVzdGltYXRlZEV4ZWN1dGlvbkNvdW50XG4gICAgICogQG1lbWJlcm9mIEZpZWxkU3RhdFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIEZpZWxkU3RhdC5wcm90b3R5cGUuZXN0aW1hdGVkRXhlY3V0aW9uQ291bnQgPSAwO1xuXG4gICAgLyoqXG4gICAgICogRmllbGRTdGF0IHJlcXVlc3RzV2l0aEVycm9yc0NvdW50LlxuICAgICAqIEBtZW1iZXIge251bWJlcn0gcmVxdWVzdHNXaXRoRXJyb3JzQ291bnRcbiAgICAgKiBAbWVtYmVyb2YgRmllbGRTdGF0XG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgRmllbGRTdGF0LnByb3RvdHlwZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCA9IDA7XG5cbiAgICAvKipcbiAgICAgKiBGaWVsZFN0YXQgbGF0ZW5jeUNvdW50LlxuICAgICAqIEBtZW1iZXIge0FycmF5LjxudW1iZXI+fSBsYXRlbmN5Q291bnRcbiAgICAgKiBAbWVtYmVyb2YgRmllbGRTdGF0XG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgRmllbGRTdGF0LnByb3RvdHlwZS5sYXRlbmN5Q291bnQgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBGaWVsZFN0YXQgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAqIEBmdW5jdGlvbiBjcmVhdGVcbiAgICAgKiBAbWVtYmVyb2YgRmllbGRTdGF0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SUZpZWxkU3RhdD19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAqIEByZXR1cm5zIHtGaWVsZFN0YXR9IEZpZWxkU3RhdCBpbnN0YW5jZVxuICAgICAqL1xuICAgIEZpZWxkU3RhdC5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgICAgICByZXR1cm4gbmV3IEZpZWxkU3RhdChwcm9wZXJ0aWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIEZpZWxkU3RhdCBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBGaWVsZFN0YXQudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAqIEBtZW1iZXJvZiBGaWVsZFN0YXRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJRmllbGRTdGF0fSBtZXNzYWdlIEZpZWxkU3RhdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICovXG4gICAgRmllbGRTdGF0LmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgaWYgKCF3cml0ZXIpXG4gICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICBpZiAobWVzc2FnZS5yZXR1cm5UeXBlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJyZXR1cm5UeXBlXCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAzLCB3aXJlVHlwZSAyID0qLzI2KS5zdHJpbmcobWVzc2FnZS5yZXR1cm5UeXBlKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZXJyb3JzQ291bnQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImVycm9yc0NvdW50XCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCA0LCB3aXJlVHlwZSAwID0qLzMyKS51aW50NjQobWVzc2FnZS5lcnJvcnNDb3VudCk7XG4gICAgICAgIGlmIChtZXNzYWdlLm9ic2VydmVkRXhlY3V0aW9uQ291bnQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcIm9ic2VydmVkRXhlY3V0aW9uQ291bnRcIikpXG4gICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDUsIHdpcmVUeXBlIDAgPSovNDApLnVpbnQ2NChtZXNzYWdlLm9ic2VydmVkRXhlY3V0aW9uQ291bnQpO1xuICAgICAgICBpZiAobWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwicmVxdWVzdHNXaXRoRXJyb3JzQ291bnRcIikpXG4gICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDYsIHdpcmVUeXBlIDAgPSovNDgpLnVpbnQ2NChtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50KTtcbiAgICAgICAgdmFyIGFycmF5OTtcbiAgICAgICAgaWYgKG1lc3NhZ2UubGF0ZW5jeUNvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5sYXRlbmN5Q291bnQudG9BcnJheSlcbiAgICAgICAgICAgIGFycmF5OSA9IG1lc3NhZ2UubGF0ZW5jeUNvdW50LnRvQXJyYXkoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgYXJyYXk5ID0gbWVzc2FnZS5sYXRlbmN5Q291bnQ7XG4gICAgICAgIGlmIChhcnJheTkgIT0gbnVsbCAmJiBhcnJheTkubGVuZ3RoKSB7XG4gICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDksIHdpcmVUeXBlIDIgPSovNzQpLmZvcmsoKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXk5Lmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIHdyaXRlci5zaW50NjQoYXJyYXk5W2ldKTtcbiAgICAgICAgICAgIHdyaXRlci5sZGVsaW0oKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lc3RpbWF0ZWRFeGVjdXRpb25Db3VudCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwiZXN0aW1hdGVkRXhlY3V0aW9uQ291bnRcIikpXG4gICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDEwLCB3aXJlVHlwZSAwID0qLzgwKS51aW50NjQobWVzc2FnZS5lc3RpbWF0ZWRFeGVjdXRpb25Db3VudCk7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBGaWVsZFN0YXQgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgRmllbGRTdGF0LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAqIEBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWRcbiAgICAgKiBAbWVtYmVyb2YgRmllbGRTdGF0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SUZpZWxkU3RhdH0gbWVzc2FnZSBGaWVsZFN0YXQgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAqL1xuICAgIEZpZWxkU3RhdC5lbmNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuY29kZShtZXNzYWdlLCB3cml0ZXIpLmxkZWxpbSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGEgRmllbGRTdGF0IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAqIEBtZW1iZXJvZiBGaWVsZFN0YXRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgKiBAcmV0dXJucyB7RmllbGRTdGF0fSBGaWVsZFN0YXRcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIEZpZWxkU3RhdC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUocmVhZGVyLCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICByZWFkZXIgPSAkUmVhZGVyLmNyZWF0ZShyZWFkZXIpO1xuICAgICAgICB2YXIgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aCwgbWVzc2FnZSA9IG5ldyAkcm9vdC5GaWVsZFN0YXQoKTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIHZhciB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIG1lc3NhZ2UucmV0dXJuVHlwZSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmVycm9yc0NvdW50ID0gcmVhZGVyLnVpbnQ2NCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA1OlxuICAgICAgICAgICAgICAgIG1lc3NhZ2Uub2JzZXJ2ZWRFeGVjdXRpb25Db3VudCA9IHJlYWRlci51aW50NjQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMTA6XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5lc3RpbWF0ZWRFeGVjdXRpb25Db3VudCA9IHJlYWRlci51aW50NjQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNjpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50ID0gcmVhZGVyLnVpbnQ2NCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgIGlmICghKG1lc3NhZ2UubGF0ZW5jeUNvdW50ICYmIG1lc3NhZ2UubGF0ZW5jeUNvdW50Lmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubGF0ZW5jeUNvdW50ID0gW107XG4gICAgICAgICAgICAgICAgaWYgKCh0YWcgJiA3KSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZW5kMiA9IHJlYWRlci51aW50MzIoKSArIHJlYWRlci5wb3M7XG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kMilcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UubGF0ZW5jeUNvdW50LnB1c2gocmVhZGVyLnNpbnQ2NCgpKTtcbiAgICAgICAgICAgICAgICB9IGVsc2VcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5sYXRlbmN5Q291bnQucHVzaChyZWFkZXIuc2ludDY0KCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYSBGaWVsZFN0YXQgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgKiBAZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkXG4gICAgICogQG1lbWJlcm9mIEZpZWxkU3RhdFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcmV0dXJucyB7RmllbGRTdGF0fSBGaWVsZFN0YXRcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIEZpZWxkU3RhdC5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgcmVhZGVyID0gbmV3ICRSZWFkZXIocmVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgYSBGaWVsZFN0YXQgbWVzc2FnZS5cbiAgICAgKiBAZnVuY3Rpb24gdmVyaWZ5XG4gICAgICogQG1lbWJlcm9mIEZpZWxkU3RhdFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAqL1xuICAgIEZpZWxkU3RhdC52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSkge1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5yZXR1cm5UeXBlICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInJldHVyblR5cGVcIikpXG4gICAgICAgICAgICBpZiAoISR1dGlsLmlzU3RyaW5nKG1lc3NhZ2UucmV0dXJuVHlwZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicmV0dXJuVHlwZTogc3RyaW5nIGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLmVycm9yc0NvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImVycm9yc0NvdW50XCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5lcnJvcnNDb3VudCkgJiYgIShtZXNzYWdlLmVycm9yc0NvdW50ICYmICR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLmVycm9yc0NvdW50LmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UuZXJyb3JzQ291bnQuaGlnaCkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImVycm9yc0NvdW50OiBpbnRlZ2VyfExvbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgaWYgKG1lc3NhZ2Uub2JzZXJ2ZWRFeGVjdXRpb25Db3VudCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJvYnNlcnZlZEV4ZWN1dGlvbkNvdW50XCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5vYnNlcnZlZEV4ZWN1dGlvbkNvdW50KSAmJiAhKG1lc3NhZ2Uub2JzZXJ2ZWRFeGVjdXRpb25Db3VudCAmJiAkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5vYnNlcnZlZEV4ZWN1dGlvbkNvdW50LmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2Uub2JzZXJ2ZWRFeGVjdXRpb25Db3VudC5oaWdoKSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwib2JzZXJ2ZWRFeGVjdXRpb25Db3VudDogaW50ZWdlcnxMb25nIGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLmVzdGltYXRlZEV4ZWN1dGlvbkNvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImVzdGltYXRlZEV4ZWN1dGlvbkNvdW50XCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5lc3RpbWF0ZWRFeGVjdXRpb25Db3VudCkgJiYgIShtZXNzYWdlLmVzdGltYXRlZEV4ZWN1dGlvbkNvdW50ICYmICR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLmVzdGltYXRlZEV4ZWN1dGlvbkNvdW50LmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UuZXN0aW1hdGVkRXhlY3V0aW9uQ291bnQuaGlnaCkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImVzdGltYXRlZEV4ZWN1dGlvbkNvdW50OiBpbnRlZ2VyfExvbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgaWYgKG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicmVxdWVzdHNXaXRoRXJyb3JzQ291bnRcIikpXG4gICAgICAgICAgICBpZiAoISR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50KSAmJiAhKG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQubG93KSAmJiAkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudC5oaWdoKSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicmVxdWVzdHNXaXRoRXJyb3JzQ291bnQ6IGludGVnZXJ8TG9uZyBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5sYXRlbmN5Q291bnQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwibGF0ZW5jeUNvdW50XCIpKSB7XG4gICAgICAgICAgICB2YXIgYXJyYXk5O1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UubGF0ZW5jeUNvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5sYXRlbmN5Q291bnQudG9BcnJheSlcbiAgICAgICAgICAgICAgICBhcnJheTkgPSBtZXNzYWdlLmxhdGVuY3lDb3VudC50b0FycmF5KCk7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgYXJyYXk5ID0gbWVzc2FnZS5sYXRlbmN5Q291bnQ7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXk5KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJsYXRlbmN5Q291bnQ6IGFycmF5IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5OS5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzSW50ZWdlcihhcnJheTlbaV0pICYmICEoYXJyYXk5W2ldICYmICR1dGlsLmlzSW50ZWdlcihhcnJheTlbaV0ubG93KSAmJiAkdXRpbC5pc0ludGVnZXIoYXJyYXk5W2ldLmhpZ2gpKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwibGF0ZW5jeUNvdW50OiBpbnRlZ2VyfExvbmdbXSBleHBlY3RlZFwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBGaWVsZFN0YXQgbWVzc2FnZS4gQWxzbyBjb252ZXJ0cyB2YWx1ZXMgdG8gb3RoZXIgdHlwZXMgaWYgc3BlY2lmaWVkLlxuICAgICAqIEBmdW5jdGlvbiB0b09iamVjdFxuICAgICAqIEBtZW1iZXJvZiBGaWVsZFN0YXRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtGaWVsZFN0YXR9IG1lc3NhZ2UgRmllbGRTdGF0XG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuSUNvbnZlcnNpb25PcHRpb25zfSBbb3B0aW9uc10gQ29udmVyc2lvbiBvcHRpb25zXG4gICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBQbGFpbiBvYmplY3RcbiAgICAgKi9cbiAgICBGaWVsZFN0YXQudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5hcnJheXMgfHwgb3B0aW9ucy5kZWZhdWx0cylcbiAgICAgICAgICAgIG9iamVjdC5sYXRlbmN5Q291bnQgPSBbXTtcbiAgICAgICAgaWYgKG9wdGlvbnMuZGVmYXVsdHMpIHtcbiAgICAgICAgICAgIG9iamVjdC5yZXR1cm5UeXBlID0gXCJcIjtcbiAgICAgICAgICAgIG9iamVjdC5lcnJvcnNDb3VudCA9IDA7XG4gICAgICAgICAgICBvYmplY3Qub2JzZXJ2ZWRFeGVjdXRpb25Db3VudCA9IDA7XG4gICAgICAgICAgICBvYmplY3QucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQgPSAwO1xuICAgICAgICAgICAgb2JqZWN0LmVzdGltYXRlZEV4ZWN1dGlvbkNvdW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5yZXR1cm5UeXBlICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInJldHVyblR5cGVcIikpXG4gICAgICAgICAgICBvYmplY3QucmV0dXJuVHlwZSA9IG1lc3NhZ2UucmV0dXJuVHlwZTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuZXJyb3JzQ291bnQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZXJyb3JzQ291bnRcIikpXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UuZXJyb3JzQ291bnQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgb2JqZWN0LmVycm9yc0NvdW50ID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gU3RyaW5nKG1lc3NhZ2UuZXJyb3JzQ291bnQpIDogbWVzc2FnZS5lcnJvcnNDb3VudDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvYmplY3QuZXJyb3JzQ291bnQgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1lc3NhZ2UuZXJyb3JzQ291bnQpIDogb3B0aW9ucy5sb25ncyA9PT0gTnVtYmVyID8gbmV3ICR1dGlsLkxvbmdCaXRzKG1lc3NhZ2UuZXJyb3JzQ291bnQubG93ID4+PiAwLCBtZXNzYWdlLmVycm9yc0NvdW50LmhpZ2ggPj4+IDApLnRvTnVtYmVyKHRydWUpIDogbWVzc2FnZS5lcnJvcnNDb3VudDtcbiAgICAgICAgaWYgKG1lc3NhZ2Uub2JzZXJ2ZWRFeGVjdXRpb25Db3VudCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJvYnNlcnZlZEV4ZWN1dGlvbkNvdW50XCIpKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLm9ic2VydmVkRXhlY3V0aW9uQ291bnQgPT09IFwibnVtYmVyXCIpXG4gICAgICAgICAgICAgICAgb2JqZWN0Lm9ic2VydmVkRXhlY3V0aW9uQ291bnQgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobWVzc2FnZS5vYnNlcnZlZEV4ZWN1dGlvbkNvdW50KSA6IG1lc3NhZ2Uub2JzZXJ2ZWRFeGVjdXRpb25Db3VudDtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBvYmplY3Qub2JzZXJ2ZWRFeGVjdXRpb25Db3VudCA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobWVzc2FnZS5vYnNlcnZlZEV4ZWN1dGlvbkNvdW50KSA6IG9wdGlvbnMubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtZXNzYWdlLm9ic2VydmVkRXhlY3V0aW9uQ291bnQubG93ID4+PiAwLCBtZXNzYWdlLm9ic2VydmVkRXhlY3V0aW9uQ291bnQuaGlnaCA+Pj4gMCkudG9OdW1iZXIodHJ1ZSkgOiBtZXNzYWdlLm9ic2VydmVkRXhlY3V0aW9uQ291bnQ7XG4gICAgICAgIGlmIChtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInJlcXVlc3RzV2l0aEVycm9yc0NvdW50XCIpKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50ID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIG9iamVjdC5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudCA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50KSA6IG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgb2JqZWN0LnJlcXVlc3RzV2l0aEVycm9yc0NvdW50ID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50KSA6IG9wdGlvbnMubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtZXNzYWdlLnJlcXVlc3RzV2l0aEVycm9yc0NvdW50LmxvdyA+Pj4gMCwgbWVzc2FnZS5yZXF1ZXN0c1dpdGhFcnJvcnNDb3VudC5oaWdoID4+PiAwKS50b051bWJlcih0cnVlKSA6IG1lc3NhZ2UucmVxdWVzdHNXaXRoRXJyb3JzQ291bnQ7XG4gICAgICAgIGlmIChtZXNzYWdlLmxhdGVuY3lDb3VudCAmJiBtZXNzYWdlLmxhdGVuY3lDb3VudC5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9iamVjdC5sYXRlbmN5Q291bnQgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWVzc2FnZS5sYXRlbmN5Q291bnQubGVuZ3RoOyArK2opXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLmxhdGVuY3lDb3VudFtqXSA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LmxhdGVuY3lDb3VudFtqXSA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtZXNzYWdlLmxhdGVuY3lDb3VudFtqXSkgOiBtZXNzYWdlLmxhdGVuY3lDb3VudFtqXTtcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5sYXRlbmN5Q291bnRbal0gPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1lc3NhZ2UubGF0ZW5jeUNvdW50W2pdKSA6IG9wdGlvbnMubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtZXNzYWdlLmxhdGVuY3lDb3VudFtqXS5sb3cgPj4+IDAsIG1lc3NhZ2UubGF0ZW5jeUNvdW50W2pdLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtZXNzYWdlLmxhdGVuY3lDb3VudFtqXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lc3RpbWF0ZWRFeGVjdXRpb25Db3VudCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJlc3RpbWF0ZWRFeGVjdXRpb25Db3VudFwiKSlcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5lc3RpbWF0ZWRFeGVjdXRpb25Db3VudCA9PT0gXCJudW1iZXJcIilcbiAgICAgICAgICAgICAgICBvYmplY3QuZXN0aW1hdGVkRXhlY3V0aW9uQ291bnQgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobWVzc2FnZS5lc3RpbWF0ZWRFeGVjdXRpb25Db3VudCkgOiBtZXNzYWdlLmVzdGltYXRlZEV4ZWN1dGlvbkNvdW50O1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIG9iamVjdC5lc3RpbWF0ZWRFeGVjdXRpb25Db3VudCA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/ICR1dGlsLkxvbmcucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobWVzc2FnZS5lc3RpbWF0ZWRFeGVjdXRpb25Db3VudCkgOiBvcHRpb25zLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobWVzc2FnZS5lc3RpbWF0ZWRFeGVjdXRpb25Db3VudC5sb3cgPj4+IDAsIG1lc3NhZ2UuZXN0aW1hdGVkRXhlY3V0aW9uQ291bnQuaGlnaCA+Pj4gMCkudG9OdW1iZXIodHJ1ZSkgOiBtZXNzYWdlLmVzdGltYXRlZEV4ZWN1dGlvbkNvdW50O1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGlzIEZpZWxkU3RhdCB0byBKU09OLlxuICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgKiBAbWVtYmVyb2YgRmllbGRTdGF0XG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAqL1xuICAgIEZpZWxkU3RhdC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIEZpZWxkU3RhdDtcbn0pKCk7XG5cbiRyb290LlR5cGVTdGF0ID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIFR5cGVTdGF0LlxuICAgICAqIEBleHBvcnRzIElUeXBlU3RhdFxuICAgICAqIEBpbnRlcmZhY2UgSVR5cGVTdGF0XG4gICAgICogQHByb3BlcnR5IHtPYmplY3QuPHN0cmluZyxJRmllbGRTdGF0PnxudWxsfSBbcGVyRmllbGRTdGF0XSBUeXBlU3RhdCBwZXJGaWVsZFN0YXRcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgVHlwZVN0YXQuXG4gICAgICogQGV4cG9ydHMgVHlwZVN0YXRcbiAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBUeXBlU3RhdC5cbiAgICAgKiBAaW1wbGVtZW50cyBJVHlwZVN0YXRcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0lUeXBlU3RhdD19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFR5cGVTdGF0KHByb3BlcnRpZXMpIHtcbiAgICAgICAgdGhpcy5wZXJGaWVsZFN0YXQgPSB7fTtcbiAgICAgICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllc1trZXlzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUeXBlU3RhdCBwZXJGaWVsZFN0YXQuXG4gICAgICogQG1lbWJlciB7T2JqZWN0LjxzdHJpbmcsSUZpZWxkU3RhdD59IHBlckZpZWxkU3RhdFxuICAgICAqIEBtZW1iZXJvZiBUeXBlU3RhdFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFR5cGVTdGF0LnByb3RvdHlwZS5wZXJGaWVsZFN0YXQgPSAkdXRpbC5lbXB0eU9iamVjdDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgVHlwZVN0YXQgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAqIEBmdW5jdGlvbiBjcmVhdGVcbiAgICAgKiBAbWVtYmVyb2YgVHlwZVN0YXRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJVHlwZVN0YXQ9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgKiBAcmV0dXJucyB7VHlwZVN0YXR9IFR5cGVTdGF0IGluc3RhbmNlXG4gICAgICovXG4gICAgVHlwZVN0YXQuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUeXBlU3RhdChwcm9wZXJ0aWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFR5cGVTdGF0IG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFR5cGVTdGF0LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgKiBAbWVtYmVyb2YgVHlwZVN0YXRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJVHlwZVN0YXR9IG1lc3NhZ2UgVHlwZVN0YXQgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAqL1xuICAgIFR5cGVTdGF0LmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgaWYgKCF3cml0ZXIpXG4gICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICBpZiAobWVzc2FnZS5wZXJGaWVsZFN0YXQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInBlckZpZWxkU3RhdFwiKSlcbiAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhtZXNzYWdlLnBlckZpZWxkU3RhdCksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMywgd2lyZVR5cGUgMiA9Ki8yNikuZm9yaygpLnVpbnQzMigvKiBpZCAxLCB3aXJlVHlwZSAyID0qLzEwKS5zdHJpbmcoa2V5c1tpXSk7XG4gICAgICAgICAgICAgICAgJHJvb3QuRmllbGRTdGF0LmVuY29kZShtZXNzYWdlLnBlckZpZWxkU3RhdFtrZXlzW2ldXSwgd3JpdGVyLnVpbnQzMigvKiBpZCAyLCB3aXJlVHlwZSAyID0qLzE4KS5mb3JrKCkpLmxkZWxpbSgpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgVHlwZVN0YXQgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHlwZVN0YXQudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICogQGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZFxuICAgICAqIEBtZW1iZXJvZiBUeXBlU3RhdFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0lUeXBlU3RhdH0gbWVzc2FnZSBUeXBlU3RhdCBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICovXG4gICAgVHlwZVN0YXQuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGUobWVzc2FnZSwgd3JpdGVyKS5sZGVsaW0oKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIFR5cGVTdGF0IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAqIEBtZW1iZXJvZiBUeXBlU3RhdFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAqIEByZXR1cm5zIHtUeXBlU3RhdH0gVHlwZVN0YXRcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIFR5cGVTdGF0LmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgIHJlYWRlciA9ICRSZWFkZXIuY3JlYXRlKHJlYWRlcik7XG4gICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LlR5cGVTdGF0KCksIGtleTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIHZhciB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIHJlYWRlci5za2lwKCkucG9zKys7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UucGVyRmllbGRTdGF0ID09PSAkdXRpbC5lbXB0eU9iamVjdClcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wZXJGaWVsZFN0YXQgPSB7fTtcbiAgICAgICAgICAgICAgICBrZXkgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnBvcysrO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UucGVyRmllbGRTdGF0W2tleV0gPSAkcm9vdC5GaWVsZFN0YXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGEgVHlwZVN0YXQgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgKiBAZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkXG4gICAgICogQG1lbWJlcm9mIFR5cGVTdGF0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAqIEByZXR1cm5zIHtUeXBlU3RhdH0gVHlwZVN0YXRcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIFR5cGVTdGF0LmRlY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZChyZWFkZXIpIHtcbiAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICByZWFkZXIgPSBuZXcgJFJlYWRlcihyZWFkZXIpO1xuICAgICAgICByZXR1cm4gdGhpcy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBWZXJpZmllcyBhIFR5cGVTdGF0IG1lc3NhZ2UuXG4gICAgICogQGZ1bmN0aW9uIHZlcmlmeVxuICAgICAqIEBtZW1iZXJvZiBUeXBlU3RhdFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAqL1xuICAgIFR5cGVTdGF0LnZlcmlmeSA9IGZ1bmN0aW9uIHZlcmlmeShtZXNzYWdlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZSAhPT0gXCJvYmplY3RcIiB8fCBtZXNzYWdlID09PSBudWxsKVxuICAgICAgICAgICAgcmV0dXJuIFwib2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgIGlmIChtZXNzYWdlLnBlckZpZWxkU3RhdCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJwZXJGaWVsZFN0YXRcIikpIHtcbiAgICAgICAgICAgIGlmICghJHV0aWwuaXNPYmplY3QobWVzc2FnZS5wZXJGaWVsZFN0YXQpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcInBlckZpZWxkU3RhdDogb2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICB2YXIga2V5ID0gT2JqZWN0LmtleXMobWVzc2FnZS5wZXJGaWVsZFN0YXQpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXkubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5GaWVsZFN0YXQudmVyaWZ5KG1lc3NhZ2UucGVyRmllbGRTdGF0W2tleVtpXV0pO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwicGVyRmllbGRTdGF0LlwiICsgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFR5cGVTdGF0IG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgKiBAbWVtYmVyb2YgVHlwZVN0YXRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtUeXBlU3RhdH0gbWVzc2FnZSBUeXBlU3RhdFxuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICovXG4gICAgVHlwZVN0YXQudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5vYmplY3RzIHx8IG9wdGlvbnMuZGVmYXVsdHMpXG4gICAgICAgICAgICBvYmplY3QucGVyRmllbGRTdGF0ID0ge307XG4gICAgICAgIHZhciBrZXlzMjtcbiAgICAgICAgaWYgKG1lc3NhZ2UucGVyRmllbGRTdGF0ICYmIChrZXlzMiA9IE9iamVjdC5rZXlzKG1lc3NhZ2UucGVyRmllbGRTdGF0KSkubGVuZ3RoKSB7XG4gICAgICAgICAgICBvYmplY3QucGVyRmllbGRTdGF0ID0ge307XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGtleXMyLmxlbmd0aDsgKytqKVxuICAgICAgICAgICAgICAgIG9iamVjdC5wZXJGaWVsZFN0YXRba2V5czJbal1dID0gJHJvb3QuRmllbGRTdGF0LnRvT2JqZWN0KG1lc3NhZ2UucGVyRmllbGRTdGF0W2tleXMyW2pdXSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhpcyBUeXBlU3RhdCB0byBKU09OLlxuICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgKiBAbWVtYmVyb2YgVHlwZVN0YXRcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICovXG4gICAgVHlwZVN0YXQucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgfTtcblxuICAgIHJldHVybiBUeXBlU3RhdDtcbn0pKCk7XG5cbiRyb290LlJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlLlxuICAgICAqIEBleHBvcnRzIElSZWZlcmVuY2VkRmllbGRzRm9yVHlwZVxuICAgICAqIEBpbnRlcmZhY2UgSVJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlXG4gICAgICogQHByb3BlcnR5IHtBcnJheS48c3RyaW5nPnxudWxsfSBbZmllbGROYW1lc10gUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUgZmllbGROYW1lc1xuICAgICAqIEBwcm9wZXJ0eSB7Ym9vbGVhbnxudWxsfSBbaXNJbnRlcmZhY2VdIFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlIGlzSW50ZXJmYWNlXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlLlxuICAgICAqIEBleHBvcnRzIFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlXG4gICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUuXG4gICAgICogQGltcGxlbWVudHMgSVJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlXG4gICAgICogQGNvbnN0cnVjdG9yXG4gICAgICogQHBhcmFtIHtJUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGU9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZShwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRoaXMuZmllbGROYW1lcyA9IFtdO1xuICAgICAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW2tleXNbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5c1tpXV0gPSBwcm9wZXJ0aWVzW2tleXNbaV1dO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlIGZpZWxkTmFtZXMuXG4gICAgICogQG1lbWJlciB7QXJyYXkuPHN0cmluZz59IGZpZWxkTmFtZXNcbiAgICAgKiBAbWVtYmVyb2YgUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGVcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZS5wcm90b3R5cGUuZmllbGROYW1lcyA9ICR1dGlsLmVtcHR5QXJyYXk7XG5cbiAgICAvKipcbiAgICAgKiBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZSBpc0ludGVyZmFjZS5cbiAgICAgKiBAbWVtYmVyIHtib29sZWFufSBpc0ludGVyZmFjZVxuICAgICAqIEBtZW1iZXJvZiBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZVxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlLnByb3RvdHlwZS5pc0ludGVyZmFjZSA9IGZhbHNlO1xuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBhIG5ldyBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZSBpbnN0YW5jZSB1c2luZyB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXG4gICAgICogQGZ1bmN0aW9uIGNyZWF0ZVxuICAgICAqIEBtZW1iZXJvZiBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0lSZWZlcmVuY2VkRmllbGRzRm9yVHlwZT19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAqIEByZXR1cm5zIHtSZWZlcmVuY2VkRmllbGRzRm9yVHlwZX0gUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgICAgICByZXR1cm4gbmV3IFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlKHByb3BlcnRpZXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICogQGZ1bmN0aW9uIGVuY29kZVxuICAgICAqIEBtZW1iZXJvZiBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0lSZWZlcmVuY2VkRmllbGRzRm9yVHlwZX0gbWVzc2FnZSBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICovXG4gICAgUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICBpZiAoIXdyaXRlcilcbiAgICAgICAgICAgIHdyaXRlciA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgIGlmIChtZXNzYWdlLmZpZWxkTmFtZXMgIT0gbnVsbCAmJiBtZXNzYWdlLmZpZWxkTmFtZXMubGVuZ3RoKVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXNzYWdlLmZpZWxkTmFtZXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAxLCB3aXJlVHlwZSAyID0qLzEwKS5zdHJpbmcobWVzc2FnZS5maWVsZE5hbWVzW2ldKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaXNJbnRlcmZhY2UgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImlzSW50ZXJmYWNlXCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCAyLCB3aXJlVHlwZSAwID0qLzE2KS5ib29sKG1lc3NhZ2UuaXNJbnRlcmZhY2UpO1xuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICogQGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZFxuICAgICAqIEBtZW1iZXJvZiBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0lSZWZlcmVuY2VkRmllbGRzRm9yVHlwZX0gbWVzc2FnZSBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZSBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICovXG4gICAgUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGUobWVzc2FnZSwgd3JpdGVyKS5sZGVsaW0oKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAqIEBtZW1iZXJvZiBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAqIEByZXR1cm5zIHtSZWZlcmVuY2VkRmllbGRzRm9yVHlwZX0gUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGVcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgIHJlYWRlciA9ICRSZWFkZXIuY3JlYXRlKHJlYWRlcik7XG4gICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LlJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlKCk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBpZiAoIShtZXNzYWdlLmZpZWxkTmFtZXMgJiYgbWVzc2FnZS5maWVsZE5hbWVzLmxlbmd0aCkpXG4gICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmllbGROYW1lcyA9IFtdO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UuZmllbGROYW1lcy5wdXNoKHJlYWRlci5zdHJpbmcoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5pc0ludGVyZmFjZSA9IHJlYWRlci5ib29sKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIsIGxlbmd0aCBkZWxpbWl0ZWQuXG4gICAgICogQGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZFxuICAgICAqIEBtZW1iZXJvZiBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZVxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcmV0dXJucyB7UmVmZXJlbmNlZEZpZWxkc0ZvclR5cGV9IFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgKi9cbiAgICBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZS5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgcmVhZGVyID0gbmV3ICRSZWFkZXIocmVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgYSBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZSBtZXNzYWdlLlxuICAgICAqIEBmdW5jdGlvbiB2ZXJpZnlcbiAgICAgKiBAbWVtYmVyb2YgUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGVcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgKi9cbiAgICBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZS52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSkge1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5maWVsZE5hbWVzICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImZpZWxkTmFtZXNcIikpIHtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShtZXNzYWdlLmZpZWxkTmFtZXMpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImZpZWxkTmFtZXM6IGFycmF5IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG1lc3NhZ2UuZmllbGROYW1lcy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzU3RyaW5nKG1lc3NhZ2UuZmllbGROYW1lc1tpXSkpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcImZpZWxkTmFtZXM6IHN0cmluZ1tdIGV4cGVjdGVkXCI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UuaXNJbnRlcmZhY2UgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiaXNJbnRlcmZhY2VcIikpXG4gICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UuaXNJbnRlcmZhY2UgIT09IFwiYm9vbGVhblwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImlzSW50ZXJmYWNlOiBib29sZWFuIGV4cGVjdGVkXCI7XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBSZWZlcmVuY2VkRmllbGRzRm9yVHlwZSBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICogQG1lbWJlcm9mIFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7UmVmZXJlbmNlZEZpZWxkc0ZvclR5cGV9IG1lc3NhZ2UgUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGVcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAqL1xuICAgIFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlLnRvT2JqZWN0ID0gZnVuY3Rpb24gdG9PYmplY3QobWVzc2FnZSwgb3B0aW9ucykge1xuICAgICAgICBpZiAoIW9wdGlvbnMpXG4gICAgICAgICAgICBvcHRpb25zID0ge307XG4gICAgICAgIHZhciBvYmplY3QgPSB7fTtcbiAgICAgICAgaWYgKG9wdGlvbnMuYXJyYXlzIHx8IG9wdGlvbnMuZGVmYXVsdHMpXG4gICAgICAgICAgICBvYmplY3QuZmllbGROYW1lcyA9IFtdO1xuICAgICAgICBpZiAob3B0aW9ucy5kZWZhdWx0cylcbiAgICAgICAgICAgIG9iamVjdC5pc0ludGVyZmFjZSA9IGZhbHNlO1xuICAgICAgICBpZiAobWVzc2FnZS5maWVsZE5hbWVzICYmIG1lc3NhZ2UuZmllbGROYW1lcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9iamVjdC5maWVsZE5hbWVzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1lc3NhZ2UuZmllbGROYW1lcy5sZW5ndGg7ICsrailcbiAgICAgICAgICAgICAgICBvYmplY3QuZmllbGROYW1lc1tqXSA9IG1lc3NhZ2UuZmllbGROYW1lc1tqXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pc0ludGVyZmFjZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJpc0ludGVyZmFjZVwiKSlcbiAgICAgICAgICAgIG9iamVjdC5pc0ludGVyZmFjZSA9IG1lc3NhZ2UuaXNJbnRlcmZhY2U7XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoaXMgUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUgdG8gSlNPTi5cbiAgICAgKiBAZnVuY3Rpb24gdG9KU09OXG4gICAgICogQG1lbWJlcm9mIFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlXG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAqL1xuICAgIFJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGU7XG59KSgpO1xuXG4kcm9vdC5SZXBvcnQgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgUmVwb3J0LlxuICAgICAqIEBleHBvcnRzIElSZXBvcnRcbiAgICAgKiBAaW50ZXJmYWNlIElSZXBvcnRcbiAgICAgKiBAcHJvcGVydHkge0lSZXBvcnRIZWFkZXJ8bnVsbH0gW2hlYWRlcl0gUmVwb3J0IGhlYWRlclxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsSVRyYWNlc0FuZFN0YXRzPnxudWxsfSBbdHJhY2VzUGVyUXVlcnldIFJlcG9ydCB0cmFjZXNQZXJRdWVyeVxuICAgICAqIEBwcm9wZXJ0eSB7Z29vZ2xlLnByb3RvYnVmLklUaW1lc3RhbXB8bnVsbH0gW2VuZFRpbWVdIFJlcG9ydCBlbmRUaW1lXG4gICAgICogQHByb3BlcnR5IHtudW1iZXJ8bnVsbH0gW29wZXJhdGlvbkNvdW50XSBSZXBvcnQgb3BlcmF0aW9uQ291bnRcbiAgICAgKiBAcHJvcGVydHkge2Jvb2xlYW58bnVsbH0gW3RyYWNlc1ByZUFnZ3JlZ2F0ZWRdIFJlcG9ydCB0cmFjZXNQcmVBZ2dyZWdhdGVkXG4gICAgICovXG5cbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFJlcG9ydC5cbiAgICAgKiBAZXhwb3J0cyBSZXBvcnRcbiAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBSZXBvcnQuXG4gICAgICogQGltcGxlbWVudHMgSVJlcG9ydFxuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7SVJlcG9ydD19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFJlcG9ydChwcm9wZXJ0aWVzKSB7XG4gICAgICAgIHRoaXMudHJhY2VzUGVyUXVlcnkgPSB7fTtcbiAgICAgICAgaWYgKHByb3BlcnRpZXMpXG4gICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBpZiAocHJvcGVydGllc1trZXlzW2ldXSAhPSBudWxsKVxuICAgICAgICAgICAgICAgICAgICB0aGlzW2tleXNbaV1dID0gcHJvcGVydGllc1trZXlzW2ldXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXBvcnQgaGVhZGVyLlxuICAgICAqIEBtZW1iZXIge0lSZXBvcnRIZWFkZXJ8bnVsbHx1bmRlZmluZWR9IGhlYWRlclxuICAgICAqIEBtZW1iZXJvZiBSZXBvcnRcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBSZXBvcnQucHJvdG90eXBlLmhlYWRlciA9IG51bGw7XG5cbiAgICAvKipcbiAgICAgKiBSZXBvcnQgdHJhY2VzUGVyUXVlcnkuXG4gICAgICogQG1lbWJlciB7T2JqZWN0LjxzdHJpbmcsSVRyYWNlc0FuZFN0YXRzPn0gdHJhY2VzUGVyUXVlcnlcbiAgICAgKiBAbWVtYmVyb2YgUmVwb3J0XG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgUmVwb3J0LnByb3RvdHlwZS50cmFjZXNQZXJRdWVyeSA9ICR1dGlsLmVtcHR5T2JqZWN0O1xuXG4gICAgLyoqXG4gICAgICogUmVwb3J0IGVuZFRpbWUuXG4gICAgICogQG1lbWJlciB7Z29vZ2xlLnByb3RvYnVmLklUaW1lc3RhbXB8bnVsbHx1bmRlZmluZWR9IGVuZFRpbWVcbiAgICAgKiBAbWVtYmVyb2YgUmVwb3J0XG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgUmVwb3J0LnByb3RvdHlwZS5lbmRUaW1lID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIFJlcG9ydCBvcGVyYXRpb25Db3VudC5cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IG9wZXJhdGlvbkNvdW50XG4gICAgICogQG1lbWJlcm9mIFJlcG9ydFxuICAgICAqIEBpbnN0YW5jZVxuICAgICAqL1xuICAgIFJlcG9ydC5wcm90b3R5cGUub3BlcmF0aW9uQ291bnQgPSAwO1xuXG4gICAgLyoqXG4gICAgICogUmVwb3J0IHRyYWNlc1ByZUFnZ3JlZ2F0ZWQuXG4gICAgICogQG1lbWJlciB7Ym9vbGVhbn0gdHJhY2VzUHJlQWdncmVnYXRlZFxuICAgICAqIEBtZW1iZXJvZiBSZXBvcnRcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBSZXBvcnQucHJvdG90eXBlLnRyYWNlc1ByZUFnZ3JlZ2F0ZWQgPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgUmVwb3J0IGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgKiBAZnVuY3Rpb24gY3JlYXRlXG4gICAgICogQG1lbWJlcm9mIFJlcG9ydFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0lSZXBvcnQ9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgKiBAcmV0dXJucyB7UmVwb3J0fSBSZXBvcnQgaW5zdGFuY2VcbiAgICAgKi9cbiAgICBSZXBvcnQuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZXBvcnQocHJvcGVydGllcyk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXBvcnQgbWVzc2FnZS4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgUmVwb3J0LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgKiBAbWVtYmVyb2YgUmVwb3J0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SVJlcG9ydH0gbWVzc2FnZSBSZXBvcnQgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAqL1xuICAgIFJlcG9ydC5lbmNvZGUgPSBmdW5jdGlvbiBlbmNvZGUobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgIGlmICghd3JpdGVyKVxuICAgICAgICAgICAgd3JpdGVyID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaGVhZGVyICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJoZWFkZXJcIikpXG4gICAgICAgICAgICAkcm9vdC5SZXBvcnRIZWFkZXIuZW5jb2RlKG1lc3NhZ2UuaGVhZGVyLCB3cml0ZXIudWludDMyKC8qIGlkIDEsIHdpcmVUeXBlIDIgPSovMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIGlmIChtZXNzYWdlLmVuZFRpbWUgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImVuZFRpbWVcIikpXG4gICAgICAgICAgICAkcm9vdC5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wLmVuY29kZShtZXNzYWdlLmVuZFRpbWUsIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMiA9Ki8xOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UudHJhY2VzUGVyUXVlcnkgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcInRyYWNlc1BlclF1ZXJ5XCIpKVxuICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKG1lc3NhZ2UudHJhY2VzUGVyUXVlcnkpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDUsIHdpcmVUeXBlIDIgPSovNDIpLmZvcmsoKS51aW50MzIoLyogaWQgMSwgd2lyZVR5cGUgMiA9Ki8xMCkuc3RyaW5nKGtleXNbaV0pO1xuICAgICAgICAgICAgICAgICRyb290LlRyYWNlc0FuZFN0YXRzLmVuY29kZShtZXNzYWdlLnRyYWNlc1BlclF1ZXJ5W2tleXNbaV1dLCB3cml0ZXIudWludDMyKC8qIGlkIDIsIHdpcmVUeXBlIDIgPSovMTgpLmZvcmsoKSkubGRlbGltKCkubGRlbGltKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm9wZXJhdGlvbkNvdW50ICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJvcGVyYXRpb25Db3VudFwiKSlcbiAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgNiwgd2lyZVR5cGUgMCA9Ki80OCkudWludDY0KG1lc3NhZ2Uub3BlcmF0aW9uQ291bnQpO1xuICAgICAgICBpZiAobWVzc2FnZS50cmFjZXNQcmVBZ2dyZWdhdGVkICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJ0cmFjZXNQcmVBZ2dyZWdhdGVkXCIpKVxuICAgICAgICAgICAgd3JpdGVyLnVpbnQzMigvKiBpZCA3LCB3aXJlVHlwZSAwID0qLzU2KS5ib29sKG1lc3NhZ2UudHJhY2VzUHJlQWdncmVnYXRlZCk7XG4gICAgICAgIHJldHVybiB3cml0ZXI7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEVuY29kZXMgdGhlIHNwZWNpZmllZCBSZXBvcnQgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgUmVwb3J0LnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAqIEBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWRcbiAgICAgKiBAbWVtYmVyb2YgUmVwb3J0XG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SVJlcG9ydH0gbWVzc2FnZSBSZXBvcnQgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAqL1xuICAgIFJlcG9ydC5lbmNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVuY29kZShtZXNzYWdlLCB3cml0ZXIpLmxkZWxpbSgpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGEgUmVwb3J0IG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAqIEBtZW1iZXJvZiBSZXBvcnRcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuUmVhZGVyfFVpbnQ4QXJyYXl9IHJlYWRlciBSZWFkZXIgb3IgYnVmZmVyIHRvIGRlY29kZSBmcm9tXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGhdIE1lc3NhZ2UgbGVuZ3RoIGlmIGtub3duIGJlZm9yZWhhbmRcbiAgICAgKiBAcmV0dXJucyB7UmVwb3J0fSBSZXBvcnRcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIFJlcG9ydC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUocmVhZGVyLCBsZW5ndGgpIHtcbiAgICAgICAgaWYgKCEocmVhZGVyIGluc3RhbmNlb2YgJFJlYWRlcikpXG4gICAgICAgICAgICByZWFkZXIgPSAkUmVhZGVyLmNyZWF0ZShyZWFkZXIpO1xuICAgICAgICB2YXIgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aCwgbWVzc2FnZSA9IG5ldyAkcm9vdC5SZXBvcnQoKSwga2V5O1xuICAgICAgICB3aGlsZSAocmVhZGVyLnBvcyA8IGVuZCkge1xuICAgICAgICAgICAgdmFyIHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgIHN3aXRjaCAodGFnID4+PiAzKSB7XG4gICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5oZWFkZXIgPSAkcm9vdC5SZXBvcnRIZWFkZXIuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNTpcbiAgICAgICAgICAgICAgICByZWFkZXIuc2tpcCgpLnBvcysrO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnRyYWNlc1BlclF1ZXJ5ID09PSAkdXRpbC5lbXB0eU9iamVjdClcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS50cmFjZXNQZXJRdWVyeSA9IHt9O1xuICAgICAgICAgICAgICAgIGtleSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICByZWFkZXIucG9zKys7XG4gICAgICAgICAgICAgICAgbWVzc2FnZS50cmFjZXNQZXJRdWVyeVtrZXldID0gJHJvb3QuVHJhY2VzQW5kU3RhdHMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmVuZFRpbWUgPSAkcm9vdC5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5vcGVyYXRpb25Db3VudCA9IHJlYWRlci51aW50NjQoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNzpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnRyYWNlc1ByZUFnZ3JlZ2F0ZWQgPSByZWFkZXIuYm9vbCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYSBSZXBvcnQgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlciwgbGVuZ3RoIGRlbGltaXRlZC5cbiAgICAgKiBAZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkXG4gICAgICogQG1lbWJlcm9mIFJlcG9ydFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcmV0dXJucyB7UmVwb3J0fSBSZXBvcnRcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIFJlcG9ydC5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgcmVhZGVyID0gbmV3ICRSZWFkZXIocmVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgYSBSZXBvcnQgbWVzc2FnZS5cbiAgICAgKiBAZnVuY3Rpb24gdmVyaWZ5XG4gICAgICogQG1lbWJlcm9mIFJlcG9ydFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge09iamVjdC48c3RyaW5nLCo+fSBtZXNzYWdlIFBsYWluIG9iamVjdCB0byB2ZXJpZnlcbiAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAqL1xuICAgIFJlcG9ydC52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSkge1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5oZWFkZXIgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiaGVhZGVyXCIpKSB7XG4gICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5SZXBvcnRIZWFkZXIudmVyaWZ5KG1lc3NhZ2UuaGVhZGVyKTtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJoZWFkZXIuXCIgKyBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS50cmFjZXNQZXJRdWVyeSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJ0cmFjZXNQZXJRdWVyeVwiKSkge1xuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc09iamVjdChtZXNzYWdlLnRyYWNlc1BlclF1ZXJ5KSlcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJ0cmFjZXNQZXJRdWVyeTogb2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICB2YXIga2V5ID0gT2JqZWN0LmtleXMobWVzc2FnZS50cmFjZXNQZXJRdWVyeSk7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9ICRyb290LlRyYWNlc0FuZFN0YXRzLnZlcmlmeShtZXNzYWdlLnRyYWNlc1BlclF1ZXJ5W2tleVtpXV0pO1xuICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwidHJhY2VzUGVyUXVlcnkuXCIgKyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5lbmRUaW1lICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImVuZFRpbWVcIikpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9ICRyb290Lmdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAudmVyaWZ5KG1lc3NhZ2UuZW5kVGltZSk7XG4gICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZW5kVGltZS5cIiArIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm9wZXJhdGlvbkNvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcIm9wZXJhdGlvbkNvdW50XCIpKVxuICAgICAgICAgICAgaWYgKCEkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5vcGVyYXRpb25Db3VudCkgJiYgIShtZXNzYWdlLm9wZXJhdGlvbkNvdW50ICYmICR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLm9wZXJhdGlvbkNvdW50LmxvdykgJiYgJHV0aWwuaXNJbnRlZ2VyKG1lc3NhZ2Uub3BlcmF0aW9uQ291bnQuaGlnaCkpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcIm9wZXJhdGlvbkNvdW50OiBpbnRlZ2VyfExvbmcgZXhwZWN0ZWRcIjtcbiAgICAgICAgaWYgKG1lc3NhZ2UudHJhY2VzUHJlQWdncmVnYXRlZCAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJ0cmFjZXNQcmVBZ2dyZWdhdGVkXCIpKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLnRyYWNlc1ByZUFnZ3JlZ2F0ZWQgIT09IFwiYm9vbGVhblwiKVxuICAgICAgICAgICAgICAgIHJldHVybiBcInRyYWNlc1ByZUFnZ3JlZ2F0ZWQ6IGJvb2xlYW4gZXhwZWN0ZWRcIjtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFJlcG9ydCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICogQGZ1bmN0aW9uIHRvT2JqZWN0XG4gICAgICogQG1lbWJlcm9mIFJlcG9ydFxuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge1JlcG9ydH0gbWVzc2FnZSBSZXBvcnRcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IFBsYWluIG9iamVjdFxuICAgICAqL1xuICAgIFJlcG9ydC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICAgIGlmIChvcHRpb25zLm9iamVjdHMgfHwgb3B0aW9ucy5kZWZhdWx0cylcbiAgICAgICAgICAgIG9iamVjdC50cmFjZXNQZXJRdWVyeSA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5kZWZhdWx0cykge1xuICAgICAgICAgICAgb2JqZWN0LmhlYWRlciA9IG51bGw7XG4gICAgICAgICAgICBvYmplY3QuZW5kVGltZSA9IG51bGw7XG4gICAgICAgICAgICBvYmplY3Qub3BlcmF0aW9uQ291bnQgPSAwO1xuICAgICAgICAgICAgb2JqZWN0LnRyYWNlc1ByZUFnZ3JlZ2F0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5oZWFkZXIgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiaGVhZGVyXCIpKVxuICAgICAgICAgICAgb2JqZWN0LmhlYWRlciA9ICRyb290LlJlcG9ydEhlYWRlci50b09iamVjdChtZXNzYWdlLmhlYWRlciwgb3B0aW9ucyk7XG4gICAgICAgIGlmIChtZXNzYWdlLmVuZFRpbWUgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiZW5kVGltZVwiKSlcbiAgICAgICAgICAgIG9iamVjdC5lbmRUaW1lID0gJHJvb3QuZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcC50b09iamVjdChtZXNzYWdlLmVuZFRpbWUsIG9wdGlvbnMpO1xuICAgICAgICB2YXIga2V5czI7XG4gICAgICAgIGlmIChtZXNzYWdlLnRyYWNlc1BlclF1ZXJ5ICYmIChrZXlzMiA9IE9iamVjdC5rZXlzKG1lc3NhZ2UudHJhY2VzUGVyUXVlcnkpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9iamVjdC50cmFjZXNQZXJRdWVyeSA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzMi5sZW5ndGg7ICsrailcbiAgICAgICAgICAgICAgICBvYmplY3QudHJhY2VzUGVyUXVlcnlba2V5czJbal1dID0gJHJvb3QuVHJhY2VzQW5kU3RhdHMudG9PYmplY3QobWVzc2FnZS50cmFjZXNQZXJRdWVyeVtrZXlzMltqXV0sIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLm9wZXJhdGlvbkNvdW50ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcIm9wZXJhdGlvbkNvdW50XCIpKVxuICAgICAgICAgICAgaWYgKHR5cGVvZiBtZXNzYWdlLm9wZXJhdGlvbkNvdW50ID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgIG9iamVjdC5vcGVyYXRpb25Db3VudCA9IG9wdGlvbnMubG9uZ3MgPT09IFN0cmluZyA/IFN0cmluZyhtZXNzYWdlLm9wZXJhdGlvbkNvdW50KSA6IG1lc3NhZ2Uub3BlcmF0aW9uQ291bnQ7XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgb2JqZWN0Lm9wZXJhdGlvbkNvdW50ID0gb3B0aW9ucy5sb25ncyA9PT0gU3RyaW5nID8gJHV0aWwuTG9uZy5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChtZXNzYWdlLm9wZXJhdGlvbkNvdW50KSA6IG9wdGlvbnMubG9uZ3MgPT09IE51bWJlciA/IG5ldyAkdXRpbC5Mb25nQml0cyhtZXNzYWdlLm9wZXJhdGlvbkNvdW50LmxvdyA+Pj4gMCwgbWVzc2FnZS5vcGVyYXRpb25Db3VudC5oaWdoID4+PiAwKS50b051bWJlcih0cnVlKSA6IG1lc3NhZ2Uub3BlcmF0aW9uQ291bnQ7XG4gICAgICAgIGlmIChtZXNzYWdlLnRyYWNlc1ByZUFnZ3JlZ2F0ZWQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwidHJhY2VzUHJlQWdncmVnYXRlZFwiKSlcbiAgICAgICAgICAgIG9iamVjdC50cmFjZXNQcmVBZ2dyZWdhdGVkID0gbWVzc2FnZS50cmFjZXNQcmVBZ2dyZWdhdGVkO1xuICAgICAgICByZXR1cm4gb2JqZWN0O1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDb252ZXJ0cyB0aGlzIFJlcG9ydCB0byBKU09OLlxuICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgKiBAbWVtYmVyb2YgUmVwb3J0XG4gICAgICogQGluc3RhbmNlXG4gICAgICogQHJldHVybnMge09iamVjdC48c3RyaW5nLCo+fSBKU09OIG9iamVjdFxuICAgICAqL1xuICAgIFJlcG9ydC5wcm90b3R5cGUudG9KU09OID0gZnVuY3Rpb24gdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb25zdHJ1Y3Rvci50b09iamVjdCh0aGlzLCAkcHJvdG9idWYudXRpbC50b0pTT05PcHRpb25zKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIFJlcG9ydDtcbn0pKCk7XG5cbiRyb290LkNvbnRleHR1YWxpemVkU3RhdHMgPSAoZnVuY3Rpb24oKSB7XG5cbiAgICAvKipcbiAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgQ29udGV4dHVhbGl6ZWRTdGF0cy5cbiAgICAgKiBAZXhwb3J0cyBJQ29udGV4dHVhbGl6ZWRTdGF0c1xuICAgICAqIEBpbnRlcmZhY2UgSUNvbnRleHR1YWxpemVkU3RhdHNcbiAgICAgKiBAcHJvcGVydHkge0lTdGF0c0NvbnRleHR8bnVsbH0gW2NvbnRleHRdIENvbnRleHR1YWxpemVkU3RhdHMgY29udGV4dFxuICAgICAqIEBwcm9wZXJ0eSB7SVF1ZXJ5TGF0ZW5jeVN0YXRzfG51bGx9IFtxdWVyeUxhdGVuY3lTdGF0c10gQ29udGV4dHVhbGl6ZWRTdGF0cyBxdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsSVR5cGVTdGF0PnxudWxsfSBbcGVyVHlwZVN0YXRdIENvbnRleHR1YWxpemVkU3RhdHMgcGVyVHlwZVN0YXRcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgQ29udGV4dHVhbGl6ZWRTdGF0cy5cbiAgICAgKiBAZXhwb3J0cyBDb250ZXh0dWFsaXplZFN0YXRzXG4gICAgICogQGNsYXNzZGVzYyBSZXByZXNlbnRzIGEgQ29udGV4dHVhbGl6ZWRTdGF0cy5cbiAgICAgKiBAaW1wbGVtZW50cyBJQ29udGV4dHVhbGl6ZWRTdGF0c1xuICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7SUNvbnRleHR1YWxpemVkU3RhdHM9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgKi9cbiAgICBmdW5jdGlvbiBDb250ZXh0dWFsaXplZFN0YXRzKHByb3BlcnRpZXMpIHtcbiAgICAgICAgdGhpcy5wZXJUeXBlU3RhdCA9IHt9O1xuICAgICAgICBpZiAocHJvcGVydGllcylcbiAgICAgICAgICAgIGZvciAodmFyIGtleXMgPSBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKSwgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW2tleXNbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgIHRoaXNba2V5c1tpXV0gPSBwcm9wZXJ0aWVzW2tleXNbaV1dO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbnRleHR1YWxpemVkU3RhdHMgY29udGV4dC5cbiAgICAgKiBAbWVtYmVyIHtJU3RhdHNDb250ZXh0fG51bGx8dW5kZWZpbmVkfSBjb250ZXh0XG4gICAgICogQG1lbWJlcm9mIENvbnRleHR1YWxpemVkU3RhdHNcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBDb250ZXh0dWFsaXplZFN0YXRzLnByb3RvdHlwZS5jb250ZXh0ID0gbnVsbDtcblxuICAgIC8qKlxuICAgICAqIENvbnRleHR1YWxpemVkU3RhdHMgcXVlcnlMYXRlbmN5U3RhdHMuXG4gICAgICogQG1lbWJlciB7SVF1ZXJ5TGF0ZW5jeVN0YXRzfG51bGx8dW5kZWZpbmVkfSBxdWVyeUxhdGVuY3lTdGF0c1xuICAgICAqIEBtZW1iZXJvZiBDb250ZXh0dWFsaXplZFN0YXRzXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRTdGF0cy5wcm90b3R5cGUucXVlcnlMYXRlbmN5U3RhdHMgPSBudWxsO1xuXG4gICAgLyoqXG4gICAgICogQ29udGV4dHVhbGl6ZWRTdGF0cyBwZXJUeXBlU3RhdC5cbiAgICAgKiBAbWVtYmVyIHtPYmplY3QuPHN0cmluZyxJVHlwZVN0YXQ+fSBwZXJUeXBlU3RhdFxuICAgICAqIEBtZW1iZXJvZiBDb250ZXh0dWFsaXplZFN0YXRzXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRTdGF0cy5wcm90b3R5cGUucGVyVHlwZVN0YXQgPSAkdXRpbC5lbXB0eU9iamVjdDtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgQ29udGV4dHVhbGl6ZWRTdGF0cyBpbnN0YW5jZSB1c2luZyB0aGUgc3BlY2lmaWVkIHByb3BlcnRpZXMuXG4gICAgICogQGZ1bmN0aW9uIGNyZWF0ZVxuICAgICAqIEBtZW1iZXJvZiBDb250ZXh0dWFsaXplZFN0YXRzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7SUNvbnRleHR1YWxpemVkU3RhdHM9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgKiBAcmV0dXJucyB7Q29udGV4dHVhbGl6ZWRTdGF0c30gQ29udGV4dHVhbGl6ZWRTdGF0cyBpbnN0YW5jZVxuICAgICAqL1xuICAgIENvbnRleHR1YWxpemVkU3RhdHMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDb250ZXh0dWFsaXplZFN0YXRzKHByb3BlcnRpZXMpO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgQ29udGV4dHVhbGl6ZWRTdGF0cyBtZXNzYWdlLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBDb250ZXh0dWFsaXplZFN0YXRzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgKiBAbWVtYmVyb2YgQ29udGV4dHVhbGl6ZWRTdGF0c1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0lDb250ZXh0dWFsaXplZFN0YXRzfSBtZXNzYWdlIENvbnRleHR1YWxpemVkU3RhdHMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAqL1xuICAgIENvbnRleHR1YWxpemVkU3RhdHMuZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICBpZiAoIXdyaXRlcilcbiAgICAgICAgICAgIHdyaXRlciA9ICRXcml0ZXIuY3JlYXRlKCk7XG4gICAgICAgIGlmIChtZXNzYWdlLmNvbnRleHQgIT0gbnVsbCAmJiBPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtZXNzYWdlLCBcImNvbnRleHRcIikpXG4gICAgICAgICAgICAkcm9vdC5TdGF0c0NvbnRleHQuZW5jb2RlKG1lc3NhZ2UuY29udGV4dCwgd3JpdGVyLnVpbnQzMigvKiBpZCAxLCB3aXJlVHlwZSAyID0qLzEwKS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICBpZiAobWVzc2FnZS5xdWVyeUxhdGVuY3lTdGF0cyAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwicXVlcnlMYXRlbmN5U3RhdHNcIikpXG4gICAgICAgICAgICAkcm9vdC5RdWVyeUxhdGVuY3lTdGF0cy5lbmNvZGUobWVzc2FnZS5xdWVyeUxhdGVuY3lTdGF0cywgd3JpdGVyLnVpbnQzMigvKiBpZCAyLCB3aXJlVHlwZSAyID0qLzE4KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICBpZiAobWVzc2FnZS5wZXJUeXBlU3RhdCAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwicGVyVHlwZVN0YXRcIikpXG4gICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMobWVzc2FnZS5wZXJUeXBlU3RhdCksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMywgd2lyZVR5cGUgMiA9Ki8yNikuZm9yaygpLnVpbnQzMigvKiBpZCAxLCB3aXJlVHlwZSAyID0qLzEwKS5zdHJpbmcoa2V5c1tpXSk7XG4gICAgICAgICAgICAgICAgJHJvb3QuVHlwZVN0YXQuZW5jb2RlKG1lc3NhZ2UucGVyVHlwZVN0YXRba2V5c1tpXV0sIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMiA9Ki8xOCkuZm9yaygpKS5sZGVsaW0oKS5sZGVsaW0oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIENvbnRleHR1YWxpemVkU3RhdHMgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgQ29udGV4dHVhbGl6ZWRTdGF0cy52ZXJpZnl8dmVyaWZ5fSBtZXNzYWdlcy5cbiAgICAgKiBAZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkXG4gICAgICogQG1lbWJlcm9mIENvbnRleHR1YWxpemVkU3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJQ29udGV4dHVhbGl6ZWRTdGF0c30gbWVzc2FnZSBDb250ZXh0dWFsaXplZFN0YXRzIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLldyaXRlcn0gW3dyaXRlcl0gV3JpdGVyIHRvIGVuY29kZSB0b1xuICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgKi9cbiAgICBDb250ZXh0dWFsaXplZFN0YXRzLmVuY29kZURlbGltaXRlZCA9IGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZChtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikubGRlbGltKCk7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYSBDb250ZXh0dWFsaXplZFN0YXRzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAqIEBtZW1iZXJvZiBDb250ZXh0dWFsaXplZFN0YXRzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICogQHJldHVybnMge0NvbnRleHR1YWxpemVkU3RhdHN9IENvbnRleHR1YWxpemVkU3RhdHNcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIENvbnRleHR1YWxpemVkU3RhdHMuZGVjb2RlID0gZnVuY3Rpb24gZGVjb2RlKHJlYWRlciwgbGVuZ3RoKSB7XG4gICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgcmVhZGVyID0gJFJlYWRlci5jcmVhdGUocmVhZGVyKTtcbiAgICAgICAgdmFyIGVuZCA9IGxlbmd0aCA9PT0gdW5kZWZpbmVkID8gcmVhZGVyLmxlbiA6IHJlYWRlci5wb3MgKyBsZW5ndGgsIG1lc3NhZ2UgPSBuZXcgJHJvb3QuQ29udGV4dHVhbGl6ZWRTdGF0cygpLCBrZXk7XG4gICAgICAgIHdoaWxlIChyZWFkZXIucG9zIDwgZW5kKSB7XG4gICAgICAgICAgICB2YXIgdGFnID0gcmVhZGVyLnVpbnQzMigpO1xuICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLmNvbnRleHQgPSAkcm9vdC5TdGF0c0NvbnRleHQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICBtZXNzYWdlLnF1ZXJ5TGF0ZW5jeVN0YXRzID0gJHJvb3QuUXVlcnlMYXRlbmN5U3RhdHMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICByZWFkZXIuc2tpcCgpLnBvcysrO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnBlclR5cGVTdGF0ID09PSAkdXRpbC5lbXB0eU9iamVjdClcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5wZXJUeXBlU3RhdCA9IHt9O1xuICAgICAgICAgICAgICAgIGtleSA9IHJlYWRlci5zdHJpbmcoKTtcbiAgICAgICAgICAgICAgICByZWFkZXIucG9zKys7XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5wZXJUeXBlU3RhdFtrZXldID0gJHJvb3QuVHlwZVN0YXQuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgcmVhZGVyLnNraXBUeXBlKHRhZyAmIDcpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtZXNzYWdlO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBEZWNvZGVzIGEgQ29udGV4dHVhbGl6ZWRTdGF0cyBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAqIEBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWRcbiAgICAgKiBAbWVtYmVyb2YgQ29udGV4dHVhbGl6ZWRTdGF0c1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcmV0dXJucyB7Q29udGV4dHVhbGl6ZWRTdGF0c30gQ29udGV4dHVhbGl6ZWRTdGF0c1xuICAgICAqIEB0aHJvd3Mge0Vycm9yfSBJZiB0aGUgcGF5bG9hZCBpcyBub3QgYSByZWFkZXIgb3IgdmFsaWQgYnVmZmVyXG4gICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRTdGF0cy5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgcmVhZGVyID0gbmV3ICRSZWFkZXIocmVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgYSBDb250ZXh0dWFsaXplZFN0YXRzIG1lc3NhZ2UuXG4gICAgICogQGZ1bmN0aW9uIHZlcmlmeVxuICAgICAqIEBtZW1iZXJvZiBDb250ZXh0dWFsaXplZFN0YXRzXG4gICAgICogQHN0YXRpY1xuICAgICAqIEBwYXJhbSB7T2JqZWN0LjxzdHJpbmcsKj59IG1lc3NhZ2UgUGxhaW4gb2JqZWN0IHRvIHZlcmlmeVxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd8bnVsbH0gYG51bGxgIGlmIHZhbGlkLCBvdGhlcndpc2UgdGhlIHJlYXNvbiB3aHkgaXQgaXMgbm90XG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRTdGF0cy52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSkge1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS5jb250ZXh0ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImNvbnRleHRcIikpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9ICRyb290LlN0YXRzQ29udGV4dC52ZXJpZnkobWVzc2FnZS5jb250ZXh0KTtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJjb250ZXh0LlwiICsgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucXVlcnlMYXRlbmN5U3RhdHMgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwicXVlcnlMYXRlbmN5U3RhdHNcIikpIHtcbiAgICAgICAgICAgIHZhciBlcnJvciA9ICRyb290LlF1ZXJ5TGF0ZW5jeVN0YXRzLnZlcmlmeShtZXNzYWdlLnF1ZXJ5TGF0ZW5jeVN0YXRzKTtcbiAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJxdWVyeUxhdGVuY3lTdGF0cy5cIiArIGVycm9yO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnBlclR5cGVTdGF0ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInBlclR5cGVTdGF0XCIpKSB7XG4gICAgICAgICAgICBpZiAoISR1dGlsLmlzT2JqZWN0KG1lc3NhZ2UucGVyVHlwZVN0YXQpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcInBlclR5cGVTdGF0OiBvYmplY3QgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgIHZhciBrZXkgPSBPYmplY3Qua2V5cyhtZXNzYWdlLnBlclR5cGVTdGF0KTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuVHlwZVN0YXQudmVyaWZ5KG1lc3NhZ2UucGVyVHlwZVN0YXRba2V5W2ldXSk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJwZXJUeXBlU3RhdC5cIiArIGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgcGxhaW4gb2JqZWN0IGZyb20gYSBDb250ZXh0dWFsaXplZFN0YXRzIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgKiBAbWVtYmVyb2YgQ29udGV4dHVhbGl6ZWRTdGF0c1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0NvbnRleHR1YWxpemVkU3RhdHN9IG1lc3NhZ2UgQ29udGV4dHVhbGl6ZWRTdGF0c1xuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICovXG4gICAgQ29udGV4dHVhbGl6ZWRTdGF0cy50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKCFvcHRpb25zKVxuICAgICAgICAgICAgb3B0aW9ucyA9IHt9O1xuICAgICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICAgIGlmIChvcHRpb25zLm9iamVjdHMgfHwgb3B0aW9ucy5kZWZhdWx0cylcbiAgICAgICAgICAgIG9iamVjdC5wZXJUeXBlU3RhdCA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5kZWZhdWx0cykge1xuICAgICAgICAgICAgb2JqZWN0LmNvbnRleHQgPSBudWxsO1xuICAgICAgICAgICAgb2JqZWN0LnF1ZXJ5TGF0ZW5jeVN0YXRzID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5jb250ZXh0ICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcImNvbnRleHRcIikpXG4gICAgICAgICAgICBvYmplY3QuY29udGV4dCA9ICRyb290LlN0YXRzQ29udGV4dC50b09iamVjdChtZXNzYWdlLmNvbnRleHQsIG9wdGlvbnMpO1xuICAgICAgICBpZiAobWVzc2FnZS5xdWVyeUxhdGVuY3lTdGF0cyAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJxdWVyeUxhdGVuY3lTdGF0c1wiKSlcbiAgICAgICAgICAgIG9iamVjdC5xdWVyeUxhdGVuY3lTdGF0cyA9ICRyb290LlF1ZXJ5TGF0ZW5jeVN0YXRzLnRvT2JqZWN0KG1lc3NhZ2UucXVlcnlMYXRlbmN5U3RhdHMsIG9wdGlvbnMpO1xuICAgICAgICB2YXIga2V5czI7XG4gICAgICAgIGlmIChtZXNzYWdlLnBlclR5cGVTdGF0ICYmIChrZXlzMiA9IE9iamVjdC5rZXlzKG1lc3NhZ2UucGVyVHlwZVN0YXQpKS5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9iamVjdC5wZXJUeXBlU3RhdCA9IHt9O1xuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzMi5sZW5ndGg7ICsrailcbiAgICAgICAgICAgICAgICBvYmplY3QucGVyVHlwZVN0YXRba2V5czJbal1dID0gJHJvb3QuVHlwZVN0YXQudG9PYmplY3QobWVzc2FnZS5wZXJUeXBlU3RhdFtrZXlzMltqXV0sIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRoaXMgQ29udGV4dHVhbGl6ZWRTdGF0cyB0byBKU09OLlxuICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgKiBAbWVtYmVyb2YgQ29udGV4dHVhbGl6ZWRTdGF0c1xuICAgICAqIEBpbnN0YW5jZVxuICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgKi9cbiAgICBDb250ZXh0dWFsaXplZFN0YXRzLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLnRvT2JqZWN0KHRoaXMsICRwcm90b2J1Zi51dGlsLnRvSlNPTk9wdGlvbnMpO1xuICAgIH07XG5cbiAgICByZXR1cm4gQ29udGV4dHVhbGl6ZWRTdGF0cztcbn0pKCk7XG5cbiRyb290LlRyYWNlc0FuZFN0YXRzID0gKGZ1bmN0aW9uKCkge1xuXG4gICAgLyoqXG4gICAgICogUHJvcGVydGllcyBvZiBhIFRyYWNlc0FuZFN0YXRzLlxuICAgICAqIEBleHBvcnRzIElUcmFjZXNBbmRTdGF0c1xuICAgICAqIEBpbnRlcmZhY2UgSVRyYWNlc0FuZFN0YXRzXG4gICAgICogQHByb3BlcnR5IHtBcnJheS48SVRyYWNlfFVpbnQ4QXJyYXk+fG51bGx9IFt0cmFjZV0gVHJhY2VzQW5kU3RhdHMgdHJhY2VcbiAgICAgKiBAcHJvcGVydHkgeyRwcm90b2J1Zi5Ub0FycmF5LjxJQ29udGV4dHVhbGl6ZWRTdGF0cz58QXJyYXkuPElDb250ZXh0dWFsaXplZFN0YXRzPnxudWxsfSBbc3RhdHNXaXRoQ29udGV4dF0gVHJhY2VzQW5kU3RhdHMgc3RhdHNXaXRoQ29udGV4dFxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0LjxzdHJpbmcsSVJlZmVyZW5jZWRGaWVsZHNGb3JUeXBlPnxudWxsfSBbcmVmZXJlbmNlZEZpZWxkc0J5VHlwZV0gVHJhY2VzQW5kU3RhdHMgcmVmZXJlbmNlZEZpZWxkc0J5VHlwZVxuICAgICAqIEBwcm9wZXJ0eSB7QXJyYXkuPElUcmFjZXxVaW50OEFycmF5PnxudWxsfSBbaW50ZXJuYWxUcmFjZXNDb250cmlidXRpbmdUb1N0YXRzXSBUcmFjZXNBbmRTdGF0cyBpbnRlcm5hbFRyYWNlc0NvbnRyaWJ1dGluZ1RvU3RhdHNcbiAgICAgKi9cblxuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgYSBuZXcgVHJhY2VzQW5kU3RhdHMuXG4gICAgICogQGV4cG9ydHMgVHJhY2VzQW5kU3RhdHNcbiAgICAgKiBAY2xhc3NkZXNjIFJlcHJlc2VudHMgYSBUcmFjZXNBbmRTdGF0cy5cbiAgICAgKiBAaW1wbGVtZW50cyBJVHJhY2VzQW5kU3RhdHNcbiAgICAgKiBAY29uc3RydWN0b3JcbiAgICAgKiBAcGFyYW0ge0lUcmFjZXNBbmRTdGF0cz19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAqL1xuICAgIGZ1bmN0aW9uIFRyYWNlc0FuZFN0YXRzKHByb3BlcnRpZXMpIHtcbiAgICAgICAgdGhpcy50cmFjZSA9IFtdO1xuICAgICAgICB0aGlzLnN0YXRzV2l0aENvbnRleHQgPSBbXTtcbiAgICAgICAgdGhpcy5yZWZlcmVuY2VkRmllbGRzQnlUeXBlID0ge307XG4gICAgICAgIHRoaXMuaW50ZXJuYWxUcmFjZXNDb250cmlidXRpbmdUb1N0YXRzID0gW107XG4gICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKHByb3BlcnRpZXMpLCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgaWYgKHByb3BlcnRpZXNba2V5c1tpXV0gIT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgdGhpc1trZXlzW2ldXSA9IHByb3BlcnRpZXNba2V5c1tpXV07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVHJhY2VzQW5kU3RhdHMgdHJhY2UuXG4gICAgICogQG1lbWJlciB7QXJyYXkuPElUcmFjZXxVaW50OEFycmF5Pn0gdHJhY2VcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2VzQW5kU3RhdHNcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBUcmFjZXNBbmRTdGF0cy5wcm90b3R5cGUudHJhY2UgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgLyoqXG4gICAgICogVHJhY2VzQW5kU3RhdHMgc3RhdHNXaXRoQ29udGV4dC5cbiAgICAgKiBAbWVtYmVyIHtBcnJheS48SUNvbnRleHR1YWxpemVkU3RhdHM+fSBzdGF0c1dpdGhDb250ZXh0XG4gICAgICogQG1lbWJlcm9mIFRyYWNlc0FuZFN0YXRzXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgVHJhY2VzQW5kU3RhdHMucHJvdG90eXBlLnN0YXRzV2l0aENvbnRleHQgPSAkdXRpbC5lbXB0eUFycmF5O1xuXG4gICAgLyoqXG4gICAgICogVHJhY2VzQW5kU3RhdHMgcmVmZXJlbmNlZEZpZWxkc0J5VHlwZS5cbiAgICAgKiBAbWVtYmVyIHtPYmplY3QuPHN0cmluZyxJUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGU+fSByZWZlcmVuY2VkRmllbGRzQnlUeXBlXG4gICAgICogQG1lbWJlcm9mIFRyYWNlc0FuZFN0YXRzXG4gICAgICogQGluc3RhbmNlXG4gICAgICovXG4gICAgVHJhY2VzQW5kU3RhdHMucHJvdG90eXBlLnJlZmVyZW5jZWRGaWVsZHNCeVR5cGUgPSAkdXRpbC5lbXB0eU9iamVjdDtcblxuICAgIC8qKlxuICAgICAqIFRyYWNlc0FuZFN0YXRzIGludGVybmFsVHJhY2VzQ29udHJpYnV0aW5nVG9TdGF0cy5cbiAgICAgKiBAbWVtYmVyIHtBcnJheS48SVRyYWNlfFVpbnQ4QXJyYXk+fSBpbnRlcm5hbFRyYWNlc0NvbnRyaWJ1dGluZ1RvU3RhdHNcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2VzQW5kU3RhdHNcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKi9cbiAgICBUcmFjZXNBbmRTdGF0cy5wcm90b3R5cGUuaW50ZXJuYWxUcmFjZXNDb250cmlidXRpbmdUb1N0YXRzID0gJHV0aWwuZW1wdHlBcnJheTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgVHJhY2VzQW5kU3RhdHMgaW5zdGFuY2UgdXNpbmcgdGhlIHNwZWNpZmllZCBwcm9wZXJ0aWVzLlxuICAgICAqIEBmdW5jdGlvbiBjcmVhdGVcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2VzQW5kU3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJVHJhY2VzQW5kU3RhdHM9fSBbcHJvcGVydGllc10gUHJvcGVydGllcyB0byBzZXRcbiAgICAgKiBAcmV0dXJucyB7VHJhY2VzQW5kU3RhdHN9IFRyYWNlc0FuZFN0YXRzIGluc3RhbmNlXG4gICAgICovXG4gICAgVHJhY2VzQW5kU3RhdHMuY3JlYXRlID0gZnVuY3Rpb24gY3JlYXRlKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFjZXNBbmRTdGF0cyhwcm9wZXJ0aWVzKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFRyYWNlc0FuZFN0YXRzIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIFRyYWNlc0FuZFN0YXRzLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAqIEBmdW5jdGlvbiBlbmNvZGVcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2VzQW5kU3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtJVHJhY2VzQW5kU3RhdHN9IG1lc3NhZ2UgVHJhY2VzQW5kU3RhdHMgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICogQHJldHVybnMgeyRwcm90b2J1Zi5Xcml0ZXJ9IFdyaXRlclxuICAgICAqL1xuICAgIFRyYWNlc0FuZFN0YXRzLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgaWYgKCF3cml0ZXIpXG4gICAgICAgICAgICB3cml0ZXIgPSAkV3JpdGVyLmNyZWF0ZSgpO1xuICAgICAgICBpZiAobWVzc2FnZS50cmFjZSAhPSBudWxsICYmIG1lc3NhZ2UudHJhY2UubGVuZ3RoKVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXNzYWdlLnRyYWNlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnRyYWNlW2ldIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgICAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDEsIHdpcmVUeXBlIDIgPSovMTApO1xuICAgICAgICAgICAgICAgICAgICB3cml0ZXIuYnl0ZXMobWVzc2FnZS50cmFjZVtpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICRyb290LlRyYWNlLmVuY29kZShtZXNzYWdlLnRyYWNlW2ldLCB3cml0ZXIudWludDMyKC8qIGlkIDEsIHdpcmVUeXBlIDIgPSovMTApLmZvcmsoKSkubGRlbGltKCk7XG4gICAgICAgIHZhciBhcnJheTI7XG4gICAgICAgIGlmIChtZXNzYWdlLnN0YXRzV2l0aENvbnRleHQgIT0gbnVsbCAmJiBtZXNzYWdlLnN0YXRzV2l0aENvbnRleHQudG9BcnJheSlcbiAgICAgICAgICAgIGFycmF5MiA9IG1lc3NhZ2Uuc3RhdHNXaXRoQ29udGV4dC50b0FycmF5KCk7XG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIGFycmF5MiA9IG1lc3NhZ2Uuc3RhdHNXaXRoQ29udGV4dDtcbiAgICAgICAgaWYgKGFycmF5MiAhPSBudWxsICYmIGFycmF5Mi5sZW5ndGgpXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Mi5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAkcm9vdC5Db250ZXh0dWFsaXplZFN0YXRzLmVuY29kZShhcnJheTJbaV0sIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMiA9Ki8xOCkuZm9yaygpKS5sZGVsaW0oKTtcbiAgICAgICAgaWYgKG1lc3NhZ2UuaW50ZXJuYWxUcmFjZXNDb250cmlidXRpbmdUb1N0YXRzICE9IG51bGwgJiYgbWVzc2FnZS5pbnRlcm5hbFRyYWNlc0NvbnRyaWJ1dGluZ1RvU3RhdHMubGVuZ3RoKVxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXNzYWdlLmludGVybmFsVHJhY2VzQ29udHJpYnV0aW5nVG9TdGF0cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5pbnRlcm5hbFRyYWNlc0NvbnRyaWJ1dGluZ1RvU3RhdHNbaV0gaW5zdGFuY2VvZiBVaW50OEFycmF5KSB7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMywgd2lyZVR5cGUgMiA9Ki8yNik7XG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci5ieXRlcyhtZXNzYWdlLmludGVybmFsVHJhY2VzQ29udHJpYnV0aW5nVG9TdGF0c1tpXSk7XG4gICAgICAgICAgICAgICAgfSBlbHNlXG4gICAgICAgICAgICAgICAgICAgICRyb290LlRyYWNlLmVuY29kZShtZXNzYWdlLmludGVybmFsVHJhY2VzQ29udHJpYnV0aW5nVG9TdGF0c1tpXSwgd3JpdGVyLnVpbnQzMigvKiBpZCAzLCB3aXJlVHlwZSAyID0qLzI2KS5mb3JrKCkpLmxkZWxpbSgpO1xuICAgICAgICBpZiAobWVzc2FnZS5yZWZlcmVuY2VkRmllbGRzQnlUeXBlICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJyZWZlcmVuY2VkRmllbGRzQnlUeXBlXCIpKVxuICAgICAgICAgICAgZm9yICh2YXIga2V5cyA9IE9iamVjdC5rZXlzKG1lc3NhZ2UucmVmZXJlbmNlZEZpZWxkc0J5VHlwZSksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgNCwgd2lyZVR5cGUgMiA9Ki8zNCkuZm9yaygpLnVpbnQzMigvKiBpZCAxLCB3aXJlVHlwZSAyID0qLzEwKS5zdHJpbmcoa2V5c1tpXSk7XG4gICAgICAgICAgICAgICAgJHJvb3QuUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUuZW5jb2RlKG1lc3NhZ2UucmVmZXJlbmNlZEZpZWxkc0J5VHlwZVtrZXlzW2ldXSwgd3JpdGVyLnVpbnQzMigvKiBpZCAyLCB3aXJlVHlwZSAyID0qLzE4KS5mb3JrKCkpLmxkZWxpbSgpLmxkZWxpbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICByZXR1cm4gd3JpdGVyO1xuICAgIH07XG5cbiAgICAvKipcbiAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgVHJhY2VzQW5kU3RhdHMgbWVzc2FnZSwgbGVuZ3RoIGRlbGltaXRlZC4gRG9lcyBub3QgaW1wbGljaXRseSB7QGxpbmsgVHJhY2VzQW5kU3RhdHMudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICogQGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZFxuICAgICAqIEBtZW1iZXJvZiBUcmFjZXNBbmRTdGF0c1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0ge0lUcmFjZXNBbmRTdGF0c30gbWVzc2FnZSBUcmFjZXNBbmRTdGF0cyBtZXNzYWdlIG9yIHBsYWluIG9iamVjdCB0byBlbmNvZGVcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICovXG4gICAgVHJhY2VzQW5kU3RhdHMuZW5jb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZW5jb2RlRGVsaW1pdGVkKG1lc3NhZ2UsIHdyaXRlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5lbmNvZGUobWVzc2FnZSwgd3JpdGVyKS5sZGVsaW0oKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIFRyYWNlc0FuZFN0YXRzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIuXG4gICAgICogQGZ1bmN0aW9uIGRlY29kZVxuICAgICAqIEBtZW1iZXJvZiBUcmFjZXNBbmRTdGF0c1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aF0gTWVzc2FnZSBsZW5ndGggaWYga25vd24gYmVmb3JlaGFuZFxuICAgICAqIEByZXR1cm5zIHtUcmFjZXNBbmRTdGF0c30gVHJhY2VzQW5kU3RhdHNcbiAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAqL1xuICAgIFRyYWNlc0FuZFN0YXRzLmRlY29kZSA9IGZ1bmN0aW9uIGRlY29kZShyZWFkZXIsIGxlbmd0aCkge1xuICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgIHJlYWRlciA9ICRSZWFkZXIuY3JlYXRlKHJlYWRlcik7XG4gICAgICAgIHZhciBlbmQgPSBsZW5ndGggPT09IHVuZGVmaW5lZCA/IHJlYWRlci5sZW4gOiByZWFkZXIucG9zICsgbGVuZ3RoLCBtZXNzYWdlID0gbmV3ICRyb290LlRyYWNlc0FuZFN0YXRzKCksIGtleTtcbiAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgIHZhciB0YWcgPSByZWFkZXIudWludDMyKCk7XG4gICAgICAgICAgICBzd2l0Y2ggKHRhZyA+Pj4gMykge1xuICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgIGlmICghKG1lc3NhZ2UudHJhY2UgJiYgbWVzc2FnZS50cmFjZS5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnRyYWNlID0gW107XG4gICAgICAgICAgICAgICAgbWVzc2FnZS50cmFjZS5wdXNoKCRyb290LlRyYWNlLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGlmICghKG1lc3NhZ2Uuc3RhdHNXaXRoQ29udGV4dCAmJiBtZXNzYWdlLnN0YXRzV2l0aENvbnRleHQubGVuZ3RoKSlcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zdGF0c1dpdGhDb250ZXh0ID0gW107XG4gICAgICAgICAgICAgICAgbWVzc2FnZS5zdGF0c1dpdGhDb250ZXh0LnB1c2goJHJvb3QuQ29udGV4dHVhbGl6ZWRTdGF0cy5kZWNvZGUocmVhZGVyLCByZWFkZXIudWludDMyKCkpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgICAgICByZWFkZXIuc2tpcCgpLnBvcysrO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLnJlZmVyZW5jZWRGaWVsZHNCeVR5cGUgPT09ICR1dGlsLmVtcHR5T2JqZWN0KVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLnJlZmVyZW5jZWRGaWVsZHNCeVR5cGUgPSB7fTtcbiAgICAgICAgICAgICAgICBrZXkgPSByZWFkZXIuc3RyaW5nKCk7XG4gICAgICAgICAgICAgICAgcmVhZGVyLnBvcysrO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UucmVmZXJlbmNlZEZpZWxkc0J5VHlwZVtrZXldID0gJHJvb3QuUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBpZiAoIShtZXNzYWdlLmludGVybmFsVHJhY2VzQ29udHJpYnV0aW5nVG9TdGF0cyAmJiBtZXNzYWdlLmludGVybmFsVHJhY2VzQ29udHJpYnV0aW5nVG9TdGF0cy5sZW5ndGgpKVxuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlLmludGVybmFsVHJhY2VzQ29udHJpYnV0aW5nVG9TdGF0cyA9IFtdO1xuICAgICAgICAgICAgICAgIG1lc3NhZ2UuaW50ZXJuYWxUcmFjZXNDb250cmlidXRpbmdUb1N0YXRzLnB1c2goJHJvb3QuVHJhY2UuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHJlYWRlci5za2lwVHlwZSh0YWcgJiA3KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhIFRyYWNlc0FuZFN0YXRzIG1lc3NhZ2UgZnJvbSB0aGUgc3BlY2lmaWVkIHJlYWRlciBvciBidWZmZXIsIGxlbmd0aCBkZWxpbWl0ZWQuXG4gICAgICogQGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZFxuICAgICAqIEBtZW1iZXJvZiBUcmFjZXNBbmRTdGF0c1xuICAgICAqIEBzdGF0aWNcbiAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgKiBAcmV0dXJucyB7VHJhY2VzQW5kU3RhdHN9IFRyYWNlc0FuZFN0YXRzXG4gICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgKiBAdGhyb3dzIHskcHJvdG9idWYudXRpbC5Qcm90b2NvbEVycm9yfSBJZiByZXF1aXJlZCBmaWVsZHMgYXJlIG1pc3NpbmdcbiAgICAgKi9cbiAgICBUcmFjZXNBbmRTdGF0cy5kZWNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBkZWNvZGVEZWxpbWl0ZWQocmVhZGVyKSB7XG4gICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgcmVhZGVyID0gbmV3ICRSZWFkZXIocmVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGVjb2RlKHJlYWRlciwgcmVhZGVyLnVpbnQzMigpKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogVmVyaWZpZXMgYSBUcmFjZXNBbmRTdGF0cyBtZXNzYWdlLlxuICAgICAqIEBmdW5jdGlvbiB2ZXJpZnlcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2VzQW5kU3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICogQHJldHVybnMge3N0cmluZ3xudWxsfSBgbnVsbGAgaWYgdmFsaWQsIG90aGVyd2lzZSB0aGUgcmVhc29uIHdoeSBpdCBpcyBub3RcbiAgICAgKi9cbiAgICBUcmFjZXNBbmRTdGF0cy52ZXJpZnkgPSBmdW5jdGlvbiB2ZXJpZnkobWVzc2FnZSkge1xuICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgIHJldHVybiBcIm9iamVjdCBleHBlY3RlZFwiO1xuICAgICAgICBpZiAobWVzc2FnZS50cmFjZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJ0cmFjZVwiKSkge1xuICAgICAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1lc3NhZ2UudHJhY2UpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcInRyYWNlOiBhcnJheSBleHBlY3RlZFwiO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBtZXNzYWdlLnRyYWNlLmxlbmd0aDsgKytpKVxuICAgICAgICAgICAgICAgIGlmICghKG1lc3NhZ2UudHJhY2VbaV0gaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS52ZXJpZnkobWVzc2FnZS50cmFjZVtpXSk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnJvcilcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRyYWNlLlwiICsgZXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChtZXNzYWdlLnN0YXRzV2l0aENvbnRleHQgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwic3RhdHNXaXRoQ29udGV4dFwiKSkge1xuICAgICAgICAgICAgdmFyIGFycmF5MjtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLnN0YXRzV2l0aENvbnRleHQgIT0gbnVsbCAmJiBtZXNzYWdlLnN0YXRzV2l0aENvbnRleHQudG9BcnJheSlcbiAgICAgICAgICAgICAgICBhcnJheTIgPSBtZXNzYWdlLnN0YXRzV2l0aENvbnRleHQudG9BcnJheSgpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIGFycmF5MiA9IG1lc3NhZ2Uuc3RhdHNXaXRoQ29udGV4dDtcbiAgICAgICAgICAgIGlmICghQXJyYXkuaXNBcnJheShhcnJheTIpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcInN0YXRzV2l0aENvbnRleHQ6IGFycmF5IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Mi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIHZhciBlcnJvciA9ICRyb290LkNvbnRleHR1YWxpemVkU3RhdHMudmVyaWZ5KGFycmF5MltpXSk7XG4gICAgICAgICAgICAgICAgaWYgKGVycm9yKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJzdGF0c1dpdGhDb250ZXh0LlwiICsgZXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG1lc3NhZ2UucmVmZXJlbmNlZEZpZWxkc0J5VHlwZSAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJyZWZlcmVuY2VkRmllbGRzQnlUeXBlXCIpKSB7XG4gICAgICAgICAgICBpZiAoISR1dGlsLmlzT2JqZWN0KG1lc3NhZ2UucmVmZXJlbmNlZEZpZWxkc0J5VHlwZSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwicmVmZXJlbmNlZEZpZWxkc0J5VHlwZTogb2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICB2YXIga2V5ID0gT2JqZWN0LmtleXMobWVzc2FnZS5yZWZlcmVuY2VkRmllbGRzQnlUeXBlKTtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVycm9yID0gJHJvb3QuUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUudmVyaWZ5KG1lc3NhZ2UucmVmZXJlbmNlZEZpZWxkc0J5VHlwZVtrZXlbaV1dKTtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcInJlZmVyZW5jZWRGaWVsZHNCeVR5cGUuXCIgKyBlcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbnRlcm5hbFRyYWNlc0NvbnRyaWJ1dGluZ1RvU3RhdHMgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwiaW50ZXJuYWxUcmFjZXNDb250cmlidXRpbmdUb1N0YXRzXCIpKSB7XG4gICAgICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkobWVzc2FnZS5pbnRlcm5hbFRyYWNlc0NvbnRyaWJ1dGluZ1RvU3RhdHMpKVxuICAgICAgICAgICAgICAgIHJldHVybiBcImludGVybmFsVHJhY2VzQ29udHJpYnV0aW5nVG9TdGF0czogYXJyYXkgZXhwZWN0ZWRcIjtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWVzc2FnZS5pbnRlcm5hbFRyYWNlc0NvbnRyaWJ1dGluZ1RvU3RhdHMubGVuZ3RoOyArK2kpXG4gICAgICAgICAgICAgICAgaWYgKCEobWVzc2FnZS5pbnRlcm5hbFRyYWNlc0NvbnRyaWJ1dGluZ1RvU3RhdHNbaV0gaW5zdGFuY2VvZiBVaW50OEFycmF5KSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3IgPSAkcm9vdC5UcmFjZS52ZXJpZnkobWVzc2FnZS5pbnRlcm5hbFRyYWNlc0NvbnRyaWJ1dGluZ1RvU3RhdHNbaV0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyb3IpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJpbnRlcm5hbFRyYWNlc0NvbnRyaWJ1dGluZ1RvU3RhdHMuXCIgKyBlcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFRyYWNlc0FuZFN0YXRzIG1lc3NhZ2UuIEFsc28gY29udmVydHMgdmFsdWVzIHRvIG90aGVyIHR5cGVzIGlmIHNwZWNpZmllZC5cbiAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgKiBAbWVtYmVyb2YgVHJhY2VzQW5kU3RhdHNcbiAgICAgKiBAc3RhdGljXG4gICAgICogQHBhcmFtIHtUcmFjZXNBbmRTdGF0c30gbWVzc2FnZSBUcmFjZXNBbmRTdGF0c1xuICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLklDb252ZXJzaW9uT3B0aW9uc30gW29wdGlvbnNdIENvbnZlcnNpb24gb3B0aW9uc1xuICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICovXG4gICAgVHJhY2VzQW5kU3RhdHMudG9PYmplY3QgPSBmdW5jdGlvbiB0b09iamVjdChtZXNzYWdlLCBvcHRpb25zKSB7XG4gICAgICAgIGlmICghb3B0aW9ucylcbiAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgdmFyIG9iamVjdCA9IHt9O1xuICAgICAgICBpZiAob3B0aW9ucy5hcnJheXMgfHwgb3B0aW9ucy5kZWZhdWx0cykge1xuICAgICAgICAgICAgb2JqZWN0LnRyYWNlID0gW107XG4gICAgICAgICAgICBvYmplY3Quc3RhdHNXaXRoQ29udGV4dCA9IFtdO1xuICAgICAgICAgICAgb2JqZWN0LmludGVybmFsVHJhY2VzQ29udHJpYnV0aW5nVG9TdGF0cyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLm9iamVjdHMgfHwgb3B0aW9ucy5kZWZhdWx0cylcbiAgICAgICAgICAgIG9iamVjdC5yZWZlcmVuY2VkRmllbGRzQnlUeXBlID0ge307XG4gICAgICAgIGlmIChtZXNzYWdlLnRyYWNlICYmIG1lc3NhZ2UudHJhY2UubGVuZ3RoKSB7XG4gICAgICAgICAgICBvYmplY3QudHJhY2UgPSBbXTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgbWVzc2FnZS50cmFjZS5sZW5ndGg7ICsrailcbiAgICAgICAgICAgICAgICBvYmplY3QudHJhY2Vbal0gPSAkcm9vdC5UcmFjZS50b09iamVjdChtZXNzYWdlLnRyYWNlW2pdLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5zdGF0c1dpdGhDb250ZXh0ICYmIG1lc3NhZ2Uuc3RhdHNXaXRoQ29udGV4dC5sZW5ndGgpIHtcbiAgICAgICAgICAgIG9iamVjdC5zdGF0c1dpdGhDb250ZXh0ID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1lc3NhZ2Uuc3RhdHNXaXRoQ29udGV4dC5sZW5ndGg7ICsrailcbiAgICAgICAgICAgICAgICBvYmplY3Quc3RhdHNXaXRoQ29udGV4dFtqXSA9ICRyb290LkNvbnRleHR1YWxpemVkU3RhdHMudG9PYmplY3QobWVzc2FnZS5zdGF0c1dpdGhDb250ZXh0W2pdLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWVzc2FnZS5pbnRlcm5hbFRyYWNlc0NvbnRyaWJ1dGluZ1RvU3RhdHMgJiYgbWVzc2FnZS5pbnRlcm5hbFRyYWNlc0NvbnRyaWJ1dGluZ1RvU3RhdHMubGVuZ3RoKSB7XG4gICAgICAgICAgICBvYmplY3QuaW50ZXJuYWxUcmFjZXNDb250cmlidXRpbmdUb1N0YXRzID0gW107XG4gICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IG1lc3NhZ2UuaW50ZXJuYWxUcmFjZXNDb250cmlidXRpbmdUb1N0YXRzLmxlbmd0aDsgKytqKVxuICAgICAgICAgICAgICAgIG9iamVjdC5pbnRlcm5hbFRyYWNlc0NvbnRyaWJ1dGluZ1RvU3RhdHNbal0gPSAkcm9vdC5UcmFjZS50b09iamVjdChtZXNzYWdlLmludGVybmFsVHJhY2VzQ29udHJpYnV0aW5nVG9TdGF0c1tqXSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGtleXMyO1xuICAgICAgICBpZiAobWVzc2FnZS5yZWZlcmVuY2VkRmllbGRzQnlUeXBlICYmIChrZXlzMiA9IE9iamVjdC5rZXlzKG1lc3NhZ2UucmVmZXJlbmNlZEZpZWxkc0J5VHlwZSkpLmxlbmd0aCkge1xuICAgICAgICAgICAgb2JqZWN0LnJlZmVyZW5jZWRGaWVsZHNCeVR5cGUgPSB7fTtcbiAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga2V5czIubGVuZ3RoOyArK2opXG4gICAgICAgICAgICAgICAgb2JqZWN0LnJlZmVyZW5jZWRGaWVsZHNCeVR5cGVba2V5czJbal1dID0gJHJvb3QuUmVmZXJlbmNlZEZpZWxkc0ZvclR5cGUudG9PYmplY3QobWVzc2FnZS5yZWZlcmVuY2VkRmllbGRzQnlUeXBlW2tleXMyW2pdXSwgb3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogQ29udmVydHMgdGhpcyBUcmFjZXNBbmRTdGF0cyB0byBKU09OLlxuICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgKiBAbWVtYmVyb2YgVHJhY2VzQW5kU3RhdHNcbiAgICAgKiBAaW5zdGFuY2VcbiAgICAgKiBAcmV0dXJucyB7T2JqZWN0LjxzdHJpbmcsKj59IEpTT04gb2JqZWN0XG4gICAgICovXG4gICAgVHJhY2VzQW5kU3RhdHMucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgfTtcblxuICAgIHJldHVybiBUcmFjZXNBbmRTdGF0cztcbn0pKCk7XG5cbiRyb290Lmdvb2dsZSA9IChmdW5jdGlvbigpIHtcblxuICAgIC8qKlxuICAgICAqIE5hbWVzcGFjZSBnb29nbGUuXG4gICAgICogQGV4cG9ydHMgZ29vZ2xlXG4gICAgICogQG5hbWVzcGFjZVxuICAgICAqL1xuICAgIHZhciBnb29nbGUgPSB7fTtcblxuICAgIGdvb2dsZS5wcm90b2J1ZiA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAvKipcbiAgICAgICAgICogTmFtZXNwYWNlIHByb3RvYnVmLlxuICAgICAgICAgKiBAbWVtYmVyb2YgZ29vZ2xlXG4gICAgICAgICAqIEBuYW1lc3BhY2VcbiAgICAgICAgICovXG4gICAgICAgIHZhciBwcm90b2J1ZiA9IHt9O1xuXG4gICAgICAgIHByb3RvYnVmLlRpbWVzdGFtcCA9IChmdW5jdGlvbigpIHtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBQcm9wZXJ0aWVzIG9mIGEgVGltZXN0YW1wLlxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGdvb2dsZS5wcm90b2J1ZlxuICAgICAgICAgICAgICogQGludGVyZmFjZSBJVGltZXN0YW1wXG4gICAgICAgICAgICAgKiBAcHJvcGVydHkge251bWJlcnxudWxsfSBbc2Vjb25kc10gVGltZXN0YW1wIHNlY29uZHNcbiAgICAgICAgICAgICAqIEBwcm9wZXJ0eSB7bnVtYmVyfG51bGx9IFtuYW5vc10gVGltZXN0YW1wIG5hbm9zXG4gICAgICAgICAgICAgKi9cblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBDb25zdHJ1Y3RzIGEgbmV3IFRpbWVzdGFtcC5cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBnb29nbGUucHJvdG9idWZcbiAgICAgICAgICAgICAqIEBjbGFzc2Rlc2MgUmVwcmVzZW50cyBhIFRpbWVzdGFtcC5cbiAgICAgICAgICAgICAqIEBpbXBsZW1lbnRzIElUaW1lc3RhbXBcbiAgICAgICAgICAgICAqIEBjb25zdHJ1Y3RvclxuICAgICAgICAgICAgICogQHBhcmFtIHtnb29nbGUucHJvdG9idWYuSVRpbWVzdGFtcD19IFtwcm9wZXJ0aWVzXSBQcm9wZXJ0aWVzIHRvIHNldFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBmdW5jdGlvbiBUaW1lc3RhbXAocHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzKVxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBrZXlzID0gT2JqZWN0LmtleXMocHJvcGVydGllcyksIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7ICsraSlcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wZXJ0aWVzW2tleXNbaV1dICE9IG51bGwpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1trZXlzW2ldXSA9IHByb3BlcnRpZXNba2V5c1tpXV07XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogVGltZXN0YW1wIHNlY29uZHMuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IHNlY29uZHNcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgVGltZXN0YW1wLnByb3RvdHlwZS5zZWNvbmRzID0gMDtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBUaW1lc3RhbXAgbmFub3MuXG4gICAgICAgICAgICAgKiBAbWVtYmVyIHtudW1iZXJ9IG5hbm9zXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcFxuICAgICAgICAgICAgICogQGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFRpbWVzdGFtcC5wcm90b3R5cGUubmFub3MgPSAwO1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBuZXcgVGltZXN0YW1wIGluc3RhbmNlIHVzaW5nIHRoZSBzcGVjaWZpZWQgcHJvcGVydGllcy5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBjcmVhdGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2dvb2dsZS5wcm90b2J1Zi5JVGltZXN0YW1wPX0gW3Byb3BlcnRpZXNdIFByb3BlcnRpZXMgdG8gc2V0XG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcH0gVGltZXN0YW1wIGluc3RhbmNlXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFRpbWVzdGFtcC5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUocHJvcGVydGllcykge1xuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgVGltZXN0YW1wKHByb3BlcnRpZXMpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgKiBFbmNvZGVzIHRoZSBzcGVjaWZpZWQgVGltZXN0YW1wIG1lc3NhZ2UuIERvZXMgbm90IGltcGxpY2l0bHkge0BsaW5rIGdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAudmVyaWZ5fHZlcmlmeX0gbWVzc2FnZXMuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gZW5jb2RlXG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcFxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtnb29nbGUucHJvdG9idWYuSVRpbWVzdGFtcH0gbWVzc2FnZSBUaW1lc3RhbXAgbWVzc2FnZSBvciBwbGFpbiBvYmplY3QgdG8gZW5jb2RlXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5Xcml0ZXJ9IFt3cml0ZXJdIFdyaXRlciB0byBlbmNvZGUgdG9cbiAgICAgICAgICAgICAqIEByZXR1cm5zIHskcHJvdG9idWYuV3JpdGVyfSBXcml0ZXJcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgVGltZXN0YW1wLmVuY29kZSA9IGZ1bmN0aW9uIGVuY29kZShtZXNzYWdlLCB3cml0ZXIpIHtcbiAgICAgICAgICAgICAgICBpZiAoIXdyaXRlcilcbiAgICAgICAgICAgICAgICAgICAgd3JpdGVyID0gJFdyaXRlci5jcmVhdGUoKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5zZWNvbmRzICE9IG51bGwgJiYgT2JqZWN0Lmhhc093blByb3BlcnR5LmNhbGwobWVzc2FnZSwgXCJzZWNvbmRzXCIpKVxuICAgICAgICAgICAgICAgICAgICB3cml0ZXIudWludDMyKC8qIGlkIDEsIHdpcmVUeXBlIDAgPSovOCkuaW50NjQobWVzc2FnZS5zZWNvbmRzKTtcbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5uYW5vcyAhPSBudWxsICYmIE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1lc3NhZ2UsIFwibmFub3NcIikpXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlci51aW50MzIoLyogaWQgMiwgd2lyZVR5cGUgMCA9Ki8xNikuaW50MzIobWVzc2FnZS5uYW5vcyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyaXRlcjtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRW5jb2RlcyB0aGUgc3BlY2lmaWVkIFRpbWVzdGFtcCBtZXNzYWdlLCBsZW5ndGggZGVsaW1pdGVkLiBEb2VzIG5vdCBpbXBsaWNpdGx5IHtAbGluayBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wLnZlcmlmeXx2ZXJpZnl9IG1lc3NhZ2VzLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGVuY29kZURlbGltaXRlZFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7Z29vZ2xlLnByb3RvYnVmLklUaW1lc3RhbXB9IG1lc3NhZ2UgVGltZXN0YW1wIG1lc3NhZ2Ugb3IgcGxhaW4gb2JqZWN0IHRvIGVuY29kZVxuICAgICAgICAgICAgICogQHBhcmFtIHskcHJvdG9idWYuV3JpdGVyfSBbd3JpdGVyXSBXcml0ZXIgdG8gZW5jb2RlIHRvXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7JHByb3RvYnVmLldyaXRlcn0gV3JpdGVyXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFRpbWVzdGFtcC5lbmNvZGVEZWxpbWl0ZWQgPSBmdW5jdGlvbiBlbmNvZGVEZWxpbWl0ZWQobWVzc2FnZSwgd3JpdGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlKG1lc3NhZ2UsIHdyaXRlcikubGRlbGltKCk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIERlY29kZXMgYSBUaW1lc3RhbXAgbWVzc2FnZSBmcm9tIHRoZSBzcGVjaWZpZWQgcmVhZGVyIG9yIGJ1ZmZlci5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiBkZWNvZGVcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5SZWFkZXJ8VWludDhBcnJheX0gcmVhZGVyIFJlYWRlciBvciBidWZmZXIgdG8gZGVjb2RlIGZyb21cbiAgICAgICAgICAgICAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoXSBNZXNzYWdlIGxlbmd0aCBpZiBrbm93biBiZWZvcmVoYW5kXG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7Z29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcH0gVGltZXN0YW1wXG4gICAgICAgICAgICAgKiBAdGhyb3dzIHtFcnJvcn0gSWYgdGhlIHBheWxvYWQgaXMgbm90IGEgcmVhZGVyIG9yIHZhbGlkIGJ1ZmZlclxuICAgICAgICAgICAgICogQHRocm93cyB7JHByb3RvYnVmLnV0aWwuUHJvdG9jb2xFcnJvcn0gSWYgcmVxdWlyZWQgZmllbGRzIGFyZSBtaXNzaW5nXG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFRpbWVzdGFtcC5kZWNvZGUgPSBmdW5jdGlvbiBkZWNvZGUocmVhZGVyLCBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBpZiAoIShyZWFkZXIgaW5zdGFuY2VvZiAkUmVhZGVyKSlcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gJFJlYWRlci5jcmVhdGUocmVhZGVyKTtcbiAgICAgICAgICAgICAgICB2YXIgZW5kID0gbGVuZ3RoID09PSB1bmRlZmluZWQgPyByZWFkZXIubGVuIDogcmVhZGVyLnBvcyArIGxlbmd0aCwgbWVzc2FnZSA9IG5ldyAkcm9vdC5nb29nbGUucHJvdG9idWYuVGltZXN0YW1wKCk7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHJlYWRlci5wb3MgPCBlbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRhZyA9IHJlYWRlci51aW50MzIoKTtcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoICh0YWcgPj4+IDMpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5zZWNvbmRzID0gcmVhZGVyLmludDY0KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZS5uYW5vcyA9IHJlYWRlci5pbnQzMigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZWFkZXIuc2tpcFR5cGUodGFnICYgNyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogRGVjb2RlcyBhIFRpbWVzdGFtcCBtZXNzYWdlIGZyb20gdGhlIHNwZWNpZmllZCByZWFkZXIgb3IgYnVmZmVyLCBsZW5ndGggZGVsaW1pdGVkLlxuICAgICAgICAgICAgICogQGZ1bmN0aW9uIGRlY29kZURlbGltaXRlZFxuICAgICAgICAgICAgICogQG1lbWJlcm9mIGdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXBcbiAgICAgICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgICAgICAqIEBwYXJhbSB7JHByb3RvYnVmLlJlYWRlcnxVaW50OEFycmF5fSByZWFkZXIgUmVhZGVyIG9yIGJ1ZmZlciB0byBkZWNvZGUgZnJvbVxuICAgICAgICAgICAgICogQHJldHVybnMge2dvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXB9IFRpbWVzdGFtcFxuICAgICAgICAgICAgICogQHRocm93cyB7RXJyb3J9IElmIHRoZSBwYXlsb2FkIGlzIG5vdCBhIHJlYWRlciBvciB2YWxpZCBidWZmZXJcbiAgICAgICAgICAgICAqIEB0aHJvd3MgeyRwcm90b2J1Zi51dGlsLlByb3RvY29sRXJyb3J9IElmIHJlcXVpcmVkIGZpZWxkcyBhcmUgbWlzc2luZ1xuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBUaW1lc3RhbXAuZGVjb2RlRGVsaW1pdGVkID0gZnVuY3Rpb24gZGVjb2RlRGVsaW1pdGVkKHJlYWRlcikge1xuICAgICAgICAgICAgICAgIGlmICghKHJlYWRlciBpbnN0YW5jZW9mICRSZWFkZXIpKVxuICAgICAgICAgICAgICAgICAgICByZWFkZXIgPSBuZXcgJFJlYWRlcihyZWFkZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmRlY29kZShyZWFkZXIsIHJlYWRlci51aW50MzIoKSk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIFZlcmlmaWVzIGEgVGltZXN0YW1wIG1lc3NhZ2UuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAbWVtYmVyb2YgZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcFxuICAgICAgICAgICAgICogQHN0YXRpY1xuICAgICAgICAgICAgICogQHBhcmFtIHtPYmplY3QuPHN0cmluZywqPn0gbWVzc2FnZSBQbGFpbiBvYmplY3QgdG8gdmVyaWZ5XG4gICAgICAgICAgICAgKiBAcmV0dXJucyB7c3RyaW5nfG51bGx9IGBudWxsYCBpZiB2YWxpZCwgb3RoZXJ3aXNlIHRoZSByZWFzb24gd2h5IGl0IGlzIG5vdFxuICAgICAgICAgICAgICovXG4gICAgICAgICAgICBUaW1lc3RhbXAudmVyaWZ5ID0gZnVuY3Rpb24gdmVyaWZ5KG1lc3NhZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lc3NhZ2UgIT09IFwib2JqZWN0XCIgfHwgbWVzc2FnZSA9PT0gbnVsbClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwib2JqZWN0IGV4cGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2Uuc2Vjb25kcyAhPSBudWxsICYmIG1lc3NhZ2UuaGFzT3duUHJvcGVydHkoXCJzZWNvbmRzXCIpKVxuICAgICAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLnNlY29uZHMpICYmICEobWVzc2FnZS5zZWNvbmRzICYmICR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLnNlY29uZHMubG93KSAmJiAkdXRpbC5pc0ludGVnZXIobWVzc2FnZS5zZWNvbmRzLmhpZ2gpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInNlY29uZHM6IGludGVnZXJ8TG9uZyBleHBlY3RlZFwiO1xuICAgICAgICAgICAgICAgIGlmIChtZXNzYWdlLm5hbm9zICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcIm5hbm9zXCIpKVxuICAgICAgICAgICAgICAgICAgICBpZiAoISR1dGlsLmlzSW50ZWdlcihtZXNzYWdlLm5hbm9zKSlcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIm5hbm9zOiBpbnRlZ2VyIGV4cGVjdGVkXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAqIENyZWF0ZXMgYSBwbGFpbiBvYmplY3QgZnJvbSBhIFRpbWVzdGFtcCBtZXNzYWdlLiBBbHNvIGNvbnZlcnRzIHZhbHVlcyB0byBvdGhlciB0eXBlcyBpZiBzcGVjaWZpZWQuXG4gICAgICAgICAgICAgKiBAZnVuY3Rpb24gdG9PYmplY3RcbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wXG4gICAgICAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICAgICAgKiBAcGFyYW0ge2dvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXB9IG1lc3NhZ2UgVGltZXN0YW1wXG4gICAgICAgICAgICAgKiBAcGFyYW0geyRwcm90b2J1Zi5JQ29udmVyc2lvbk9wdGlvbnN9IFtvcHRpb25zXSBDb252ZXJzaW9uIG9wdGlvbnNcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gUGxhaW4gb2JqZWN0XG4gICAgICAgICAgICAgKi9cbiAgICAgICAgICAgIFRpbWVzdGFtcC50b09iamVjdCA9IGZ1bmN0aW9uIHRvT2JqZWN0KG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgICAgICAgICBpZiAoIW9wdGlvbnMpXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgICB2YXIgb2JqZWN0ID0ge307XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZGVmYXVsdHMpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnNlY29uZHMgPSAwO1xuICAgICAgICAgICAgICAgICAgICBvYmplY3QubmFub3MgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobWVzc2FnZS5zZWNvbmRzICE9IG51bGwgJiYgbWVzc2FnZS5oYXNPd25Qcm9wZXJ0eShcInNlY29uZHNcIikpXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgbWVzc2FnZS5zZWNvbmRzID09PSBcIm51bWJlclwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnNlY29uZHMgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyBTdHJpbmcobWVzc2FnZS5zZWNvbmRzKSA6IG1lc3NhZ2Uuc2Vjb25kcztcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0LnNlY29uZHMgPSBvcHRpb25zLmxvbmdzID09PSBTdHJpbmcgPyAkdXRpbC5Mb25nLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG1lc3NhZ2Uuc2Vjb25kcykgOiBvcHRpb25zLmxvbmdzID09PSBOdW1iZXIgPyBuZXcgJHV0aWwuTG9uZ0JpdHMobWVzc2FnZS5zZWNvbmRzLmxvdyA+Pj4gMCwgbWVzc2FnZS5zZWNvbmRzLmhpZ2ggPj4+IDApLnRvTnVtYmVyKCkgOiBtZXNzYWdlLnNlY29uZHM7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UubmFub3MgIT0gbnVsbCAmJiBtZXNzYWdlLmhhc093blByb3BlcnR5KFwibmFub3NcIikpXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5uYW5vcyA9IG1lc3NhZ2UubmFub3M7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9iamVjdDtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICogQ29udmVydHMgdGhpcyBUaW1lc3RhbXAgdG8gSlNPTi5cbiAgICAgICAgICAgICAqIEBmdW5jdGlvbiB0b0pTT05cbiAgICAgICAgICAgICAqIEBtZW1iZXJvZiBnb29nbGUucHJvdG9idWYuVGltZXN0YW1wXG4gICAgICAgICAgICAgKiBAaW5zdGFuY2VcbiAgICAgICAgICAgICAqIEByZXR1cm5zIHtPYmplY3QuPHN0cmluZywqPn0gSlNPTiBvYmplY3RcbiAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgVGltZXN0YW1wLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29uc3RydWN0b3IudG9PYmplY3QodGhpcywgJHByb3RvYnVmLnV0aWwudG9KU09OT3B0aW9ucyk7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICByZXR1cm4gVGltZXN0YW1wO1xuICAgICAgICB9KSgpO1xuXG4gICAgICAgIHJldHVybiBwcm90b2J1ZjtcbiAgICB9KSgpO1xuXG4gICAgcmV0dXJuIGdvb2dsZTtcbn0pKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gJHJvb3Q7XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/cjs/protobuf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/ApolloServer.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/ApolloServer.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloServer: () => (/* binding */ ApolloServer),\n/* harmony export */   MEDIA_TYPES: () => (/* binding */ MEDIA_TYPES),\n/* harmony export */   chooseContentTypeForSingleResultResponse: () => (/* binding */ chooseContentTypeForSingleResultResponse),\n/* harmony export */   internalExecuteOperation: () => (/* binding */ internalExecuteOperation),\n/* harmony export */   isImplicitlyInstallablePlugin: () => (/* binding */ isImplicitlyInstallablePlugin)\n/* harmony export */ });\n/* harmony import */ var _apollo_utils_isnodelike__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/utils.isnodelike */ \"(rsc)/./node_modules/@apollo/utils.isnodelike/dist/index.js\");\n/* harmony import */ var _apollo_utils_keyvaluecache__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/utils.keyvaluecache */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.keyvaluecache/dist/index.js\");\n/* harmony import */ var _graphql_tools_schema__WEBPACK_IMPORTED_MODULE_20__ = __webpack_require__(/*! @graphql-tools/schema */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/makeExecutableSchema.js\");\n/* harmony import */ var _utils_resolvable_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/resolvable.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/resolvable.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_19__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/error/GraphQLError.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_21__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/type/validate.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_22__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/utilities/printSchema.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_23__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/printer.mjs\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! loglevel */ \"(rsc)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var negotiator__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! negotiator */ \"(rsc)/./node_modules/negotiator/index.js\");\n/* harmony import */ var _cachePolicy_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./cachePolicy.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/cachePolicy.js\");\n/* harmony import */ var _determineApolloConfig_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./determineApolloConfig.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/determineApolloConfig.js\");\n/* harmony import */ var _errorNormalize_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./errorNormalize.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/errorNormalize.js\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./errors/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/errors/index.js\");\n/* harmony import */ var _httpBatching_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./httpBatching.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/httpBatching.js\");\n/* harmony import */ var _internalPlugin_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./internalPlugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/internalPlugin.js\");\n/* harmony import */ var _preventCsrf_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./preventCsrf.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/preventCsrf.js\");\n/* harmony import */ var _requestPipeline_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./requestPipeline.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/requestPipeline.js\");\n/* harmony import */ var _runHttpQuery_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ./runHttpQuery.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/runHttpQuery.js\");\n/* harmony import */ var _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ./utils/HeaderMap.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/HeaderMap.js\");\n/* harmony import */ var _utils_UnreachableCaseError_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ./utils/UnreachableCaseError.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/UnreachableCaseError.js\");\n/* harmony import */ var _utils_computeCoreSchemaHash_js__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! ./utils/computeCoreSchemaHash.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/computeCoreSchemaHash.js\");\n/* harmony import */ var _utils_isDefined_js__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! ./utils/isDefined.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/isDefined.js\");\n/* harmony import */ var _utils_schemaManager_js__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! ./utils/schemaManager.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/schemaManager.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst NoIntrospection = (context) => ({\n    Field(node) {\n        if (node.name.value === '__schema' || node.name.value === '__type') {\n            context.reportError(new graphql__WEBPACK_IMPORTED_MODULE_19__.GraphQLError('GraphQL introspection is not allowed by Apollo Server, but the query contained __schema or __type. To enable introspection, pass introspection: true to ApolloServer in production', {\n                nodes: [node],\n                extensions: {\n                    validationErrorCode: _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.ApolloServerValidationErrorCode.INTROSPECTION_DISABLED,\n                },\n            }));\n        }\n    },\n});\nfunction defaultLogger() {\n    const loglevelLogger = loglevel__WEBPACK_IMPORTED_MODULE_3__.getLogger('apollo-server');\n    loglevelLogger.setLevel(loglevel__WEBPACK_IMPORTED_MODULE_3__.levels.INFO);\n    return loglevelLogger;\n}\nclass ApolloServer {\n    constructor(config) {\n        const nodeEnv = config.nodeEnv ?? \"development\" ?? '';\n        this.logger = config.logger ?? defaultLogger();\n        const apolloConfig = (0,_determineApolloConfig_js__WEBPACK_IMPORTED_MODULE_6__.determineApolloConfig)(config.apollo, this.logger);\n        const isDev = nodeEnv !== 'production';\n        if (config.cache &&\n            config.cache !== 'bounded' &&\n            _apollo_utils_keyvaluecache__WEBPACK_IMPORTED_MODULE_1__.PrefixingKeyValueCache.prefixesAreUnnecessaryForIsolation(config.cache)) {\n            throw new Error('You cannot pass a cache returned from ' +\n                '`PrefixingKeyValueCache.cacheDangerouslyDoesNotNeedPrefixesForIsolation`' +\n                'to `new ApolloServer({ cache })`, because Apollo Server may use it for ' +\n                'multiple features whose cache keys must be distinct from each other.');\n        }\n        const state = config.gateway\n            ?\n                {\n                    phase: 'initialized',\n                    schemaManager: new _utils_schemaManager_js__WEBPACK_IMPORTED_MODULE_18__.SchemaManager({\n                        gateway: config.gateway,\n                        apolloConfig,\n                        schemaDerivedDataProvider: (schema) => ApolloServer.generateSchemaDerivedData(schema, config.documentStore),\n                        logger: this.logger,\n                    }),\n                }\n            :\n                {\n                    phase: 'initialized',\n                    schemaManager: new _utils_schemaManager_js__WEBPACK_IMPORTED_MODULE_18__.SchemaManager({\n                        apiSchema: ApolloServer.constructSchema(config),\n                        schemaDerivedDataProvider: (schema) => ApolloServer.generateSchemaDerivedData(schema, config.documentStore),\n                        logger: this.logger,\n                    }),\n                };\n        const introspectionEnabled = config.introspection ?? isDev;\n        const hideSchemaDetailsFromClientErrors = config.hideSchemaDetailsFromClientErrors ?? false;\n        this.cache =\n            config.cache === undefined || config.cache === 'bounded'\n                ? new _apollo_utils_keyvaluecache__WEBPACK_IMPORTED_MODULE_1__.InMemoryLRUCache()\n                : config.cache;\n        this.internals = {\n            formatError: config.formatError,\n            rootValue: config.rootValue,\n            validationRules: [\n                ...(config.validationRules ?? []),\n                ...(introspectionEnabled ? [] : [NoIntrospection]),\n            ],\n            hideSchemaDetailsFromClientErrors,\n            dangerouslyDisableValidation: config.dangerouslyDisableValidation ?? false,\n            fieldResolver: config.fieldResolver,\n            includeStacktraceInErrorResponses: config.includeStacktraceInErrorResponses ??\n                (nodeEnv !== 'production' && nodeEnv !== 'test'),\n            persistedQueries: config.persistedQueries === false\n                ? undefined\n                : {\n                    ...config.persistedQueries,\n                    cache: new _apollo_utils_keyvaluecache__WEBPACK_IMPORTED_MODULE_1__.PrefixingKeyValueCache(config.persistedQueries?.cache ?? this.cache, _requestPipeline_js__WEBPACK_IMPORTED_MODULE_12__.APQ_CACHE_PREFIX),\n                },\n            nodeEnv,\n            allowBatchedHttpRequests: config.allowBatchedHttpRequests ?? false,\n            apolloConfig,\n            plugins: config.plugins ?? [],\n            parseOptions: config.parseOptions ?? {},\n            state,\n            stopOnTerminationSignals: config.stopOnTerminationSignals,\n            gatewayExecutor: null,\n            csrfPreventionRequestHeaders: config.csrfPrevention === true || config.csrfPrevention === undefined\n                ? _preventCsrf_js__WEBPACK_IMPORTED_MODULE_11__.recommendedCsrfPreventionRequestHeaders\n                : config.csrfPrevention === false\n                    ? null\n                    : (config.csrfPrevention.requestHeaders ??\n                        _preventCsrf_js__WEBPACK_IMPORTED_MODULE_11__.recommendedCsrfPreventionRequestHeaders),\n            status400ForVariableCoercionErrors: config.status400ForVariableCoercionErrors ?? false,\n            __testing_incrementalExecutionResults: config.__testing_incrementalExecutionResults,\n            stringifyResult: config.stringifyResult ?? _runHttpQuery_js__WEBPACK_IMPORTED_MODULE_13__.prettyJSONStringify,\n        };\n    }\n    async start() {\n        return await this._start(false);\n    }\n    startInBackgroundHandlingStartupErrorsByLoggingAndFailingAllRequests() {\n        this._start(true).catch((e) => this.logStartupError(e));\n    }\n    async _start(startedInBackground) {\n        if (this.internals.state.phase !== 'initialized') {\n            throw new Error(`You should only call 'start()' or ` +\n                `'startInBackgroundHandlingStartupErrorsByLoggingAndFailingAllRequests()' ` +\n                `once on your ApolloServer.`);\n        }\n        const schemaManager = this.internals.state.schemaManager;\n        const barrier = (0,_utils_resolvable_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        this.internals.state = {\n            phase: 'starting',\n            barrier,\n            schemaManager,\n            startedInBackground,\n        };\n        try {\n            await this.addDefaultPlugins();\n            const toDispose = [];\n            const executor = await schemaManager.start();\n            if (executor) {\n                this.internals.gatewayExecutor = executor;\n            }\n            toDispose.push(async () => {\n                await schemaManager.stop();\n            });\n            const schemaDerivedData = schemaManager.getSchemaDerivedData();\n            const service = {\n                logger: this.logger,\n                cache: this.cache,\n                schema: schemaDerivedData.schema,\n                apollo: this.internals.apolloConfig,\n                startedInBackground,\n            };\n            const taggedServerListeners = (await Promise.all(this.internals.plugins.map(async (plugin) => ({\n                serverListener: plugin.serverWillStart && (await plugin.serverWillStart(service)),\n                installedImplicitly: isImplicitlyInstallablePlugin(plugin) &&\n                    plugin.__internal_installed_implicitly__,\n            })))).filter((maybeTaggedServerListener) => typeof maybeTaggedServerListener.serverListener === 'object');\n            taggedServerListeners.forEach(({ serverListener: { schemaDidLoadOrUpdate } }) => {\n                if (schemaDidLoadOrUpdate) {\n                    schemaManager.onSchemaLoadOrUpdate(schemaDidLoadOrUpdate);\n                }\n            });\n            const serverWillStops = taggedServerListeners\n                .map((l) => l.serverListener.serverWillStop)\n                .filter(_utils_isDefined_js__WEBPACK_IMPORTED_MODULE_17__.isDefined);\n            if (serverWillStops.length) {\n                toDispose.push(async () => {\n                    await Promise.all(serverWillStops.map((serverWillStop) => serverWillStop()));\n                });\n            }\n            const drainServerCallbacks = taggedServerListeners\n                .map((l) => l.serverListener.drainServer)\n                .filter(_utils_isDefined_js__WEBPACK_IMPORTED_MODULE_17__.isDefined);\n            const drainServers = drainServerCallbacks.length\n                ? async () => {\n                    await Promise.all(drainServerCallbacks.map((drainServer) => drainServer()));\n                }\n                : null;\n            let taggedServerListenersWithRenderLandingPage = taggedServerListeners.filter((l) => l.serverListener.renderLandingPage);\n            if (taggedServerListenersWithRenderLandingPage.length > 1) {\n                taggedServerListenersWithRenderLandingPage =\n                    taggedServerListenersWithRenderLandingPage.filter((l) => !l.installedImplicitly);\n            }\n            let landingPage = null;\n            if (taggedServerListenersWithRenderLandingPage.length > 1) {\n                throw Error('Only one plugin can implement renderLandingPage.');\n            }\n            else if (taggedServerListenersWithRenderLandingPage.length) {\n                landingPage =\n                    await taggedServerListenersWithRenderLandingPage[0].serverListener\n                        .renderLandingPage();\n            }\n            const toDisposeLast = this.maybeRegisterTerminationSignalHandlers(['SIGINT', 'SIGTERM'], startedInBackground);\n            this.internals.state = {\n                phase: 'started',\n                schemaManager,\n                drainServers,\n                landingPage,\n                toDispose,\n                toDisposeLast,\n            };\n        }\n        catch (maybeError) {\n            const error = (0,_errorNormalize_js__WEBPACK_IMPORTED_MODULE_7__.ensureError)(maybeError);\n            try {\n                await Promise.all(this.internals.plugins.map(async (plugin) => plugin.startupDidFail?.({ error })));\n            }\n            catch (pluginError) {\n                this.logger.error(`startupDidFail hook threw: ${pluginError}`);\n            }\n            this.internals.state = {\n                phase: 'failed to start',\n                error,\n            };\n            throw error;\n        }\n        finally {\n            barrier.resolve();\n        }\n    }\n    maybeRegisterTerminationSignalHandlers(signals, startedInBackground) {\n        const toDisposeLast = [];\n        if (this.internals.stopOnTerminationSignals === false ||\n            (this.internals.stopOnTerminationSignals === undefined &&\n                !(_apollo_utils_isnodelike__WEBPACK_IMPORTED_MODULE_0__.isNodeLike &&\n                    this.internals.nodeEnv !== 'test' &&\n                    !startedInBackground))) {\n            return toDisposeLast;\n        }\n        let receivedSignal = false;\n        const signalHandler = async (signal) => {\n            if (receivedSignal) {\n                return;\n            }\n            receivedSignal = true;\n            try {\n                await this.stop();\n            }\n            catch (e) {\n                this.logger.error(`stop() threw during ${signal} shutdown`);\n                this.logger.error(e);\n                process.exit(1);\n            }\n            process.kill(process.pid, signal);\n        };\n        signals.forEach((signal) => {\n            process.on(signal, signalHandler);\n            toDisposeLast.push(async () => {\n                process.removeListener(signal, signalHandler);\n            });\n        });\n        return toDisposeLast;\n    }\n    async _ensureStarted() {\n        while (true) {\n            switch (this.internals.state.phase) {\n                case 'initialized':\n                    throw new Error('You need to call `server.start()` before using your Apollo Server.');\n                case 'starting':\n                    await this.internals.state.barrier;\n                    break;\n                case 'failed to start':\n                    this.logStartupError(this.internals.state.error);\n                    throw new Error('This data graph is missing a valid configuration. More details may be available in the server logs.');\n                case 'started':\n                case 'draining':\n                    return this.internals.state;\n                case 'stopping':\n                case 'stopped':\n                    this.logger.warn('A GraphQL operation was received during server shutdown. The ' +\n                        'operation will fail. Consider draining the HTTP server on shutdown; ' +\n                        'see https://go.apollo.dev/s/drain for details.');\n                    throw new Error(`Cannot execute GraphQL operations ${this.internals.state.phase === 'stopping'\n                        ? 'while the server is stopping'\n                        : 'after the server has stopped'}.'`);\n                default:\n                    throw new _utils_UnreachableCaseError_js__WEBPACK_IMPORTED_MODULE_15__.UnreachableCaseError(this.internals.state);\n            }\n        }\n    }\n    assertStarted(expressionForError) {\n        if (this.internals.state.phase !== 'started' &&\n            this.internals.state.phase !== 'draining' &&\n            !(this.internals.state.phase === 'starting' &&\n                this.internals.state.startedInBackground)) {\n            throw new Error('You must `await server.start()` before calling `' +\n                expressionForError +\n                '`');\n        }\n    }\n    logStartupError(err) {\n        this.logger.error('An error occurred during Apollo Server startup. All GraphQL requests ' +\n            'will now fail. The startup error was: ' +\n            (err?.message || err));\n    }\n    static constructSchema(config) {\n        if (config.schema) {\n            return config.schema;\n        }\n        const { typeDefs, resolvers } = config;\n        const augmentedTypeDefs = Array.isArray(typeDefs) ? typeDefs : [typeDefs];\n        return (0,_graphql_tools_schema__WEBPACK_IMPORTED_MODULE_20__.makeExecutableSchema)({\n            typeDefs: augmentedTypeDefs,\n            resolvers,\n        });\n    }\n    static generateSchemaDerivedData(schema, providedDocumentStore) {\n        (0,graphql__WEBPACK_IMPORTED_MODULE_21__.assertValidSchema)(schema);\n        return {\n            schema,\n            documentStore: providedDocumentStore === undefined\n                ? new _apollo_utils_keyvaluecache__WEBPACK_IMPORTED_MODULE_1__.InMemoryLRUCache()\n                : providedDocumentStore,\n            documentStoreKeyPrefix: providedDocumentStore\n                ? `${(0,_utils_computeCoreSchemaHash_js__WEBPACK_IMPORTED_MODULE_16__.computeCoreSchemaHash)((0,graphql__WEBPACK_IMPORTED_MODULE_22__.printSchema)(schema))}:`\n                : '',\n        };\n    }\n    async stop() {\n        switch (this.internals.state.phase) {\n            case 'initialized':\n            case 'starting':\n            case 'failed to start':\n                throw Error('apolloServer.stop() should only be called after `await apolloServer.start()` has succeeded');\n            case 'stopped':\n                if (this.internals.state.stopError) {\n                    throw this.internals.state.stopError;\n                }\n                return;\n            case 'stopping':\n            case 'draining': {\n                await this.internals.state.barrier;\n                const state = this.internals.state;\n                if (state.phase !== 'stopped') {\n                    throw Error(`Surprising post-stopping state ${state.phase}`);\n                }\n                if (state.stopError) {\n                    throw state.stopError;\n                }\n                return;\n            }\n            case 'started':\n                break;\n            default:\n                throw new _utils_UnreachableCaseError_js__WEBPACK_IMPORTED_MODULE_15__.UnreachableCaseError(this.internals.state);\n        }\n        const barrier = (0,_utils_resolvable_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])();\n        const { schemaManager, drainServers, landingPage, toDispose, toDisposeLast, } = this.internals.state;\n        this.internals.state = {\n            phase: 'draining',\n            barrier,\n            schemaManager,\n            landingPage,\n        };\n        try {\n            await drainServers?.();\n            this.internals.state = { phase: 'stopping', barrier };\n            await Promise.all([...toDispose].map((dispose) => dispose()));\n            await Promise.all([...toDisposeLast].map((dispose) => dispose()));\n        }\n        catch (stopError) {\n            this.internals.state = {\n                phase: 'stopped',\n                stopError: stopError,\n            };\n            barrier.resolve();\n            throw stopError;\n        }\n        this.internals.state = { phase: 'stopped', stopError: null };\n    }\n    async addDefaultPlugins() {\n        const { plugins, apolloConfig, nodeEnv, hideSchemaDetailsFromClientErrors, } = this.internals;\n        const isDev = nodeEnv !== 'production';\n        const alreadyHavePluginWithInternalId = (id) => plugins.some((p) => (0,_internalPlugin_js__WEBPACK_IMPORTED_MODULE_10__.pluginIsInternal)(p) && p.__internal_plugin_id__ === id);\n        const pluginsByInternalID = new Map();\n        for (const p of plugins) {\n            if ((0,_internalPlugin_js__WEBPACK_IMPORTED_MODULE_10__.pluginIsInternal)(p)) {\n                const id = p.__internal_plugin_id__;\n                if (!pluginsByInternalID.has(id)) {\n                    pluginsByInternalID.set(id, {\n                        sawDisabled: false,\n                        sawNonDisabled: false,\n                    });\n                }\n                const seen = pluginsByInternalID.get(id);\n                if (p.__is_disabled_plugin__) {\n                    seen.sawDisabled = true;\n                }\n                else {\n                    seen.sawNonDisabled = true;\n                }\n                if (seen.sawDisabled && seen.sawNonDisabled) {\n                    throw new Error(`You have tried to install both ApolloServerPlugin${id} and ` +\n                        `ApolloServerPlugin${id}Disabled in your server. Please choose ` +\n                        `whether or not you want to disable the feature and install the ` +\n                        `appropriate plugin for your use case.`);\n                }\n            }\n        }\n        {\n            if (!alreadyHavePluginWithInternalId('CacheControl')) {\n                const { ApolloServerPluginCacheControl } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@apollo\").then(__webpack_require__.bind(__webpack_require__, /*! ./plugin/cacheControl/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/cacheControl/index.js\"));\n                plugins.push(ApolloServerPluginCacheControl());\n            }\n        }\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('UsageReporting');\n            if (!alreadyHavePlugin && apolloConfig.key) {\n                if (apolloConfig.graphRef) {\n                    const { ApolloServerPluginUsageReporting } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@apollo\").then(__webpack_require__.bind(__webpack_require__, /*! ./plugin/usageReporting/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/index.js\"));\n                    plugins.unshift(ApolloServerPluginUsageReporting({\n                        __onlyIfSchemaIsNotSubgraph: true,\n                    }));\n                }\n                else {\n                    this.logger.warn('You have specified an Apollo key but have not specified a graph ref; usage ' +\n                        'reporting is disabled. To enable usage reporting, set the `APOLLO_GRAPH_REF` ' +\n                        'environment variable to `your-graph-id@your-graph-variant`. To disable this ' +\n                        'warning, install `ApolloServerPluginUsageReportingDisabled`.');\n                }\n            }\n        }\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('SchemaReporting');\n            const enabledViaEnvVar = process.env.APOLLO_SCHEMA_REPORTING === 'true';\n            if (!alreadyHavePlugin && enabledViaEnvVar) {\n                if (apolloConfig.key) {\n                    const { ApolloServerPluginSchemaReporting } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@apollo\").then(__webpack_require__.bind(__webpack_require__, /*! ./plugin/schemaReporting/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/schemaReporting/index.js\"));\n                    plugins.push(ApolloServerPluginSchemaReporting());\n                }\n                else {\n                    throw new Error(\"You've enabled schema reporting by setting the APOLLO_SCHEMA_REPORTING \" +\n                        'environment variable to true, but you also need to provide your ' +\n                        'Apollo API key, via the APOLLO_KEY environment ' +\n                        'variable or via `new ApolloServer({apollo: {key})');\n                }\n            }\n        }\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('InlineTrace');\n            if (!alreadyHavePlugin) {\n                const { ApolloServerPluginInlineTrace } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@apollo\").then(__webpack_require__.bind(__webpack_require__, /*! ./plugin/inlineTrace/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/inlineTrace/index.js\"));\n                plugins.push(ApolloServerPluginInlineTrace({ __onlyIfSchemaIsSubgraph: true }));\n            }\n        }\n        const alreadyHavePlugin = alreadyHavePluginWithInternalId('LandingPageDisabled');\n        if (!alreadyHavePlugin) {\n            const { ApolloServerPluginLandingPageLocalDefault, ApolloServerPluginLandingPageProductionDefault, } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@apollo\").then(__webpack_require__.bind(__webpack_require__, /*! ./plugin/landingPage/default/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/landingPage/default/index.js\"));\n            const plugin = isDev\n                ? ApolloServerPluginLandingPageLocalDefault()\n                : ApolloServerPluginLandingPageProductionDefault();\n            if (!isImplicitlyInstallablePlugin(plugin)) {\n                throw Error('default landing page plugin should be implicitly installable?');\n            }\n            plugin.__internal_installed_implicitly__ = true;\n            plugins.push(plugin);\n        }\n        {\n            const alreadyHavePlugin = alreadyHavePluginWithInternalId('DisableSuggestions');\n            if (hideSchemaDetailsFromClientErrors && !alreadyHavePlugin) {\n                const { ApolloServerPluginDisableSuggestions } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/@apollo\").then(__webpack_require__.bind(__webpack_require__, /*! ./plugin/disableSuggestions/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/disableSuggestions/index.js\"));\n                plugins.push(ApolloServerPluginDisableSuggestions());\n            }\n        }\n    }\n    addPlugin(plugin) {\n        if (this.internals.state.phase !== 'initialized') {\n            throw new Error(\"Can't add plugins after the server has started\");\n        }\n        this.internals.plugins.push(plugin);\n    }\n    async executeHTTPGraphQLRequest({ httpGraphQLRequest, context, }) {\n        try {\n            let runningServerState;\n            try {\n                runningServerState = await this._ensureStarted();\n            }\n            catch (error) {\n                return await this.errorResponse(error, httpGraphQLRequest);\n            }\n            if (runningServerState.landingPage &&\n                this.prefersHTML(httpGraphQLRequest)) {\n                let renderedHtml;\n                if (typeof runningServerState.landingPage.html === 'string') {\n                    renderedHtml = runningServerState.landingPage.html;\n                }\n                else {\n                    try {\n                        renderedHtml = await runningServerState.landingPage.html();\n                    }\n                    catch (maybeError) {\n                        const error = (0,_errorNormalize_js__WEBPACK_IMPORTED_MODULE_7__.ensureError)(maybeError);\n                        this.logger.error(`Landing page \\`html\\` function threw: ${error}`);\n                        return await this.errorResponse(error, httpGraphQLRequest);\n                    }\n                }\n                return {\n                    headers: new _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_14__.HeaderMap([['content-type', 'text/html']]),\n                    body: {\n                        kind: 'complete',\n                        string: renderedHtml,\n                    },\n                };\n            }\n            if (this.internals.csrfPreventionRequestHeaders) {\n                (0,_preventCsrf_js__WEBPACK_IMPORTED_MODULE_11__.preventCsrf)(httpGraphQLRequest.headers, this.internals.csrfPreventionRequestHeaders);\n            }\n            let contextValue;\n            try {\n                contextValue = await context();\n            }\n            catch (maybeError) {\n                const error = (0,_errorNormalize_js__WEBPACK_IMPORTED_MODULE_7__.ensureError)(maybeError);\n                try {\n                    await Promise.all(this.internals.plugins.map(async (plugin) => plugin.contextCreationDidFail?.({\n                        error,\n                    })));\n                }\n                catch (pluginError) {\n                    this.logger.error(`contextCreationDidFail hook threw: ${pluginError}`);\n                }\n                return await this.errorResponse((0,_errorNormalize_js__WEBPACK_IMPORTED_MODULE_7__.ensureGraphQLError)(error, 'Context creation failed: '), httpGraphQLRequest);\n            }\n            return await (0,_httpBatching_js__WEBPACK_IMPORTED_MODULE_9__.runPotentiallyBatchedHttpQuery)(this, httpGraphQLRequest, contextValue, runningServerState.schemaManager.getSchemaDerivedData(), this.internals);\n        }\n        catch (maybeError_) {\n            const maybeError = maybeError_;\n            if (maybeError instanceof graphql__WEBPACK_IMPORTED_MODULE_19__.GraphQLError &&\n                maybeError.extensions.code === _errors_index_js__WEBPACK_IMPORTED_MODULE_8__.ApolloServerErrorCode.BAD_REQUEST) {\n                try {\n                    await Promise.all(this.internals.plugins.map(async (plugin) => plugin.invalidRequestWasReceived?.({ error: maybeError })));\n                }\n                catch (pluginError) {\n                    this.logger.error(`invalidRequestWasReceived hook threw: ${pluginError}`);\n                }\n            }\n            return await this.errorResponse(maybeError, httpGraphQLRequest);\n        }\n    }\n    async errorResponse(error, requestHead) {\n        const { formattedErrors, httpFromErrors } = (0,_errorNormalize_js__WEBPACK_IMPORTED_MODULE_7__.normalizeAndFormatErrors)([error], {\n            includeStacktraceInErrorResponses: this.internals.includeStacktraceInErrorResponses,\n            formatError: this.internals.formatError,\n        });\n        return {\n            status: httpFromErrors.status ?? 500,\n            headers: new _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_14__.HeaderMap([\n                ...httpFromErrors.headers,\n                [\n                    'content-type',\n                    chooseContentTypeForSingleResultResponse(requestHead) ??\n                        MEDIA_TYPES.APPLICATION_JSON,\n                ],\n            ]),\n            body: {\n                kind: 'complete',\n                string: await this.internals.stringifyResult({\n                    errors: formattedErrors,\n                }),\n            },\n        };\n    }\n    prefersHTML(request) {\n        const acceptHeader = request.headers.get('accept');\n        return (request.method === 'GET' &&\n            !!acceptHeader &&\n            new negotiator__WEBPACK_IMPORTED_MODULE_4__({\n                headers: { accept: acceptHeader },\n            }).mediaType([\n                MEDIA_TYPES.APPLICATION_JSON,\n                MEDIA_TYPES.APPLICATION_GRAPHQL_RESPONSE_JSON,\n                MEDIA_TYPES.MULTIPART_MIXED_EXPERIMENTAL,\n                MEDIA_TYPES.MULTIPART_MIXED_NO_DEFER_SPEC,\n                MEDIA_TYPES.TEXT_HTML,\n            ]) === MEDIA_TYPES.TEXT_HTML);\n    }\n    async executeOperation(request, options = {}) {\n        if (this.internals.state.phase === 'initialized') {\n            await this.start();\n        }\n        const schemaDerivedData = (await this._ensureStarted()).schemaManager.getSchemaDerivedData();\n        const graphQLRequest = {\n            ...request,\n            query: request.query && typeof request.query !== 'string'\n                ? (0,graphql__WEBPACK_IMPORTED_MODULE_23__.print)(request.query)\n                : request.query,\n        };\n        const response = await internalExecuteOperation({\n            server: this,\n            graphQLRequest,\n            internals: this.internals,\n            schemaDerivedData,\n            sharedResponseHTTPGraphQLHead: null,\n        }, options);\n        return response;\n    }\n}\nasync function internalExecuteOperation({ server, graphQLRequest, internals, schemaDerivedData, sharedResponseHTTPGraphQLHead, }, options) {\n    const requestContext = {\n        logger: server.logger,\n        cache: server.cache,\n        schema: schemaDerivedData.schema,\n        request: graphQLRequest,\n        response: {\n            http: sharedResponseHTTPGraphQLHead ?? (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_13__.newHTTPGraphQLHead)(),\n        },\n        contextValue: cloneObject(options?.contextValue ?? {}),\n        metrics: {},\n        overallCachePolicy: (0,_cachePolicy_js__WEBPACK_IMPORTED_MODULE_5__.newCachePolicy)(),\n        requestIsBatched: sharedResponseHTTPGraphQLHead !== null,\n    };\n    try {\n        return await (0,_requestPipeline_js__WEBPACK_IMPORTED_MODULE_12__.processGraphQLRequest)(schemaDerivedData, server, internals, requestContext);\n    }\n    catch (maybeError) {\n        const error = (0,_errorNormalize_js__WEBPACK_IMPORTED_MODULE_7__.ensureError)(maybeError);\n        await Promise.all(internals.plugins.map(async (plugin) => plugin.unexpectedErrorProcessingRequest?.({\n            requestContext,\n            error,\n        })));\n        server.logger.error(`Unexpected error processing request: ${error}`);\n        throw new Error('Internal server error');\n    }\n}\nfunction isImplicitlyInstallablePlugin(p) {\n    return '__internal_installed_implicitly__' in p;\n}\nconst MEDIA_TYPES = {\n    APPLICATION_JSON: 'application/json; charset=utf-8',\n    APPLICATION_JSON_GRAPHQL_CALLBACK: 'application/json; callbackSpec=1.0; charset=utf-8',\n    APPLICATION_GRAPHQL_RESPONSE_JSON: 'application/graphql-response+json; charset=utf-8',\n    MULTIPART_MIXED_NO_DEFER_SPEC: 'multipart/mixed',\n    MULTIPART_MIXED_EXPERIMENTAL: 'multipart/mixed; deferSpec=20220824',\n    TEXT_HTML: 'text/html',\n};\nfunction chooseContentTypeForSingleResultResponse(head) {\n    const acceptHeader = head.headers.get('accept');\n    if (!acceptHeader) {\n        return MEDIA_TYPES.APPLICATION_JSON;\n    }\n    else {\n        const preferred = new negotiator__WEBPACK_IMPORTED_MODULE_4__({\n            headers: { accept: head.headers.get('accept') },\n        }).mediaType([\n            MEDIA_TYPES.APPLICATION_JSON,\n            MEDIA_TYPES.APPLICATION_GRAPHQL_RESPONSE_JSON,\n            MEDIA_TYPES.APPLICATION_JSON_GRAPHQL_CALLBACK,\n        ]);\n        if (preferred) {\n            return preferred;\n        }\n        else {\n            return null;\n        }\n    }\n}\nfunction cloneObject(object) {\n    return Object.assign(Object.create(Object.getPrototypeOf(object)), object);\n}\n//# sourceMappingURL=ApolloServer.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/ApolloServer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/cachePolicy.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/cachePolicy.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   newCachePolicy: () => (/* binding */ newCachePolicy)\n/* harmony export */ });\nfunction newCachePolicy() {\n    return {\n        maxAge: undefined,\n        scope: undefined,\n        restrict(hint) {\n            if (hint.maxAge !== undefined &&\n                (this.maxAge === undefined || hint.maxAge < this.maxAge)) {\n                this.maxAge = hint.maxAge;\n            }\n            if (hint.scope !== undefined && this.scope !== 'PRIVATE') {\n                this.scope = hint.scope;\n            }\n        },\n        replace(hint) {\n            if (hint.maxAge !== undefined) {\n                this.maxAge = hint.maxAge;\n            }\n            if (hint.scope !== undefined) {\n                this.scope = hint.scope;\n            }\n        },\n        policyIfCacheable() {\n            if (this.maxAge === undefined || this.maxAge === 0) {\n                return null;\n            }\n            return { maxAge: this.maxAge, scope: this.scope ?? 'PUBLIC' };\n        },\n    };\n}\n//# sourceMappingURL=cachePolicy.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vY2FjaGVQb2xpY3kuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQixTQUFTO0FBQ1Q7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL2NhY2hlUG9saWN5LmpzP2Y4ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIG5ld0NhY2hlUG9saWN5KCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIG1heEFnZTogdW5kZWZpbmVkLFxuICAgICAgICBzY29wZTogdW5kZWZpbmVkLFxuICAgICAgICByZXN0cmljdChoaW50KSB7XG4gICAgICAgICAgICBpZiAoaGludC5tYXhBZ2UgIT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICh0aGlzLm1heEFnZSA9PT0gdW5kZWZpbmVkIHx8IGhpbnQubWF4QWdlIDwgdGhpcy5tYXhBZ2UpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tYXhBZ2UgPSBoaW50Lm1heEFnZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChoaW50LnNjb3BlICE9PSB1bmRlZmluZWQgJiYgdGhpcy5zY29wZSAhPT0gJ1BSSVZBVEUnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zY29wZSA9IGhpbnQuc2NvcGU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHJlcGxhY2UoaGludCkge1xuICAgICAgICAgICAgaWYgKGhpbnQubWF4QWdlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1heEFnZSA9IGhpbnQubWF4QWdlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGhpbnQuc2NvcGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2NvcGUgPSBoaW50LnNjb3BlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBwb2xpY3lJZkNhY2hlYWJsZSgpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm1heEFnZSA9PT0gdW5kZWZpbmVkIHx8IHRoaXMubWF4QWdlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4geyBtYXhBZ2U6IHRoaXMubWF4QWdlLCBzY29wZTogdGhpcy5zY29wZSA/PyAnUFVCTElDJyB9O1xuICAgICAgICB9LFxuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jYWNoZVBvbGljeS5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/cachePolicy.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/determineApolloConfig.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/determineApolloConfig.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   determineApolloConfig: () => (/* binding */ determineApolloConfig)\n/* harmony export */ });\n/* harmony import */ var _apollo_utils_createhash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/utils.createhash */ \"(rsc)/./node_modules/@apollo/utils.createhash/dist/index.js\");\n\nfunction determineApolloConfig(input, logger) {\n    const apolloConfig = {};\n    const { APOLLO_KEY, APOLLO_GRAPH_REF, APOLLO_GRAPH_ID, APOLLO_GRAPH_VARIANT, } = process.env;\n    if (input?.key) {\n        apolloConfig.key = input.key.trim();\n    }\n    else if (APOLLO_KEY) {\n        apolloConfig.key = APOLLO_KEY.trim();\n    }\n    if ((input?.key ?? APOLLO_KEY) !== apolloConfig.key) {\n        logger.warn('The provided API key has unexpected leading or trailing whitespace. ' +\n            'Apollo Server will trim the key value before use.');\n    }\n    if (apolloConfig.key) {\n        assertValidHeaderValue(apolloConfig.key);\n    }\n    if (apolloConfig.key) {\n        apolloConfig.keyHash = (0,_apollo_utils_createhash__WEBPACK_IMPORTED_MODULE_0__.createHash)('sha512')\n            .update(apolloConfig.key)\n            .digest('hex');\n    }\n    if (input?.graphRef) {\n        apolloConfig.graphRef = input.graphRef;\n    }\n    else if (APOLLO_GRAPH_REF) {\n        apolloConfig.graphRef = APOLLO_GRAPH_REF;\n    }\n    const graphId = input?.graphId ?? APOLLO_GRAPH_ID;\n    const graphVariant = input?.graphVariant ?? APOLLO_GRAPH_VARIANT;\n    if (apolloConfig.graphRef) {\n        if (graphId) {\n            throw new Error('Cannot specify both graph ref and graph ID. Please use ' +\n                '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph ID.');\n        }\n        if (graphVariant) {\n            throw new Error('Cannot specify both graph ref and graph variant. Please use ' +\n                '`apollo.graphRef` or `APOLLO_GRAPH_REF` without also setting the graph variant.');\n        }\n    }\n    else if (graphId) {\n        apolloConfig.graphRef = graphVariant\n            ? `${graphId}@${graphVariant}`\n            : graphId;\n    }\n    return apolloConfig;\n}\nfunction assertValidHeaderValue(value) {\n    const invalidHeaderCharRegex = /[^\\t\\x20-\\x7e\\x80-\\xff]/g;\n    if (invalidHeaderCharRegex.test(value)) {\n        const invalidChars = value.match(invalidHeaderCharRegex);\n        throw new Error(`The API key provided to Apollo Server contains characters which are invalid as HTTP header values. The following characters found in the key are invalid: ${invalidChars.join(', ')}. Valid header values may only contain ASCII visible characters. If you think there is an issue with your key, please contact Apollo support.`);\n    }\n}\n//# sourceMappingURL=determineApolloConfig.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vZGV0ZXJtaW5lQXBvbGxvQ29uZmlnLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNEO0FBQy9DO0FBQ1A7QUFDQSxZQUFZLHVFQUF1RTtBQUNuRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsK0JBQStCLG9FQUFVO0FBQ3pDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsUUFBUSxHQUFHLGFBQWE7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFMQUFxTCx3QkFBd0I7QUFDN007QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL2RldGVybWluZUFwb2xsb0NvbmZpZy5qcz81ZWQ4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tICdAYXBvbGxvL3V0aWxzLmNyZWF0ZWhhc2gnO1xuZXhwb3J0IGZ1bmN0aW9uIGRldGVybWluZUFwb2xsb0NvbmZpZyhpbnB1dCwgbG9nZ2VyKSB7XG4gICAgY29uc3QgYXBvbGxvQ29uZmlnID0ge307XG4gICAgY29uc3QgeyBBUE9MTE9fS0VZLCBBUE9MTE9fR1JBUEhfUkVGLCBBUE9MTE9fR1JBUEhfSUQsIEFQT0xMT19HUkFQSF9WQVJJQU5ULCB9ID0gcHJvY2Vzcy5lbnY7XG4gICAgaWYgKGlucHV0Py5rZXkpIHtcbiAgICAgICAgYXBvbGxvQ29uZmlnLmtleSA9IGlucHV0LmtleS50cmltKCk7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFQT0xMT19LRVkpIHtcbiAgICAgICAgYXBvbGxvQ29uZmlnLmtleSA9IEFQT0xMT19LRVkudHJpbSgpO1xuICAgIH1cbiAgICBpZiAoKGlucHV0Py5rZXkgPz8gQVBPTExPX0tFWSkgIT09IGFwb2xsb0NvbmZpZy5rZXkpIHtcbiAgICAgICAgbG9nZ2VyLndhcm4oJ1RoZSBwcm92aWRlZCBBUEkga2V5IGhhcyB1bmV4cGVjdGVkIGxlYWRpbmcgb3IgdHJhaWxpbmcgd2hpdGVzcGFjZS4gJyArXG4gICAgICAgICAgICAnQXBvbGxvIFNlcnZlciB3aWxsIHRyaW0gdGhlIGtleSB2YWx1ZSBiZWZvcmUgdXNlLicpO1xuICAgIH1cbiAgICBpZiAoYXBvbGxvQ29uZmlnLmtleSkge1xuICAgICAgICBhc3NlcnRWYWxpZEhlYWRlclZhbHVlKGFwb2xsb0NvbmZpZy5rZXkpO1xuICAgIH1cbiAgICBpZiAoYXBvbGxvQ29uZmlnLmtleSkge1xuICAgICAgICBhcG9sbG9Db25maWcua2V5SGFzaCA9IGNyZWF0ZUhhc2goJ3NoYTUxMicpXG4gICAgICAgICAgICAudXBkYXRlKGFwb2xsb0NvbmZpZy5rZXkpXG4gICAgICAgICAgICAuZGlnZXN0KCdoZXgnKTtcbiAgICB9XG4gICAgaWYgKGlucHV0Py5ncmFwaFJlZikge1xuICAgICAgICBhcG9sbG9Db25maWcuZ3JhcGhSZWYgPSBpbnB1dC5ncmFwaFJlZjtcbiAgICB9XG4gICAgZWxzZSBpZiAoQVBPTExPX0dSQVBIX1JFRikge1xuICAgICAgICBhcG9sbG9Db25maWcuZ3JhcGhSZWYgPSBBUE9MTE9fR1JBUEhfUkVGO1xuICAgIH1cbiAgICBjb25zdCBncmFwaElkID0gaW5wdXQ/LmdyYXBoSWQgPz8gQVBPTExPX0dSQVBIX0lEO1xuICAgIGNvbnN0IGdyYXBoVmFyaWFudCA9IGlucHV0Py5ncmFwaFZhcmlhbnQgPz8gQVBPTExPX0dSQVBIX1ZBUklBTlQ7XG4gICAgaWYgKGFwb2xsb0NvbmZpZy5ncmFwaFJlZikge1xuICAgICAgICBpZiAoZ3JhcGhJZCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc3BlY2lmeSBib3RoIGdyYXBoIHJlZiBhbmQgZ3JhcGggSUQuIFBsZWFzZSB1c2UgJyArXG4gICAgICAgICAgICAgICAgJ2BhcG9sbG8uZ3JhcGhSZWZgIG9yIGBBUE9MTE9fR1JBUEhfUkVGYCB3aXRob3V0IGFsc28gc2V0dGluZyB0aGUgZ3JhcGggSUQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGdyYXBoVmFyaWFudCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdDYW5ub3Qgc3BlY2lmeSBib3RoIGdyYXBoIHJlZiBhbmQgZ3JhcGggdmFyaWFudC4gUGxlYXNlIHVzZSAnICtcbiAgICAgICAgICAgICAgICAnYGFwb2xsby5ncmFwaFJlZmAgb3IgYEFQT0xMT19HUkFQSF9SRUZgIHdpdGhvdXQgYWxzbyBzZXR0aW5nIHRoZSBncmFwaCB2YXJpYW50LicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGdyYXBoSWQpIHtcbiAgICAgICAgYXBvbGxvQ29uZmlnLmdyYXBoUmVmID0gZ3JhcGhWYXJpYW50XG4gICAgICAgICAgICA/IGAke2dyYXBoSWR9QCR7Z3JhcGhWYXJpYW50fWBcbiAgICAgICAgICAgIDogZ3JhcGhJZDtcbiAgICB9XG4gICAgcmV0dXJuIGFwb2xsb0NvbmZpZztcbn1cbmZ1bmN0aW9uIGFzc2VydFZhbGlkSGVhZGVyVmFsdWUodmFsdWUpIHtcbiAgICBjb25zdCBpbnZhbGlkSGVhZGVyQ2hhclJlZ2V4ID0gL1teXFx0XFx4MjAtXFx4N2VcXHg4MC1cXHhmZl0vZztcbiAgICBpZiAoaW52YWxpZEhlYWRlckNoYXJSZWdleC50ZXN0KHZhbHVlKSkge1xuICAgICAgICBjb25zdCBpbnZhbGlkQ2hhcnMgPSB2YWx1ZS5tYXRjaChpbnZhbGlkSGVhZGVyQ2hhclJlZ2V4KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGUgQVBJIGtleSBwcm92aWRlZCB0byBBcG9sbG8gU2VydmVyIGNvbnRhaW5zIGNoYXJhY3RlcnMgd2hpY2ggYXJlIGludmFsaWQgYXMgSFRUUCBoZWFkZXIgdmFsdWVzLiBUaGUgZm9sbG93aW5nIGNoYXJhY3RlcnMgZm91bmQgaW4gdGhlIGtleSBhcmUgaW52YWxpZDogJHtpbnZhbGlkQ2hhcnMuam9pbignLCAnKX0uIFZhbGlkIGhlYWRlciB2YWx1ZXMgbWF5IG9ubHkgY29udGFpbiBBU0NJSSB2aXNpYmxlIGNoYXJhY3RlcnMuIElmIHlvdSB0aGluayB0aGVyZSBpcyBhbiBpc3N1ZSB3aXRoIHlvdXIga2V5LCBwbGVhc2UgY29udGFjdCBBcG9sbG8gc3VwcG9ydC5gKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZXRlcm1pbmVBcG9sbG9Db25maWcuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/determineApolloConfig.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/errorNormalize.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/errorNormalize.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ensureError: () => (/* binding */ ensureError),\n/* harmony export */   ensureGraphQLError: () => (/* binding */ ensureGraphQLError),\n/* harmony export */   normalizeAndFormatErrors: () => (/* binding */ normalizeAndFormatErrors)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/error/GraphQLError.mjs\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/errors/index.js\");\n/* harmony import */ var _runHttpQuery_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./runHttpQuery.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/runHttpQuery.js\");\n/* harmony import */ var _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/HeaderMap.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/HeaderMap.js\");\n\n\n\n\nfunction normalizeAndFormatErrors(errors, options = {}) {\n    const formatError = options.formatError ?? ((error) => error);\n    const httpFromErrors = (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_1__.newHTTPGraphQLHead)();\n    return {\n        httpFromErrors,\n        formattedErrors: errors.map((error) => {\n            try {\n                return formatError(enrichError(error), error);\n            }\n            catch (formattingError) {\n                if (options.includeStacktraceInErrorResponses) {\n                    return enrichError(formattingError);\n                }\n                else {\n                    return {\n                        message: 'Internal server error',\n                        extensions: { code: _errors_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloServerErrorCode.INTERNAL_SERVER_ERROR },\n                    };\n                }\n            }\n        }),\n    };\n    function enrichError(maybeError) {\n        const graphqlError = ensureGraphQLError(maybeError);\n        const extensions = {\n            ...graphqlError.extensions,\n            code: graphqlError.extensions.code ??\n                _errors_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloServerErrorCode.INTERNAL_SERVER_ERROR,\n        };\n        if (isPartialHTTPGraphQLHead(extensions.http)) {\n            (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_1__.mergeHTTPGraphQLHead)(httpFromErrors, {\n                headers: new _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_2__.HeaderMap(),\n                ...extensions.http,\n            });\n            delete extensions.http;\n        }\n        if (options.includeStacktraceInErrorResponses) {\n            extensions.stacktrace = graphqlError.stack?.split('\\n');\n        }\n        return { ...graphqlError.toJSON(), extensions };\n    }\n}\nfunction ensureError(maybeError) {\n    return maybeError instanceof Error\n        ? maybeError\n        : new graphql__WEBPACK_IMPORTED_MODULE_3__.GraphQLError('Unexpected error value: ' + String(maybeError));\n}\nfunction ensureGraphQLError(maybeError, messagePrefixIfNotGraphQLError = '') {\n    const error = ensureError(maybeError);\n    return error instanceof graphql__WEBPACK_IMPORTED_MODULE_3__.GraphQLError\n        ? error\n        : new graphql__WEBPACK_IMPORTED_MODULE_3__.GraphQLError(messagePrefixIfNotGraphQLError + error.message, {\n            originalError: error,\n        });\n}\nfunction isPartialHTTPGraphQLHead(x) {\n    return (!!x &&\n        typeof x === 'object' &&\n        (!('status' in x) || typeof x.status === 'number') &&\n        (!('headers' in x) || x.headers instanceof Map));\n}\n//# sourceMappingURL=errorNormalize.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vZXJyb3JOb3JtYWxpemUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUF3QztBQUNrQjtBQUNtQjtBQUM1QjtBQUMxQyxzREFBc0Q7QUFDN0Q7QUFDQSwyQkFBMkIsb0VBQWtCO0FBQzdDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0NBQXNDLE1BQU0sbUVBQXFCLHdCQUF3QjtBQUN6RjtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG1FQUFxQjtBQUNyQztBQUNBO0FBQ0EsWUFBWSxzRUFBb0I7QUFDaEMsNkJBQTZCLDBEQUFTO0FBQ3RDO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7QUFDakI7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLGNBQWMsaURBQVk7QUFDMUI7QUFDTztBQUNQO0FBQ0EsNEJBQTRCLGlEQUFZO0FBQ3hDO0FBQ0EsY0FBYyxpREFBWTtBQUMxQjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL2Vycm9yTm9ybWFsaXplLmpzPzVjMjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JhcGhRTEVycm9yLCB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHsgQXBvbGxvU2VydmVyRXJyb3JDb2RlIH0gZnJvbSAnLi9lcnJvcnMvaW5kZXguanMnO1xuaW1wb3J0IHsgbWVyZ2VIVFRQR3JhcGhRTEhlYWQsIG5ld0hUVFBHcmFwaFFMSGVhZCB9IGZyb20gJy4vcnVuSHR0cFF1ZXJ5LmpzJztcbmltcG9ydCB7IEhlYWRlck1hcCB9IGZyb20gJy4vdXRpbHMvSGVhZGVyTWFwLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemVBbmRGb3JtYXRFcnJvcnMoZXJyb3JzLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCBmb3JtYXRFcnJvciA9IG9wdGlvbnMuZm9ybWF0RXJyb3IgPz8gKChlcnJvcikgPT4gZXJyb3IpO1xuICAgIGNvbnN0IGh0dHBGcm9tRXJyb3JzID0gbmV3SFRUUEdyYXBoUUxIZWFkKCk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgaHR0cEZyb21FcnJvcnMsXG4gICAgICAgIGZvcm1hdHRlZEVycm9yczogZXJyb3JzLm1hcCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZvcm1hdEVycm9yKGVucmljaEVycm9yKGVycm9yKSwgZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGZvcm1hdHRpbmdFcnJvcikge1xuICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVTdGFja3RyYWNlSW5FcnJvclJlc3BvbnNlcykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZW5yaWNoRXJyb3IoZm9ybWF0dGluZ0Vycm9yKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnSW50ZXJuYWwgc2VydmVyIGVycm9yJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dGVuc2lvbnM6IHsgY29kZTogQXBvbGxvU2VydmVyRXJyb3JDb2RlLklOVEVSTkFMX1NFUlZFUl9FUlJPUiB9LFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSksXG4gICAgfTtcbiAgICBmdW5jdGlvbiBlbnJpY2hFcnJvcihtYXliZUVycm9yKSB7XG4gICAgICAgIGNvbnN0IGdyYXBocWxFcnJvciA9IGVuc3VyZUdyYXBoUUxFcnJvcihtYXliZUVycm9yKTtcbiAgICAgICAgY29uc3QgZXh0ZW5zaW9ucyA9IHtcbiAgICAgICAgICAgIC4uLmdyYXBocWxFcnJvci5leHRlbnNpb25zLFxuICAgICAgICAgICAgY29kZTogZ3JhcGhxbEVycm9yLmV4dGVuc2lvbnMuY29kZSA/P1xuICAgICAgICAgICAgICAgIEFwb2xsb1NlcnZlckVycm9yQ29kZS5JTlRFUk5BTF9TRVJWRVJfRVJST1IsXG4gICAgICAgIH07XG4gICAgICAgIGlmIChpc1BhcnRpYWxIVFRQR3JhcGhRTEhlYWQoZXh0ZW5zaW9ucy5odHRwKSkge1xuICAgICAgICAgICAgbWVyZ2VIVFRQR3JhcGhRTEhlYWQoaHR0cEZyb21FcnJvcnMsIHtcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiBuZXcgSGVhZGVyTWFwKCksXG4gICAgICAgICAgICAgICAgLi4uZXh0ZW5zaW9ucy5odHRwLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkZWxldGUgZXh0ZW5zaW9ucy5odHRwO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmluY2x1ZGVTdGFja3RyYWNlSW5FcnJvclJlc3BvbnNlcykge1xuICAgICAgICAgICAgZXh0ZW5zaW9ucy5zdGFja3RyYWNlID0gZ3JhcGhxbEVycm9yLnN0YWNrPy5zcGxpdCgnXFxuJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHsgLi4uZ3JhcGhxbEVycm9yLnRvSlNPTigpLCBleHRlbnNpb25zIH07XG4gICAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUVycm9yKG1heWJlRXJyb3IpIHtcbiAgICByZXR1cm4gbWF5YmVFcnJvciBpbnN0YW5jZW9mIEVycm9yXG4gICAgICAgID8gbWF5YmVFcnJvclxuICAgICAgICA6IG5ldyBHcmFwaFFMRXJyb3IoJ1VuZXhwZWN0ZWQgZXJyb3IgdmFsdWU6ICcgKyBTdHJpbmcobWF5YmVFcnJvcikpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGVuc3VyZUdyYXBoUUxFcnJvcihtYXliZUVycm9yLCBtZXNzYWdlUHJlZml4SWZOb3RHcmFwaFFMRXJyb3IgPSAnJykge1xuICAgIGNvbnN0IGVycm9yID0gZW5zdXJlRXJyb3IobWF5YmVFcnJvcik7XG4gICAgcmV0dXJuIGVycm9yIGluc3RhbmNlb2YgR3JhcGhRTEVycm9yXG4gICAgICAgID8gZXJyb3JcbiAgICAgICAgOiBuZXcgR3JhcGhRTEVycm9yKG1lc3NhZ2VQcmVmaXhJZk5vdEdyYXBoUUxFcnJvciArIGVycm9yLm1lc3NhZ2UsIHtcbiAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGVycm9yLFxuICAgICAgICB9KTtcbn1cbmZ1bmN0aW9uIGlzUGFydGlhbEhUVFBHcmFwaFFMSGVhZCh4KSB7XG4gICAgcmV0dXJuICghIXggJiZcbiAgICAgICAgdHlwZW9mIHggPT09ICdvYmplY3QnICYmXG4gICAgICAgICghKCdzdGF0dXMnIGluIHgpIHx8IHR5cGVvZiB4LnN0YXR1cyA9PT0gJ251bWJlcicpICYmXG4gICAgICAgICghKCdoZWFkZXJzJyBpbiB4KSB8fCB4LmhlYWRlcnMgaW5zdGFuY2VvZiBNYXApKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWVycm9yTm9ybWFsaXplLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/errorNormalize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/errors/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/errors/index.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloServerErrorCode: () => (/* binding */ ApolloServerErrorCode),\n/* harmony export */   ApolloServerValidationErrorCode: () => (/* binding */ ApolloServerValidationErrorCode),\n/* harmony export */   unwrapResolverError: () => (/* binding */ unwrapResolverError)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/error/GraphQLError.mjs\");\n\nvar ApolloServerErrorCode;\n(function (ApolloServerErrorCode) {\n    ApolloServerErrorCode[\"INTERNAL_SERVER_ERROR\"] = \"INTERNAL_SERVER_ERROR\";\n    ApolloServerErrorCode[\"GRAPHQL_PARSE_FAILED\"] = \"GRAPHQL_PARSE_FAILED\";\n    ApolloServerErrorCode[\"GRAPHQL_VALIDATION_FAILED\"] = \"GRAPHQL_VALIDATION_FAILED\";\n    ApolloServerErrorCode[\"PERSISTED_QUERY_NOT_FOUND\"] = \"PERSISTED_QUERY_NOT_FOUND\";\n    ApolloServerErrorCode[\"PERSISTED_QUERY_NOT_SUPPORTED\"] = \"PERSISTED_QUERY_NOT_SUPPORTED\";\n    ApolloServerErrorCode[\"BAD_USER_INPUT\"] = \"BAD_USER_INPUT\";\n    ApolloServerErrorCode[\"OPERATION_RESOLUTION_FAILURE\"] = \"OPERATION_RESOLUTION_FAILURE\";\n    ApolloServerErrorCode[\"BAD_REQUEST\"] = \"BAD_REQUEST\";\n})(ApolloServerErrorCode || (ApolloServerErrorCode = {}));\nvar ApolloServerValidationErrorCode;\n(function (ApolloServerValidationErrorCode) {\n    ApolloServerValidationErrorCode[\"INTROSPECTION_DISABLED\"] = \"INTROSPECTION_DISABLED\";\n})(ApolloServerValidationErrorCode || (ApolloServerValidationErrorCode = {}));\nfunction unwrapResolverError(error) {\n    if (error instanceof graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLError && error.path && error.originalError) {\n        return error.originalError;\n    }\n    return error;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vZXJyb3JzL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBdUM7QUFDaEM7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLHNEQUFzRDtBQUNoRDtBQUNQO0FBQ0E7QUFDQSxDQUFDLDBFQUEwRTtBQUNwRTtBQUNQLHlCQUF5QixpREFBWTtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL2Vycm9ycy9pbmRleC5qcz85ZTEyIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEdyYXBoUUxFcnJvciB9IGZyb20gJ2dyYXBocWwnO1xuZXhwb3J0IHZhciBBcG9sbG9TZXJ2ZXJFcnJvckNvZGU7XG4oZnVuY3Rpb24gKEFwb2xsb1NlcnZlckVycm9yQ29kZSkge1xuICAgIEFwb2xsb1NlcnZlckVycm9yQ29kZVtcIklOVEVSTkFMX1NFUlZFUl9FUlJPUlwiXSA9IFwiSU5URVJOQUxfU0VSVkVSX0VSUk9SXCI7XG4gICAgQXBvbGxvU2VydmVyRXJyb3JDb2RlW1wiR1JBUEhRTF9QQVJTRV9GQUlMRURcIl0gPSBcIkdSQVBIUUxfUEFSU0VfRkFJTEVEXCI7XG4gICAgQXBvbGxvU2VydmVyRXJyb3JDb2RlW1wiR1JBUEhRTF9WQUxJREFUSU9OX0ZBSUxFRFwiXSA9IFwiR1JBUEhRTF9WQUxJREFUSU9OX0ZBSUxFRFwiO1xuICAgIEFwb2xsb1NlcnZlckVycm9yQ29kZVtcIlBFUlNJU1RFRF9RVUVSWV9OT1RfRk9VTkRcIl0gPSBcIlBFUlNJU1RFRF9RVUVSWV9OT1RfRk9VTkRcIjtcbiAgICBBcG9sbG9TZXJ2ZXJFcnJvckNvZGVbXCJQRVJTSVNURURfUVVFUllfTk9UX1NVUFBPUlRFRFwiXSA9IFwiUEVSU0lTVEVEX1FVRVJZX05PVF9TVVBQT1JURURcIjtcbiAgICBBcG9sbG9TZXJ2ZXJFcnJvckNvZGVbXCJCQURfVVNFUl9JTlBVVFwiXSA9IFwiQkFEX1VTRVJfSU5QVVRcIjtcbiAgICBBcG9sbG9TZXJ2ZXJFcnJvckNvZGVbXCJPUEVSQVRJT05fUkVTT0xVVElPTl9GQUlMVVJFXCJdID0gXCJPUEVSQVRJT05fUkVTT0xVVElPTl9GQUlMVVJFXCI7XG4gICAgQXBvbGxvU2VydmVyRXJyb3JDb2RlW1wiQkFEX1JFUVVFU1RcIl0gPSBcIkJBRF9SRVFVRVNUXCI7XG59KShBcG9sbG9TZXJ2ZXJFcnJvckNvZGUgfHwgKEFwb2xsb1NlcnZlckVycm9yQ29kZSA9IHt9KSk7XG5leHBvcnQgdmFyIEFwb2xsb1NlcnZlclZhbGlkYXRpb25FcnJvckNvZGU7XG4oZnVuY3Rpb24gKEFwb2xsb1NlcnZlclZhbGlkYXRpb25FcnJvckNvZGUpIHtcbiAgICBBcG9sbG9TZXJ2ZXJWYWxpZGF0aW9uRXJyb3JDb2RlW1wiSU5UUk9TUEVDVElPTl9ESVNBQkxFRFwiXSA9IFwiSU5UUk9TUEVDVElPTl9ESVNBQkxFRFwiO1xufSkoQXBvbGxvU2VydmVyVmFsaWRhdGlvbkVycm9yQ29kZSB8fCAoQXBvbGxvU2VydmVyVmFsaWRhdGlvbkVycm9yQ29kZSA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gdW53cmFwUmVzb2x2ZXJFcnJvcihlcnJvcikge1xuICAgIGlmIChlcnJvciBpbnN0YW5jZW9mIEdyYXBoUUxFcnJvciAmJiBlcnJvci5wYXRoICYmIGVycm9yLm9yaWdpbmFsRXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGVycm9yLm9yaWdpbmFsRXJyb3I7XG4gICAgfVxuICAgIHJldHVybiBlcnJvcjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/errors/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/externalTypes/index.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/externalTypes/index.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vZXh0ZXJuYWxUeXBlcy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiO0FBQVU7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2VzbS9leHRlcm5hbFR5cGVzL2luZGV4LmpzPzdiNzEiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHt9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/externalTypes/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/generated/packageVersion.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/generated/packageVersion.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   packageVersion: () => (/* binding */ packageVersion)\n/* harmony export */ });\nconst packageVersion = \"4.11.0\";\n//# sourceMappingURL=packageVersion.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vZ2VuZXJhdGVkL3BhY2thZ2VWZXJzaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL2dlbmVyYXRlZC9wYWNrYWdlVmVyc2lvbi5qcz8zYTA4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjb25zdCBwYWNrYWdlVmVyc2lvbiA9IFwiNC4xMS4wXCI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWNrYWdlVmVyc2lvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/generated/packageVersion.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/httpBatching.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/httpBatching.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   runPotentiallyBatchedHttpQuery: () => (/* binding */ runPotentiallyBatchedHttpQuery)\n/* harmony export */ });\n/* harmony import */ var _runHttpQuery_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./runHttpQuery.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/runHttpQuery.js\");\n/* harmony import */ var _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internalErrorClasses.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/internalErrorClasses.js\");\n\n\nasync function runBatchedHttpQuery({ server, batchRequest, body, contextValue, schemaDerivedData, internals, }) {\n    if (body.length === 0) {\n        throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError('No operations found in request.');\n    }\n    const sharedResponseHTTPGraphQLHead = (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_0__.newHTTPGraphQLHead)();\n    const responseBodies = await Promise.all(body.map(async (bodyPiece) => {\n        const singleRequest = {\n            ...batchRequest,\n            body: bodyPiece,\n        };\n        const response = await (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_0__.runHttpQuery)({\n            server,\n            httpRequest: singleRequest,\n            contextValue,\n            schemaDerivedData,\n            internals,\n            sharedResponseHTTPGraphQLHead,\n        });\n        if (response.body.kind === 'chunked') {\n            throw Error('Incremental delivery is not implemented for batch requests');\n        }\n        return response.body.string;\n    }));\n    return {\n        ...sharedResponseHTTPGraphQLHead,\n        body: { kind: 'complete', string: `[${responseBodies.join(',')}]` },\n    };\n}\nasync function runPotentiallyBatchedHttpQuery(server, httpGraphQLRequest, contextValue, schemaDerivedData, internals) {\n    if (!(httpGraphQLRequest.method === 'POST' &&\n        Array.isArray(httpGraphQLRequest.body))) {\n        return await (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_0__.runHttpQuery)({\n            server,\n            httpRequest: httpGraphQLRequest,\n            contextValue,\n            schemaDerivedData,\n            internals,\n            sharedResponseHTTPGraphQLHead: null,\n        });\n    }\n    if (internals.allowBatchedHttpRequests) {\n        return await runBatchedHttpQuery({\n            server,\n            batchRequest: httpGraphQLRequest,\n            body: httpGraphQLRequest.body,\n            contextValue,\n            schemaDerivedData,\n            internals,\n        });\n    }\n    throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError('Operation batching disabled.');\n}\n//# sourceMappingURL=httpBatching.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vaHR0cEJhdGNoaW5nLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFxRTtBQUNUO0FBQzVELHFDQUFxQyx5RUFBeUU7QUFDOUc7QUFDQSxrQkFBa0IscUVBQWU7QUFDakM7QUFDQSwwQ0FBMEMsb0VBQWtCO0FBQzVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsOERBQVk7QUFDM0M7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxnQkFBZ0IsOEJBQThCLHlCQUF5QixJQUFJO0FBQzNFO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxxQkFBcUIsOERBQVk7QUFDakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBLGNBQWMscUVBQWU7QUFDN0I7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2VzbS9odHRwQmF0Y2hpbmcuanM/YmVjZCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBuZXdIVFRQR3JhcGhRTEhlYWQsIHJ1bkh0dHBRdWVyeSB9IGZyb20gJy4vcnVuSHR0cFF1ZXJ5LmpzJztcbmltcG9ydCB7IEJhZFJlcXVlc3RFcnJvciB9IGZyb20gJy4vaW50ZXJuYWxFcnJvckNsYXNzZXMuanMnO1xuYXN5bmMgZnVuY3Rpb24gcnVuQmF0Y2hlZEh0dHBRdWVyeSh7IHNlcnZlciwgYmF0Y2hSZXF1ZXN0LCBib2R5LCBjb250ZXh0VmFsdWUsIHNjaGVtYURlcml2ZWREYXRhLCBpbnRlcm5hbHMsIH0pIHtcbiAgICBpZiAoYm9keS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IEJhZFJlcXVlc3RFcnJvcignTm8gb3BlcmF0aW9ucyBmb3VuZCBpbiByZXF1ZXN0LicpO1xuICAgIH1cbiAgICBjb25zdCBzaGFyZWRSZXNwb25zZUhUVFBHcmFwaFFMSGVhZCA9IG5ld0hUVFBHcmFwaFFMSGVhZCgpO1xuICAgIGNvbnN0IHJlc3BvbnNlQm9kaWVzID0gYXdhaXQgUHJvbWlzZS5hbGwoYm9keS5tYXAoYXN5bmMgKGJvZHlQaWVjZSkgPT4ge1xuICAgICAgICBjb25zdCBzaW5nbGVSZXF1ZXN0ID0ge1xuICAgICAgICAgICAgLi4uYmF0Y2hSZXF1ZXN0LFxuICAgICAgICAgICAgYm9keTogYm9keVBpZWNlLFxuICAgICAgICB9O1xuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHJ1bkh0dHBRdWVyeSh7XG4gICAgICAgICAgICBzZXJ2ZXIsXG4gICAgICAgICAgICBodHRwUmVxdWVzdDogc2luZ2xlUmVxdWVzdCxcbiAgICAgICAgICAgIGNvbnRleHRWYWx1ZSxcbiAgICAgICAgICAgIHNjaGVtYURlcml2ZWREYXRhLFxuICAgICAgICAgICAgaW50ZXJuYWxzLFxuICAgICAgICAgICAgc2hhcmVkUmVzcG9uc2VIVFRQR3JhcGhRTEhlYWQsXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocmVzcG9uc2UuYm9keS5raW5kID09PSAnY2h1bmtlZCcpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdJbmNyZW1lbnRhbCBkZWxpdmVyeSBpcyBub3QgaW1wbGVtZW50ZWQgZm9yIGJhdGNoIHJlcXVlc3RzJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJvZHkuc3RyaW5nO1xuICAgIH0pKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAuLi5zaGFyZWRSZXNwb25zZUhUVFBHcmFwaFFMSGVhZCxcbiAgICAgICAgYm9keTogeyBraW5kOiAnY29tcGxldGUnLCBzdHJpbmc6IGBbJHtyZXNwb25zZUJvZGllcy5qb2luKCcsJyl9XWAgfSxcbiAgICB9O1xufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJ1blBvdGVudGlhbGx5QmF0Y2hlZEh0dHBRdWVyeShzZXJ2ZXIsIGh0dHBHcmFwaFFMUmVxdWVzdCwgY29udGV4dFZhbHVlLCBzY2hlbWFEZXJpdmVkRGF0YSwgaW50ZXJuYWxzKSB7XG4gICAgaWYgKCEoaHR0cEdyYXBoUUxSZXF1ZXN0Lm1ldGhvZCA9PT0gJ1BPU1QnICYmXG4gICAgICAgIEFycmF5LmlzQXJyYXkoaHR0cEdyYXBoUUxSZXF1ZXN0LmJvZHkpKSkge1xuICAgICAgICByZXR1cm4gYXdhaXQgcnVuSHR0cFF1ZXJ5KHtcbiAgICAgICAgICAgIHNlcnZlcixcbiAgICAgICAgICAgIGh0dHBSZXF1ZXN0OiBodHRwR3JhcGhRTFJlcXVlc3QsXG4gICAgICAgICAgICBjb250ZXh0VmFsdWUsXG4gICAgICAgICAgICBzY2hlbWFEZXJpdmVkRGF0YSxcbiAgICAgICAgICAgIGludGVybmFscyxcbiAgICAgICAgICAgIHNoYXJlZFJlc3BvbnNlSFRUUEdyYXBoUUxIZWFkOiBudWxsLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgaWYgKGludGVybmFscy5hbGxvd0JhdGNoZWRIdHRwUmVxdWVzdHMpIHtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHJ1bkJhdGNoZWRIdHRwUXVlcnkoe1xuICAgICAgICAgICAgc2VydmVyLFxuICAgICAgICAgICAgYmF0Y2hSZXF1ZXN0OiBodHRwR3JhcGhRTFJlcXVlc3QsXG4gICAgICAgICAgICBib2R5OiBodHRwR3JhcGhRTFJlcXVlc3QuYm9keSxcbiAgICAgICAgICAgIGNvbnRleHRWYWx1ZSxcbiAgICAgICAgICAgIHNjaGVtYURlcml2ZWREYXRhLFxuICAgICAgICAgICAgaW50ZXJuYWxzLFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEJhZFJlcXVlc3RFcnJvcignT3BlcmF0aW9uIGJhdGNoaW5nIGRpc2FibGVkLicpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aHR0cEJhdGNoaW5nLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/httpBatching.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/incrementalDeliveryPolyfill.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/incrementalDeliveryPolyfill.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   executeIncrementally: () => (/* binding */ executeIncrementally)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/execution/execute.mjs\");\n\nlet graphqlExperimentalExecuteIncrementally = undefined;\nasync function tryToLoadGraphQL17() {\n    if (graphqlExperimentalExecuteIncrementally !== undefined) {\n        return;\n    }\n    const graphql = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! graphql */ \"(rsc)/./node_modules/graphql/index.mjs\"));\n    if ('experimentalExecuteIncrementally' in graphql) {\n        graphqlExperimentalExecuteIncrementally = graphql\n            .experimentalExecuteIncrementally;\n    }\n    else {\n        graphqlExperimentalExecuteIncrementally = null;\n    }\n}\nasync function executeIncrementally(args) {\n    await tryToLoadGraphQL17();\n    if (graphqlExperimentalExecuteIncrementally) {\n        return graphqlExperimentalExecuteIncrementally(args);\n    }\n    return (0,graphql__WEBPACK_IMPORTED_MODULE_0__.execute)(args);\n}\n//# sourceMappingURL=incrementalDeliveryPolyfill.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vaW5jcmVtZW50YWxEZWxpdmVyeVBvbHlmaWxsLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQW1DO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsNklBQWlCO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnREFBTztBQUNsQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL2luY3JlbWVudGFsRGVsaXZlcnlQb2x5ZmlsbC5qcz9kMjhhIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4ZWN1dGUsIH0gZnJvbSAnZ3JhcGhxbCc7XG5sZXQgZ3JhcGhxbEV4cGVyaW1lbnRhbEV4ZWN1dGVJbmNyZW1lbnRhbGx5ID0gdW5kZWZpbmVkO1xuYXN5bmMgZnVuY3Rpb24gdHJ5VG9Mb2FkR3JhcGhRTDE3KCkge1xuICAgIGlmIChncmFwaHFsRXhwZXJpbWVudGFsRXhlY3V0ZUluY3JlbWVudGFsbHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGdyYXBocWwgPSBhd2FpdCBpbXBvcnQoJ2dyYXBocWwnKTtcbiAgICBpZiAoJ2V4cGVyaW1lbnRhbEV4ZWN1dGVJbmNyZW1lbnRhbGx5JyBpbiBncmFwaHFsKSB7XG4gICAgICAgIGdyYXBocWxFeHBlcmltZW50YWxFeGVjdXRlSW5jcmVtZW50YWxseSA9IGdyYXBocWxcbiAgICAgICAgICAgIC5leHBlcmltZW50YWxFeGVjdXRlSW5jcmVtZW50YWxseTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGdyYXBocWxFeHBlcmltZW50YWxFeGVjdXRlSW5jcmVtZW50YWxseSA9IG51bGw7XG4gICAgfVxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGV4ZWN1dGVJbmNyZW1lbnRhbGx5KGFyZ3MpIHtcbiAgICBhd2FpdCB0cnlUb0xvYWRHcmFwaFFMMTcoKTtcbiAgICBpZiAoZ3JhcGhxbEV4cGVyaW1lbnRhbEV4ZWN1dGVJbmNyZW1lbnRhbGx5KSB7XG4gICAgICAgIHJldHVybiBncmFwaHFsRXhwZXJpbWVudGFsRXhlY3V0ZUluY3JlbWVudGFsbHkoYXJncyk7XG4gICAgfVxuICAgIHJldHVybiBleGVjdXRlKGFyZ3MpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5jcmVtZW50YWxEZWxpdmVyeVBvbHlmaWxsLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/incrementalDeliveryPolyfill.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/index.js":
/*!*******************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/index.js ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloServer: () => (/* reexport safe */ _ApolloServer_js__WEBPACK_IMPORTED_MODULE_0__.ApolloServer),\n/* harmony export */   HeaderMap: () => (/* reexport safe */ _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_1__.HeaderMap)\n/* harmony export */ });\n/* harmony import */ var _ApolloServer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApolloServer.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/ApolloServer.js\");\n/* harmony import */ var _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/HeaderMap.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/HeaderMap.js\");\n/* harmony import */ var _externalTypes_index_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./externalTypes/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/externalTypes/index.js\");\n\n\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBaUQ7QUFDQTtBQUNSO0FBQ3pDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL2luZGV4LmpzPzdlZDMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgQXBvbGxvU2VydmVyIH0gZnJvbSAnLi9BcG9sbG9TZXJ2ZXIuanMnO1xuZXhwb3J0IHsgSGVhZGVyTWFwIH0gZnJvbSAnLi91dGlscy9IZWFkZXJNYXAuanMnO1xuZXhwb3J0ICogZnJvbSAnLi9leHRlcm5hbFR5cGVzL2luZGV4LmpzJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/internalErrorClasses.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/internalErrorClasses.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BadRequestError: () => (/* binding */ BadRequestError),\n/* harmony export */   OperationResolutionError: () => (/* binding */ OperationResolutionError),\n/* harmony export */   PersistedQueryNotFoundError: () => (/* binding */ PersistedQueryNotFoundError),\n/* harmony export */   PersistedQueryNotSupportedError: () => (/* binding */ PersistedQueryNotSupportedError),\n/* harmony export */   SyntaxError: () => (/* binding */ SyntaxError),\n/* harmony export */   UserInputError: () => (/* binding */ UserInputError),\n/* harmony export */   ValidationError: () => (/* binding */ ValidationError)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/error/GraphQLError.mjs\");\n/* harmony import */ var _errors_index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./errors/index.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/errors/index.js\");\n/* harmony import */ var _runHttpQuery_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./runHttpQuery.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/runHttpQuery.js\");\n/* harmony import */ var _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/HeaderMap.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/HeaderMap.js\");\n\n\n\n\nclass GraphQLErrorWithCode extends graphql__WEBPACK_IMPORTED_MODULE_3__.GraphQLError {\n    constructor(message, code, options) {\n        super(message, {\n            ...options,\n            extensions: { ...options?.extensions, code },\n        });\n        this.name = this.constructor.name;\n    }\n}\nclass SyntaxError extends GraphQLErrorWithCode {\n    constructor(graphqlError) {\n        super(graphqlError.message, _errors_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloServerErrorCode.GRAPHQL_PARSE_FAILED, {\n            source: graphqlError.source,\n            positions: graphqlError.positions,\n            extensions: { http: (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_1__.newHTTPGraphQLHead)(400), ...graphqlError.extensions },\n            originalError: graphqlError,\n        });\n    }\n}\nclass ValidationError extends GraphQLErrorWithCode {\n    constructor(graphqlError) {\n        super(graphqlError.message, _errors_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloServerErrorCode.GRAPHQL_VALIDATION_FAILED, {\n            nodes: graphqlError.nodes,\n            extensions: {\n                http: (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_1__.newHTTPGraphQLHead)(400),\n                ...graphqlError.extensions,\n            },\n            originalError: graphqlError.originalError ?? graphqlError,\n        });\n    }\n}\nconst getPersistedQueryErrorHttp = () => ({\n    status: 200,\n    headers: new _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_2__.HeaderMap([\n        ['cache-control', 'private, no-cache, must-revalidate'],\n    ]),\n});\nclass PersistedQueryNotFoundError extends GraphQLErrorWithCode {\n    constructor() {\n        super('PersistedQueryNotFound', _errors_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloServerErrorCode.PERSISTED_QUERY_NOT_FOUND, { extensions: { http: getPersistedQueryErrorHttp() } });\n    }\n}\nclass PersistedQueryNotSupportedError extends GraphQLErrorWithCode {\n    constructor() {\n        super('PersistedQueryNotSupported', _errors_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloServerErrorCode.PERSISTED_QUERY_NOT_SUPPORTED, { extensions: { http: getPersistedQueryErrorHttp() } });\n    }\n}\nclass UserInputError extends GraphQLErrorWithCode {\n    constructor(graphqlError) {\n        super(graphqlError.message, _errors_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloServerErrorCode.BAD_USER_INPUT, {\n            nodes: graphqlError.nodes,\n            originalError: graphqlError.originalError ?? graphqlError,\n            extensions: graphqlError.extensions,\n        });\n    }\n}\nclass OperationResolutionError extends GraphQLErrorWithCode {\n    constructor(graphqlError) {\n        super(graphqlError.message, _errors_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloServerErrorCode.OPERATION_RESOLUTION_FAILURE, {\n            nodes: graphqlError.nodes,\n            originalError: graphqlError.originalError ?? graphqlError,\n            extensions: {\n                http: (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_1__.newHTTPGraphQLHead)(400),\n                ...graphqlError.extensions,\n            },\n        });\n    }\n}\nclass BadRequestError extends GraphQLErrorWithCode {\n    constructor(message, options) {\n        super(message, _errors_index_js__WEBPACK_IMPORTED_MODULE_0__.ApolloServerErrorCode.BAD_REQUEST, {\n            ...options,\n            extensions: { http: (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_1__.newHTTPGraphQLHead)(400), ...options?.extensions },\n        });\n    }\n}\n//# sourceMappingURL=internalErrorClasses.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vaW50ZXJuYWxFcnJvckNsYXNzZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBdUM7QUFDbUI7QUFDSDtBQUNOO0FBQ2pELG1DQUFtQyxpREFBWTtBQUMvQztBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsOEJBQThCO0FBQ3hELFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0Esb0NBQW9DLG1FQUFxQjtBQUN6RDtBQUNBO0FBQ0EsMEJBQTBCLE1BQU0sb0VBQWtCLG1DQUFtQztBQUNyRjtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ087QUFDUDtBQUNBLG9DQUFvQyxtRUFBcUI7QUFDekQ7QUFDQTtBQUNBLHNCQUFzQixvRUFBa0I7QUFDeEM7QUFDQSxhQUFhO0FBQ2I7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsMERBQVM7QUFDMUI7QUFDQTtBQUNBLENBQUM7QUFDTTtBQUNQO0FBQ0Esd0NBQXdDLG1FQUFxQiw4QkFBOEIsY0FBYyxzQ0FBc0M7QUFDL0k7QUFDQTtBQUNPO0FBQ1A7QUFDQSw0Q0FBNEMsbUVBQXFCLGtDQUFrQyxjQUFjLHNDQUFzQztBQUN2SjtBQUNBO0FBQ087QUFDUDtBQUNBLG9DQUFvQyxtRUFBcUI7QUFDekQ7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDTztBQUNQO0FBQ0Esb0NBQW9DLG1FQUFxQjtBQUN6RDtBQUNBO0FBQ0E7QUFDQSxzQkFBc0Isb0VBQWtCO0FBQ3hDO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ087QUFDUDtBQUNBLHVCQUF1QixtRUFBcUI7QUFDNUM7QUFDQSwwQkFBMEIsTUFBTSxvRUFBa0IsK0JBQStCO0FBQ2pGLFNBQVM7QUFDVDtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vaW50ZXJuYWxFcnJvckNsYXNzZXMuanM/YjIzZiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaFFMRXJyb3IgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IEFwb2xsb1NlcnZlckVycm9yQ29kZSB9IGZyb20gJy4vZXJyb3JzL2luZGV4LmpzJztcbmltcG9ydCB7IG5ld0hUVFBHcmFwaFFMSGVhZCB9IGZyb20gJy4vcnVuSHR0cFF1ZXJ5LmpzJztcbmltcG9ydCB7IEhlYWRlck1hcCB9IGZyb20gJy4vdXRpbHMvSGVhZGVyTWFwLmpzJztcbmNsYXNzIEdyYXBoUUxFcnJvcldpdGhDb2RlIGV4dGVuZHMgR3JhcGhRTEVycm9yIHtcbiAgICBjb25zdHJ1Y3RvcihtZXNzYWdlLCBjb2RlLCBvcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG1lc3NhZ2UsIHtcbiAgICAgICAgICAgIC4uLm9wdGlvbnMsXG4gICAgICAgICAgICBleHRlbnNpb25zOiB7IC4uLm9wdGlvbnM/LmV4dGVuc2lvbnMsIGNvZGUgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMubmFtZSA9IHRoaXMuY29uc3RydWN0b3IubmFtZTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgU3ludGF4RXJyb3IgZXh0ZW5kcyBHcmFwaFFMRXJyb3JXaXRoQ29kZSB7XG4gICAgY29uc3RydWN0b3IoZ3JhcGhxbEVycm9yKSB7XG4gICAgICAgIHN1cGVyKGdyYXBocWxFcnJvci5tZXNzYWdlLCBBcG9sbG9TZXJ2ZXJFcnJvckNvZGUuR1JBUEhRTF9QQVJTRV9GQUlMRUQsIHtcbiAgICAgICAgICAgIHNvdXJjZTogZ3JhcGhxbEVycm9yLnNvdXJjZSxcbiAgICAgICAgICAgIHBvc2l0aW9uczogZ3JhcGhxbEVycm9yLnBvc2l0aW9ucyxcbiAgICAgICAgICAgIGV4dGVuc2lvbnM6IHsgaHR0cDogbmV3SFRUUEdyYXBoUUxIZWFkKDQwMCksIC4uLmdyYXBocWxFcnJvci5leHRlbnNpb25zIH0sXG4gICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBncmFwaHFsRXJyb3IsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uRXJyb3IgZXh0ZW5kcyBHcmFwaFFMRXJyb3JXaXRoQ29kZSB7XG4gICAgY29uc3RydWN0b3IoZ3JhcGhxbEVycm9yKSB7XG4gICAgICAgIHN1cGVyKGdyYXBocWxFcnJvci5tZXNzYWdlLCBBcG9sbG9TZXJ2ZXJFcnJvckNvZGUuR1JBUEhRTF9WQUxJREFUSU9OX0ZBSUxFRCwge1xuICAgICAgICAgICAgbm9kZXM6IGdyYXBocWxFcnJvci5ub2RlcyxcbiAgICAgICAgICAgIGV4dGVuc2lvbnM6IHtcbiAgICAgICAgICAgICAgICBodHRwOiBuZXdIVFRQR3JhcGhRTEhlYWQoNDAwKSxcbiAgICAgICAgICAgICAgICAuLi5ncmFwaHFsRXJyb3IuZXh0ZW5zaW9ucyxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBncmFwaHFsRXJyb3Iub3JpZ2luYWxFcnJvciA/PyBncmFwaHFsRXJyb3IsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmNvbnN0IGdldFBlcnNpc3RlZFF1ZXJ5RXJyb3JIdHRwID0gKCkgPT4gKHtcbiAgICBzdGF0dXM6IDIwMCxcbiAgICBoZWFkZXJzOiBuZXcgSGVhZGVyTWFwKFtcbiAgICAgICAgWydjYWNoZS1jb250cm9sJywgJ3ByaXZhdGUsIG5vLWNhY2hlLCBtdXN0LXJldmFsaWRhdGUnXSxcbiAgICBdKSxcbn0pO1xuZXhwb3J0IGNsYXNzIFBlcnNpc3RlZFF1ZXJ5Tm90Rm91bmRFcnJvciBleHRlbmRzIEdyYXBoUUxFcnJvcldpdGhDb2RlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ1BlcnNpc3RlZFF1ZXJ5Tm90Rm91bmQnLCBBcG9sbG9TZXJ2ZXJFcnJvckNvZGUuUEVSU0lTVEVEX1FVRVJZX05PVF9GT1VORCwgeyBleHRlbnNpb25zOiB7IGh0dHA6IGdldFBlcnNpc3RlZFF1ZXJ5RXJyb3JIdHRwKCkgfSB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgUGVyc2lzdGVkUXVlcnlOb3RTdXBwb3J0ZWRFcnJvciBleHRlbmRzIEdyYXBoUUxFcnJvcldpdGhDb2RlIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ1BlcnNpc3RlZFF1ZXJ5Tm90U3VwcG9ydGVkJywgQXBvbGxvU2VydmVyRXJyb3JDb2RlLlBFUlNJU1RFRF9RVUVSWV9OT1RfU1VQUE9SVEVELCB7IGV4dGVuc2lvbnM6IHsgaHR0cDogZ2V0UGVyc2lzdGVkUXVlcnlFcnJvckh0dHAoKSB9IH0pO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBVc2VySW5wdXRFcnJvciBleHRlbmRzIEdyYXBoUUxFcnJvcldpdGhDb2RlIHtcbiAgICBjb25zdHJ1Y3RvcihncmFwaHFsRXJyb3IpIHtcbiAgICAgICAgc3VwZXIoZ3JhcGhxbEVycm9yLm1lc3NhZ2UsIEFwb2xsb1NlcnZlckVycm9yQ29kZS5CQURfVVNFUl9JTlBVVCwge1xuICAgICAgICAgICAgbm9kZXM6IGdyYXBocWxFcnJvci5ub2RlcyxcbiAgICAgICAgICAgIG9yaWdpbmFsRXJyb3I6IGdyYXBocWxFcnJvci5vcmlnaW5hbEVycm9yID8/IGdyYXBocWxFcnJvcixcbiAgICAgICAgICAgIGV4dGVuc2lvbnM6IGdyYXBocWxFcnJvci5leHRlbnNpb25zLFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgT3BlcmF0aW9uUmVzb2x1dGlvbkVycm9yIGV4dGVuZHMgR3JhcGhRTEVycm9yV2l0aENvZGUge1xuICAgIGNvbnN0cnVjdG9yKGdyYXBocWxFcnJvcikge1xuICAgICAgICBzdXBlcihncmFwaHFsRXJyb3IubWVzc2FnZSwgQXBvbGxvU2VydmVyRXJyb3JDb2RlLk9QRVJBVElPTl9SRVNPTFVUSU9OX0ZBSUxVUkUsIHtcbiAgICAgICAgICAgIG5vZGVzOiBncmFwaHFsRXJyb3Iubm9kZXMsXG4gICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBncmFwaHFsRXJyb3Iub3JpZ2luYWxFcnJvciA/PyBncmFwaHFsRXJyb3IsXG4gICAgICAgICAgICBleHRlbnNpb25zOiB7XG4gICAgICAgICAgICAgICAgaHR0cDogbmV3SFRUUEdyYXBoUUxIZWFkKDQwMCksXG4gICAgICAgICAgICAgICAgLi4uZ3JhcGhxbEVycm9yLmV4dGVuc2lvbnMsXG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgQmFkUmVxdWVzdEVycm9yIGV4dGVuZHMgR3JhcGhRTEVycm9yV2l0aENvZGUge1xuICAgIGNvbnN0cnVjdG9yKG1lc3NhZ2UsIG9wdGlvbnMpIHtcbiAgICAgICAgc3VwZXIobWVzc2FnZSwgQXBvbGxvU2VydmVyRXJyb3JDb2RlLkJBRF9SRVFVRVNULCB7XG4gICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgZXh0ZW5zaW9uczogeyBodHRwOiBuZXdIVFRQR3JhcGhRTEhlYWQoNDAwKSwgLi4ub3B0aW9ucz8uZXh0ZW5zaW9ucyB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcm5hbEVycm9yQ2xhc3Nlcy5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/internalErrorClasses.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/internalPlugin.js":
/*!****************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/internalPlugin.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   internalPlugin: () => (/* binding */ internalPlugin),\n/* harmony export */   pluginIsInternal: () => (/* binding */ pluginIsInternal)\n/* harmony export */ });\nfunction internalPlugin(p) {\n    return p;\n}\nfunction pluginIsInternal(plugin) {\n    return '__internal_plugin_id__' in plugin;\n}\n//# sourceMappingURL=internalPlugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vaW50ZXJuYWxQbHVnaW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2VzbS9pbnRlcm5hbFBsdWdpbi5qcz82MTM4Il0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBpbnRlcm5hbFBsdWdpbihwKSB7XG4gICAgcmV0dXJuIHA7XG59XG5leHBvcnQgZnVuY3Rpb24gcGx1Z2luSXNJbnRlcm5hbChwbHVnaW4pIHtcbiAgICByZXR1cm4gJ19faW50ZXJuYWxfcGx1Z2luX2lkX18nIGluIHBsdWdpbjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVybmFsUGx1Z2luLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/internalPlugin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/cacheControl/index.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/cacheControl/index.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloServerPluginCacheControl: () => (/* binding */ ApolloServerPluginCacheControl)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/type/definition.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/jsutils/Path.mjs\");\n/* harmony import */ var _cachePolicy_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../cachePolicy.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/cachePolicy.js\");\n/* harmony import */ var _internalPlugin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../internalPlugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/internalPlugin.js\");\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/@apollo/server/node_modules/lru-cache/index.mjs\");\n\n\n\n\nfunction ApolloServerPluginCacheControl(options = Object.create(null)) {\n    let typeAnnotationCache;\n    let fieldAnnotationCache;\n    return (0,_internalPlugin_js__WEBPACK_IMPORTED_MODULE_1__.internalPlugin)({\n        __internal_plugin_id__: 'CacheControl',\n        __is_disabled_plugin__: false,\n        async serverWillStart({ schema }) {\n            typeAnnotationCache = new lru_cache__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                max: Object.values(schema.getTypeMap()).filter(graphql__WEBPACK_IMPORTED_MODULE_3__.isCompositeType)\n                    .length,\n            });\n            fieldAnnotationCache = new lru_cache__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n                max: Object.values(schema.getTypeMap())\n                    .filter(graphql__WEBPACK_IMPORTED_MODULE_3__.isObjectType)\n                    .flatMap((t) => Object.values(t.getFields())).length +\n                    Object.values(schema.getTypeMap())\n                        .filter(graphql__WEBPACK_IMPORTED_MODULE_3__.isInterfaceType)\n                        .flatMap((t) => Object.values(t.getFields())).length,\n            });\n            return undefined;\n        },\n        async requestDidStart(requestContext) {\n            function memoizedCacheAnnotationFromType(t) {\n                const existing = typeAnnotationCache.get(t);\n                if (existing) {\n                    return existing;\n                }\n                const annotation = cacheAnnotationFromType(t);\n                typeAnnotationCache.set(t, annotation);\n                return annotation;\n            }\n            function memoizedCacheAnnotationFromField(field) {\n                const existing = fieldAnnotationCache.get(field);\n                if (existing) {\n                    return existing;\n                }\n                const annotation = cacheAnnotationFromField(field);\n                fieldAnnotationCache.set(field, annotation);\n                return annotation;\n            }\n            const defaultMaxAge = options.defaultMaxAge ?? 0;\n            const calculateHttpHeaders = options.calculateHttpHeaders ?? true;\n            const { __testing__cacheHints } = options;\n            return {\n                async executionDidStart() {\n                    if (isRestricted(requestContext.overallCachePolicy)) {\n                        const fakeFieldPolicy = (0,_cachePolicy_js__WEBPACK_IMPORTED_MODULE_0__.newCachePolicy)();\n                        return {\n                            willResolveField({ info }) {\n                                info.cacheControl = {\n                                    setCacheHint: (dynamicHint) => {\n                                        fakeFieldPolicy.replace(dynamicHint);\n                                    },\n                                    cacheHint: fakeFieldPolicy,\n                                    cacheHintFromType: memoizedCacheAnnotationFromType,\n                                };\n                            },\n                        };\n                    }\n                    return {\n                        willResolveField({ info }) {\n                            const fieldPolicy = (0,_cachePolicy_js__WEBPACK_IMPORTED_MODULE_0__.newCachePolicy)();\n                            let inheritMaxAge = false;\n                            const targetType = (0,graphql__WEBPACK_IMPORTED_MODULE_3__.getNamedType)(info.returnType);\n                            if ((0,graphql__WEBPACK_IMPORTED_MODULE_3__.isCompositeType)(targetType)) {\n                                const typeAnnotation = memoizedCacheAnnotationFromType(targetType);\n                                fieldPolicy.replace(typeAnnotation);\n                                inheritMaxAge = !!typeAnnotation.inheritMaxAge;\n                            }\n                            const fieldAnnotation = memoizedCacheAnnotationFromField(info.parentType.getFields()[info.fieldName]);\n                            if (fieldAnnotation.inheritMaxAge &&\n                                fieldPolicy.maxAge === undefined) {\n                                inheritMaxAge = true;\n                                if (fieldAnnotation.scope) {\n                                    fieldPolicy.replace({ scope: fieldAnnotation.scope });\n                                }\n                            }\n                            else {\n                                fieldPolicy.replace(fieldAnnotation);\n                            }\n                            info.cacheControl = {\n                                setCacheHint: (dynamicHint) => {\n                                    fieldPolicy.replace(dynamicHint);\n                                },\n                                cacheHint: fieldPolicy,\n                                cacheHintFromType: memoizedCacheAnnotationFromType,\n                            };\n                            return () => {\n                                if (fieldPolicy.maxAge === undefined &&\n                                    (((0,graphql__WEBPACK_IMPORTED_MODULE_3__.isCompositeType)(targetType) && !inheritMaxAge) ||\n                                        !info.path.prev)) {\n                                    fieldPolicy.restrict({ maxAge: defaultMaxAge });\n                                }\n                                if (__testing__cacheHints && isRestricted(fieldPolicy)) {\n                                    const path = (0,graphql__WEBPACK_IMPORTED_MODULE_4__.pathToArray)(info.path).join('.');\n                                    if (__testing__cacheHints.has(path)) {\n                                        throw Error(\"shouldn't happen: addHint should only be called once per path\");\n                                    }\n                                    __testing__cacheHints.set(path, {\n                                        maxAge: fieldPolicy.maxAge,\n                                        scope: fieldPolicy.scope,\n                                    });\n                                }\n                                requestContext.overallCachePolicy.restrict(fieldPolicy);\n                            };\n                        },\n                    };\n                },\n                async willSendResponse(requestContext) {\n                    if (!calculateHttpHeaders) {\n                        return;\n                    }\n                    const { response, overallCachePolicy } = requestContext;\n                    const existingCacheControlHeader = parseExistingCacheControlHeader(response.http.headers.get('cache-control'));\n                    if (existingCacheControlHeader.kind === 'unparsable') {\n                        return;\n                    }\n                    const cachePolicy = (0,_cachePolicy_js__WEBPACK_IMPORTED_MODULE_0__.newCachePolicy)();\n                    cachePolicy.replace(overallCachePolicy);\n                    if (existingCacheControlHeader.kind === 'parsable-and-cacheable') {\n                        cachePolicy.restrict(existingCacheControlHeader.hint);\n                    }\n                    const policyIfCacheable = cachePolicy.policyIfCacheable();\n                    if (policyIfCacheable &&\n                        existingCacheControlHeader.kind !== 'uncacheable' &&\n                        response.body.kind === 'single' &&\n                        !response.body.singleResult.errors) {\n                        response.http.headers.set('cache-control', `max-age=${policyIfCacheable.maxAge}, ${policyIfCacheable.scope.toLowerCase()}`);\n                    }\n                    else if (calculateHttpHeaders !== 'if-cacheable') {\n                        response.http.headers.set('cache-control', CACHE_CONTROL_HEADER_UNCACHEABLE);\n                    }\n                },\n            };\n        },\n    });\n}\nconst CACHE_CONTROL_HEADER_CACHEABLE_REGEXP = /^max-age=(\\d+), (public|private)$/;\nconst CACHE_CONTROL_HEADER_UNCACHEABLE = 'no-store';\nfunction parseExistingCacheControlHeader(header) {\n    if (!header) {\n        return { kind: 'no-header' };\n    }\n    if (header === CACHE_CONTROL_HEADER_UNCACHEABLE) {\n        return { kind: 'uncacheable' };\n    }\n    const match = CACHE_CONTROL_HEADER_CACHEABLE_REGEXP.exec(header);\n    if (!match) {\n        return { kind: 'unparsable' };\n    }\n    return {\n        kind: 'parsable-and-cacheable',\n        hint: {\n            maxAge: +match[1],\n            scope: match[2] === 'public' ? 'PUBLIC' : 'PRIVATE',\n        },\n    };\n}\nfunction cacheAnnotationFromDirectives(directives) {\n    if (!directives)\n        return undefined;\n    const cacheControlDirective = directives.find((directive) => directive.name.value === 'cacheControl');\n    if (!cacheControlDirective)\n        return undefined;\n    if (!cacheControlDirective.arguments)\n        return undefined;\n    const maxAgeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === 'maxAge');\n    const scopeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === 'scope');\n    const inheritMaxAgeArgument = cacheControlDirective.arguments.find((argument) => argument.name.value === 'inheritMaxAge');\n    const scopeString = scopeArgument?.value?.kind === 'EnumValue'\n        ? scopeArgument.value.value\n        : undefined;\n    const scope = scopeString === 'PUBLIC' || scopeString === 'PRIVATE'\n        ? scopeString\n        : undefined;\n    if (inheritMaxAgeArgument?.value?.kind === 'BooleanValue' &&\n        inheritMaxAgeArgument.value.value) {\n        return { inheritMaxAge: true, scope };\n    }\n    return {\n        maxAge: maxAgeArgument?.value?.kind === 'IntValue'\n            ? parseInt(maxAgeArgument.value.value)\n            : undefined,\n        scope,\n    };\n}\nfunction cacheAnnotationFromType(t) {\n    if (t.astNode) {\n        const hint = cacheAnnotationFromDirectives(t.astNode.directives);\n        if (hint) {\n            return hint;\n        }\n    }\n    if (t.extensionASTNodes) {\n        for (const node of t.extensionASTNodes) {\n            const hint = cacheAnnotationFromDirectives(node.directives);\n            if (hint) {\n                return hint;\n            }\n        }\n    }\n    return {};\n}\nfunction cacheAnnotationFromField(field) {\n    if (field.astNode) {\n        const hint = cacheAnnotationFromDirectives(field.astNode.directives);\n        if (hint) {\n            return hint;\n        }\n    }\n    return {};\n}\nfunction isRestricted(hint) {\n    return hint.maxAge !== undefined || hint.scope !== undefined;\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/cacheControl/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/disableSuggestions/index.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/disableSuggestions/index.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloServerPluginDisableSuggestions: () => (/* binding */ ApolloServerPluginDisableSuggestions)\n/* harmony export */ });\n/* harmony import */ var _internalPlugin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../internalPlugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/internalPlugin.js\");\n\nfunction ApolloServerPluginDisableSuggestions() {\n    return (0,_internalPlugin_js__WEBPACK_IMPORTED_MODULE_0__.internalPlugin)({\n        __internal_plugin_id__: 'DisableSuggestions',\n        __is_disabled_plugin__: false,\n        async requestDidStart() {\n            return {\n                async validationDidStart() {\n                    return async (validationErrors) => {\n                        validationErrors?.forEach((error) => {\n                            error.message = error.message.replace(/ ?Did you mean(.+?)\\?$/, '');\n                        });\n                    };\n                },\n            };\n        },\n    });\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL2Rpc2FibGVTdWdnZXN0aW9ucy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5RDtBQUNsRDtBQUNQLFdBQVcsa0VBQWM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5QjtBQUN6QjtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2VzbS9wbHVnaW4vZGlzYWJsZVN1Z2dlc3Rpb25zL2luZGV4LmpzPzdjYjEiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaW50ZXJuYWxQbHVnaW4gfSBmcm9tICcuLi8uLi9pbnRlcm5hbFBsdWdpbi5qcyc7XG5leHBvcnQgZnVuY3Rpb24gQXBvbGxvU2VydmVyUGx1Z2luRGlzYWJsZVN1Z2dlc3Rpb25zKCkge1xuICAgIHJldHVybiBpbnRlcm5hbFBsdWdpbih7XG4gICAgICAgIF9faW50ZXJuYWxfcGx1Z2luX2lkX186ICdEaXNhYmxlU3VnZ2VzdGlvbnMnLFxuICAgICAgICBfX2lzX2Rpc2FibGVkX3BsdWdpbl9fOiBmYWxzZSxcbiAgICAgICAgYXN5bmMgcmVxdWVzdERpZFN0YXJ0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhc3luYyB2YWxpZGF0aW9uRGlkU3RhcnQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBhc3luYyAodmFsaWRhdGlvbkVycm9ycykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdGlvbkVycm9ycz8uZm9yRWFjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvci5tZXNzYWdlID0gZXJyb3IubWVzc2FnZS5yZXBsYWNlKC8gP0RpZCB5b3UgbWVhbiguKz8pXFw/JC8sICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/disableSuggestions/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/inlineTrace/index.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/inlineTrace/index.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloServerPluginInlineTrace: () => (/* binding */ ApolloServerPluginInlineTrace)\n/* harmony export */ });\n/* harmony import */ var _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/usage-reporting-protobuf */ \"(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/esm/protobuf.js\");\n/* harmony import */ var _traceTreeBuilder_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../traceTreeBuilder.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/traceTreeBuilder.js\");\n/* harmony import */ var _internalPlugin_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../internalPlugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/internalPlugin.js\");\n/* harmony import */ var _schemaIsSubgraph_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../schemaIsSubgraph.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/schemaIsSubgraph.js\");\n\n\n\n\nfunction ApolloServerPluginInlineTrace(options = Object.create(null)) {\n    let enabled = options.__onlyIfSchemaIsSubgraph ? null : true;\n    return (0,_internalPlugin_js__WEBPACK_IMPORTED_MODULE_2__.internalPlugin)({\n        __internal_plugin_id__: 'InlineTrace',\n        __is_disabled_plugin__: false,\n        async serverWillStart({ schema, logger }) {\n            if (enabled === null) {\n                enabled = (0,_schemaIsSubgraph_js__WEBPACK_IMPORTED_MODULE_3__.schemaIsSubgraph)(schema);\n                if (enabled) {\n                    logger.info('Enabling inline tracing for this subgraph. To disable, use ' +\n                        'ApolloServerPluginInlineTraceDisabled.');\n                }\n            }\n        },\n        async requestDidStart({ request: { http }, metrics }) {\n            if (!enabled) {\n                return;\n            }\n            const treeBuilder = new _traceTreeBuilder_js__WEBPACK_IMPORTED_MODULE_1__.TraceTreeBuilder({\n                maskedBy: 'ApolloServerPluginInlineTrace',\n                sendErrors: options.includeErrors,\n            });\n            if (http?.headers.get('apollo-federation-include-trace') !== 'ftv1') {\n                return;\n            }\n            if (metrics.captureTraces === false) {\n                return;\n            }\n            metrics.captureTraces = true;\n            treeBuilder.startTiming();\n            return {\n                async executionDidStart() {\n                    return {\n                        willResolveField({ info }) {\n                            return treeBuilder.willResolveField(info);\n                        },\n                    };\n                },\n                async didEncounterErrors({ errors }) {\n                    treeBuilder.didEncounterErrors(errors);\n                },\n                async willSendResponse({ response }) {\n                    treeBuilder.stopTiming();\n                    if (response.body.kind === 'incremental') {\n                        return;\n                    }\n                    if (metrics.queryPlanTrace) {\n                        treeBuilder.trace.queryPlan = metrics.queryPlanTrace;\n                    }\n                    const encodedUint8Array = _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.encode(treeBuilder.trace).finish();\n                    const encodedBuffer = Buffer.from(encodedUint8Array, encodedUint8Array.byteOffset, encodedUint8Array.byteLength);\n                    const extensions = response.body.singleResult.extensions ||\n                        (response.body.singleResult.extensions = Object.create(null));\n                    if (typeof extensions.ftv1 !== 'undefined') {\n                        throw new Error('The `ftv1` extension was already present.');\n                    }\n                    extensions.ftv1 = encodedBuffer.toString('base64');\n                },\n            };\n        },\n    });\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL2lubGluZVRyYWNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXlEO0FBQ0M7QUFDRDtBQUNDO0FBQ25EO0FBQ1A7QUFDQSxXQUFXLGtFQUFjO0FBQ3pCO0FBQ0E7QUFDQSxnQ0FBZ0MsZ0JBQWdCO0FBQ2hEO0FBQ0EsMEJBQTBCLHNFQUFnQjtBQUMxQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNULGdDQUFnQyxXQUFXLE1BQU0sV0FBVztBQUM1RDtBQUNBO0FBQ0E7QUFDQSxvQ0FBb0Msa0VBQWdCO0FBQ3BEO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDJDQUEyQyxNQUFNO0FBQ2pEO0FBQ0EseUJBQXlCO0FBQ3pCO0FBQ0EsaUJBQWlCO0FBQ2pCLDJDQUEyQyxRQUFRO0FBQ25EO0FBQ0EsaUJBQWlCO0FBQ2pCLHlDQUF5QyxVQUFVO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOENBQThDLG1FQUFLO0FBQ25EO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL3BsdWdpbi9pbmxpbmVUcmFjZS9pbmRleC5qcz8wNjVlIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRyYWNlIH0gZnJvbSAnQGFwb2xsby91c2FnZS1yZXBvcnRpbmctcHJvdG9idWYnO1xuaW1wb3J0IHsgVHJhY2VUcmVlQnVpbGRlciB9IGZyb20gJy4uL3RyYWNlVHJlZUJ1aWxkZXIuanMnO1xuaW1wb3J0IHsgaW50ZXJuYWxQbHVnaW4gfSBmcm9tICcuLi8uLi9pbnRlcm5hbFBsdWdpbi5qcyc7XG5pbXBvcnQgeyBzY2hlbWFJc1N1YmdyYXBoIH0gZnJvbSAnLi4vc2NoZW1hSXNTdWJncmFwaC5qcyc7XG5leHBvcnQgZnVuY3Rpb24gQXBvbGxvU2VydmVyUGx1Z2luSW5saW5lVHJhY2Uob3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCkpIHtcbiAgICBsZXQgZW5hYmxlZCA9IG9wdGlvbnMuX19vbmx5SWZTY2hlbWFJc1N1YmdyYXBoID8gbnVsbCA6IHRydWU7XG4gICAgcmV0dXJuIGludGVybmFsUGx1Z2luKHtcbiAgICAgICAgX19pbnRlcm5hbF9wbHVnaW5faWRfXzogJ0lubGluZVRyYWNlJyxcbiAgICAgICAgX19pc19kaXNhYmxlZF9wbHVnaW5fXzogZmFsc2UsXG4gICAgICAgIGFzeW5jIHNlcnZlcldpbGxTdGFydCh7IHNjaGVtYSwgbG9nZ2VyIH0pIHtcbiAgICAgICAgICAgIGlmIChlbmFibGVkID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZW5hYmxlZCA9IHNjaGVtYUlzU3ViZ3JhcGgoc2NoZW1hKTtcbiAgICAgICAgICAgICAgICBpZiAoZW5hYmxlZCkge1xuICAgICAgICAgICAgICAgICAgICBsb2dnZXIuaW5mbygnRW5hYmxpbmcgaW5saW5lIHRyYWNpbmcgZm9yIHRoaXMgc3ViZ3JhcGguIFRvIGRpc2FibGUsIHVzZSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICdBcG9sbG9TZXJ2ZXJQbHVnaW5JbmxpbmVUcmFjZURpc2FibGVkLicpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgYXN5bmMgcmVxdWVzdERpZFN0YXJ0KHsgcmVxdWVzdDogeyBodHRwIH0sIG1ldHJpY3MgfSkge1xuICAgICAgICAgICAgaWYgKCFlbmFibGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgdHJlZUJ1aWxkZXIgPSBuZXcgVHJhY2VUcmVlQnVpbGRlcih7XG4gICAgICAgICAgICAgICAgbWFza2VkQnk6ICdBcG9sbG9TZXJ2ZXJQbHVnaW5JbmxpbmVUcmFjZScsXG4gICAgICAgICAgICAgICAgc2VuZEVycm9yczogb3B0aW9ucy5pbmNsdWRlRXJyb3JzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoaHR0cD8uaGVhZGVycy5nZXQoJ2Fwb2xsby1mZWRlcmF0aW9uLWluY2x1ZGUtdHJhY2UnKSAhPT0gJ2Z0djEnKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1ldHJpY3MuY2FwdHVyZVRyYWNlcyA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBtZXRyaWNzLmNhcHR1cmVUcmFjZXMgPSB0cnVlO1xuICAgICAgICAgICAgdHJlZUJ1aWxkZXIuc3RhcnRUaW1pbmcoKTtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYXN5bmMgZXhlY3V0aW9uRGlkU3RhcnQoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB3aWxsUmVzb2x2ZUZpZWxkKHsgaW5mbyB9KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyZWVCdWlsZGVyLndpbGxSZXNvbHZlRmllbGQoaW5mbyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgYXN5bmMgZGlkRW5jb3VudGVyRXJyb3JzKHsgZXJyb3JzIH0pIHtcbiAgICAgICAgICAgICAgICAgICAgdHJlZUJ1aWxkZXIuZGlkRW5jb3VudGVyRXJyb3JzKGVycm9ycyk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhc3luYyB3aWxsU2VuZFJlc3BvbnNlKHsgcmVzcG9uc2UgfSkge1xuICAgICAgICAgICAgICAgICAgICB0cmVlQnVpbGRlci5zdG9wVGltaW5nKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5ib2R5LmtpbmQgPT09ICdpbmNyZW1lbnRhbCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobWV0cmljcy5xdWVyeVBsYW5UcmFjZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJlZUJ1aWxkZXIudHJhY2UucXVlcnlQbGFuID0gbWV0cmljcy5xdWVyeVBsYW5UcmFjZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlbmNvZGVkVWludDhBcnJheSA9IFRyYWNlLmVuY29kZSh0cmVlQnVpbGRlci50cmFjZSkuZmluaXNoKCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGVuY29kZWRCdWZmZXIgPSBCdWZmZXIuZnJvbShlbmNvZGVkVWludDhBcnJheSwgZW5jb2RlZFVpbnQ4QXJyYXkuYnl0ZU9mZnNldCwgZW5jb2RlZFVpbnQ4QXJyYXkuYnl0ZUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4dGVuc2lvbnMgPSByZXNwb25zZS5ib2R5LnNpbmdsZVJlc3VsdC5leHRlbnNpb25zIHx8XG4gICAgICAgICAgICAgICAgICAgICAgICAocmVzcG9uc2UuYm9keS5zaW5nbGVSZXN1bHQuZXh0ZW5zaW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGV4dGVuc2lvbnMuZnR2MSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIGBmdHYxYCBleHRlbnNpb24gd2FzIGFscmVhZHkgcHJlc2VudC4nKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBleHRlbnNpb25zLmZ0djEgPSBlbmNvZGVkQnVmZmVyLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/inlineTrace/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/landingPage/default/getEmbeddedHTML.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/landingPage/default/getEmbeddedHTML.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEmbeddedExplorerHTML: () => (/* binding */ getEmbeddedExplorerHTML),\n/* harmony export */   getEmbeddedSandboxHTML: () => (/* binding */ getEmbeddedSandboxHTML)\n/* harmony export */ });\nfunction getConfigStringForHtml(config) {\n    return JSON.stringify(config)\n        .replace('<', '\\\\u003c')\n        .replace('>', '\\\\u003e')\n        .replace('&', '\\\\u0026')\n        .replace(\"'\", '\\\\u0027');\n}\nconst getEmbeddedExplorerHTML = (explorerCdnVersion, config, apolloServerVersion, nonce) => {\n    const productionLandingPageEmbedConfigOrDefault = {\n        displayOptions: {},\n        persistExplorerState: false,\n        runTelemetry: true,\n        ...(typeof config.embed === 'boolean' ? {} : config.embed),\n    };\n    const embeddedExplorerParams = {\n        graphRef: config.graphRef,\n        target: '#embeddableExplorer',\n        initialState: {\n            ...('document' in config || 'headers' in config || 'variables' in config\n                ? {\n                    document: config.document,\n                    headers: config.headers,\n                    variables: config.variables,\n                }\n                : {}),\n            ...('collectionId' in config\n                ? {\n                    collectionId: config.collectionId,\n                    operationId: config.operationId,\n                }\n                : {}),\n            displayOptions: {\n                ...productionLandingPageEmbedConfigOrDefault.displayOptions,\n            },\n        },\n        persistExplorerState: productionLandingPageEmbedConfigOrDefault.persistExplorerState,\n        includeCookies: config.includeCookies,\n        runtime: apolloServerVersion,\n        runTelemetry: productionLandingPageEmbedConfigOrDefault.runTelemetry,\n        allowDynamicStyles: false,\n    };\n    return `\n<div class=\"fallback\">\n  <h1>Welcome to Apollo Server</h1>\n  <p>Apollo Explorer cannot be loaded; it appears that you might be offline.</p>\n</div>\n<style nonce=${nonce}>\n  iframe {\n    background-color: white;\n    height: 100%;\n    width: 100%;\n    border: none;\n  }\n  #embeddableExplorer {\n    width: 100vw;\n    height: 100vh;\n    position: absolute;\n    top: 0;\n  }\n</style>\n<div id=\"embeddableExplorer\"></div>\n<script nonce=\"${nonce}\" src=\"https://embeddable-explorer.cdn.apollographql.com/${encodeURIComponent(explorerCdnVersion)}/embeddable-explorer.umd.production.min.js?runtime=${encodeURIComponent(apolloServerVersion)}\"></script>\n<script nonce=\"${nonce}\">\n  var endpointUrl = window.location.href;\n  var embeddedExplorerConfig = ${getConfigStringForHtml(embeddedExplorerParams)};\n  new window.EmbeddedExplorer({\n    ...embeddedExplorerConfig,\n    endpointUrl,\n  });\n</script>\n`;\n};\nconst getEmbeddedSandboxHTML = (sandboxCdnVersion, config, apolloServerVersion, nonce) => {\n    const localDevelopmentEmbedConfigOrDefault = {\n        runTelemetry: true,\n        endpointIsEditable: false,\n        initialState: {},\n        ...(typeof config.embed === 'boolean' ? {} : (config.embed ?? {})),\n    };\n    const embeddedSandboxConfig = {\n        target: '#embeddableSandbox',\n        initialState: {\n            ...('document' in config || 'headers' in config || 'variables' in config\n                ? {\n                    document: config.document,\n                    variables: config.variables,\n                    headers: config.headers,\n                }\n                : {}),\n            ...('collectionId' in config\n                ? {\n                    collectionId: config.collectionId,\n                    operationId: config.operationId,\n                }\n                : {}),\n            includeCookies: config.includeCookies,\n            ...localDevelopmentEmbedConfigOrDefault.initialState,\n        },\n        hideCookieToggle: false,\n        endpointIsEditable: localDevelopmentEmbedConfigOrDefault.endpointIsEditable,\n        runtime: apolloServerVersion,\n        runTelemetry: localDevelopmentEmbedConfigOrDefault.runTelemetry,\n        allowDynamicStyles: false,\n    };\n    return `\n<div class=\"fallback\">\n  <h1>Welcome to Apollo Server</h1>\n  <p>Apollo Sandbox cannot be loaded; it appears that you might be offline.</p>\n</div>\n<style nonce=${nonce}>\n  iframe {\n    background-color: white;\n    height: 100%;\n    width: 100%;\n    border: none;\n  }\n  #embeddableSandbox {\n    width: 100vw;\n    height: 100vh;\n    position: absolute;\n    top: 0;\n  }\n</style>\n<div id=\"embeddableSandbox\"></div>\n<script nonce=\"${nonce}\" src=\"https://embeddable-sandbox.cdn.apollographql.com/${encodeURIComponent(sandboxCdnVersion)}/embeddable-sandbox.umd.production.min.js?runtime=${encodeURIComponent(apolloServerVersion)}\"></script>\n<script nonce=\"${nonce}\">\n  var initialEndpoint = window.location.href;\n  var embeddedSandboxConfig = ${getConfigStringForHtml(embeddedSandboxConfig)};\n  new window.EmbeddedSandbox(\n    {\n      ...embeddedSandboxConfig,\n      initialEndpoint,\n    }\n  );\n</script>\n`;\n};\n//# sourceMappingURL=getEmbeddedHTML.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/landingPage/default/getEmbeddedHTML.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/landingPage/default/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/landingPage/default/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloServerPluginLandingPageLocalDefault: () => (/* binding */ ApolloServerPluginLandingPageLocalDefault),\n/* harmony export */   ApolloServerPluginLandingPageProductionDefault: () => (/* binding */ ApolloServerPluginLandingPageProductionDefault),\n/* harmony export */   DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION: () => (/* binding */ DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION),\n/* harmony export */   DEFAULT_EMBEDDED_EXPLORER_VERSION: () => (/* binding */ DEFAULT_EMBEDDED_EXPLORER_VERSION),\n/* harmony export */   DEFAULT_EMBEDDED_SANDBOX_VERSION: () => (/* binding */ DEFAULT_EMBEDDED_SANDBOX_VERSION)\n/* harmony export */ });\n/* harmony import */ var _getEmbeddedHTML_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getEmbeddedHTML.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/landingPage/default/getEmbeddedHTML.js\");\n/* harmony import */ var _generated_packageVersion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../generated/packageVersion.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/generated/packageVersion.js\");\n/* harmony import */ var _apollo_utils_createhash__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @apollo/utils.createhash */ \"(rsc)/./node_modules/@apollo/utils.createhash/dist/index.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n\n\n\n\nfunction ApolloServerPluginLandingPageLocalDefault(options = {}) {\n    const { version, __internal_apolloStudioEnv__, ...rest } = {\n        embed: true,\n        ...options,\n    };\n    return ApolloServerPluginLandingPageDefault(version, {\n        isProd: false,\n        apolloStudioEnv: __internal_apolloStudioEnv__,\n        ...rest,\n    });\n}\nfunction ApolloServerPluginLandingPageProductionDefault(options = {}) {\n    const { version, __internal_apolloStudioEnv__, ...rest } = options;\n    return ApolloServerPluginLandingPageDefault(version, {\n        isProd: true,\n        apolloStudioEnv: __internal_apolloStudioEnv__,\n        ...rest,\n    });\n}\nfunction encodeConfig(config) {\n    return JSON.stringify(encodeURIComponent(JSON.stringify(config)));\n}\nconst getNonEmbeddedLandingPageHTML = (cdnVersion, config, apolloServerVersion, nonce) => {\n    const encodedConfig = encodeConfig(config);\n    return `\n <div class=\"fallback\">\n  <h1>Welcome to Apollo Server</h1>\n  <p>The full landing page cannot be loaded; it appears that you might be offline.</p>\n</div>\n<script nonce=\"${nonce}\">window.landingPage = ${encodedConfig};</script>\n<script nonce=\"${nonce}\" src=\"https://apollo-server-landing-page.cdn.apollographql.com/${encodeURIComponent(cdnVersion)}/static/js/main.js?runtime=${apolloServerVersion}\"></script>`;\n};\nconst DEFAULT_EMBEDDED_EXPLORER_VERSION = 'v3';\nconst DEFAULT_EMBEDDED_SANDBOX_VERSION = 'v2';\nconst DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION = '_latest';\nfunction ApolloServerPluginLandingPageDefault(maybeVersion, config) {\n    const explorerVersion = maybeVersion ?? DEFAULT_EMBEDDED_EXPLORER_VERSION;\n    const sandboxVersion = maybeVersion ?? DEFAULT_EMBEDDED_SANDBOX_VERSION;\n    const apolloServerLandingPageVersion = maybeVersion ?? DEFAULT_APOLLO_SERVER_LANDING_PAGE_VERSION;\n    const apolloServerVersion = `@apollo/server@${_generated_packageVersion_js__WEBPACK_IMPORTED_MODULE_1__.packageVersion}`;\n    const scriptSafeList = [\n        'https://apollo-server-landing-page.cdn.apollographql.com',\n        'https://embeddable-sandbox.cdn.apollographql.com',\n        'https://embeddable-explorer.cdn.apollographql.com',\n    ].join(' ');\n    const styleSafeList = [\n        'https://apollo-server-landing-page.cdn.apollographql.com',\n        'https://embeddable-sandbox.cdn.apollographql.com',\n        'https://embeddable-explorer.cdn.apollographql.com',\n        'https://fonts.googleapis.com',\n    ].join(' ');\n    const iframeSafeList = [\n        'https://explorer.embed.apollographql.com',\n        'https://sandbox.embed.apollographql.com',\n        'https://embed.apollo.local:3000',\n    ].join(' ');\n    return {\n        __internal_installed_implicitly__: false,\n        async serverWillStart(server) {\n            if (config.precomputedNonce) {\n                server.logger.warn(\"The `precomputedNonce` landing page configuration option is deprecated. Removing this option is strictly an improvement to Apollo Server's landing page Content Security Policy (CSP) implementation for preventing XSS attacks.\");\n            }\n            return {\n                async renderLandingPage() {\n                    const encodedASLandingPageVersion = encodeURIComponent(apolloServerLandingPageVersion);\n                    async function html() {\n                        const nonce = config.precomputedNonce ??\n                            (0,_apollo_utils_createhash__WEBPACK_IMPORTED_MODULE_2__.createHash)('sha256').update((0,uuid__WEBPACK_IMPORTED_MODULE_3__[\"default\"])()).digest('hex');\n                        const scriptCsp = `script-src 'self' 'nonce-${nonce}' ${scriptSafeList}`;\n                        const styleCsp = `style-src 'nonce-${nonce}' ${styleSafeList}`;\n                        const imageCsp = `img-src https://apollo-server-landing-page.cdn.apollographql.com`;\n                        const manifestCsp = `manifest-src https://apollo-server-landing-page.cdn.apollographql.com`;\n                        const frameCsp = `frame-src ${iframeSafeList}`;\n                        return `\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta http-equiv=\"Content-Security-Policy\" content=\"${scriptCsp}; ${styleCsp}; ${imageCsp}; ${manifestCsp}; ${frameCsp}\" />\n    <link\n      rel=\"icon\"\n      href=\"https://apollo-server-landing-page.cdn.apollographql.com/${encodedASLandingPageVersion}/assets/favicon.png\"\n    />\n    <meta name=\"viewport\" content=\"width=device-width,initial-scale=1\" />\n    <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" />\n    <link\n      href=\"https://fonts.googleapis.com/css2?family=Source+Sans+Pro&display=swap\"\n      rel=\"stylesheet\"\n    />\n    <meta name=\"theme-color\" content=\"#000000\" />\n    <meta name=\"description\" content=\"Apollo server landing page\" />\n    <link\n      rel=\"apple-touch-icon\"\n      href=\"https://apollo-server-landing-page.cdn.apollographql.com/${encodedASLandingPageVersion}/assets/favicon.png\"\n    />\n    <link\n      rel=\"manifest\"\n      href=\"https://apollo-server-landing-page.cdn.apollographql.com/${encodedASLandingPageVersion}/manifest.json\"\n    />\n    <title>Apollo Server</title>\n  </head>\n  <body>\n    <noscript>You need to enable JavaScript to run this app.</noscript>\n    <div id=\"react-root\">\n      <style nonce=${nonce}>\n        body {\n          margin: 0;\n          overflow-x: hidden;\n          overflow-y: hidden;\n        }\n        .fallback {\n          opacity: 0;\n          animation: fadeIn 1s 1s;\n          animation-iteration-count: 1;\n          animation-fill-mode: forwards;\n          padding: 1em;\n        }\n        @keyframes fadeIn {\n          0% {opacity:0;}\n          100% {opacity:1; }\n        }\n      </style>\n    ${config.embed\n                            ? 'graphRef' in config && config.graphRef\n                                ? (0,_getEmbeddedHTML_js__WEBPACK_IMPORTED_MODULE_0__.getEmbeddedExplorerHTML)(explorerVersion, config, apolloServerVersion, nonce)\n                                : !('graphRef' in config)\n                                    ? (0,_getEmbeddedHTML_js__WEBPACK_IMPORTED_MODULE_0__.getEmbeddedSandboxHTML)(sandboxVersion, config, apolloServerVersion, nonce)\n                                    : getNonEmbeddedLandingPageHTML(apolloServerLandingPageVersion, config, apolloServerVersion, nonce)\n                            : getNonEmbeddedLandingPageHTML(apolloServerLandingPageVersion, config, apolloServerVersion, nonce)}\n    </div>\n  </body>\n</html>\n          `;\n                    }\n                    return { html };\n                },\n            };\n        },\n    };\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/landingPage/default/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/schemaIsSubgraph.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/schemaIsSubgraph.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   schemaIsSubgraph: () => (/* binding */ schemaIsSubgraph)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/type/definition.mjs\");\n\nfunction schemaIsSubgraph(schema) {\n    const serviceType = schema.getType('_Service');\n    if (!(0,graphql__WEBPACK_IMPORTED_MODULE_0__.isObjectType)(serviceType)) {\n        return false;\n    }\n    const sdlField = serviceType.getFields().sdl;\n    if (!sdlField) {\n        return false;\n    }\n    let sdlFieldType = sdlField.type;\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_0__.isNonNullType)(sdlFieldType)) {\n        sdlFieldType = sdlFieldType.ofType;\n    }\n    if (!(0,graphql__WEBPACK_IMPORTED_MODULE_0__.isScalarType)(sdlFieldType)) {\n        return false;\n    }\n    return sdlFieldType.name == 'String';\n}\n//# sourceMappingURL=schemaIsSubgraph.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL3NjaGVtYUlzU3ViZ3JhcGguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUU7QUFDOUQ7QUFDUDtBQUNBLFNBQVMscURBQVk7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRLHNEQUFhO0FBQ3JCO0FBQ0E7QUFDQSxTQUFTLHFEQUFZO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL3NjaGVtYUlzU3ViZ3JhcGguanM/ZjMyYyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpc09iamVjdFR5cGUsIGlzU2NhbGFyVHlwZSwgaXNOb25OdWxsVHlwZSwgfSBmcm9tICdncmFwaHFsJztcbmV4cG9ydCBmdW5jdGlvbiBzY2hlbWFJc1N1YmdyYXBoKHNjaGVtYSkge1xuICAgIGNvbnN0IHNlcnZpY2VUeXBlID0gc2NoZW1hLmdldFR5cGUoJ19TZXJ2aWNlJyk7XG4gICAgaWYgKCFpc09iamVjdFR5cGUoc2VydmljZVR5cGUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgY29uc3Qgc2RsRmllbGQgPSBzZXJ2aWNlVHlwZS5nZXRGaWVsZHMoKS5zZGw7XG4gICAgaWYgKCFzZGxGaWVsZCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGxldCBzZGxGaWVsZFR5cGUgPSBzZGxGaWVsZC50eXBlO1xuICAgIGlmIChpc05vbk51bGxUeXBlKHNkbEZpZWxkVHlwZSkpIHtcbiAgICAgICAgc2RsRmllbGRUeXBlID0gc2RsRmllbGRUeXBlLm9mVHlwZTtcbiAgICB9XG4gICAgaWYgKCFpc1NjYWxhclR5cGUoc2RsRmllbGRUeXBlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBzZGxGaWVsZFR5cGUubmFtZSA9PSAnU3RyaW5nJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtYUlzU3ViZ3JhcGguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/schemaIsSubgraph.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/schemaReporting/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/schemaReporting/index.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloServerPluginSchemaReporting: () => (/* binding */ ApolloServerPluginSchemaReporting)\n/* harmony export */ });\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var _internalPlugin_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../internalPlugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/internalPlugin.js\");\n/* harmony import */ var uuid__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! uuid */ \"(rsc)/./node_modules/uuid/dist/esm-node/v4.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/type/validate.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/utilities/buildASTSchema.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/utilities/printSchema.mjs\");\n/* harmony import */ var _schemaReporter_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./schemaReporter.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/schemaReporting/schemaReporter.js\");\n/* harmony import */ var _schemaIsSubgraph_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../schemaIsSubgraph.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/schemaIsSubgraph.js\");\n/* harmony import */ var _generated_packageVersion_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../generated/packageVersion.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/generated/packageVersion.js\");\n/* harmony import */ var _utils_computeCoreSchemaHash_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../utils/computeCoreSchemaHash.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/computeCoreSchemaHash.js\");\n\n\n\n\n\n\n\n\nfunction ApolloServerPluginSchemaReporting({ initialDelayMaxMs, overrideReportedSchema, endpointUrl, fetcher, } = Object.create(null)) {\n    const bootId = (0,uuid__WEBPACK_IMPORTED_MODULE_6__[\"default\"])();\n    return (0,_internalPlugin_js__WEBPACK_IMPORTED_MODULE_1__.internalPlugin)({\n        __internal_plugin_id__: 'SchemaReporting',\n        __is_disabled_plugin__: false,\n        async serverWillStart({ apollo, schema, logger }) {\n            const { key, graphRef } = apollo;\n            if (!key) {\n                throw Error('To use ApolloServerPluginSchemaReporting, you must provide an Apollo API ' +\n                    'key, via the APOLLO_KEY environment variable or via `new ApolloServer({apollo: {key})`');\n            }\n            if (!graphRef) {\n                throw Error('To use ApolloServerPluginSchemaReporting, you must provide your graph ref (eg, ' +\n                    \"'my-graph-id@my-graph-variant'). Try setting the APOLLO_GRAPH_REF environment \" +\n                    'variable or passing `new ApolloServer({apollo: {graphRef}})`.');\n            }\n            if (overrideReportedSchema) {\n                try {\n                    const validationErrors = (0,graphql__WEBPACK_IMPORTED_MODULE_7__.validateSchema)((0,graphql__WEBPACK_IMPORTED_MODULE_8__.buildSchema)(overrideReportedSchema, { noLocation: true }));\n                    if (validationErrors.length) {\n                        throw new Error(validationErrors.map((error) => error.message).join('\\n'));\n                    }\n                }\n                catch (err) {\n                    throw new Error('The schema provided to overrideReportedSchema failed to parse or ' +\n                        `validate: ${err.message}`);\n                }\n            }\n            if ((0,_schemaIsSubgraph_js__WEBPACK_IMPORTED_MODULE_3__.schemaIsSubgraph)(schema)) {\n                throw Error([\n                    'Schema reporting is not yet compatible with Apollo Federation subgraphs.',\n                    \"If you're interested in using schema reporting with subgraphs,\",\n                    'please contact Apollo support. To set up managed federation, see',\n                    'https://go.apollo.dev/s/managed-federation',\n                ].join(' '));\n            }\n            if (endpointUrl !== undefined) {\n                logger.info(`Apollo schema reporting: schema reporting URL override: ${endpointUrl}`);\n            }\n            const baseSchemaReport = {\n                bootId,\n                graphRef,\n                platform: process.env.APOLLO_SERVER_PLATFORM || 'local',\n                runtimeVersion: `node ${process.version}`,\n                userVersion: process.env.APOLLO_SERVER_USER_VERSION,\n                serverId: process.env.APOLLO_SERVER_ID || process.env.HOSTNAME || os__WEBPACK_IMPORTED_MODULE_0__.hostname(),\n                libraryVersion: `@apollo/server@${_generated_packageVersion_js__WEBPACK_IMPORTED_MODULE_4__.packageVersion}`,\n            };\n            let currentSchemaReporter;\n            return {\n                schemaDidLoadOrUpdate({ apiSchema, coreSupergraphSdl }) {\n                    if (overrideReportedSchema !== undefined) {\n                        if (currentSchemaReporter) {\n                            return;\n                        }\n                        else {\n                            logger.info('Apollo schema reporting: schema to report has been overridden');\n                        }\n                    }\n                    const coreSchema = overrideReportedSchema ??\n                        coreSupergraphSdl ??\n                        (0,graphql__WEBPACK_IMPORTED_MODULE_9__.printSchema)(apiSchema);\n                    const coreSchemaHash = (0,_utils_computeCoreSchemaHash_js__WEBPACK_IMPORTED_MODULE_5__.computeCoreSchemaHash)(coreSchema);\n                    const schemaReport = {\n                        ...baseSchemaReport,\n                        coreSchemaHash,\n                    };\n                    currentSchemaReporter?.stop();\n                    currentSchemaReporter = new _schemaReporter_js__WEBPACK_IMPORTED_MODULE_2__.SchemaReporter({\n                        schemaReport,\n                        coreSchema,\n                        apiKey: key,\n                        endpointUrl,\n                        logger,\n                        initialReportingDelayInMs: Math.floor(Math.random() * (initialDelayMaxMs ?? 10000)),\n                        fallbackReportingDelayInMs: 20000,\n                        fetcher,\n                    });\n                    currentSchemaReporter.start();\n                    logger.info('Apollo schema reporting: reporting a new schema to Studio! See your graph at ' +\n                        `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/ with server info ${JSON.stringify(schemaReport)}`);\n                },\n                async serverWillStop() {\n                    currentSchemaReporter?.stop();\n                },\n            };\n        },\n    });\n}\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL3NjaGVtYVJlcG9ydGluZy9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQUFvQjtBQUNxQztBQUNyQjtBQUMrQjtBQUNkO0FBQ0s7QUFDUztBQUNVO0FBQ3RFLDZDQUE2QyxtRUFBbUU7QUFDdkgsbUJBQW1CLGdEQUFNO0FBQ3pCLFdBQVcsa0VBQWM7QUFDekI7QUFDQTtBQUNBLGdDQUFnQyx3QkFBd0I7QUFDeEQsb0JBQW9CLGdCQUFnQjtBQUNwQztBQUNBO0FBQ0EsNEZBQTRGLFNBQVMsSUFBSTtBQUN6RztBQUNBO0FBQ0E7QUFDQTtBQUNBLDREQUE0RCxTQUFTLFVBQVU7QUFDL0U7QUFDQTtBQUNBO0FBQ0EsNkNBQTZDLHVEQUFjLENBQUMsb0RBQVcsMkJBQTJCLGtCQUFrQjtBQUNwSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUMsWUFBWTtBQUNqRDtBQUNBO0FBQ0EsZ0JBQWdCLHNFQUFnQjtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsdUZBQXVGLFlBQVk7QUFDbkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QyxnQkFBZ0I7QUFDeEQ7QUFDQSxrRkFBa0Ysd0NBQVc7QUFDN0Ysa0RBQWtELHdFQUFjLENBQUM7QUFDakU7QUFDQTtBQUNBO0FBQ0Esd0NBQXdDLDhCQUE4QjtBQUN0RTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixvREFBVztBQUNuQywyQ0FBMkMsc0ZBQXFCO0FBQ2hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnREFBZ0QsOERBQWM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHFCQUFxQjtBQUNyQjtBQUNBO0FBQ0Esa0VBQWtFLG9CQUFvQixxQkFBcUIsNkJBQTZCO0FBQ3hJLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0EsU0FBUztBQUNULEtBQUs7QUFDTDtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL3BsdWdpbi9zY2hlbWFSZXBvcnRpbmcvaW5kZXguanM/ZWY2MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgb3MgZnJvbSAnb3MnO1xuaW1wb3J0IHsgaW50ZXJuYWxQbHVnaW4gfSBmcm9tICcuLi8uLi9pbnRlcm5hbFBsdWdpbi5qcyc7XG5pbXBvcnQgeyB2NCBhcyB1dWlkdjQgfSBmcm9tICd1dWlkJztcbmltcG9ydCB7IHByaW50U2NoZW1hLCB2YWxpZGF0ZVNjaGVtYSwgYnVpbGRTY2hlbWEgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IFNjaGVtYVJlcG9ydGVyIH0gZnJvbSAnLi9zY2hlbWFSZXBvcnRlci5qcyc7XG5pbXBvcnQgeyBzY2hlbWFJc1N1YmdyYXBoIH0gZnJvbSAnLi4vc2NoZW1hSXNTdWJncmFwaC5qcyc7XG5pbXBvcnQgeyBwYWNrYWdlVmVyc2lvbiB9IGZyb20gJy4uLy4uL2dlbmVyYXRlZC9wYWNrYWdlVmVyc2lvbi5qcyc7XG5pbXBvcnQgeyBjb21wdXRlQ29yZVNjaGVtYUhhc2ggfSBmcm9tICcuLi8uLi91dGlscy9jb21wdXRlQ29yZVNjaGVtYUhhc2guanMnO1xuZXhwb3J0IGZ1bmN0aW9uIEFwb2xsb1NlcnZlclBsdWdpblNjaGVtYVJlcG9ydGluZyh7IGluaXRpYWxEZWxheU1heE1zLCBvdmVycmlkZVJlcG9ydGVkU2NoZW1hLCBlbmRwb2ludFVybCwgZmV0Y2hlciwgfSA9IE9iamVjdC5jcmVhdGUobnVsbCkpIHtcbiAgICBjb25zdCBib290SWQgPSB1dWlkdjQoKTtcbiAgICByZXR1cm4gaW50ZXJuYWxQbHVnaW4oe1xuICAgICAgICBfX2ludGVybmFsX3BsdWdpbl9pZF9fOiAnU2NoZW1hUmVwb3J0aW5nJyxcbiAgICAgICAgX19pc19kaXNhYmxlZF9wbHVnaW5fXzogZmFsc2UsXG4gICAgICAgIGFzeW5jIHNlcnZlcldpbGxTdGFydCh7IGFwb2xsbywgc2NoZW1hLCBsb2dnZXIgfSkge1xuICAgICAgICAgICAgY29uc3QgeyBrZXksIGdyYXBoUmVmIH0gPSBhcG9sbG87XG4gICAgICAgICAgICBpZiAoIWtleSkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdUbyB1c2UgQXBvbGxvU2VydmVyUGx1Z2luU2NoZW1hUmVwb3J0aW5nLCB5b3UgbXVzdCBwcm92aWRlIGFuIEFwb2xsbyBBUEkgJyArXG4gICAgICAgICAgICAgICAgICAgICdrZXksIHZpYSB0aGUgQVBPTExPX0tFWSBlbnZpcm9ubWVudCB2YXJpYWJsZSBvciB2aWEgYG5ldyBBcG9sbG9TZXJ2ZXIoe2Fwb2xsbzoge2tleX0pYCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFncmFwaFJlZikge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKCdUbyB1c2UgQXBvbGxvU2VydmVyUGx1Z2luU2NoZW1hUmVwb3J0aW5nLCB5b3UgbXVzdCBwcm92aWRlIHlvdXIgZ3JhcGggcmVmIChlZywgJyArXG4gICAgICAgICAgICAgICAgICAgIFwiJ215LWdyYXBoLWlkQG15LWdyYXBoLXZhcmlhbnQnKS4gVHJ5IHNldHRpbmcgdGhlIEFQT0xMT19HUkFQSF9SRUYgZW52aXJvbm1lbnQgXCIgK1xuICAgICAgICAgICAgICAgICAgICAndmFyaWFibGUgb3IgcGFzc2luZyBgbmV3IEFwb2xsb1NlcnZlcih7YXBvbGxvOiB7Z3JhcGhSZWZ9fSlgLicpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG92ZXJyaWRlUmVwb3J0ZWRTY2hlbWEpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWxpZGF0aW9uRXJyb3JzID0gdmFsaWRhdGVTY2hlbWEoYnVpbGRTY2hlbWEob3ZlcnJpZGVSZXBvcnRlZFNjaGVtYSwgeyBub0xvY2F0aW9uOiB0cnVlIH0pKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRpb25FcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IodmFsaWRhdGlvbkVycm9ycy5tYXAoKGVycm9yKSA9PiBlcnJvci5tZXNzYWdlKS5qb2luKCdcXG4nKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RoZSBzY2hlbWEgcHJvdmlkZWQgdG8gb3ZlcnJpZGVSZXBvcnRlZFNjaGVtYSBmYWlsZWQgdG8gcGFyc2Ugb3IgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBgdmFsaWRhdGU6ICR7ZXJyLm1lc3NhZ2V9YCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNjaGVtYUlzU3ViZ3JhcGgoc2NoZW1hKSkge1xuICAgICAgICAgICAgICAgIHRocm93IEVycm9yKFtcbiAgICAgICAgICAgICAgICAgICAgJ1NjaGVtYSByZXBvcnRpbmcgaXMgbm90IHlldCBjb21wYXRpYmxlIHdpdGggQXBvbGxvIEZlZGVyYXRpb24gc3ViZ3JhcGhzLicsXG4gICAgICAgICAgICAgICAgICAgIFwiSWYgeW91J3JlIGludGVyZXN0ZWQgaW4gdXNpbmcgc2NoZW1hIHJlcG9ydGluZyB3aXRoIHN1YmdyYXBocyxcIixcbiAgICAgICAgICAgICAgICAgICAgJ3BsZWFzZSBjb250YWN0IEFwb2xsbyBzdXBwb3J0LiBUbyBzZXQgdXAgbWFuYWdlZCBmZWRlcmF0aW9uLCBzZWUnLFxuICAgICAgICAgICAgICAgICAgICAnaHR0cHM6Ly9nby5hcG9sbG8uZGV2L3MvbWFuYWdlZC1mZWRlcmF0aW9uJyxcbiAgICAgICAgICAgICAgICBdLmpvaW4oJyAnKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZW5kcG9pbnRVcmwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGxvZ2dlci5pbmZvKGBBcG9sbG8gc2NoZW1hIHJlcG9ydGluZzogc2NoZW1hIHJlcG9ydGluZyBVUkwgb3ZlcnJpZGU6ICR7ZW5kcG9pbnRVcmx9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBiYXNlU2NoZW1hUmVwb3J0ID0ge1xuICAgICAgICAgICAgICAgIGJvb3RJZCxcbiAgICAgICAgICAgICAgICBncmFwaFJlZixcbiAgICAgICAgICAgICAgICBwbGF0Zm9ybTogcHJvY2Vzcy5lbnYuQVBPTExPX1NFUlZFUl9QTEFURk9STSB8fCAnbG9jYWwnLFxuICAgICAgICAgICAgICAgIHJ1bnRpbWVWZXJzaW9uOiBgbm9kZSAke3Byb2Nlc3MudmVyc2lvbn1gLFxuICAgICAgICAgICAgICAgIHVzZXJWZXJzaW9uOiBwcm9jZXNzLmVudi5BUE9MTE9fU0VSVkVSX1VTRVJfVkVSU0lPTixcbiAgICAgICAgICAgICAgICBzZXJ2ZXJJZDogcHJvY2Vzcy5lbnYuQVBPTExPX1NFUlZFUl9JRCB8fCBwcm9jZXNzLmVudi5IT1NUTkFNRSB8fCBvcy5ob3N0bmFtZSgpLFxuICAgICAgICAgICAgICAgIGxpYnJhcnlWZXJzaW9uOiBgQGFwb2xsby9zZXJ2ZXJAJHtwYWNrYWdlVmVyc2lvbn1gLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIGxldCBjdXJyZW50U2NoZW1hUmVwb3J0ZXI7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNjaGVtYURpZExvYWRPclVwZGF0ZSh7IGFwaVNjaGVtYSwgY29yZVN1cGVyZ3JhcGhTZGwgfSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAob3ZlcnJpZGVSZXBvcnRlZFNjaGVtYSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudFNjaGVtYVJlcG9ydGVyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ0Fwb2xsbyBzY2hlbWEgcmVwb3J0aW5nOiBzY2hlbWEgdG8gcmVwb3J0IGhhcyBiZWVuIG92ZXJyaWRkZW4nKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBjb3JlU2NoZW1hID0gb3ZlcnJpZGVSZXBvcnRlZFNjaGVtYSA/P1xuICAgICAgICAgICAgICAgICAgICAgICAgY29yZVN1cGVyZ3JhcGhTZGwgPz9cbiAgICAgICAgICAgICAgICAgICAgICAgIHByaW50U2NoZW1hKGFwaVNjaGVtYSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvcmVTY2hlbWFIYXNoID0gY29tcHV0ZUNvcmVTY2hlbWFIYXNoKGNvcmVTY2hlbWEpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBzY2hlbWFSZXBvcnQgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5iYXNlU2NoZW1hUmVwb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZVNjaGVtYUhhc2gsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRTY2hlbWFSZXBvcnRlcj8uc3RvcCgpO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2NoZW1hUmVwb3J0ZXIgPSBuZXcgU2NoZW1hUmVwb3J0ZXIoe1xuICAgICAgICAgICAgICAgICAgICAgICAgc2NoZW1hUmVwb3J0LFxuICAgICAgICAgICAgICAgICAgICAgICAgY29yZVNjaGVtYSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwaUtleToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgZW5kcG9pbnRVcmwsXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2dnZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsUmVwb3J0aW5nRGVsYXlJbk1zOiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAoaW5pdGlhbERlbGF5TWF4TXMgPz8gMTAwMDApKSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZhbGxiYWNrUmVwb3J0aW5nRGVsYXlJbk1zOiAyMDAwMCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZldGNoZXIsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBjdXJyZW50U2NoZW1hUmVwb3J0ZXIuc3RhcnQoKTtcbiAgICAgICAgICAgICAgICAgICAgbG9nZ2VyLmluZm8oJ0Fwb2xsbyBzY2hlbWEgcmVwb3J0aW5nOiByZXBvcnRpbmcgYSBuZXcgc2NoZW1hIHRvIFN0dWRpbyEgU2VlIHlvdXIgZ3JhcGggYXQgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICBgaHR0cHM6Ly9zdHVkaW8uYXBvbGxvZ3JhcGhxbC5jb20vZ3JhcGgvJHtlbmNvZGVVUkkoZ3JhcGhSZWYpfS8gd2l0aCBzZXJ2ZXIgaW5mbyAke0pTT04uc3RyaW5naWZ5KHNjaGVtYVJlcG9ydCl9YCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICBhc3luYyBzZXJ2ZXJXaWxsU3RvcCgpIHtcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFNjaGVtYVJlcG9ydGVyPy5zdG9wKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/schemaReporting/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/schemaReporting/schemaReporter.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/schemaReporting/schemaReporter.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SchemaReporter: () => (/* binding */ SchemaReporter),\n/* harmony export */   schemaReportGql: () => (/* binding */ schemaReportGql)\n/* harmony export */ });\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\");\n/* harmony import */ var _generated_packageVersion_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../generated/packageVersion.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/generated/packageVersion.js\");\n\n\nconst schemaReportGql = `#graphql\n  mutation SchemaReport($report: SchemaReport!, $coreSchema: String) {\n    reportSchema(report: $report, coreSchema: $coreSchema) {\n      __typename\n      ... on ReportSchemaError {\n        message\n        code\n      }\n      ... on ReportSchemaResponse {\n        inSeconds\n        withCoreSchema\n      }\n    }\n  }\n`;\nclass SchemaReporter {\n    constructor(options) {\n        this.headers = {\n            'Content-Type': 'application/json',\n            'x-api-key': options.apiKey,\n            'apollographql-client-name': 'ApolloServerPluginSchemaReporting',\n            'apollographql-client-version': _generated_packageVersion_js__WEBPACK_IMPORTED_MODULE_1__.packageVersion,\n        };\n        this.endpointUrl =\n            options.endpointUrl ||\n                'https://schema-reporting.api.apollographql.com/api/graphql';\n        this.schemaReport = options.schemaReport;\n        this.coreSchema = options.coreSchema;\n        this.isStopped = false;\n        this.logger = options.logger;\n        this.initialReportingDelayInMs = options.initialReportingDelayInMs;\n        this.fallbackReportingDelayInMs = options.fallbackReportingDelayInMs;\n        this.fetcher = options.fetcher ?? node_fetch__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    }\n    stopped() {\n        return this.isStopped;\n    }\n    start() {\n        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.initialReportingDelayInMs);\n    }\n    stop() {\n        this.isStopped = true;\n        if (this.pollTimer) {\n            clearTimeout(this.pollTimer);\n            this.pollTimer = undefined;\n        }\n    }\n    async sendOneReportAndScheduleNext(sendNextWithCoreSchema) {\n        this.pollTimer = undefined;\n        if (this.stopped())\n            return;\n        try {\n            const result = await this.reportSchema(sendNextWithCoreSchema);\n            if (!result) {\n                return;\n            }\n            if (!this.stopped()) {\n                this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(result.withCoreSchema), result.inSeconds * 1000);\n            }\n            return;\n        }\n        catch (error) {\n            this.logger.error(`Error reporting server info to Apollo during schema reporting: ${error}`);\n            if (!this.stopped()) {\n                this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.fallbackReportingDelayInMs);\n            }\n        }\n    }\n    async reportSchema(withCoreSchema) {\n        const { data, errors } = await this.apolloQuery({\n            report: this.schemaReport,\n            coreSchema: withCoreSchema ? this.coreSchema : null,\n        });\n        if (errors) {\n            throw new Error(errors.map((x) => x.message).join('\\n'));\n        }\n        function msgForUnexpectedResponse(data) {\n            return [\n                'Unexpected response shape from Apollo when',\n                'reporting schema. If this continues, please reach',\n                'out to support@apollographql.com.',\n                'Received response:',\n                JSON.stringify(data),\n            ].join(' ');\n        }\n        if (!data || !data.reportSchema) {\n            throw new Error(msgForUnexpectedResponse(data));\n        }\n        if (data.reportSchema.__typename === 'ReportSchemaResponse') {\n            return data.reportSchema;\n        }\n        else if (data.reportSchema.__typename === 'ReportSchemaError') {\n            this.logger.error([\n                'Received input validation error from Apollo:',\n                data.reportSchema.message,\n                'Stopping reporting. Please fix the input errors.',\n            ].join(' '));\n            this.stop();\n            return null;\n        }\n        throw new Error(msgForUnexpectedResponse(data));\n    }\n    async apolloQuery(variables) {\n        const request = {\n            query: schemaReportGql,\n            variables,\n        };\n        const httpResponse = await this.fetcher(this.endpointUrl, {\n            method: 'POST',\n            headers: this.headers,\n            body: JSON.stringify(request),\n        });\n        if (!httpResponse.ok) {\n            throw new Error([\n                `An unexpected HTTP status code (${httpResponse.status}) was`,\n                'encountered during schema reporting.',\n            ].join(' '));\n        }\n        try {\n            return await httpResponse.json();\n        }\n        catch (error) {\n            throw new Error([\n                \"Couldn't report schema to Apollo.\",\n                'Parsing response as JSON failed.',\n                'If this continues please reach out to support@apollographql.com',\n                error,\n            ].join(' '));\n        }\n    }\n}\n//# sourceMappingURL=schemaReporter.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/schemaReporting/schemaReporter.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/traceTreeBuilder.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/traceTreeBuilder.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TraceTreeBuilder: () => (/* binding */ TraceTreeBuilder),\n/* harmony export */   dateToProtoTimestamp: () => (/* binding */ dateToProtoTimestamp)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/error/GraphQLError.mjs\");\n/* harmony import */ var _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/usage-reporting-protobuf */ \"(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/esm/protobuf.js\");\n/* harmony import */ var _utils_UnreachableCaseError_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../utils/UnreachableCaseError.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/UnreachableCaseError.js\");\n\n\n\nfunction internalError(message) {\n    return new Error(`[internal apollo-server error] ${message}`);\n}\nclass TraceTreeBuilder {\n    constructor(options) {\n        this.rootNode = new _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.Node();\n        this.trace = new _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace({\n            root: this.rootNode,\n            fieldExecutionWeight: 1,\n        });\n        this.stopped = false;\n        this.nodes = new Map([\n            [responsePathAsString(), this.rootNode],\n        ]);\n        const { sendErrors, maskedBy } = options;\n        if (!sendErrors || 'masked' in sendErrors) {\n            this.transformError = () => new graphql__WEBPACK_IMPORTED_MODULE_2__.GraphQLError('<masked>', {\n                extensions: { maskedBy },\n            });\n        }\n        else if ('transform' in sendErrors) {\n            this.transformError = sendErrors.transform;\n        }\n        else if ('unmodified' in sendErrors) {\n            this.transformError = null;\n        }\n        else {\n            throw new _utils_UnreachableCaseError_js__WEBPACK_IMPORTED_MODULE_1__.UnreachableCaseError(sendErrors);\n        }\n    }\n    startTiming() {\n        if (this.startHrTime) {\n            throw internalError('startTiming called twice!');\n        }\n        if (this.stopped) {\n            throw internalError('startTiming called after stopTiming!');\n        }\n        this.trace.startTime = dateToProtoTimestamp(new Date());\n        this.startHrTime = process.hrtime();\n    }\n    stopTiming() {\n        if (!this.startHrTime) {\n            throw internalError('stopTiming called before startTiming!');\n        }\n        if (this.stopped) {\n            throw internalError('stopTiming called twice!');\n        }\n        this.trace.durationNs = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n        this.trace.endTime = dateToProtoTimestamp(new Date());\n        this.stopped = true;\n    }\n    willResolveField(info) {\n        if (!this.startHrTime) {\n            throw internalError('willResolveField called before startTiming!');\n        }\n        if (this.stopped) {\n            return () => { };\n        }\n        const path = info.path;\n        const node = this.newNode(path);\n        node.type = info.returnType.toString();\n        node.parentType = info.parentType.toString();\n        node.startTime = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n        if (typeof path.key === 'string' && path.key !== info.fieldName) {\n            node.originalFieldName = info.fieldName;\n        }\n        return () => {\n            node.endTime = durationHrTimeToNanos(process.hrtime(this.startHrTime));\n        };\n    }\n    didEncounterErrors(errors) {\n        errors.forEach((err) => {\n            if (err.extensions?.serviceName) {\n                return;\n            }\n            const errorForReporting = this.transformAndNormalizeError(err);\n            if (errorForReporting === null) {\n                return;\n            }\n            this.addProtobufError(errorForReporting.path, errorToProtobufError(errorForReporting));\n        });\n    }\n    addProtobufError(path, error) {\n        if (!this.startHrTime) {\n            throw internalError('addProtobufError called before startTiming!');\n        }\n        if (this.stopped) {\n            throw internalError('addProtobufError called after stopTiming!');\n        }\n        let node = this.rootNode;\n        if (Array.isArray(path)) {\n            const specificNode = this.nodes.get(path.join('.'));\n            if (specificNode) {\n                node = specificNode;\n            }\n            else {\n                const responsePath = responsePathFromArray(path, this.rootNode);\n                if (!responsePath) {\n                    throw internalError('addProtobufError called with invalid path!');\n                }\n                node = this.newNode(responsePath);\n            }\n        }\n        node.error.push(error);\n    }\n    newNode(path) {\n        const node = new _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.Node();\n        const id = path.key;\n        if (typeof id === 'number') {\n            node.index = id;\n        }\n        else {\n            node.responseName = id;\n        }\n        this.nodes.set(responsePathAsString(path), node);\n        const parentNode = this.ensureParentNode(path);\n        parentNode.child.push(node);\n        return node;\n    }\n    ensureParentNode(path) {\n        const parentPath = responsePathAsString(path.prev);\n        const parentNode = this.nodes.get(parentPath);\n        if (parentNode) {\n            return parentNode;\n        }\n        return this.newNode(path.prev);\n    }\n    transformAndNormalizeError(err) {\n        if (this.transformError) {\n            const clonedError = Object.assign(Object.create(Object.getPrototypeOf(err)), err);\n            const rewrittenError = this.transformError(clonedError);\n            if (rewrittenError === null) {\n                return null;\n            }\n            if (!(rewrittenError instanceof graphql__WEBPACK_IMPORTED_MODULE_2__.GraphQLError)) {\n                return err;\n            }\n            return new graphql__WEBPACK_IMPORTED_MODULE_2__.GraphQLError(rewrittenError.message, {\n                nodes: err.nodes,\n                source: err.source,\n                positions: err.positions,\n                path: err.path,\n                originalError: err.originalError,\n                extensions: rewrittenError.extensions || err.extensions,\n            });\n        }\n        return err;\n    }\n}\nfunction durationHrTimeToNanos(hrtime) {\n    return hrtime[0] * 1e9 + hrtime[1];\n}\nfunction responsePathAsString(p) {\n    if (p === undefined) {\n        return '';\n    }\n    let res = String(p.key);\n    while ((p = p.prev) !== undefined) {\n        res = `${p.key}.${res}`;\n    }\n    return res;\n}\nfunction responsePathFromArray(path, node) {\n    let responsePath;\n    let nodePtr = node;\n    for (const key of path) {\n        nodePtr = nodePtr?.child?.find((child) => child.responseName === key);\n        responsePath = {\n            key,\n            prev: responsePath,\n            typename: nodePtr?.type ?? undefined,\n        };\n    }\n    return responsePath;\n}\nfunction errorToProtobufError(error) {\n    return new _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.Error({\n        message: error.message,\n        location: (error.locations || []).map(({ line, column }) => new _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.Location({ line, column })),\n        json: JSON.stringify(error),\n    });\n}\nfunction dateToProtoTimestamp(date) {\n    const totalMillis = +date;\n    const millis = totalMillis % 1000;\n    return new _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.google.protobuf.Timestamp({\n        seconds: (totalMillis - millis) / 1000,\n        nanos: millis * 1e6,\n    });\n}\n//# sourceMappingURL=traceTreeBuilder.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL3RyYWNlVHJlZUJ1aWxkZXIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBd0M7QUFDeUI7QUFDTztBQUN4RTtBQUNBLHVEQUF1RCxRQUFRO0FBQy9EO0FBQ087QUFDUDtBQUNBLDRCQUE0QixtRUFBSztBQUNqQyx5QkFBeUIsbUVBQUs7QUFDOUI7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdCQUFnQix1QkFBdUI7QUFDdkM7QUFDQSw0Q0FBNEMsaURBQVk7QUFDeEQsOEJBQThCLFVBQVU7QUFDeEMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxzQkFBc0IsZ0ZBQW9CO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EseUJBQXlCLG1FQUFLO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDRDQUE0QyxpREFBWTtBQUN4RDtBQUNBO0FBQ0EsdUJBQXVCLGlEQUFZO0FBQ25DO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQixNQUFNLEdBQUcsSUFBSTtBQUM5QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxtRUFBSztBQUNwQjtBQUNBLGlEQUFpRCxjQUFjLFNBQVMsbUVBQUssWUFBWSxjQUFjO0FBQ3ZHO0FBQ0EsS0FBSztBQUNMO0FBQ087QUFDUDtBQUNBO0FBQ0EsZUFBZSxvRUFBTTtBQUNyQjtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL3RyYWNlVHJlZUJ1aWxkZXIuanM/MWMxYiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBHcmFwaFFMRXJyb3IsIH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyBUcmFjZSwgZ29vZ2xlIH0gZnJvbSAnQGFwb2xsby91c2FnZS1yZXBvcnRpbmctcHJvdG9idWYnO1xuaW1wb3J0IHsgVW5yZWFjaGFibGVDYXNlRXJyb3IgfSBmcm9tICcuLi91dGlscy9VbnJlYWNoYWJsZUNhc2VFcnJvci5qcyc7XG5mdW5jdGlvbiBpbnRlcm5hbEVycm9yKG1lc3NhZ2UpIHtcbiAgICByZXR1cm4gbmV3IEVycm9yKGBbaW50ZXJuYWwgYXBvbGxvLXNlcnZlciBlcnJvcl0gJHttZXNzYWdlfWApO1xufVxuZXhwb3J0IGNsYXNzIFRyYWNlVHJlZUJ1aWxkZXIge1xuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5yb290Tm9kZSA9IG5ldyBUcmFjZS5Ob2RlKCk7XG4gICAgICAgIHRoaXMudHJhY2UgPSBuZXcgVHJhY2Uoe1xuICAgICAgICAgICAgcm9vdDogdGhpcy5yb290Tm9kZSxcbiAgICAgICAgICAgIGZpZWxkRXhlY3V0aW9uV2VpZ2h0OiAxLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubm9kZXMgPSBuZXcgTWFwKFtcbiAgICAgICAgICAgIFtyZXNwb25zZVBhdGhBc1N0cmluZygpLCB0aGlzLnJvb3ROb2RlXSxcbiAgICAgICAgXSk7XG4gICAgICAgIGNvbnN0IHsgc2VuZEVycm9ycywgbWFza2VkQnkgfSA9IG9wdGlvbnM7XG4gICAgICAgIGlmICghc2VuZEVycm9ycyB8fCAnbWFza2VkJyBpbiBzZW5kRXJyb3JzKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybUVycm9yID0gKCkgPT4gbmV3IEdyYXBoUUxFcnJvcignPG1hc2tlZD4nLCB7XG4gICAgICAgICAgICAgICAgZXh0ZW5zaW9uczogeyBtYXNrZWRCeSB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoJ3RyYW5zZm9ybScgaW4gc2VuZEVycm9ycykge1xuICAgICAgICAgICAgdGhpcy50cmFuc2Zvcm1FcnJvciA9IHNlbmRFcnJvcnMudHJhbnNmb3JtO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCd1bm1vZGlmaWVkJyBpbiBzZW5kRXJyb3JzKSB7XG4gICAgICAgICAgICB0aGlzLnRyYW5zZm9ybUVycm9yID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBVbnJlYWNoYWJsZUNhc2VFcnJvcihzZW5kRXJyb3JzKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGFydFRpbWluZygpIHtcbiAgICAgICAgaWYgKHRoaXMuc3RhcnRIclRpbWUpIHtcbiAgICAgICAgICAgIHRocm93IGludGVybmFsRXJyb3IoJ3N0YXJ0VGltaW5nIGNhbGxlZCB0d2ljZSEnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdG9wcGVkKSB7XG4gICAgICAgICAgICB0aHJvdyBpbnRlcm5hbEVycm9yKCdzdGFydFRpbWluZyBjYWxsZWQgYWZ0ZXIgc3RvcFRpbWluZyEnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnRyYWNlLnN0YXJ0VGltZSA9IGRhdGVUb1Byb3RvVGltZXN0YW1wKG5ldyBEYXRlKCkpO1xuICAgICAgICB0aGlzLnN0YXJ0SHJUaW1lID0gcHJvY2Vzcy5ocnRpbWUoKTtcbiAgICB9XG4gICAgc3RvcFRpbWluZygpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXJ0SHJUaW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBpbnRlcm5hbEVycm9yKCdzdG9wVGltaW5nIGNhbGxlZCBiZWZvcmUgc3RhcnRUaW1pbmchJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RvcHBlZCkge1xuICAgICAgICAgICAgdGhyb3cgaW50ZXJuYWxFcnJvcignc3RvcFRpbWluZyBjYWxsZWQgdHdpY2UhJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50cmFjZS5kdXJhdGlvbk5zID0gZHVyYXRpb25IclRpbWVUb05hbm9zKHByb2Nlc3MuaHJ0aW1lKHRoaXMuc3RhcnRIclRpbWUpKTtcbiAgICAgICAgdGhpcy50cmFjZS5lbmRUaW1lID0gZGF0ZVRvUHJvdG9UaW1lc3RhbXAobmV3IERhdGUoKSk7XG4gICAgICAgIHRoaXMuc3RvcHBlZCA9IHRydWU7XG4gICAgfVxuICAgIHdpbGxSZXNvbHZlRmllbGQoaW5mbykge1xuICAgICAgICBpZiAoIXRoaXMuc3RhcnRIclRpbWUpIHtcbiAgICAgICAgICAgIHRocm93IGludGVybmFsRXJyb3IoJ3dpbGxSZXNvbHZlRmllbGQgY2FsbGVkIGJlZm9yZSBzdGFydFRpbWluZyEnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5zdG9wcGVkKSB7XG4gICAgICAgICAgICByZXR1cm4gKCkgPT4geyB9O1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHBhdGggPSBpbmZvLnBhdGg7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB0aGlzLm5ld05vZGUocGF0aCk7XG4gICAgICAgIG5vZGUudHlwZSA9IGluZm8ucmV0dXJuVHlwZS50b1N0cmluZygpO1xuICAgICAgICBub2RlLnBhcmVudFR5cGUgPSBpbmZvLnBhcmVudFR5cGUudG9TdHJpbmcoKTtcbiAgICAgICAgbm9kZS5zdGFydFRpbWUgPSBkdXJhdGlvbkhyVGltZVRvTmFub3MocHJvY2Vzcy5ocnRpbWUodGhpcy5zdGFydEhyVGltZSkpO1xuICAgICAgICBpZiAodHlwZW9mIHBhdGgua2V5ID09PSAnc3RyaW5nJyAmJiBwYXRoLmtleSAhPT0gaW5mby5maWVsZE5hbWUpIHtcbiAgICAgICAgICAgIG5vZGUub3JpZ2luYWxGaWVsZE5hbWUgPSBpbmZvLmZpZWxkTmFtZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICAgICAgbm9kZS5lbmRUaW1lID0gZHVyYXRpb25IclRpbWVUb05hbm9zKHByb2Nlc3MuaHJ0aW1lKHRoaXMuc3RhcnRIclRpbWUpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZGlkRW5jb3VudGVyRXJyb3JzKGVycm9ycykge1xuICAgICAgICBlcnJvcnMuZm9yRWFjaCgoZXJyKSA9PiB7XG4gICAgICAgICAgICBpZiAoZXJyLmV4dGVuc2lvbnM/LnNlcnZpY2VOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZXJyb3JGb3JSZXBvcnRpbmcgPSB0aGlzLnRyYW5zZm9ybUFuZE5vcm1hbGl6ZUVycm9yKGVycik7XG4gICAgICAgICAgICBpZiAoZXJyb3JGb3JSZXBvcnRpbmcgPT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFkZFByb3RvYnVmRXJyb3IoZXJyb3JGb3JSZXBvcnRpbmcucGF0aCwgZXJyb3JUb1Byb3RvYnVmRXJyb3IoZXJyb3JGb3JSZXBvcnRpbmcpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFkZFByb3RvYnVmRXJyb3IocGF0aCwgZXJyb3IpIHtcbiAgICAgICAgaWYgKCF0aGlzLnN0YXJ0SHJUaW1lKSB7XG4gICAgICAgICAgICB0aHJvdyBpbnRlcm5hbEVycm9yKCdhZGRQcm90b2J1ZkVycm9yIGNhbGxlZCBiZWZvcmUgc3RhcnRUaW1pbmchJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc3RvcHBlZCkge1xuICAgICAgICAgICAgdGhyb3cgaW50ZXJuYWxFcnJvcignYWRkUHJvdG9idWZFcnJvciBjYWxsZWQgYWZ0ZXIgc3RvcFRpbWluZyEnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbm9kZSA9IHRoaXMucm9vdE5vZGU7XG4gICAgICAgIGlmIChBcnJheS5pc0FycmF5KHBhdGgpKSB7XG4gICAgICAgICAgICBjb25zdCBzcGVjaWZpY05vZGUgPSB0aGlzLm5vZGVzLmdldChwYXRoLmpvaW4oJy4nKSk7XG4gICAgICAgICAgICBpZiAoc3BlY2lmaWNOb2RlKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IHNwZWNpZmljTm9kZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlUGF0aCA9IHJlc3BvbnNlUGF0aEZyb21BcnJheShwYXRoLCB0aGlzLnJvb3ROb2RlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXJlc3BvbnNlUGF0aCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBpbnRlcm5hbEVycm9yKCdhZGRQcm90b2J1ZkVycm9yIGNhbGxlZCB3aXRoIGludmFsaWQgcGF0aCEnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgbm9kZSA9IHRoaXMubmV3Tm9kZShyZXNwb25zZVBhdGgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5vZGUuZXJyb3IucHVzaChlcnJvcik7XG4gICAgfVxuICAgIG5ld05vZGUocGF0aCkge1xuICAgICAgICBjb25zdCBub2RlID0gbmV3IFRyYWNlLk5vZGUoKTtcbiAgICAgICAgY29uc3QgaWQgPSBwYXRoLmtleTtcbiAgICAgICAgaWYgKHR5cGVvZiBpZCA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIG5vZGUuaW5kZXggPSBpZDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIG5vZGUucmVzcG9uc2VOYW1lID0gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ub2Rlcy5zZXQocmVzcG9uc2VQYXRoQXNTdHJpbmcocGF0aCksIG5vZGUpO1xuICAgICAgICBjb25zdCBwYXJlbnROb2RlID0gdGhpcy5lbnN1cmVQYXJlbnROb2RlKHBhdGgpO1xuICAgICAgICBwYXJlbnROb2RlLmNoaWxkLnB1c2gobm9kZSk7XG4gICAgICAgIHJldHVybiBub2RlO1xuICAgIH1cbiAgICBlbnN1cmVQYXJlbnROb2RlKHBhdGgpIHtcbiAgICAgICAgY29uc3QgcGFyZW50UGF0aCA9IHJlc3BvbnNlUGF0aEFzU3RyaW5nKHBhdGgucHJldik7XG4gICAgICAgIGNvbnN0IHBhcmVudE5vZGUgPSB0aGlzLm5vZGVzLmdldChwYXJlbnRQYXRoKTtcbiAgICAgICAgaWYgKHBhcmVudE5vZGUpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJlbnROb2RlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLm5ld05vZGUocGF0aC5wcmV2KTtcbiAgICB9XG4gICAgdHJhbnNmb3JtQW5kTm9ybWFsaXplRXJyb3IoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLnRyYW5zZm9ybUVycm9yKSB7XG4gICAgICAgICAgICBjb25zdCBjbG9uZWRFcnJvciA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YoZXJyKSksIGVycik7XG4gICAgICAgICAgICBjb25zdCByZXdyaXR0ZW5FcnJvciA9IHRoaXMudHJhbnNmb3JtRXJyb3IoY2xvbmVkRXJyb3IpO1xuICAgICAgICAgICAgaWYgKHJld3JpdHRlbkVycm9yID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIShyZXdyaXR0ZW5FcnJvciBpbnN0YW5jZW9mIEdyYXBoUUxFcnJvcikpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIG5ldyBHcmFwaFFMRXJyb3IocmV3cml0dGVuRXJyb3IubWVzc2FnZSwge1xuICAgICAgICAgICAgICAgIG5vZGVzOiBlcnIubm9kZXMsXG4gICAgICAgICAgICAgICAgc291cmNlOiBlcnIuc291cmNlLFxuICAgICAgICAgICAgICAgIHBvc2l0aW9uczogZXJyLnBvc2l0aW9ucyxcbiAgICAgICAgICAgICAgICBwYXRoOiBlcnIucGF0aCxcbiAgICAgICAgICAgICAgICBvcmlnaW5hbEVycm9yOiBlcnIub3JpZ2luYWxFcnJvcixcbiAgICAgICAgICAgICAgICBleHRlbnNpb25zOiByZXdyaXR0ZW5FcnJvci5leHRlbnNpb25zIHx8IGVyci5leHRlbnNpb25zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGVycjtcbiAgICB9XG59XG5mdW5jdGlvbiBkdXJhdGlvbkhyVGltZVRvTmFub3MoaHJ0aW1lKSB7XG4gICAgcmV0dXJuIGhydGltZVswXSAqIDFlOSArIGhydGltZVsxXTtcbn1cbmZ1bmN0aW9uIHJlc3BvbnNlUGF0aEFzU3RyaW5nKHApIHtcbiAgICBpZiAocCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiAnJztcbiAgICB9XG4gICAgbGV0IHJlcyA9IFN0cmluZyhwLmtleSk7XG4gICAgd2hpbGUgKChwID0gcC5wcmV2KSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJlcyA9IGAke3Aua2V5fS4ke3Jlc31gO1xuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuZnVuY3Rpb24gcmVzcG9uc2VQYXRoRnJvbUFycmF5KHBhdGgsIG5vZGUpIHtcbiAgICBsZXQgcmVzcG9uc2VQYXRoO1xuICAgIGxldCBub2RlUHRyID0gbm9kZTtcbiAgICBmb3IgKGNvbnN0IGtleSBvZiBwYXRoKSB7XG4gICAgICAgIG5vZGVQdHIgPSBub2RlUHRyPy5jaGlsZD8uZmluZCgoY2hpbGQpID0+IGNoaWxkLnJlc3BvbnNlTmFtZSA9PT0ga2V5KTtcbiAgICAgICAgcmVzcG9uc2VQYXRoID0ge1xuICAgICAgICAgICAga2V5LFxuICAgICAgICAgICAgcHJldjogcmVzcG9uc2VQYXRoLFxuICAgICAgICAgICAgdHlwZW5hbWU6IG5vZGVQdHI/LnR5cGUgPz8gdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gcmVzcG9uc2VQYXRoO1xufVxuZnVuY3Rpb24gZXJyb3JUb1Byb3RvYnVmRXJyb3IoZXJyb3IpIHtcbiAgICByZXR1cm4gbmV3IFRyYWNlLkVycm9yKHtcbiAgICAgICAgbWVzc2FnZTogZXJyb3IubWVzc2FnZSxcbiAgICAgICAgbG9jYXRpb246IChlcnJvci5sb2NhdGlvbnMgfHwgW10pLm1hcCgoeyBsaW5lLCBjb2x1bW4gfSkgPT4gbmV3IFRyYWNlLkxvY2F0aW9uKHsgbGluZSwgY29sdW1uIH0pKSxcbiAgICAgICAganNvbjogSlNPTi5zdHJpbmdpZnkoZXJyb3IpLFxuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGRhdGVUb1Byb3RvVGltZXN0YW1wKGRhdGUpIHtcbiAgICBjb25zdCB0b3RhbE1pbGxpcyA9ICtkYXRlO1xuICAgIGNvbnN0IG1pbGxpcyA9IHRvdGFsTWlsbGlzICUgMTAwMDtcbiAgICByZXR1cm4gbmV3IGdvb2dsZS5wcm90b2J1Zi5UaW1lc3RhbXAoe1xuICAgICAgICBzZWNvbmRzOiAodG90YWxNaWxsaXMgLSBtaWxsaXMpIC8gMTAwMCxcbiAgICAgICAgbmFub3M6IG1pbGxpcyAqIDFlNixcbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRyYWNlVHJlZUJ1aWxkZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/traceTreeBuilder.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/defaultSendOperationsAsTrace.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/usageReporting/defaultSendOperationsAsTrace.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   defaultSendOperationsAsTrace: () => (/* binding */ defaultSendOperationsAsTrace)\n/* harmony export */ });\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/@apollo/server/node_modules/lru-cache/index.mjs\");\n/* harmony import */ var _iterateOverTrace_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./iterateOverTrace.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/iterateOverTrace.js\");\n/* harmony import */ var _durationHistogram_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./durationHistogram.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/durationHistogram.js\");\n\n\n\nfunction defaultSendOperationsAsTrace() {\n    const cache = new lru_cache__WEBPACK_IMPORTED_MODULE_2__[\"default\"]({\n        maxSize: Math.pow(2, 20),\n        sizeCalculation: (_val, key) => {\n            return (key && Buffer.byteLength(key)) || 0;\n        },\n    });\n    return (trace, statsReportKey) => {\n        const endTimeSeconds = trace.endTime?.seconds;\n        if (endTimeSeconds == null) {\n            throw Error('programming error: endTime not set on trace');\n        }\n        const hasErrors = traceHasErrors(trace);\n        const cacheKey = JSON.stringify([\n            statsReportKey,\n            _durationHistogram_js__WEBPACK_IMPORTED_MODULE_1__.DurationHistogram.durationToBucket(trace.durationNs),\n            Math.floor(endTimeSeconds / 60),\n            hasErrors ? Math.floor(endTimeSeconds / 5) : '',\n        ]);\n        if (cache.get(cacheKey)) {\n            return false;\n        }\n        cache.set(cacheKey, true);\n        return true;\n    };\n}\nfunction traceHasErrors(trace) {\n    let hasErrors = false;\n    function traceNodeStats(node) {\n        if ((node.error?.length ?? 0) > 0) {\n            hasErrors = true;\n        }\n        return hasErrors;\n    }\n    (0,_iterateOverTrace_js__WEBPACK_IMPORTED_MODULE_0__.iterateOverTrace)(trace, traceNodeStats, false);\n    return hasErrors;\n}\n//# sourceMappingURL=defaultSendOperationsAsTrace.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL3VzYWdlUmVwb3J0aW5nL2RlZmF1bHRTZW5kT3BlcmF0aW9uc0FzVHJhY2UuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFpQztBQUN3QjtBQUNFO0FBQ3BEO0FBQ1Asc0JBQXNCLGlEQUFRO0FBQzlCO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksb0VBQWlCO0FBQzdCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksc0VBQWdCO0FBQ3BCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2VzbS9wbHVnaW4vdXNhZ2VSZXBvcnRpbmcvZGVmYXVsdFNlbmRPcGVyYXRpb25zQXNUcmFjZS5qcz82NGU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMUlVDYWNoZSBmcm9tICdscnUtY2FjaGUnO1xuaW1wb3J0IHsgaXRlcmF0ZU92ZXJUcmFjZSB9IGZyb20gJy4vaXRlcmF0ZU92ZXJUcmFjZS5qcyc7XG5pbXBvcnQgeyBEdXJhdGlvbkhpc3RvZ3JhbSB9IGZyb20gJy4vZHVyYXRpb25IaXN0b2dyYW0uanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmF1bHRTZW5kT3BlcmF0aW9uc0FzVHJhY2UoKSB7XG4gICAgY29uc3QgY2FjaGUgPSBuZXcgTFJVQ2FjaGUoe1xuICAgICAgICBtYXhTaXplOiBNYXRoLnBvdygyLCAyMCksXG4gICAgICAgIHNpemVDYWxjdWxhdGlvbjogKF92YWwsIGtleSkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIChrZXkgJiYgQnVmZmVyLmJ5dGVMZW5ndGgoa2V5KSkgfHwgMDtcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gKHRyYWNlLCBzdGF0c1JlcG9ydEtleSkgPT4ge1xuICAgICAgICBjb25zdCBlbmRUaW1lU2Vjb25kcyA9IHRyYWNlLmVuZFRpbWU/LnNlY29uZHM7XG4gICAgICAgIGlmIChlbmRUaW1lU2Vjb25kcyA9PSBudWxsKSB7XG4gICAgICAgICAgICB0aHJvdyBFcnJvcigncHJvZ3JhbW1pbmcgZXJyb3I6IGVuZFRpbWUgbm90IHNldCBvbiB0cmFjZScpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhc0Vycm9ycyA9IHRyYWNlSGFzRXJyb3JzKHRyYWNlKTtcbiAgICAgICAgY29uc3QgY2FjaGVLZXkgPSBKU09OLnN0cmluZ2lmeShbXG4gICAgICAgICAgICBzdGF0c1JlcG9ydEtleSxcbiAgICAgICAgICAgIER1cmF0aW9uSGlzdG9ncmFtLmR1cmF0aW9uVG9CdWNrZXQodHJhY2UuZHVyYXRpb25OcyksXG4gICAgICAgICAgICBNYXRoLmZsb29yKGVuZFRpbWVTZWNvbmRzIC8gNjApLFxuICAgICAgICAgICAgaGFzRXJyb3JzID8gTWF0aC5mbG9vcihlbmRUaW1lU2Vjb25kcyAvIDUpIDogJycsXG4gICAgICAgIF0pO1xuICAgICAgICBpZiAoY2FjaGUuZ2V0KGNhY2hlS2V5KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGNhY2hlLnNldChjYWNoZUtleSwgdHJ1ZSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH07XG59XG5mdW5jdGlvbiB0cmFjZUhhc0Vycm9ycyh0cmFjZSkge1xuICAgIGxldCBoYXNFcnJvcnMgPSBmYWxzZTtcbiAgICBmdW5jdGlvbiB0cmFjZU5vZGVTdGF0cyhub2RlKSB7XG4gICAgICAgIGlmICgobm9kZS5lcnJvcj8ubGVuZ3RoID8/IDApID4gMCkge1xuICAgICAgICAgICAgaGFzRXJyb3JzID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzRXJyb3JzO1xuICAgIH1cbiAgICBpdGVyYXRlT3ZlclRyYWNlKHRyYWNlLCB0cmFjZU5vZGVTdGF0cywgZmFsc2UpO1xuICAgIHJldHVybiBoYXNFcnJvcnM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kZWZhdWx0U2VuZE9wZXJhdGlvbnNBc1RyYWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/defaultSendOperationsAsTrace.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/durationHistogram.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/usageReporting/durationHistogram.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DurationHistogram: () => (/* binding */ DurationHistogram)\n/* harmony export */ });\nclass DurationHistogram {\n    toArray() {\n        let bufferedZeroes = 0;\n        const outputArray = [];\n        for (const value of this.buckets) {\n            if (value === 0) {\n                bufferedZeroes++;\n            }\n            else {\n                if (bufferedZeroes === 1) {\n                    outputArray.push(0);\n                }\n                else if (bufferedZeroes !== 0) {\n                    outputArray.push(-bufferedZeroes);\n                }\n                outputArray.push(Math.floor(value));\n                bufferedZeroes = 0;\n            }\n        }\n        return outputArray;\n    }\n    static durationToBucket(durationNs) {\n        const log = Math.log(durationNs / 1000.0);\n        const unboundedBucket = Math.ceil(log / DurationHistogram.EXPONENT_LOG);\n        return unboundedBucket <= 0 || Number.isNaN(unboundedBucket)\n            ? 0\n            : unboundedBucket >= DurationHistogram.BUCKET_COUNT\n                ? DurationHistogram.BUCKET_COUNT - 1\n                : unboundedBucket;\n    }\n    incrementDuration(durationNs, value = 1) {\n        this.incrementBucket(DurationHistogram.durationToBucket(durationNs), value);\n        return this;\n    }\n    incrementBucket(bucket, value = 1) {\n        if (bucket >= DurationHistogram.BUCKET_COUNT) {\n            throw Error('Bucket is out of bounds of the buckets array');\n        }\n        if (bucket >= this.buckets.length) {\n            const oldLength = this.buckets.length;\n            this.buckets.length = bucket + 1;\n            this.buckets.fill(0, oldLength);\n        }\n        this.buckets[bucket] += value;\n    }\n    combine(otherHistogram) {\n        for (let i = 0; i < otherHistogram.buckets.length; i++) {\n            this.incrementBucket(i, otherHistogram.buckets[i]);\n        }\n    }\n    constructor(options) {\n        const initSize = options?.initSize || 74;\n        const buckets = options?.buckets;\n        const arrayInitSize = Math.max(buckets?.length || 0, initSize);\n        this.buckets = Array(arrayInitSize).fill(0);\n        if (buckets) {\n            buckets.forEach((val, index) => (this.buckets[index] = val));\n        }\n    }\n}\nDurationHistogram.BUCKET_COUNT = 384;\nDurationHistogram.EXPONENT_LOG = Math.log(1.1);\n//# sourceMappingURL=durationHistogram.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL3VzYWdlUmVwb3J0aW5nL2R1cmF0aW9uSGlzdG9ncmFtLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QixtQ0FBbUM7QUFDM0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL3VzYWdlUmVwb3J0aW5nL2R1cmF0aW9uSGlzdG9ncmFtLmpzPzYyYWQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIER1cmF0aW9uSGlzdG9ncmFtIHtcbiAgICB0b0FycmF5KCkge1xuICAgICAgICBsZXQgYnVmZmVyZWRaZXJvZXMgPSAwO1xuICAgICAgICBjb25zdCBvdXRwdXRBcnJheSA9IFtdO1xuICAgICAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHRoaXMuYnVja2V0cykge1xuICAgICAgICAgICAgaWYgKHZhbHVlID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnVmZmVyZWRaZXJvZXMrKztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmIChidWZmZXJlZFplcm9lcyA9PT0gMSkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRBcnJheS5wdXNoKDApO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChidWZmZXJlZFplcm9lcyAhPT0gMCkge1xuICAgICAgICAgICAgICAgICAgICBvdXRwdXRBcnJheS5wdXNoKC1idWZmZXJlZFplcm9lcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIG91dHB1dEFycmF5LnB1c2goTWF0aC5mbG9vcih2YWx1ZSkpO1xuICAgICAgICAgICAgICAgIGJ1ZmZlcmVkWmVyb2VzID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0cHV0QXJyYXk7XG4gICAgfVxuICAgIHN0YXRpYyBkdXJhdGlvblRvQnVja2V0KGR1cmF0aW9uTnMpIHtcbiAgICAgICAgY29uc3QgbG9nID0gTWF0aC5sb2coZHVyYXRpb25OcyAvIDEwMDAuMCk7XG4gICAgICAgIGNvbnN0IHVuYm91bmRlZEJ1Y2tldCA9IE1hdGguY2VpbChsb2cgLyBEdXJhdGlvbkhpc3RvZ3JhbS5FWFBPTkVOVF9MT0cpO1xuICAgICAgICByZXR1cm4gdW5ib3VuZGVkQnVja2V0IDw9IDAgfHwgTnVtYmVyLmlzTmFOKHVuYm91bmRlZEJ1Y2tldClcbiAgICAgICAgICAgID8gMFxuICAgICAgICAgICAgOiB1bmJvdW5kZWRCdWNrZXQgPj0gRHVyYXRpb25IaXN0b2dyYW0uQlVDS0VUX0NPVU5UXG4gICAgICAgICAgICAgICAgPyBEdXJhdGlvbkhpc3RvZ3JhbS5CVUNLRVRfQ09VTlQgLSAxXG4gICAgICAgICAgICAgICAgOiB1bmJvdW5kZWRCdWNrZXQ7XG4gICAgfVxuICAgIGluY3JlbWVudER1cmF0aW9uKGR1cmF0aW9uTnMsIHZhbHVlID0gMSkge1xuICAgICAgICB0aGlzLmluY3JlbWVudEJ1Y2tldChEdXJhdGlvbkhpc3RvZ3JhbS5kdXJhdGlvblRvQnVja2V0KGR1cmF0aW9uTnMpLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBpbmNyZW1lbnRCdWNrZXQoYnVja2V0LCB2YWx1ZSA9IDEpIHtcbiAgICAgICAgaWYgKGJ1Y2tldCA+PSBEdXJhdGlvbkhpc3RvZ3JhbS5CVUNLRVRfQ09VTlQpIHtcbiAgICAgICAgICAgIHRocm93IEVycm9yKCdCdWNrZXQgaXMgb3V0IG9mIGJvdW5kcyBvZiB0aGUgYnVja2V0cyBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChidWNrZXQgPj0gdGhpcy5idWNrZXRzLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3Qgb2xkTGVuZ3RoID0gdGhpcy5idWNrZXRzLmxlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuYnVja2V0cy5sZW5ndGggPSBidWNrZXQgKyAxO1xuICAgICAgICAgICAgdGhpcy5idWNrZXRzLmZpbGwoMCwgb2xkTGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1Y2tldHNbYnVja2V0XSArPSB2YWx1ZTtcbiAgICB9XG4gICAgY29tYmluZShvdGhlckhpc3RvZ3JhbSkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG90aGVySGlzdG9ncmFtLmJ1Y2tldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuaW5jcmVtZW50QnVja2V0KGksIG90aGVySGlzdG9ncmFtLmJ1Y2tldHNbaV0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICAgICAgY29uc3QgaW5pdFNpemUgPSBvcHRpb25zPy5pbml0U2l6ZSB8fCA3NDtcbiAgICAgICAgY29uc3QgYnVja2V0cyA9IG9wdGlvbnM/LmJ1Y2tldHM7XG4gICAgICAgIGNvbnN0IGFycmF5SW5pdFNpemUgPSBNYXRoLm1heChidWNrZXRzPy5sZW5ndGggfHwgMCwgaW5pdFNpemUpO1xuICAgICAgICB0aGlzLmJ1Y2tldHMgPSBBcnJheShhcnJheUluaXRTaXplKS5maWxsKDApO1xuICAgICAgICBpZiAoYnVja2V0cykge1xuICAgICAgICAgICAgYnVja2V0cy5mb3JFYWNoKCh2YWwsIGluZGV4KSA9PiAodGhpcy5idWNrZXRzW2luZGV4XSA9IHZhbCkpO1xuICAgICAgICB9XG4gICAgfVxufVxuRHVyYXRpb25IaXN0b2dyYW0uQlVDS0VUX0NPVU5UID0gMzg0O1xuRHVyYXRpb25IaXN0b2dyYW0uRVhQT05FTlRfTE9HID0gTWF0aC5sb2coMS4xKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWR1cmF0aW9uSGlzdG9ncmFtLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/durationHistogram.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/index.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/usageReporting/index.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloServerPluginUsageReporting: () => (/* reexport safe */ _plugin_js__WEBPACK_IMPORTED_MODULE_0__.ApolloServerPluginUsageReporting)\n/* harmony export */ });\n/* harmony import */ var _plugin_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./plugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/plugin.js\");\n\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL3VzYWdlUmVwb3J0aW5nL2luZGV4LmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQStEO0FBQy9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL3BsdWdpbi91c2FnZVJlcG9ydGluZy9pbmRleC5qcz81NjlhIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCB7IEFwb2xsb1NlcnZlclBsdWdpblVzYWdlUmVwb3J0aW5nIH0gZnJvbSAnLi9wbHVnaW4uanMnO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/iterateOverTrace.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/usageReporting/iterateOverTrace.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   iterateOverTrace: () => (/* binding */ iterateOverTrace)\n/* harmony export */ });\nfunction iterateOverTrace(trace, f, includePath) {\n    const rootPath = includePath\n        ? new RootCollectingPathsResponseNamePath()\n        : notCollectingPathsResponseNamePath;\n    if (trace.root) {\n        if (iterateOverTraceNode(trace.root, rootPath, f))\n            return;\n    }\n    if (trace.queryPlan) {\n        if (iterateOverQueryPlan(trace.queryPlan, rootPath, f))\n            return;\n    }\n}\nfunction iterateOverQueryPlan(node, rootPath, f) {\n    if (!node)\n        return false;\n    if (node.fetch?.trace?.root && node.fetch.serviceName) {\n        return iterateOverTraceNode(node.fetch.trace.root, rootPath.child(`service:${node.fetch.serviceName}`), f);\n    }\n    if (node.flatten?.node) {\n        return iterateOverQueryPlan(node.flatten.node, rootPath, f);\n    }\n    if (node.parallel?.nodes) {\n        return node.parallel.nodes.some((node) => iterateOverQueryPlan(node, rootPath, f));\n    }\n    if (node.sequence?.nodes) {\n        return node.sequence.nodes.some((node) => iterateOverQueryPlan(node, rootPath, f));\n    }\n    return false;\n}\nfunction iterateOverTraceNode(node, path, f) {\n    if (f(node, path)) {\n        return true;\n    }\n    return (node.child?.some((child) => {\n        const childPath = child.responseName\n            ? path.child(child.responseName)\n            : path;\n        return iterateOverTraceNode(child, childPath, f);\n    }) ?? false);\n}\nconst notCollectingPathsResponseNamePath = {\n    toArray() {\n        throw Error('not collecting paths!');\n    },\n    child() {\n        return this;\n    },\n};\nclass RootCollectingPathsResponseNamePath {\n    toArray() {\n        return [];\n    }\n    child(responseName) {\n        return new ChildCollectingPathsResponseNamePath(responseName, this);\n    }\n}\nclass ChildCollectingPathsResponseNamePath {\n    constructor(responseName, prev) {\n        this.responseName = responseName;\n        this.prev = prev;\n    }\n    toArray() {\n        const out = [];\n        let curr = this;\n        while (curr instanceof ChildCollectingPathsResponseNamePath) {\n            out.push(curr.responseName);\n            curr = curr.prev;\n        }\n        return out.reverse();\n    }\n    child(responseName) {\n        return new ChildCollectingPathsResponseNamePath(responseName, this);\n    }\n}\n//# sourceMappingURL=iterateOverTrace.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL3VzYWdlUmVwb3J0aW5nL2l0ZXJhdGVPdmVyVHJhY2UuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxRkFBcUYsdUJBQXVCO0FBQzVHO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL3BsdWdpbi91c2FnZVJlcG9ydGluZy9pdGVyYXRlT3ZlclRyYWNlLmpzPzNkY2YiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGl0ZXJhdGVPdmVyVHJhY2UodHJhY2UsIGYsIGluY2x1ZGVQYXRoKSB7XG4gICAgY29uc3Qgcm9vdFBhdGggPSBpbmNsdWRlUGF0aFxuICAgICAgICA/IG5ldyBSb290Q29sbGVjdGluZ1BhdGhzUmVzcG9uc2VOYW1lUGF0aCgpXG4gICAgICAgIDogbm90Q29sbGVjdGluZ1BhdGhzUmVzcG9uc2VOYW1lUGF0aDtcbiAgICBpZiAodHJhY2Uucm9vdCkge1xuICAgICAgICBpZiAoaXRlcmF0ZU92ZXJUcmFjZU5vZGUodHJhY2Uucm9vdCwgcm9vdFBhdGgsIGYpKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodHJhY2UucXVlcnlQbGFuKSB7XG4gICAgICAgIGlmIChpdGVyYXRlT3ZlclF1ZXJ5UGxhbih0cmFjZS5xdWVyeVBsYW4sIHJvb3RQYXRoLCBmKSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICB9XG59XG5mdW5jdGlvbiBpdGVyYXRlT3ZlclF1ZXJ5UGxhbihub2RlLCByb290UGF0aCwgZikge1xuICAgIGlmICghbm9kZSlcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChub2RlLmZldGNoPy50cmFjZT8ucm9vdCAmJiBub2RlLmZldGNoLnNlcnZpY2VOYW1lKSB7XG4gICAgICAgIHJldHVybiBpdGVyYXRlT3ZlclRyYWNlTm9kZShub2RlLmZldGNoLnRyYWNlLnJvb3QsIHJvb3RQYXRoLmNoaWxkKGBzZXJ2aWNlOiR7bm9kZS5mZXRjaC5zZXJ2aWNlTmFtZX1gKSwgZik7XG4gICAgfVxuICAgIGlmIChub2RlLmZsYXR0ZW4/Lm5vZGUpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVPdmVyUXVlcnlQbGFuKG5vZGUuZmxhdHRlbi5ub2RlLCByb290UGF0aCwgZik7XG4gICAgfVxuICAgIGlmIChub2RlLnBhcmFsbGVsPy5ub2Rlcykge1xuICAgICAgICByZXR1cm4gbm9kZS5wYXJhbGxlbC5ub2Rlcy5zb21lKChub2RlKSA9PiBpdGVyYXRlT3ZlclF1ZXJ5UGxhbihub2RlLCByb290UGF0aCwgZikpO1xuICAgIH1cbiAgICBpZiAobm9kZS5zZXF1ZW5jZT8ubm9kZXMpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUuc2VxdWVuY2Uubm9kZXMuc29tZSgobm9kZSkgPT4gaXRlcmF0ZU92ZXJRdWVyeVBsYW4obm9kZSwgcm9vdFBhdGgsIGYpKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZnVuY3Rpb24gaXRlcmF0ZU92ZXJUcmFjZU5vZGUobm9kZSwgcGF0aCwgZikge1xuICAgIGlmIChmKG5vZGUsIHBhdGgpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gKG5vZGUuY2hpbGQ/LnNvbWUoKGNoaWxkKSA9PiB7XG4gICAgICAgIGNvbnN0IGNoaWxkUGF0aCA9IGNoaWxkLnJlc3BvbnNlTmFtZVxuICAgICAgICAgICAgPyBwYXRoLmNoaWxkKGNoaWxkLnJlc3BvbnNlTmFtZSlcbiAgICAgICAgICAgIDogcGF0aDtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdGVPdmVyVHJhY2VOb2RlKGNoaWxkLCBjaGlsZFBhdGgsIGYpO1xuICAgIH0pID8/IGZhbHNlKTtcbn1cbmNvbnN0IG5vdENvbGxlY3RpbmdQYXRoc1Jlc3BvbnNlTmFtZVBhdGggPSB7XG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgdGhyb3cgRXJyb3IoJ25vdCBjb2xsZWN0aW5nIHBhdGhzIScpO1xuICAgIH0sXG4gICAgY2hpbGQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH0sXG59O1xuY2xhc3MgUm9vdENvbGxlY3RpbmdQYXRoc1Jlc3BvbnNlTmFtZVBhdGgge1xuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIHJldHVybiBbXTtcbiAgICB9XG4gICAgY2hpbGQocmVzcG9uc2VOYW1lKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ2hpbGRDb2xsZWN0aW5nUGF0aHNSZXNwb25zZU5hbWVQYXRoKHJlc3BvbnNlTmFtZSwgdGhpcyk7XG4gICAgfVxufVxuY2xhc3MgQ2hpbGRDb2xsZWN0aW5nUGF0aHNSZXNwb25zZU5hbWVQYXRoIHtcbiAgICBjb25zdHJ1Y3RvcihyZXNwb25zZU5hbWUsIHByZXYpIHtcbiAgICAgICAgdGhpcy5yZXNwb25zZU5hbWUgPSByZXNwb25zZU5hbWU7XG4gICAgICAgIHRoaXMucHJldiA9IHByZXY7XG4gICAgfVxuICAgIHRvQXJyYXkoKSB7XG4gICAgICAgIGNvbnN0IG91dCA9IFtdO1xuICAgICAgICBsZXQgY3VyciA9IHRoaXM7XG4gICAgICAgIHdoaWxlIChjdXJyIGluc3RhbmNlb2YgQ2hpbGRDb2xsZWN0aW5nUGF0aHNSZXNwb25zZU5hbWVQYXRoKSB7XG4gICAgICAgICAgICBvdXQucHVzaChjdXJyLnJlc3BvbnNlTmFtZSk7XG4gICAgICAgICAgICBjdXJyID0gY3Vyci5wcmV2O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBvdXQucmV2ZXJzZSgpO1xuICAgIH1cbiAgICBjaGlsZChyZXNwb25zZU5hbWUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBDaGlsZENvbGxlY3RpbmdQYXRoc1Jlc3BvbnNlTmFtZVBhdGgocmVzcG9uc2VOYW1lLCB0aGlzKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pdGVyYXRlT3ZlclRyYWNlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/iterateOverTrace.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/operationDerivedDataCache.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/usageReporting/operationDerivedDataCache.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createOperationDerivedDataCache: () => (/* binding */ createOperationDerivedDataCache),\n/* harmony export */   operationDerivedDataCacheKey: () => (/* binding */ operationDerivedDataCacheKey)\n/* harmony export */ });\n/* harmony import */ var lru_cache__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! lru-cache */ \"(rsc)/./node_modules/@apollo/server/node_modules/lru-cache/index.mjs\");\n\nfunction createOperationDerivedDataCache({ logger, }) {\n    let lastWarn;\n    let lastDisposals = 0;\n    return new lru_cache__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n        sizeCalculation(obj) {\n            return Buffer.byteLength(JSON.stringify(obj), 'utf8');\n        },\n        maxSize: Math.pow(2, 20) * 10,\n        dispose() {\n            lastDisposals++;\n            if (!lastWarn || new Date().getTime() - lastWarn.getTime() > 60000) {\n                lastWarn = new Date();\n                logger.warn([\n                    'This server is processing a high number of unique operations.  ',\n                    `A total of ${lastDisposals} records have been `,\n                    'ejected from the ApolloServerPluginUsageReporting signature cache in the past ',\n                    'interval.  If you see this warning frequently, please open an ',\n                    'issue on the Apollo Server repository.',\n                ].join(''));\n                lastDisposals = 0;\n            }\n        },\n    });\n}\nfunction operationDerivedDataCacheKey(queryHash, operationName) {\n    return `${queryHash}${operationName && ':' + operationName}`;\n}\n//# sourceMappingURL=operationDerivedDataCache.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL3VzYWdlUmVwb3J0aW5nL29wZXJhdGlvbkRlcml2ZWREYXRhQ2FjaGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQWlDO0FBQzFCLDJDQUEyQyxTQUFTO0FBQzNEO0FBQ0E7QUFDQSxlQUFlLGlEQUFRO0FBQ3ZCO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQ0FBa0MsZUFBZTtBQUNqRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMO0FBQ087QUFDUCxjQUFjLFVBQVUsRUFBRSxxQ0FBcUM7QUFDL0Q7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2VzbS9wbHVnaW4vdXNhZ2VSZXBvcnRpbmcvb3BlcmF0aW9uRGVyaXZlZERhdGFDYWNoZS5qcz8xNTNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBMUlVDYWNoZSBmcm9tICdscnUtY2FjaGUnO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU9wZXJhdGlvbkRlcml2ZWREYXRhQ2FjaGUoeyBsb2dnZXIsIH0pIHtcbiAgICBsZXQgbGFzdFdhcm47XG4gICAgbGV0IGxhc3REaXNwb3NhbHMgPSAwO1xuICAgIHJldHVybiBuZXcgTFJVQ2FjaGUoe1xuICAgICAgICBzaXplQ2FsY3VsYXRpb24ob2JqKSB7XG4gICAgICAgICAgICByZXR1cm4gQnVmZmVyLmJ5dGVMZW5ndGgoSlNPTi5zdHJpbmdpZnkob2JqKSwgJ3V0ZjgnKTtcbiAgICAgICAgfSxcbiAgICAgICAgbWF4U2l6ZTogTWF0aC5wb3coMiwgMjApICogMTAsXG4gICAgICAgIGRpc3Bvc2UoKSB7XG4gICAgICAgICAgICBsYXN0RGlzcG9zYWxzKys7XG4gICAgICAgICAgICBpZiAoIWxhc3RXYXJuIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gbGFzdFdhcm4uZ2V0VGltZSgpID4gNjAwMDApIHtcbiAgICAgICAgICAgICAgICBsYXN0V2FybiA9IG5ldyBEYXRlKCk7XG4gICAgICAgICAgICAgICAgbG9nZ2VyLndhcm4oW1xuICAgICAgICAgICAgICAgICAgICAnVGhpcyBzZXJ2ZXIgaXMgcHJvY2Vzc2luZyBhIGhpZ2ggbnVtYmVyIG9mIHVuaXF1ZSBvcGVyYXRpb25zLiAgJyxcbiAgICAgICAgICAgICAgICAgICAgYEEgdG90YWwgb2YgJHtsYXN0RGlzcG9zYWxzfSByZWNvcmRzIGhhdmUgYmVlbiBgLFxuICAgICAgICAgICAgICAgICAgICAnZWplY3RlZCBmcm9tIHRoZSBBcG9sbG9TZXJ2ZXJQbHVnaW5Vc2FnZVJlcG9ydGluZyBzaWduYXR1cmUgY2FjaGUgaW4gdGhlIHBhc3QgJyxcbiAgICAgICAgICAgICAgICAgICAgJ2ludGVydmFsLiAgSWYgeW91IHNlZSB0aGlzIHdhcm5pbmcgZnJlcXVlbnRseSwgcGxlYXNlIG9wZW4gYW4gJyxcbiAgICAgICAgICAgICAgICAgICAgJ2lzc3VlIG9uIHRoZSBBcG9sbG8gU2VydmVyIHJlcG9zaXRvcnkuJyxcbiAgICAgICAgICAgICAgICBdLmpvaW4oJycpKTtcbiAgICAgICAgICAgICAgICBsYXN0RGlzcG9zYWxzID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvcGVyYXRpb25EZXJpdmVkRGF0YUNhY2hlS2V5KHF1ZXJ5SGFzaCwgb3BlcmF0aW9uTmFtZSkge1xuICAgIHJldHVybiBgJHtxdWVyeUhhc2h9JHtvcGVyYXRpb25OYW1lICYmICc6JyArIG9wZXJhdGlvbk5hbWV9YDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW9wZXJhdGlvbkRlcml2ZWREYXRhQ2FjaGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/operationDerivedDataCache.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/plugin.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/usageReporting/plugin.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ApolloServerPluginUsageReporting: () => (/* binding */ ApolloServerPluginUsageReporting),\n/* harmony export */   makeHTTPRequestHeaders: () => (/* binding */ makeHTTPRequestHeaders)\n/* harmony export */ });\n/* harmony import */ var _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/usage-reporting-protobuf */ \"(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/esm/protobuf.js\");\n/* harmony import */ var _apollo_utils_usagereporting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @apollo/utils.usagereporting */ \"(rsc)/./node_modules/@apollo/server/node_modules/@apollo/utils.usagereporting/dist/index.js\");\n/* harmony import */ var async_retry__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! async-retry */ \"(rsc)/./node_modules/async-retry/lib/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/utilities/printSchema.mjs\");\n/* harmony import */ var node_abort_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! node-abort-controller */ \"(rsc)/./node_modules/node-abort-controller/index.js\");\n/* harmony import */ var node_fetch__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! node-fetch */ \"(rsc)/./node_modules/node-fetch/lib/index.mjs\");\n/* harmony import */ var os__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! os */ \"os\");\n/* harmony import */ var zlib__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! zlib */ \"zlib\");\n/* harmony import */ var _internalPlugin_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../../internalPlugin.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/internalPlugin.js\");\n/* harmony import */ var _traceTreeBuilder_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../traceTreeBuilder.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/traceTreeBuilder.js\");\n/* harmony import */ var _defaultSendOperationsAsTrace_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./defaultSendOperationsAsTrace.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/defaultSendOperationsAsTrace.js\");\n/* harmony import */ var _operationDerivedDataCache_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ./operationDerivedDataCache.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/operationDerivedDataCache.js\");\n/* harmony import */ var _stats_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ./stats.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/stats.js\");\n/* harmony import */ var _traceDetails_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ./traceDetails.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/traceDetails.js\");\n/* harmony import */ var _generated_packageVersion_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../../generated/packageVersion.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/generated/packageVersion.js\");\n/* harmony import */ var _utils_computeCoreSchemaHash_js__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! ../../utils/computeCoreSchemaHash.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/computeCoreSchemaHash.js\");\n/* harmony import */ var _schemaIsSubgraph_js__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! ../schemaIsSubgraph.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/schemaIsSubgraph.js\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nconst reportHeaderDefaults = {\n    hostname: os__WEBPACK_IMPORTED_MODULE_5__.hostname(),\n    agentVersion: `@apollo/server@${_generated_packageVersion_js__WEBPACK_IMPORTED_MODULE_13__.packageVersion}`,\n    runtimeVersion: `node ${process.version}`,\n    uname: `${os__WEBPACK_IMPORTED_MODULE_5__.platform()}, ${os__WEBPACK_IMPORTED_MODULE_5__.type()}, ${os__WEBPACK_IMPORTED_MODULE_5__.release()}, ${os__WEBPACK_IMPORTED_MODULE_5__.arch()})`,\n};\nfunction ApolloServerPluginUsageReporting(options = Object.create(null)) {\n    const fieldLevelInstrumentationOption = options.fieldLevelInstrumentation;\n    const fieldLevelInstrumentation = typeof fieldLevelInstrumentationOption === 'number'\n        ? async () => Math.random() < fieldLevelInstrumentationOption\n            ? 1 / fieldLevelInstrumentationOption\n            : 0\n        : fieldLevelInstrumentationOption\n            ? fieldLevelInstrumentationOption\n            : async () => true;\n    let requestDidStartHandler = null;\n    return (0,_internalPlugin_js__WEBPACK_IMPORTED_MODULE_7__.internalPlugin)({\n        __internal_plugin_id__: 'UsageReporting',\n        __is_disabled_plugin__: false,\n        async requestDidStart(requestContext) {\n            if (requestDidStartHandler) {\n                return requestDidStartHandler(requestContext);\n            }\n            return {};\n        },\n        async serverWillStart({ logger: serverLogger, apollo, startedInBackground, schema, }) {\n            const logger = options.logger ?? serverLogger;\n            const { key, graphRef } = apollo;\n            if (!(key && graphRef)) {\n                throw new Error(\"You've enabled usage reporting via ApolloServerPluginUsageReporting, \" +\n                    'but you also need to provide your Apollo API key and graph ref, via ' +\n                    'the APOLLO_KEY/APOLLO_GRAPH_REF environment ' +\n                    'variables or via `new ApolloServer({apollo: {key, graphRef})`.');\n            }\n            if ((0,_schemaIsSubgraph_js__WEBPACK_IMPORTED_MODULE_15__.schemaIsSubgraph)(schema)) {\n                if (options.__onlyIfSchemaIsNotSubgraph) {\n                    logger.warn('You have specified an Apollo API key and graph ref but this server appears ' +\n                        'to be a subgraph. Typically usage reports are sent to Apollo by your Router ' +\n                        'or Gateway, not directly from your subgraph; usage reporting is disabled. To ' +\n                        'enable usage reporting anyway, explicitly install `ApolloServerPluginUsageReporting`. ' +\n                        'To disable this warning, install `ApolloServerPluginUsageReportingDisabled`.');\n                    return {};\n                }\n                else {\n                    logger.warn('You have installed `ApolloServerPluginUsageReporting` but this server appears to ' +\n                        'be a subgraph. Typically usage reports are sent to Apollo by your Router ' +\n                        'or Gateway, not directly from your subgraph. If this was unintentional, remove ' +\n                        \"`ApolloServerPluginUsageReporting` from your server's `plugins` array.\");\n                }\n            }\n            logger.info('Apollo usage reporting starting! See your graph at ' +\n                `https://studio.apollographql.com/graph/${encodeURI(graphRef)}/`);\n            const sendReportsImmediately = options.sendReportsImmediately ?? startedInBackground;\n            let operationDerivedDataCache = null;\n            const reportByExecutableSchemaId = new Map();\n            const getReportWhichMustBeUsedImmediately = (executableSchemaId) => {\n                const existing = reportByExecutableSchemaId.get(executableSchemaId);\n                if (existing) {\n                    return existing;\n                }\n                const report = new _stats_js__WEBPACK_IMPORTED_MODULE_11__.OurReport(new _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.ReportHeader({\n                    ...reportHeaderDefaults,\n                    executableSchemaId,\n                    graphRef,\n                }));\n                reportByExecutableSchemaId.set(executableSchemaId, report);\n                return report;\n            };\n            const getAndDeleteReport = (executableSchemaId) => {\n                const report = reportByExecutableSchemaId.get(executableSchemaId);\n                if (report) {\n                    reportByExecutableSchemaId.delete(executableSchemaId);\n                    return report;\n                }\n                return null;\n            };\n            const overriddenExecutableSchemaId = options.overrideReportedSchema\n                ? (0,_utils_computeCoreSchemaHash_js__WEBPACK_IMPORTED_MODULE_14__.computeCoreSchemaHash)(options.overrideReportedSchema)\n                : undefined;\n            let lastSeenExecutableSchemaToId;\n            let reportTimer;\n            if (!sendReportsImmediately) {\n                reportTimer = setInterval(() => sendAllReportsAndReportErrors(), options.reportIntervalMs || 10 * 1000);\n            }\n            let sendTraces = options.sendTraces ?? true;\n            const sendOperationAsTrace = options.experimental_sendOperationAsTrace ??\n                (0,_defaultSendOperationsAsTrace_js__WEBPACK_IMPORTED_MODULE_9__.defaultSendOperationsAsTrace)();\n            let stopped = false;\n            function executableSchemaIdForSchema(schema) {\n                if (lastSeenExecutableSchemaToId?.executableSchema === schema) {\n                    return lastSeenExecutableSchemaToId.executableSchemaId;\n                }\n                const id = (0,_utils_computeCoreSchemaHash_js__WEBPACK_IMPORTED_MODULE_14__.computeCoreSchemaHash)((0,graphql__WEBPACK_IMPORTED_MODULE_16__.printSchema)(schema));\n                lastSeenExecutableSchemaToId = {\n                    executableSchema: schema,\n                    executableSchemaId: id,\n                };\n                return id;\n            }\n            async function sendAllReportsAndReportErrors() {\n                await Promise.all([...reportByExecutableSchemaId.keys()].map((executableSchemaId) => sendReportAndReportErrors(executableSchemaId)));\n            }\n            async function sendReportAndReportErrors(executableSchemaId) {\n                return sendReport(executableSchemaId).catch((err) => {\n                    if (options.reportErrorFunction) {\n                        options.reportErrorFunction(err);\n                    }\n                    else {\n                        logger.error(err.message);\n                    }\n                });\n            }\n            const sendReport = async (executableSchemaId) => {\n                let report = getAndDeleteReport(executableSchemaId);\n                if (!report ||\n                    (Object.keys(report.tracesPerQuery).length === 0 &&\n                        report.operationCount === 0)) {\n                    return;\n                }\n                report.endTime = (0,_traceTreeBuilder_js__WEBPACK_IMPORTED_MODULE_8__.dateToProtoTimestamp)(new Date());\n                report.ensureCountsAreIntegers();\n                const protobufError = _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Report.verify(report);\n                if (protobufError) {\n                    throw new Error(`Error verifying report: ${protobufError}`);\n                }\n                let message = _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Report.encode(report).finish();\n                report = null;\n                if (options.debugPrintReports) {\n                    const decodedReport = _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Report.decode(message);\n                    logger.info(`Apollo usage report: ${JSON.stringify(decodedReport.toJSON())}`);\n                }\n                const compressed = await new Promise((resolve, reject) => {\n                    (0,zlib__WEBPACK_IMPORTED_MODULE_6__.gzip)(message, (error, result) => {\n                        error ? reject(error) : resolve(result);\n                    });\n                });\n                message = null;\n                const fetcher = options.fetcher ?? node_fetch__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                const response = await async_retry__WEBPACK_IMPORTED_MODULE_2__(async () => {\n                    const controller = new node_abort_controller__WEBPACK_IMPORTED_MODULE_3__.AbortController();\n                    const abortTimeout = setTimeout(() => {\n                        controller.abort();\n                    }, options.requestTimeoutMs ?? 30000);\n                    let curResponse;\n                    try {\n                        curResponse = await fetcher((options.endpointUrl ||\n                            'https://usage-reporting.api.apollographql.com') +\n                            '/api/ingress/traces', {\n                            method: 'POST',\n                            headers: {\n                                'user-agent': 'ApolloServerPluginUsageReporting',\n                                'x-api-key': key,\n                                'content-encoding': 'gzip',\n                                accept: 'application/json',\n                            },\n                            body: compressed,\n                            signal: controller.signal,\n                        });\n                    }\n                    finally {\n                        clearTimeout(abortTimeout);\n                    }\n                    if (curResponse.status >= 500 && curResponse.status < 600) {\n                        throw new Error(`HTTP status ${curResponse.status}, ${(await curResponse.text()) || '(no body)'}`);\n                    }\n                    else {\n                        return curResponse;\n                    }\n                }, {\n                    retries: (options.maxAttempts || 5) - 1,\n                    minTimeout: options.minimumRetryDelayMs || 100,\n                    factor: 2,\n                }).catch((err) => {\n                    throw new Error(`Error sending report to Apollo servers: ${err.message}`);\n                });\n                if (response.status < 200 || response.status >= 300) {\n                    throw new Error(`Error sending report to Apollo servers: HTTP status ${response.status}, ${(await response.text()) || '(no body)'}`);\n                }\n                if (sendTraces &&\n                    response.status === 200 &&\n                    response.headers\n                        .get('content-type')\n                        ?.match(/^\\s*application\\/json\\s*(?:;|$)/i)) {\n                    const body = await response.text();\n                    let parsedBody;\n                    try {\n                        parsedBody = JSON.parse(body);\n                    }\n                    catch (e) {\n                        throw new Error(`Error parsing response from Apollo servers: ${e}`);\n                    }\n                    if (parsedBody.tracesIgnored === true) {\n                        logger.debug(\"This graph's organization does not have access to traces; sending all \" +\n                            'subsequent operations as stats.');\n                        sendTraces = false;\n                    }\n                }\n                if (options.debugPrintReports) {\n                    logger.info(`Apollo usage report: status ${response.status}`);\n                }\n            };\n            requestDidStartHandler = ({ metrics, schema, request: { http, variables }, }) => {\n                const treeBuilder = new _traceTreeBuilder_js__WEBPACK_IMPORTED_MODULE_8__.TraceTreeBuilder({\n                    maskedBy: 'ApolloServerPluginUsageReporting',\n                    sendErrors: options.sendErrors,\n                });\n                treeBuilder.startTiming();\n                metrics.startHrTime = treeBuilder.startHrTime;\n                let graphqlValidationFailure = false;\n                let graphqlUnknownOperationName = false;\n                let includeOperationInUsageReporting = null;\n                if (http) {\n                    treeBuilder.trace.http = new _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.HTTP({\n                        method: _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.HTTP.Method[http.method] || _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.HTTP.Method.UNKNOWN,\n                    });\n                    if (options.sendHeaders) {\n                        makeHTTPRequestHeaders(treeBuilder.trace.http, http.headers, options.sendHeaders);\n                    }\n                }\n                async function maybeCallIncludeRequestHook(requestContext) {\n                    if (includeOperationInUsageReporting !== null)\n                        return;\n                    if (typeof options.includeRequest !== 'function') {\n                        includeOperationInUsageReporting = true;\n                        return;\n                    }\n                    includeOperationInUsageReporting =\n                        await options.includeRequest(requestContext);\n                    if (typeof includeOperationInUsageReporting !== 'boolean') {\n                        logger.warn(\"The 'includeRequest' async predicate function must return a boolean value.\");\n                        includeOperationInUsageReporting = true;\n                    }\n                }\n                let didResolveSource = false;\n                return {\n                    async didResolveSource(requestContext) {\n                        didResolveSource = true;\n                        if (metrics.persistedQueryHit) {\n                            treeBuilder.trace.persistedQueryHit = true;\n                        }\n                        if (metrics.persistedQueryRegister) {\n                            treeBuilder.trace.persistedQueryRegister = true;\n                        }\n                        if (variables) {\n                            treeBuilder.trace.details = (0,_traceDetails_js__WEBPACK_IMPORTED_MODULE_12__.makeTraceDetails)(variables, options.sendVariableValues, requestContext.source);\n                        }\n                        const clientInfo = (options.generateClientInfo || defaultGenerateClientInfo)(requestContext);\n                        if (clientInfo) {\n                            const { clientName, clientVersion } = clientInfo;\n                            treeBuilder.trace.clientVersion = clientVersion || '';\n                            treeBuilder.trace.clientName = clientName || '';\n                        }\n                    },\n                    async validationDidStart() {\n                        return async (validationErrors) => {\n                            graphqlValidationFailure = validationErrors\n                                ? validationErrors.length !== 0\n                                : false;\n                        };\n                    },\n                    async didResolveOperation(requestContext) {\n                        graphqlUnknownOperationName =\n                            requestContext.operation === undefined;\n                        await maybeCallIncludeRequestHook(requestContext);\n                        if (includeOperationInUsageReporting &&\n                            !graphqlUnknownOperationName) {\n                            if (metrics.captureTraces === undefined) {\n                                const rawWeight = await fieldLevelInstrumentation(requestContext);\n                                treeBuilder.trace.fieldExecutionWeight =\n                                    typeof rawWeight === 'number' ? rawWeight : rawWeight ? 1 : 0;\n                                metrics.captureTraces =\n                                    !!treeBuilder.trace.fieldExecutionWeight;\n                            }\n                        }\n                    },\n                    async executionDidStart() {\n                        if (!metrics.captureTraces)\n                            return;\n                        return {\n                            willResolveField({ info }) {\n                                return treeBuilder.willResolveField(info);\n                            },\n                        };\n                    },\n                    async didEncounterSubsequentErrors(_requestContext, errors) {\n                        treeBuilder.didEncounterErrors(errors);\n                    },\n                    async willSendSubsequentPayload(requestContext, payload) {\n                        if (!payload.hasNext) {\n                            await operationFinished(requestContext);\n                        }\n                    },\n                    async willSendResponse(requestContext) {\n                        if (!didResolveSource)\n                            return;\n                        if (requestContext.errors) {\n                            treeBuilder.didEncounterErrors(requestContext.errors);\n                        }\n                        if (requestContext.response.body.kind === 'single') {\n                            await operationFinished(requestContext);\n                        }\n                    },\n                };\n                async function operationFinished(requestContext) {\n                    const resolvedOperation = !!requestContext.operation;\n                    await maybeCallIncludeRequestHook(requestContext);\n                    treeBuilder.stopTiming();\n                    const executableSchemaId = overriddenExecutableSchemaId ?? executableSchemaIdForSchema(schema);\n                    if (includeOperationInUsageReporting === false) {\n                        if (resolvedOperation) {\n                            getReportWhichMustBeUsedImmediately(executableSchemaId)\n                                .operationCount++;\n                        }\n                        return;\n                    }\n                    treeBuilder.trace.fullQueryCacheHit = !!metrics.responseCacheHit;\n                    treeBuilder.trace.forbiddenOperation = !!metrics.forbiddenOperation;\n                    treeBuilder.trace.registeredOperation = !!metrics.registeredOperation;\n                    const policyIfCacheable = requestContext.overallCachePolicy.policyIfCacheable();\n                    if (policyIfCacheable) {\n                        treeBuilder.trace.cachePolicy = new _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.CachePolicy({\n                            scope: policyIfCacheable.scope === 'PRIVATE'\n                                ? _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.CachePolicy.Scope.PRIVATE\n                                : policyIfCacheable.scope === 'PUBLIC'\n                                    ? _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.CachePolicy.Scope.PUBLIC\n                                    : _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.CachePolicy.Scope.UNKNOWN,\n                            maxAgeNs: policyIfCacheable.maxAge * 1e9,\n                        });\n                    }\n                    if (metrics.queryPlanTrace) {\n                        treeBuilder.trace.queryPlan = metrics.queryPlanTrace;\n                    }\n                    addTrace().catch(logger.error);\n                    async function addTrace() {\n                        if (stopped) {\n                            return;\n                        }\n                        await new Promise((res) => setImmediate(res));\n                        const executableSchemaId = overriddenExecutableSchemaId ??\n                            executableSchemaIdForSchema(schema);\n                        const { trace } = treeBuilder;\n                        let statsReportKey = undefined;\n                        let referencedFieldsByType;\n                        if (!requestContext.document) {\n                            statsReportKey = `## GraphQLParseFailure\\n`;\n                        }\n                        else if (graphqlValidationFailure) {\n                            statsReportKey = `## GraphQLValidationFailure\\n`;\n                        }\n                        else if (graphqlUnknownOperationName) {\n                            statsReportKey = `## GraphQLUnknownOperationName\\n`;\n                        }\n                        const isExecutable = statsReportKey === undefined;\n                        if (statsReportKey) {\n                            if (options.sendUnexecutableOperationDocuments) {\n                                trace.unexecutedOperationBody = requestContext.source;\n                                trace.unexecutedOperationName =\n                                    requestContext.request.operationName || '';\n                            }\n                            referencedFieldsByType = Object.create(null);\n                        }\n                        else {\n                            const operationDerivedData = getOperationDerivedData();\n                            statsReportKey = `# ${requestContext.operationName || '-'}\\n${operationDerivedData.signature}`;\n                            referencedFieldsByType =\n                                operationDerivedData.referencedFieldsByType;\n                        }\n                        const protobufError = _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.verify(trace);\n                        if (protobufError) {\n                            throw new Error(`Error encoding trace: ${protobufError}`);\n                        }\n                        if (resolvedOperation) {\n                            getReportWhichMustBeUsedImmediately(executableSchemaId)\n                                .operationCount++;\n                        }\n                        getReportWhichMustBeUsedImmediately(executableSchemaId).addTrace({\n                            statsReportKey,\n                            trace,\n                            asTrace: sendTraces &&\n                                (!isExecutable || !!metrics.captureTraces) &&\n                                !metrics.nonFtv1ErrorPaths?.length &&\n                                sendOperationAsTrace(trace, statsReportKey),\n                            referencedFieldsByType,\n                            nonFtv1ErrorPaths: metrics.nonFtv1ErrorPaths ?? [],\n                        });\n                        if (sendReportsImmediately ||\n                            getReportWhichMustBeUsedImmediately(executableSchemaId)\n                                .sizeEstimator.bytes >=\n                                (options.maxUncompressedReportSize || 4 * 1024 * 1024)) {\n                            await sendReportAndReportErrors(executableSchemaId);\n                        }\n                    }\n                    function getOperationDerivedData() {\n                        if (!requestContext.document) {\n                            throw new Error('No document?');\n                        }\n                        const cacheKey = (0,_operationDerivedDataCache_js__WEBPACK_IMPORTED_MODULE_10__.operationDerivedDataCacheKey)(requestContext.queryHash, requestContext.operationName || '');\n                        if (!operationDerivedDataCache ||\n                            operationDerivedDataCache.forSchema !== schema) {\n                            operationDerivedDataCache = {\n                                forSchema: schema,\n                                cache: (0,_operationDerivedDataCache_js__WEBPACK_IMPORTED_MODULE_10__.createOperationDerivedDataCache)({ logger }),\n                            };\n                        }\n                        const cachedOperationDerivedData = operationDerivedDataCache.cache.get(cacheKey);\n                        if (cachedOperationDerivedData) {\n                            return cachedOperationDerivedData;\n                        }\n                        const generatedSignature = (options.calculateSignature || _apollo_utils_usagereporting__WEBPACK_IMPORTED_MODULE_1__.usageReportingSignature)(requestContext.document, requestContext.operationName || '');\n                        const generatedOperationDerivedData = {\n                            signature: generatedSignature,\n                            referencedFieldsByType: (0,_apollo_utils_usagereporting__WEBPACK_IMPORTED_MODULE_1__.calculateReferencedFieldsByType)({\n                                document: requestContext.document,\n                                schema,\n                                resolvedOperationName: requestContext.operationName ?? null,\n                            }),\n                        };\n                        operationDerivedDataCache.cache.set(cacheKey, generatedOperationDerivedData);\n                        return generatedOperationDerivedData;\n                    }\n                }\n            };\n            return {\n                async serverWillStop() {\n                    if (reportTimer) {\n                        clearInterval(reportTimer);\n                        reportTimer = undefined;\n                    }\n                    stopped = true;\n                    await sendAllReportsAndReportErrors();\n                },\n            };\n        },\n    });\n}\nfunction makeHTTPRequestHeaders(http, headers, sendHeaders) {\n    if (!sendHeaders ||\n        ('none' in sendHeaders && sendHeaders.none) ||\n        ('all' in sendHeaders && !sendHeaders.all)) {\n        return;\n    }\n    for (const [key, value] of headers) {\n        if (('exceptNames' in sendHeaders &&\n            sendHeaders.exceptNames.some((exceptHeader) => {\n                return exceptHeader.toLowerCase() === key;\n            })) ||\n            ('onlyNames' in sendHeaders &&\n                !sendHeaders.onlyNames.some((header) => {\n                    return header.toLowerCase() === key;\n                }))) {\n            continue;\n        }\n        switch (key) {\n            case 'authorization':\n            case 'cookie':\n            case 'set-cookie':\n                break;\n            default:\n                http.requestHeaders[key] = new _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.HTTP.Values({\n                    value: [value],\n                });\n        }\n    }\n}\nfunction defaultGenerateClientInfo({ request, }) {\n    const clientNameHeaderKey = 'apollographql-client-name';\n    const clientVersionHeaderKey = 'apollographql-client-version';\n    if (request.http?.headers?.get(clientNameHeaderKey) ||\n        request.http?.headers?.get(clientVersionHeaderKey)) {\n        return {\n            clientName: request.http?.headers?.get(clientNameHeaderKey),\n            clientVersion: request.http?.headers?.get(clientVersionHeaderKey),\n        };\n    }\n    else if (request.extensions?.clientInfo) {\n        return request.extensions.clientInfo;\n    }\n    else {\n        return {};\n    }\n}\n//# sourceMappingURL=plugin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/plugin.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/stats.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/usageReporting/stats.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   OurContextualizedStats: () => (/* binding */ OurContextualizedStats),\n/* harmony export */   OurReport: () => (/* binding */ OurReport),\n/* harmony export */   SizeEstimator: () => (/* binding */ SizeEstimator)\n/* harmony export */ });\n/* harmony import */ var _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/usage-reporting-protobuf */ \"(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/esm/protobuf.js\");\n/* harmony import */ var _durationHistogram_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./durationHistogram.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/durationHistogram.js\");\n/* harmony import */ var _iterateOverTrace_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./iterateOverTrace.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/iterateOverTrace.js\");\n\n\n\nclass SizeEstimator {\n    constructor() {\n        this.bytes = 0;\n    }\n}\nclass OurReport {\n    constructor(header) {\n        this.header = header;\n        this.tracesPreAggregated = false;\n        this.tracesPerQuery = Object.create(null);\n        this.endTime = null;\n        this.operationCount = 0;\n        this.sizeEstimator = new SizeEstimator();\n    }\n    ensureCountsAreIntegers() {\n        for (const tracesAndStats of Object.values(this.tracesPerQuery)) {\n            tracesAndStats.ensureCountsAreIntegers();\n        }\n    }\n    addTrace({ statsReportKey, trace, asTrace, referencedFieldsByType, maxTraceBytes = 10 * 1024 * 1024, nonFtv1ErrorPaths, }) {\n        const tracesAndStats = this.getTracesAndStats({\n            statsReportKey,\n            referencedFieldsByType,\n        });\n        if (asTrace) {\n            const encodedTrace = _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.encode(trace).finish();\n            if (!isNaN(maxTraceBytes) && encodedTrace.length > maxTraceBytes) {\n                tracesAndStats.statsWithContext.addTrace(trace, this.sizeEstimator, nonFtv1ErrorPaths);\n            }\n            else {\n                tracesAndStats.trace.push(encodedTrace);\n                this.sizeEstimator.bytes += 2 + encodedTrace.length;\n            }\n        }\n        else {\n            tracesAndStats.statsWithContext.addTrace(trace, this.sizeEstimator, nonFtv1ErrorPaths);\n        }\n    }\n    getTracesAndStats({ statsReportKey, referencedFieldsByType, }) {\n        const existing = this.tracesPerQuery[statsReportKey];\n        if (existing) {\n            return existing;\n        }\n        this.sizeEstimator.bytes += estimatedBytesForString(statsReportKey);\n        for (const [typeName, referencedFieldsForType] of Object.entries(referencedFieldsByType)) {\n            this.sizeEstimator.bytes += 2 + 2;\n            if (referencedFieldsForType.isInterface) {\n                this.sizeEstimator.bytes += 2;\n            }\n            this.sizeEstimator.bytes += estimatedBytesForString(typeName);\n            for (const fieldName of referencedFieldsForType.fieldNames) {\n                this.sizeEstimator.bytes += estimatedBytesForString(fieldName);\n            }\n        }\n        return (this.tracesPerQuery[statsReportKey] = new OurTracesAndStats(referencedFieldsByType));\n    }\n}\nclass OurTracesAndStats {\n    constructor(referencedFieldsByType) {\n        this.referencedFieldsByType = referencedFieldsByType;\n        this.trace = [];\n        this.statsWithContext = new StatsByContext();\n        this.internalTracesContributingToStats = [];\n    }\n    ensureCountsAreIntegers() {\n        this.statsWithContext.ensureCountsAreIntegers();\n    }\n}\nclass StatsByContext {\n    constructor() {\n        this.map = Object.create(null);\n    }\n    toArray() {\n        return Object.values(this.map);\n    }\n    ensureCountsAreIntegers() {\n        for (const contextualizedStats of Object.values(this.map)) {\n            contextualizedStats.ensureCountsAreIntegers();\n        }\n    }\n    addTrace(trace, sizeEstimator, nonFtv1ErrorPaths) {\n        this.getContextualizedStats(trace, sizeEstimator).addTrace(trace, sizeEstimator, nonFtv1ErrorPaths);\n    }\n    getContextualizedStats(trace, sizeEstimator) {\n        const statsContext = {\n            clientName: trace.clientName,\n            clientVersion: trace.clientVersion,\n        };\n        const statsContextKey = JSON.stringify(statsContext);\n        const existing = this.map[statsContextKey];\n        if (existing) {\n            return existing;\n        }\n        sizeEstimator.bytes +=\n            20 +\n                estimatedBytesForString(trace.clientName) +\n                estimatedBytesForString(trace.clientVersion);\n        const contextualizedStats = new OurContextualizedStats(statsContext);\n        this.map[statsContextKey] = contextualizedStats;\n        return contextualizedStats;\n    }\n}\nclass OurContextualizedStats {\n    constructor(context) {\n        this.context = context;\n        this.queryLatencyStats = new OurQueryLatencyStats();\n        this.perTypeStat = Object.create(null);\n    }\n    ensureCountsAreIntegers() {\n        for (const typeStat of Object.values(this.perTypeStat)) {\n            typeStat.ensureCountsAreIntegers();\n        }\n    }\n    addTrace(trace, sizeEstimator, nonFtv1ErrorPaths = []) {\n        const { fieldExecutionWeight } = trace;\n        if (!fieldExecutionWeight) {\n            this.queryLatencyStats.requestsWithoutFieldInstrumentation++;\n        }\n        this.queryLatencyStats.requestCount++;\n        if (trace.fullQueryCacheHit) {\n            this.queryLatencyStats.cacheLatencyCount.incrementDuration(trace.durationNs);\n            this.queryLatencyStats.cacheHits++;\n        }\n        else {\n            this.queryLatencyStats.latencyCount.incrementDuration(trace.durationNs);\n        }\n        if (!trace.fullQueryCacheHit && trace.cachePolicy?.maxAgeNs != null) {\n            switch (trace.cachePolicy.scope) {\n                case _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.CachePolicy.Scope.PRIVATE:\n                    this.queryLatencyStats.privateCacheTtlCount.incrementDuration(trace.cachePolicy.maxAgeNs);\n                    break;\n                case _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.CachePolicy.Scope.PUBLIC:\n                    this.queryLatencyStats.publicCacheTtlCount.incrementDuration(trace.cachePolicy.maxAgeNs);\n                    break;\n            }\n        }\n        if (trace.persistedQueryHit) {\n            this.queryLatencyStats.persistedQueryHits++;\n        }\n        if (trace.persistedQueryRegister) {\n            this.queryLatencyStats.persistedQueryMisses++;\n        }\n        if (trace.forbiddenOperation) {\n            this.queryLatencyStats.forbiddenOperationCount++;\n        }\n        if (trace.registeredOperation) {\n            this.queryLatencyStats.registeredOperationCount++;\n        }\n        let hasError = false;\n        const errorPathStats = new Set();\n        const traceNodeStats = (node, path) => {\n            if (node.error?.length) {\n                hasError = true;\n                let currPathErrorStats = this.queryLatencyStats.rootErrorStats;\n                path.toArray().forEach((subPath) => {\n                    currPathErrorStats = currPathErrorStats.getChild(subPath, sizeEstimator);\n                });\n                errorPathStats.add(currPathErrorStats);\n                currPathErrorStats.errorsCount += node.error.length;\n            }\n            if (fieldExecutionWeight) {\n                const fieldName = node.originalFieldName || node.responseName;\n                if (node.parentType &&\n                    fieldName &&\n                    node.type &&\n                    node.endTime != null &&\n                    node.startTime != null &&\n                    node.endTime >= node.startTime) {\n                    const typeStat = this.getTypeStat(node.parentType, sizeEstimator);\n                    const fieldStat = typeStat.getFieldStat(fieldName, node.type, sizeEstimator);\n                    fieldStat.errorsCount += node.error?.length ?? 0;\n                    fieldStat.observedExecutionCount++;\n                    fieldStat.estimatedExecutionCount += fieldExecutionWeight;\n                    fieldStat.requestsWithErrorsCount +=\n                        (node.error?.length ?? 0) > 0 ? 1 : 0;\n                    fieldStat.latencyCount.incrementDuration(node.endTime - node.startTime, fieldExecutionWeight);\n                }\n            }\n            return false;\n        };\n        (0,_iterateOverTrace_js__WEBPACK_IMPORTED_MODULE_2__.iterateOverTrace)(trace, traceNodeStats, true);\n        for (const { subgraph, path } of nonFtv1ErrorPaths) {\n            hasError = true;\n            if (path) {\n                let currPathErrorStats = this.queryLatencyStats.rootErrorStats.getChild(`service:${subgraph}`, sizeEstimator);\n                path.forEach((subPath) => {\n                    if (typeof subPath === 'string') {\n                        currPathErrorStats = currPathErrorStats.getChild(subPath, sizeEstimator);\n                    }\n                });\n                errorPathStats.add(currPathErrorStats);\n                currPathErrorStats.errorsCount += 1;\n            }\n        }\n        for (const errorPath of errorPathStats) {\n            errorPath.requestsWithErrorsCount += 1;\n        }\n        if (hasError) {\n            this.queryLatencyStats.requestsWithErrorsCount++;\n        }\n    }\n    getTypeStat(parentType, sizeEstimator) {\n        const existing = this.perTypeStat[parentType];\n        if (existing) {\n            return existing;\n        }\n        sizeEstimator.bytes += estimatedBytesForString(parentType);\n        const typeStat = new OurTypeStat();\n        this.perTypeStat[parentType] = typeStat;\n        return typeStat;\n    }\n}\nclass OurQueryLatencyStats {\n    constructor() {\n        this.latencyCount = new _durationHistogram_js__WEBPACK_IMPORTED_MODULE_1__.DurationHistogram();\n        this.requestCount = 0;\n        this.requestsWithoutFieldInstrumentation = 0;\n        this.cacheHits = 0;\n        this.persistedQueryHits = 0;\n        this.persistedQueryMisses = 0;\n        this.cacheLatencyCount = new _durationHistogram_js__WEBPACK_IMPORTED_MODULE_1__.DurationHistogram();\n        this.rootErrorStats = new OurPathErrorStats();\n        this.requestsWithErrorsCount = 0;\n        this.publicCacheTtlCount = new _durationHistogram_js__WEBPACK_IMPORTED_MODULE_1__.DurationHistogram();\n        this.privateCacheTtlCount = new _durationHistogram_js__WEBPACK_IMPORTED_MODULE_1__.DurationHistogram();\n        this.registeredOperationCount = 0;\n        this.forbiddenOperationCount = 0;\n    }\n}\nclass OurPathErrorStats {\n    constructor() {\n        this.children = Object.create(null);\n        this.errorsCount = 0;\n        this.requestsWithErrorsCount = 0;\n    }\n    getChild(subPath, sizeEstimator) {\n        const existing = this.children[subPath];\n        if (existing) {\n            return existing;\n        }\n        const child = new OurPathErrorStats();\n        this.children[subPath] = child;\n        sizeEstimator.bytes += estimatedBytesForString(subPath) + 4;\n        return child;\n    }\n}\nclass OurTypeStat {\n    constructor() {\n        this.perFieldStat = Object.create(null);\n    }\n    getFieldStat(fieldName, returnType, sizeEstimator) {\n        const existing = this.perFieldStat[fieldName];\n        if (existing) {\n            return existing;\n        }\n        sizeEstimator.bytes +=\n            estimatedBytesForString(fieldName) +\n                estimatedBytesForString(returnType) +\n                10;\n        const fieldStat = new OurFieldStat(returnType);\n        this.perFieldStat[fieldName] = fieldStat;\n        return fieldStat;\n    }\n    ensureCountsAreIntegers() {\n        for (const fieldStat of Object.values(this.perFieldStat)) {\n            fieldStat.ensureCountsAreIntegers();\n        }\n    }\n}\nclass OurFieldStat {\n    constructor(returnType) {\n        this.returnType = returnType;\n        this.errorsCount = 0;\n        this.observedExecutionCount = 0;\n        this.estimatedExecutionCount = 0;\n        this.requestsWithErrorsCount = 0;\n        this.latencyCount = new _durationHistogram_js__WEBPACK_IMPORTED_MODULE_1__.DurationHistogram();\n    }\n    ensureCountsAreIntegers() {\n        this.estimatedExecutionCount = Math.floor(this.estimatedExecutionCount);\n    }\n}\nfunction estimatedBytesForString(s) {\n    return 2 + Buffer.byteLength(s);\n}\n//# sourceMappingURL=stats.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/stats.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/traceDetails.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/plugin/usageReporting/traceDetails.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeTraceDetails: () => (/* binding */ makeTraceDetails)\n/* harmony export */ });\n/* harmony import */ var _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/usage-reporting-protobuf */ \"(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/esm/protobuf.js\");\n\nfunction makeTraceDetails(variables, sendVariableValues, operationString) {\n    const details = new _apollo_usage_reporting_protobuf__WEBPACK_IMPORTED_MODULE_0__.Trace.Details();\n    const variablesToRecord = (() => {\n        if (sendVariableValues && 'transform' in sendVariableValues) {\n            const originalKeys = Object.keys(variables);\n            try {\n                const modifiedVariables = sendVariableValues.transform({\n                    variables: variables,\n                    operationString: operationString,\n                });\n                return cleanModifiedVariables(originalKeys, modifiedVariables);\n            }\n            catch (e) {\n                return handleVariableValueTransformError(originalKeys);\n            }\n        }\n        else {\n            return variables;\n        }\n    })();\n    Object.keys(variablesToRecord).forEach((name) => {\n        if (!sendVariableValues ||\n            ('none' in sendVariableValues && sendVariableValues.none) ||\n            ('all' in sendVariableValues && !sendVariableValues.all) ||\n            ('exceptNames' in sendVariableValues &&\n                sendVariableValues.exceptNames.includes(name)) ||\n            ('onlyNames' in sendVariableValues &&\n                !sendVariableValues.onlyNames.includes(name))) {\n            details.variablesJson[name] = '';\n        }\n        else {\n            try {\n                details.variablesJson[name] =\n                    typeof variablesToRecord[name] === 'undefined'\n                        ? ''\n                        : JSON.stringify(variablesToRecord[name]);\n            }\n            catch (e) {\n                details.variablesJson[name] = JSON.stringify('[Unable to convert value to JSON]');\n            }\n        }\n    });\n    return details;\n}\nfunction handleVariableValueTransformError(variableNames) {\n    const modifiedVariables = Object.create(null);\n    variableNames.forEach((name) => {\n        modifiedVariables[name] = '[PREDICATE_FUNCTION_ERROR]';\n    });\n    return modifiedVariables;\n}\nfunction cleanModifiedVariables(originalKeys, modifiedVariables) {\n    const cleanedVariables = Object.create(null);\n    originalKeys.forEach((name) => {\n        cleanedVariables[name] = modifiedVariables[name];\n    });\n    return cleanedVariables;\n}\n//# sourceMappingURL=traceDetails.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcGx1Z2luL3VzYWdlUmVwb3J0aW5nL3RyYWNlRGV0YWlscy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUF5RDtBQUNsRDtBQUNQLHdCQUF3QixtRUFBSztBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjtBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL3BsdWdpbi91c2FnZVJlcG9ydGluZy90cmFjZURldGFpbHMuanM/MDVhNCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUcmFjZSB9IGZyb20gJ0BhcG9sbG8vdXNhZ2UtcmVwb3J0aW5nLXByb3RvYnVmJztcbmV4cG9ydCBmdW5jdGlvbiBtYWtlVHJhY2VEZXRhaWxzKHZhcmlhYmxlcywgc2VuZFZhcmlhYmxlVmFsdWVzLCBvcGVyYXRpb25TdHJpbmcpIHtcbiAgICBjb25zdCBkZXRhaWxzID0gbmV3IFRyYWNlLkRldGFpbHMoKTtcbiAgICBjb25zdCB2YXJpYWJsZXNUb1JlY29yZCA9ICgoKSA9PiB7XG4gICAgICAgIGlmIChzZW5kVmFyaWFibGVWYWx1ZXMgJiYgJ3RyYW5zZm9ybScgaW4gc2VuZFZhcmlhYmxlVmFsdWVzKSB7XG4gICAgICAgICAgICBjb25zdCBvcmlnaW5hbEtleXMgPSBPYmplY3Qua2V5cyh2YXJpYWJsZXMpO1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBjb25zdCBtb2RpZmllZFZhcmlhYmxlcyA9IHNlbmRWYXJpYWJsZVZhbHVlcy50cmFuc2Zvcm0oe1xuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXM6IHZhcmlhYmxlcyxcbiAgICAgICAgICAgICAgICAgICAgb3BlcmF0aW9uU3RyaW5nOiBvcGVyYXRpb25TdHJpbmcsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNsZWFuTW9kaWZpZWRWYXJpYWJsZXMob3JpZ2luYWxLZXlzLCBtb2RpZmllZFZhcmlhYmxlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBoYW5kbGVWYXJpYWJsZVZhbHVlVHJhbnNmb3JtRXJyb3Iob3JpZ2luYWxLZXlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB2YXJpYWJsZXM7XG4gICAgICAgIH1cbiAgICB9KSgpO1xuICAgIE9iamVjdC5rZXlzKHZhcmlhYmxlc1RvUmVjb3JkKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgIGlmICghc2VuZFZhcmlhYmxlVmFsdWVzIHx8XG4gICAgICAgICAgICAoJ25vbmUnIGluIHNlbmRWYXJpYWJsZVZhbHVlcyAmJiBzZW5kVmFyaWFibGVWYWx1ZXMubm9uZSkgfHxcbiAgICAgICAgICAgICgnYWxsJyBpbiBzZW5kVmFyaWFibGVWYWx1ZXMgJiYgIXNlbmRWYXJpYWJsZVZhbHVlcy5hbGwpIHx8XG4gICAgICAgICAgICAoJ2V4Y2VwdE5hbWVzJyBpbiBzZW5kVmFyaWFibGVWYWx1ZXMgJiZcbiAgICAgICAgICAgICAgICBzZW5kVmFyaWFibGVWYWx1ZXMuZXhjZXB0TmFtZXMuaW5jbHVkZXMobmFtZSkpIHx8XG4gICAgICAgICAgICAoJ29ubHlOYW1lcycgaW4gc2VuZFZhcmlhYmxlVmFsdWVzICYmXG4gICAgICAgICAgICAgICAgIXNlbmRWYXJpYWJsZVZhbHVlcy5vbmx5TmFtZXMuaW5jbHVkZXMobmFtZSkpKSB7XG4gICAgICAgICAgICBkZXRhaWxzLnZhcmlhYmxlc0pzb25bbmFtZV0gPSAnJztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZGV0YWlscy52YXJpYWJsZXNKc29uW25hbWVdID1cbiAgICAgICAgICAgICAgICAgICAgdHlwZW9mIHZhcmlhYmxlc1RvUmVjb3JkW25hbWVdID09PSAndW5kZWZpbmVkJ1xuICAgICAgICAgICAgICAgICAgICAgICAgPyAnJ1xuICAgICAgICAgICAgICAgICAgICAgICAgOiBKU09OLnN0cmluZ2lmeSh2YXJpYWJsZXNUb1JlY29yZFtuYW1lXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIGRldGFpbHMudmFyaWFibGVzSnNvbltuYW1lXSA9IEpTT04uc3RyaW5naWZ5KCdbVW5hYmxlIHRvIGNvbnZlcnQgdmFsdWUgdG8gSlNPTl0nKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBkZXRhaWxzO1xufVxuZnVuY3Rpb24gaGFuZGxlVmFyaWFibGVWYWx1ZVRyYW5zZm9ybUVycm9yKHZhcmlhYmxlTmFtZXMpIHtcbiAgICBjb25zdCBtb2RpZmllZFZhcmlhYmxlcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyaWFibGVOYW1lcy5mb3JFYWNoKChuYW1lKSA9PiB7XG4gICAgICAgIG1vZGlmaWVkVmFyaWFibGVzW25hbWVdID0gJ1tQUkVESUNBVEVfRlVOQ1RJT05fRVJST1JdJztcbiAgICB9KTtcbiAgICByZXR1cm4gbW9kaWZpZWRWYXJpYWJsZXM7XG59XG5mdW5jdGlvbiBjbGVhbk1vZGlmaWVkVmFyaWFibGVzKG9yaWdpbmFsS2V5cywgbW9kaWZpZWRWYXJpYWJsZXMpIHtcbiAgICBjb25zdCBjbGVhbmVkVmFyaWFibGVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBvcmlnaW5hbEtleXMuZm9yRWFjaCgobmFtZSkgPT4ge1xuICAgICAgICBjbGVhbmVkVmFyaWFibGVzW25hbWVdID0gbW9kaWZpZWRWYXJpYWJsZXNbbmFtZV07XG4gICAgfSk7XG4gICAgcmV0dXJuIGNsZWFuZWRWYXJpYWJsZXM7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10cmFjZURldGFpbHMuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/plugin/usageReporting/traceDetails.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/preventCsrf.js":
/*!*************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/preventCsrf.js ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   preventCsrf: () => (/* binding */ preventCsrf),\n/* harmony export */   recommendedCsrfPreventionRequestHeaders: () => (/* binding */ recommendedCsrfPreventionRequestHeaders)\n/* harmony export */ });\n/* harmony import */ var whatwg_mimetype__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! whatwg-mimetype */ \"(rsc)/./node_modules/whatwg-mimetype/lib/mime-type.js\");\n/* harmony import */ var _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internalErrorClasses.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/internalErrorClasses.js\");\n\n\nconst recommendedCsrfPreventionRequestHeaders = [\n    'x-apollo-operation-name',\n    'apollo-require-preflight',\n];\nconst NON_PREFLIGHTED_CONTENT_TYPES = [\n    'application/x-www-form-urlencoded',\n    'multipart/form-data',\n    'text/plain',\n];\nfunction preventCsrf(headers, csrfPreventionRequestHeaders) {\n    const contentType = headers.get('content-type');\n    if (contentType !== undefined) {\n        const contentTypeParsed = whatwg_mimetype__WEBPACK_IMPORTED_MODULE_0__.parse(contentType);\n        if (contentTypeParsed === null) {\n            return;\n        }\n        if (!NON_PREFLIGHTED_CONTENT_TYPES.includes(contentTypeParsed.essence)) {\n            return;\n        }\n    }\n    if (csrfPreventionRequestHeaders.some((header) => {\n        const value = headers.get(header);\n        return value !== undefined && value.length > 0;\n    })) {\n        return;\n    }\n    throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError(`This operation has been blocked as a potential Cross-Site Request Forgery ` +\n        `(CSRF). Please either specify a 'content-type' header (with a type that ` +\n        `is not one of ${NON_PREFLIGHTED_CONTENT_TYPES.join(', ')}) or provide ` +\n        `a non-empty value for one of the following headers: ${csrfPreventionRequestHeaders.join(', ')}\\n`);\n}\n//# sourceMappingURL=preventCsrf.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vcHJldmVudENzcmYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUF1QztBQUNxQjtBQUNyRDtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxrQ0FBa0Msa0RBQWM7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGNBQWMscUVBQWU7QUFDN0I7QUFDQSx5QkFBeUIseUNBQXlDO0FBQ2xFLCtEQUErRCx3Q0FBd0M7QUFDdkc7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2VzbS9wcmV2ZW50Q3NyZi5qcz80NGU1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBNSU1FVHlwZSBmcm9tICd3aGF0d2ctbWltZXR5cGUnO1xuaW1wb3J0IHsgQmFkUmVxdWVzdEVycm9yIH0gZnJvbSAnLi9pbnRlcm5hbEVycm9yQ2xhc3Nlcy5qcyc7XG5leHBvcnQgY29uc3QgcmVjb21tZW5kZWRDc3JmUHJldmVudGlvblJlcXVlc3RIZWFkZXJzID0gW1xuICAgICd4LWFwb2xsby1vcGVyYXRpb24tbmFtZScsXG4gICAgJ2Fwb2xsby1yZXF1aXJlLXByZWZsaWdodCcsXG5dO1xuY29uc3QgTk9OX1BSRUZMSUdIVEVEX0NPTlRFTlRfVFlQRVMgPSBbXG4gICAgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcsXG4gICAgJ211bHRpcGFydC9mb3JtLWRhdGEnLFxuICAgICd0ZXh0L3BsYWluJyxcbl07XG5leHBvcnQgZnVuY3Rpb24gcHJldmVudENzcmYoaGVhZGVycywgY3NyZlByZXZlbnRpb25SZXF1ZXN0SGVhZGVycykge1xuICAgIGNvbnN0IGNvbnRlbnRUeXBlID0gaGVhZGVycy5nZXQoJ2NvbnRlbnQtdHlwZScpO1xuICAgIGlmIChjb250ZW50VHlwZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGNvbnRlbnRUeXBlUGFyc2VkID0gTUlNRVR5cGUucGFyc2UoY29udGVudFR5cGUpO1xuICAgICAgICBpZiAoY29udGVudFR5cGVQYXJzZWQgPT09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIU5PTl9QUkVGTElHSFRFRF9DT05URU5UX1RZUEVTLmluY2x1ZGVzKGNvbnRlbnRUeXBlUGFyc2VkLmVzc2VuY2UpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNzcmZQcmV2ZW50aW9uUmVxdWVzdEhlYWRlcnMuc29tZSgoaGVhZGVyKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gaGVhZGVycy5nZXQoaGVhZGVyKTtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUubGVuZ3RoID4gMDtcbiAgICB9KSkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHRocm93IG5ldyBCYWRSZXF1ZXN0RXJyb3IoYFRoaXMgb3BlcmF0aW9uIGhhcyBiZWVuIGJsb2NrZWQgYXMgYSBwb3RlbnRpYWwgQ3Jvc3MtU2l0ZSBSZXF1ZXN0IEZvcmdlcnkgYCArXG4gICAgICAgIGAoQ1NSRikuIFBsZWFzZSBlaXRoZXIgc3BlY2lmeSBhICdjb250ZW50LXR5cGUnIGhlYWRlciAod2l0aCBhIHR5cGUgdGhhdCBgICtcbiAgICAgICAgYGlzIG5vdCBvbmUgb2YgJHtOT05fUFJFRkxJR0hURURfQ09OVEVOVF9UWVBFUy5qb2luKCcsICcpfSkgb3IgcHJvdmlkZSBgICtcbiAgICAgICAgYGEgbm9uLWVtcHR5IHZhbHVlIGZvciBvbmUgb2YgdGhlIGZvbGxvd2luZyBoZWFkZXJzOiAke2NzcmZQcmV2ZW50aW9uUmVxdWVzdEhlYWRlcnMuam9pbignLCAnKX1cXG5gKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXByZXZlbnRDc3JmLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/preventCsrf.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/requestPipeline.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/requestPipeline.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   APQ_CACHE_PREFIX: () => (/* binding */ APQ_CACHE_PREFIX),\n/* harmony export */   processGraphQLRequest: () => (/* binding */ processGraphQLRequest)\n/* harmony export */ });\n/* harmony import */ var _apollo_utils_createhash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/utils.createhash */ \"(rsc)/./node_modules/@apollo/utils.createhash/dist/index.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/error/GraphQLError.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/parser.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/validation/validate.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/validation/specifiedRules.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/utilities/getOperationAST.mjs\");\n/* harmony import */ var _utils_schemaInstrumentation_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/schemaInstrumentation.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/schemaInstrumentation.js\");\n/* harmony import */ var _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internalErrorClasses.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/internalErrorClasses.js\");\n/* harmony import */ var _errorNormalize_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./errorNormalize.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/errorNormalize.js\");\n/* harmony import */ var _utils_invokeHooks_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils/invokeHooks.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/invokeHooks.js\");\n/* harmony import */ var _utils_makeGatewayGraphQLRequestContext_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./utils/makeGatewayGraphQLRequestContext.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/makeGatewayGraphQLRequestContext.js\");\n/* harmony import */ var _runHttpQuery_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./runHttpQuery.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/runHttpQuery.js\");\n/* harmony import */ var _utils_isDefined_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./utils/isDefined.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/isDefined.js\");\n/* harmony import */ var _incrementalDeliveryPolyfill_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./incrementalDeliveryPolyfill.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/incrementalDeliveryPolyfill.js\");\n/* harmony import */ var _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./utils/HeaderMap.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/HeaderMap.js\");\n\n\n\n\n\n\n\n\n\n\n\nconst APQ_CACHE_PREFIX = 'apq:';\nfunction computeQueryHash(query) {\n    return (0,_apollo_utils_createhash__WEBPACK_IMPORTED_MODULE_0__.createHash)('sha256').update(query).digest('hex');\n}\nfunction isBadUserInputGraphQLError(error) {\n    return (error.nodes?.length === 1 &&\n        error.nodes[0].kind === graphql__WEBPACK_IMPORTED_MODULE_10__.Kind.VARIABLE_DEFINITION &&\n        (error.message.startsWith(`Variable \"$${error.nodes[0].variable.name.value}\" got invalid value `) ||\n            error.message.startsWith(`Variable \"$${error.nodes[0].variable.name.value}\" of required type `) ||\n            error.message.startsWith(`Variable \"$${error.nodes[0].variable.name.value}\" of non-null type `)));\n}\nasync function processGraphQLRequest(schemaDerivedData, server, internals, requestContext) {\n    const requestListeners = (await Promise.all(internals.plugins.map((p) => p.requestDidStart?.(requestContext)))).filter(_utils_isDefined_js__WEBPACK_IMPORTED_MODULE_7__.isDefined);\n    const request = requestContext.request;\n    let { query, extensions } = request;\n    let queryHash;\n    requestContext.metrics.persistedQueryHit = false;\n    requestContext.metrics.persistedQueryRegister = false;\n    if (extensions?.persistedQuery) {\n        if (!internals.persistedQueries) {\n            return await sendErrorResponse([new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_2__.PersistedQueryNotSupportedError()]);\n        }\n        else if (extensions.persistedQuery.version !== 1) {\n            return await sendErrorResponse([\n                new graphql__WEBPACK_IMPORTED_MODULE_11__.GraphQLError('Unsupported persisted query version', {\n                    extensions: { http: (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_6__.newHTTPGraphQLHead)(400) },\n                }),\n            ]);\n        }\n        queryHash = extensions.persistedQuery.sha256Hash;\n        if (query === undefined) {\n            query = await internals.persistedQueries.cache.get(queryHash);\n            if (query) {\n                requestContext.metrics.persistedQueryHit = true;\n            }\n            else {\n                return await sendErrorResponse([new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_2__.PersistedQueryNotFoundError()]);\n            }\n        }\n        else {\n            const computedQueryHash = computeQueryHash(query);\n            if (queryHash !== computedQueryHash) {\n                return await sendErrorResponse([\n                    new graphql__WEBPACK_IMPORTED_MODULE_11__.GraphQLError('provided sha does not match query', {\n                        extensions: { http: (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_6__.newHTTPGraphQLHead)(400) },\n                    }),\n                ]);\n            }\n            requestContext.metrics.persistedQueryRegister = true;\n        }\n    }\n    else if (query) {\n        queryHash = computeQueryHash(query);\n    }\n    else {\n        return await sendErrorResponse([\n            new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_2__.BadRequestError('GraphQL operations must contain a non-empty `query` or a `persistedQuery` extension.'),\n        ]);\n    }\n    requestContext.queryHash = queryHash;\n    requestContext.source = query;\n    await Promise.all(requestListeners.map((l) => l.didResolveSource?.(requestContext)));\n    if (schemaDerivedData.documentStore) {\n        try {\n            requestContext.document = await schemaDerivedData.documentStore.get(schemaDerivedData.documentStoreKeyPrefix + queryHash);\n        }\n        catch (err) {\n            server.logger.warn('An error occurred while attempting to read from the documentStore. ' +\n                (0,_errorNormalize_js__WEBPACK_IMPORTED_MODULE_3__.ensureError)(err).message);\n        }\n    }\n    if (!requestContext.document) {\n        const parsingDidEnd = await (0,_utils_invokeHooks_js__WEBPACK_IMPORTED_MODULE_4__.invokeDidStartHook)(requestListeners, async (l) => l.parsingDidStart?.(requestContext));\n        try {\n            requestContext.document = (0,graphql__WEBPACK_IMPORTED_MODULE_12__.parse)(query, internals.parseOptions);\n        }\n        catch (syntaxMaybeError) {\n            const error = (0,_errorNormalize_js__WEBPACK_IMPORTED_MODULE_3__.ensureError)(syntaxMaybeError);\n            await parsingDidEnd(error);\n            return await sendErrorResponse([\n                new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_2__.SyntaxError((0,_errorNormalize_js__WEBPACK_IMPORTED_MODULE_3__.ensureGraphQLError)(error)),\n            ]);\n        }\n        await parsingDidEnd();\n        if (internals.dangerouslyDisableValidation !== true) {\n            const validationDidEnd = await (0,_utils_invokeHooks_js__WEBPACK_IMPORTED_MODULE_4__.invokeDidStartHook)(requestListeners, async (l) => l.validationDidStart?.(requestContext));\n            const validationErrors = (0,graphql__WEBPACK_IMPORTED_MODULE_13__.validate)(schemaDerivedData.schema, requestContext.document, [...graphql__WEBPACK_IMPORTED_MODULE_14__.specifiedRules, ...internals.validationRules]);\n            if (validationErrors.length === 0) {\n                await validationDidEnd();\n            }\n            else {\n                await validationDidEnd(validationErrors);\n                return await sendErrorResponse(validationErrors.map((error) => new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_2__.ValidationError(error)));\n            }\n        }\n        if (schemaDerivedData.documentStore) {\n            Promise.resolve(schemaDerivedData.documentStore.set(schemaDerivedData.documentStoreKeyPrefix + queryHash, requestContext.document)).catch((err) => server.logger.warn('Could not store validated document. ' + err?.message || 0));\n        }\n    }\n    const operation = (0,graphql__WEBPACK_IMPORTED_MODULE_15__.getOperationAST)(requestContext.document, request.operationName);\n    requestContext.operation = operation || undefined;\n    requestContext.operationName = operation?.name?.value || null;\n    if (request.http?.method === 'GET' &&\n        operation?.operation &&\n        operation.operation !== 'query') {\n        return await sendErrorResponse([\n            new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_2__.BadRequestError(`GET requests only support query operations, not ${operation.operation} operations`, {\n                extensions: {\n                    http: { status: 405, headers: new _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_9__.HeaderMap([['allow', 'POST']]) },\n                },\n            }),\n        ]);\n    }\n    try {\n        await Promise.all(requestListeners.map((l) => l.didResolveOperation?.(requestContext)));\n    }\n    catch (err) {\n        return await sendErrorResponse([(0,_errorNormalize_js__WEBPACK_IMPORTED_MODULE_3__.ensureGraphQLError)(err)]);\n    }\n    if (requestContext.metrics.persistedQueryRegister &&\n        internals.persistedQueries) {\n        const ttl = internals.persistedQueries?.ttl;\n        Promise.resolve(internals.persistedQueries.cache.set(queryHash, query, ttl !== undefined\n            ? { ttl: internals.persistedQueries?.ttl }\n            : undefined)).catch(server.logger.warn);\n    }\n    const responseFromPlugin = await (0,_utils_invokeHooks_js__WEBPACK_IMPORTED_MODULE_4__.invokeHooksUntilDefinedAndNonNull)(requestListeners, async (l) => await l.responseForOperation?.(requestContext));\n    if (responseFromPlugin !== null) {\n        requestContext.response.body = responseFromPlugin.body;\n        (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_6__.mergeHTTPGraphQLHead)(requestContext.response.http, responseFromPlugin.http);\n    }\n    else {\n        const executionListeners = (await Promise.all(requestListeners.map((l) => l.executionDidStart?.(requestContext)))).filter(_utils_isDefined_js__WEBPACK_IMPORTED_MODULE_7__.isDefined);\n        executionListeners.reverse();\n        if (executionListeners.some((l) => l.willResolveField)) {\n            const invokeWillResolveField = (...args) => (0,_utils_invokeHooks_js__WEBPACK_IMPORTED_MODULE_4__.invokeSyncDidStartHook)(executionListeners, (l) => l.willResolveField?.(...args));\n            Object.defineProperty(requestContext.contextValue, _utils_schemaInstrumentation_js__WEBPACK_IMPORTED_MODULE_1__.symbolExecutionDispatcherWillResolveField, { value: invokeWillResolveField });\n            if (internals.fieldResolver) {\n                Object.defineProperty(requestContext.contextValue, _utils_schemaInstrumentation_js__WEBPACK_IMPORTED_MODULE_1__.symbolUserFieldResolver, {\n                    value: internals.fieldResolver,\n                });\n            }\n            (0,_utils_schemaInstrumentation_js__WEBPACK_IMPORTED_MODULE_1__.enablePluginsForSchemaResolvers)(schemaDerivedData.schema);\n        }\n        try {\n            const fullResult = await execute(requestContext);\n            const result = 'singleResult' in fullResult\n                ? fullResult.singleResult\n                : fullResult.initialResult;\n            if (!requestContext.operation) {\n                if (!result.errors?.length) {\n                    throw new Error('Unexpected error: Apollo Server did not resolve an operation but execute did not return errors');\n                }\n                throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_2__.OperationResolutionError(result.errors[0]);\n            }\n            const resultErrors = result.errors?.map((e) => {\n                if (isBadUserInputGraphQLError(e) && e.extensions?.code == null) {\n                    return new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_2__.UserInputError(e);\n                }\n                return e;\n            });\n            if (resultErrors) {\n                await didEncounterErrors(resultErrors);\n            }\n            const { formattedErrors, httpFromErrors } = resultErrors\n                ? formatErrors(resultErrors)\n                : { formattedErrors: undefined, httpFromErrors: (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_6__.newHTTPGraphQLHead)() };\n            if (internals.status400ForVariableCoercionErrors &&\n                resultErrors?.length &&\n                result.data === undefined &&\n                !httpFromErrors.status) {\n                httpFromErrors.status = 400;\n            }\n            (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_6__.mergeHTTPGraphQLHead)(requestContext.response.http, httpFromErrors);\n            if ('singleResult' in fullResult) {\n                requestContext.response.body = {\n                    kind: 'single',\n                    singleResult: {\n                        ...result,\n                        errors: formattedErrors,\n                    },\n                };\n            }\n            else {\n                requestContext.response.body = {\n                    kind: 'incremental',\n                    initialResult: {\n                        ...fullResult.initialResult,\n                        errors: formattedErrors,\n                    },\n                    subsequentResults: fullResult.subsequentResults,\n                };\n            }\n        }\n        catch (executionMaybeError) {\n            const executionError = (0,_errorNormalize_js__WEBPACK_IMPORTED_MODULE_3__.ensureError)(executionMaybeError);\n            await Promise.all(executionListeners.map((l) => l.executionDidEnd?.(executionError)));\n            return await sendErrorResponse([(0,_errorNormalize_js__WEBPACK_IMPORTED_MODULE_3__.ensureGraphQLError)(executionError)]);\n        }\n        await Promise.all(executionListeners.map((l) => l.executionDidEnd?.()));\n    }\n    await invokeWillSendResponse();\n    if (!requestContext.response.body) {\n        throw Error('got to end of processGraphQLRequest without setting body?');\n    }\n    return requestContext.response;\n    async function execute(requestContext) {\n        const { request, document } = requestContext;\n        if (internals.__testing_incrementalExecutionResults) {\n            return internals.__testing_incrementalExecutionResults;\n        }\n        else if (internals.gatewayExecutor) {\n            const result = await internals.gatewayExecutor((0,_utils_makeGatewayGraphQLRequestContext_js__WEBPACK_IMPORTED_MODULE_5__.makeGatewayGraphQLRequestContext)(requestContext, server, internals));\n            return { singleResult: result };\n        }\n        else {\n            const resultOrResults = await (0,_incrementalDeliveryPolyfill_js__WEBPACK_IMPORTED_MODULE_8__.executeIncrementally)({\n                schema: schemaDerivedData.schema,\n                document,\n                rootValue: typeof internals.rootValue === 'function'\n                    ? internals.rootValue(document)\n                    : internals.rootValue,\n                contextValue: requestContext.contextValue,\n                variableValues: request.variables,\n                operationName: request.operationName,\n                fieldResolver: internals.fieldResolver,\n            });\n            if ('initialResult' in resultOrResults) {\n                return {\n                    initialResult: resultOrResults.initialResult,\n                    subsequentResults: formatErrorsInSubsequentResults(resultOrResults.subsequentResults),\n                };\n            }\n            else {\n                return { singleResult: resultOrResults };\n            }\n        }\n    }\n    async function* formatErrorsInSubsequentResults(results) {\n        for await (const result of results) {\n            const payload = result.incremental\n                ? {\n                    ...result,\n                    incremental: await seriesAsyncMap(result.incremental, async (incrementalResult) => {\n                        const { errors } = incrementalResult;\n                        if (errors) {\n                            await Promise.all(requestListeners.map((l) => l.didEncounterSubsequentErrors?.(requestContext, errors)));\n                            return {\n                                ...incrementalResult,\n                                errors: formatErrors(errors).formattedErrors,\n                            };\n                        }\n                        return incrementalResult;\n                    }),\n                }\n                : result;\n            await Promise.all(requestListeners.map((l) => l.willSendSubsequentPayload?.(requestContext, payload)));\n            yield payload;\n        }\n    }\n    async function invokeWillSendResponse() {\n        await Promise.all(requestListeners.map((l) => l.willSendResponse?.(requestContext)));\n    }\n    async function didEncounterErrors(errors) {\n        requestContext.errors = errors;\n        return await Promise.all(requestListeners.map((l) => l.didEncounterErrors?.(requestContext)));\n    }\n    async function sendErrorResponse(errors) {\n        await didEncounterErrors(errors);\n        const { formattedErrors, httpFromErrors } = formatErrors(errors);\n        requestContext.response.body = {\n            kind: 'single',\n            singleResult: {\n                errors: formattedErrors,\n            },\n        };\n        (0,_runHttpQuery_js__WEBPACK_IMPORTED_MODULE_6__.mergeHTTPGraphQLHead)(requestContext.response.http, httpFromErrors);\n        if (!requestContext.response.http.status) {\n            requestContext.response.http.status = 500;\n        }\n        await invokeWillSendResponse();\n        return requestContext.response;\n    }\n    function formatErrors(errors) {\n        return (0,_errorNormalize_js__WEBPACK_IMPORTED_MODULE_3__.normalizeAndFormatErrors)(errors, {\n            formatError: internals.formatError,\n            includeStacktraceInErrorResponses: internals.includeStacktraceInErrorResponses,\n        });\n    }\n}\nasync function seriesAsyncMap(ts, fn) {\n    const us = [];\n    for (const t of ts) {\n        const u = await fn(t);\n        us.push(u);\n    }\n    return us;\n}\n//# sourceMappingURL=requestPipeline.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/requestPipeline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/runHttpQuery.js":
/*!**************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/runHttpQuery.js ***!
  \**************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeHTTPGraphQLHead: () => (/* binding */ mergeHTTPGraphQLHead),\n/* harmony export */   newHTTPGraphQLHead: () => (/* binding */ newHTTPGraphQLHead),\n/* harmony export */   prettyJSONStringify: () => (/* binding */ prettyJSONStringify),\n/* harmony export */   runHttpQuery: () => (/* binding */ runHttpQuery)\n/* harmony export */ });\n/* harmony import */ var _ApolloServer_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ApolloServer.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/ApolloServer.js\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./internalErrorClasses.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/internalErrorClasses.js\");\n/* harmony import */ var negotiator__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! negotiator */ \"(rsc)/./node_modules/negotiator/index.js\");\n/* harmony import */ var _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/HeaderMap.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/HeaderMap.js\");\n\n\n\n\n\nfunction fieldIfString(o, fieldName) {\n    const value = o[fieldName];\n    if (typeof value === 'string') {\n        return value;\n    }\n    return undefined;\n}\nfunction searchParamIfSpecifiedOnce(searchParams, paramName) {\n    const values = searchParams.getAll(paramName);\n    switch (values.length) {\n        case 0:\n            return undefined;\n        case 1:\n            return values[0];\n        default:\n            throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError(`The '${paramName}' search parameter may only be specified once.`);\n    }\n}\nfunction jsonParsedSearchParamIfSpecifiedOnce(searchParams, fieldName) {\n    const value = searchParamIfSpecifiedOnce(searchParams, fieldName);\n    if (value === undefined) {\n        return undefined;\n    }\n    let hopefullyRecord;\n    try {\n        hopefullyRecord = JSON.parse(value);\n    }\n    catch {\n        throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError(`The ${fieldName} search parameter contains invalid JSON.`);\n    }\n    if (!isStringRecord(hopefullyRecord)) {\n        throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError(`The ${fieldName} search parameter should contain a JSON-encoded object.`);\n    }\n    return hopefullyRecord;\n}\nfunction fieldIfRecord(o, fieldName) {\n    const value = o[fieldName];\n    if (isStringRecord(value)) {\n        return value;\n    }\n    return undefined;\n}\nfunction isStringRecord(o) {\n    return (!!o && typeof o === 'object' && !Buffer.isBuffer(o) && !Array.isArray(o));\n}\nfunction isNonEmptyStringRecord(o) {\n    return isStringRecord(o) && Object.keys(o).length > 0;\n}\nfunction ensureQueryIsStringOrMissing(query) {\n    if (!query || typeof query === 'string') {\n        return;\n    }\n    if (query.kind === graphql__WEBPACK_IMPORTED_MODULE_4__.Kind.DOCUMENT) {\n        throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError(\"GraphQL queries must be strings. It looks like you're sending the \" +\n            'internal graphql-js representation of a parsed query in your ' +\n            'request instead of a request in the GraphQL query language. You ' +\n            'can convert an AST to a string using the `print` function from ' +\n            '`graphql`, or use a client like `apollo-client` which converts ' +\n            'the internal representation to a string for you.');\n    }\n    else {\n        throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError('GraphQL queries must be strings.');\n    }\n}\nasync function runHttpQuery({ server, httpRequest, contextValue, schemaDerivedData, internals, sharedResponseHTTPGraphQLHead, }) {\n    let graphQLRequest;\n    switch (httpRequest.method) {\n        case 'POST': {\n            if (!isNonEmptyStringRecord(httpRequest.body)) {\n                throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError('POST body missing, invalid Content-Type, or JSON object has no keys.');\n            }\n            ensureQueryIsStringOrMissing(httpRequest.body.query);\n            if (typeof httpRequest.body.variables === 'string') {\n                throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError('`variables` in a POST body should be provided as an object, not a recursively JSON-encoded string.');\n            }\n            if (typeof httpRequest.body.extensions === 'string') {\n                throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError('`extensions` in a POST body should be provided as an object, not a recursively JSON-encoded string.');\n            }\n            if ('extensions' in httpRequest.body &&\n                httpRequest.body.extensions !== null &&\n                !isStringRecord(httpRequest.body.extensions)) {\n                throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError('`extensions` in a POST body must be an object if provided.');\n            }\n            if ('variables' in httpRequest.body &&\n                httpRequest.body.variables !== null &&\n                !isStringRecord(httpRequest.body.variables)) {\n                throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError('`variables` in a POST body must be an object if provided.');\n            }\n            if ('operationName' in httpRequest.body &&\n                httpRequest.body.operationName !== null &&\n                typeof httpRequest.body.operationName !== 'string') {\n                throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError('`operationName` in a POST body must be a string if provided.');\n            }\n            graphQLRequest = {\n                query: fieldIfString(httpRequest.body, 'query'),\n                operationName: fieldIfString(httpRequest.body, 'operationName'),\n                variables: fieldIfRecord(httpRequest.body, 'variables'),\n                extensions: fieldIfRecord(httpRequest.body, 'extensions'),\n                http: httpRequest,\n            };\n            break;\n        }\n        case 'GET': {\n            const searchParams = new URLSearchParams(httpRequest.search);\n            graphQLRequest = {\n                query: searchParamIfSpecifiedOnce(searchParams, 'query'),\n                operationName: searchParamIfSpecifiedOnce(searchParams, 'operationName'),\n                variables: jsonParsedSearchParamIfSpecifiedOnce(searchParams, 'variables'),\n                extensions: jsonParsedSearchParamIfSpecifiedOnce(searchParams, 'extensions'),\n                http: httpRequest,\n            };\n            break;\n        }\n        default:\n            throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError('Apollo Server supports only GET/POST requests.', {\n                extensions: {\n                    http: {\n                        status: 405,\n                        headers: new _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_3__.HeaderMap([['allow', 'GET, POST']]),\n                    },\n                },\n            });\n    }\n    const graphQLResponse = await (0,_ApolloServer_js__WEBPACK_IMPORTED_MODULE_0__.internalExecuteOperation)({\n        server,\n        graphQLRequest,\n        internals,\n        schemaDerivedData,\n        sharedResponseHTTPGraphQLHead,\n    }, { contextValue });\n    if (graphQLResponse.body.kind === 'single') {\n        if (!graphQLResponse.http.headers.get('content-type')) {\n            const contentType = (0,_ApolloServer_js__WEBPACK_IMPORTED_MODULE_0__.chooseContentTypeForSingleResultResponse)(httpRequest);\n            if (contentType === null) {\n                throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError(`An 'accept' header was provided for this request which does not accept ` +\n                    `${_ApolloServer_js__WEBPACK_IMPORTED_MODULE_0__.MEDIA_TYPES.APPLICATION_JSON} or ${_ApolloServer_js__WEBPACK_IMPORTED_MODULE_0__.MEDIA_TYPES.APPLICATION_GRAPHQL_RESPONSE_JSON}`, { extensions: { http: { status: 406 } } });\n            }\n            graphQLResponse.http.headers.set('content-type', contentType);\n        }\n        return {\n            ...graphQLResponse.http,\n            body: {\n                kind: 'complete',\n                string: await internals.stringifyResult(orderExecutionResultFields(graphQLResponse.body.singleResult)),\n            },\n        };\n    }\n    const acceptHeader = httpRequest.headers.get('accept');\n    if (!(acceptHeader &&\n        new negotiator__WEBPACK_IMPORTED_MODULE_2__({\n            headers: { accept: httpRequest.headers.get('accept') },\n        }).mediaType([\n            _ApolloServer_js__WEBPACK_IMPORTED_MODULE_0__.MEDIA_TYPES.MULTIPART_MIXED_NO_DEFER_SPEC,\n            _ApolloServer_js__WEBPACK_IMPORTED_MODULE_0__.MEDIA_TYPES.MULTIPART_MIXED_EXPERIMENTAL,\n        ]) === _ApolloServer_js__WEBPACK_IMPORTED_MODULE_0__.MEDIA_TYPES.MULTIPART_MIXED_EXPERIMENTAL)) {\n        throw new _internalErrorClasses_js__WEBPACK_IMPORTED_MODULE_1__.BadRequestError('Apollo server received an operation that uses incremental delivery ' +\n            '(@defer or @stream), but the client does not accept multipart/mixed ' +\n            'HTTP responses. To enable incremental delivery support, add the HTTP ' +\n            \"header 'Accept: multipart/mixed; deferSpec=20220824'.\", { extensions: { http: { status: 406 } } });\n    }\n    graphQLResponse.http.headers.set('content-type', 'multipart/mixed; boundary=\"-\"; deferSpec=20220824');\n    return {\n        ...graphQLResponse.http,\n        body: {\n            kind: 'chunked',\n            asyncIterator: writeMultipartBody(graphQLResponse.body.initialResult, graphQLResponse.body.subsequentResults),\n        },\n    };\n}\nasync function* writeMultipartBody(initialResult, subsequentResults) {\n    yield `\\r\\n---\\r\\ncontent-type: application/json; charset=utf-8\\r\\n\\r\\n${JSON.stringify(orderInitialIncrementalExecutionResultFields(initialResult))}\\r\\n---${initialResult.hasNext ? '' : '--'}\\r\\n`;\n    for await (const result of subsequentResults) {\n        yield `content-type: application/json; charset=utf-8\\r\\n\\r\\n${JSON.stringify(orderSubsequentIncrementalExecutionResultFields(result))}\\r\\n---${result.hasNext ? '' : '--'}\\r\\n`;\n    }\n}\nfunction orderExecutionResultFields(result) {\n    return {\n        errors: result.errors,\n        data: result.data,\n        extensions: result.extensions,\n    };\n}\nfunction orderInitialIncrementalExecutionResultFields(result) {\n    return {\n        hasNext: result.hasNext,\n        errors: result.errors,\n        data: result.data,\n        incremental: orderIncrementalResultFields(result.incremental),\n        extensions: result.extensions,\n    };\n}\nfunction orderSubsequentIncrementalExecutionResultFields(result) {\n    return {\n        hasNext: result.hasNext,\n        incremental: orderIncrementalResultFields(result.incremental),\n        extensions: result.extensions,\n    };\n}\nfunction orderIncrementalResultFields(incremental) {\n    return incremental?.map((i) => ({\n        hasNext: i.hasNext,\n        errors: i.errors,\n        path: i.path,\n        label: i.label,\n        data: i.data,\n        items: i.items,\n        extensions: i.extensions,\n    }));\n}\nfunction prettyJSONStringify(value) {\n    return JSON.stringify(value) + '\\n';\n}\nfunction newHTTPGraphQLHead(status) {\n    return {\n        status,\n        headers: new _utils_HeaderMap_js__WEBPACK_IMPORTED_MODULE_3__.HeaderMap(),\n    };\n}\nfunction mergeHTTPGraphQLHead(target, source) {\n    if (source.status) {\n        target.status = source.status;\n    }\n    if (source.headers) {\n        for (const [name, value] of source.headers) {\n            target.headers.set(name, value);\n        }\n    }\n}\n//# sourceMappingURL=runHttpQuery.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/runHttpQuery.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/utils/HeaderMap.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/utils/HeaderMap.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HeaderMap: () => (/* binding */ HeaderMap)\n/* harmony export */ });\nclass HeaderMap extends Map {\n    constructor() {\n        super(...arguments);\n        this.__identity = Symbol('HeaderMap');\n    }\n    set(key, value) {\n        return super.set(key.toLowerCase(), value);\n    }\n    get(key) {\n        return super.get(key.toLowerCase());\n    }\n    delete(key) {\n        return super.delete(key.toLowerCase());\n    }\n    has(key) {\n        return super.has(key.toLowerCase());\n    }\n}\n//# sourceMappingURL=HeaderMap.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vdXRpbHMvSGVhZGVyTWFwLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2VzbS91dGlscy9IZWFkZXJNYXAuanM/NDVjOCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgSGVhZGVyTWFwIGV4dGVuZHMgTWFwIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy5fX2lkZW50aXR5ID0gU3ltYm9sKCdIZWFkZXJNYXAnKTtcbiAgICB9XG4gICAgc2V0KGtleSwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLnNldChrZXkudG9Mb3dlckNhc2UoKSwgdmFsdWUpO1xuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICAgIHJldHVybiBzdXBlci5nZXQoa2V5LnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICAgIHJldHVybiBzdXBlci5kZWxldGUoa2V5LnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cbiAgICBoYXMoa2V5KSB7XG4gICAgICAgIHJldHVybiBzdXBlci5oYXMoa2V5LnRvTG93ZXJDYXNlKCkpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUhlYWRlck1hcC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/utils/HeaderMap.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/utils/UnreachableCaseError.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/utils/UnreachableCaseError.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   UnreachableCaseError: () => (/* binding */ UnreachableCaseError)\n/* harmony export */ });\nclass UnreachableCaseError extends Error {\n    constructor(val) {\n        super(`Unreachable case: ${val}`);\n    }\n}\n//# sourceMappingURL=UnreachableCaseError.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vdXRpbHMvVW5yZWFjaGFibGVDYXNlRXJyb3IuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQSxtQ0FBbUMsSUFBSTtBQUN2QztBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vdXRpbHMvVW5yZWFjaGFibGVDYXNlRXJyb3IuanM/MDViMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVW5yZWFjaGFibGVDYXNlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IodmFsKSB7XG4gICAgICAgIHN1cGVyKGBVbnJlYWNoYWJsZSBjYXNlOiAke3ZhbH1gKTtcbiAgICB9XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1VbnJlYWNoYWJsZUNhc2VFcnJvci5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/utils/UnreachableCaseError.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/utils/computeCoreSchemaHash.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/utils/computeCoreSchemaHash.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   computeCoreSchemaHash: () => (/* binding */ computeCoreSchemaHash)\n/* harmony export */ });\n/* harmony import */ var _apollo_utils_createhash__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/utils.createhash */ \"(rsc)/./node_modules/@apollo/utils.createhash/dist/index.js\");\n\nfunction computeCoreSchemaHash(schema) {\n    return (0,_apollo_utils_createhash__WEBPACK_IMPORTED_MODULE_0__.createHash)('sha256').update(schema).digest('hex');\n}\n//# sourceMappingURL=computeCoreSchemaHash.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vdXRpbHMvY29tcHV0ZUNvcmVTY2hlbWFIYXNoLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXNEO0FBQy9DO0FBQ1AsV0FBVyxvRUFBVTtBQUNyQjtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL3V0aWxzL2NvbXB1dGVDb3JlU2NoZW1hSGFzaC5qcz82NDFjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNyZWF0ZUhhc2ggfSBmcm9tICdAYXBvbGxvL3V0aWxzLmNyZWF0ZWhhc2gnO1xuZXhwb3J0IGZ1bmN0aW9uIGNvbXB1dGVDb3JlU2NoZW1hSGFzaChzY2hlbWEpIHtcbiAgICByZXR1cm4gY3JlYXRlSGFzaCgnc2hhMjU2JykudXBkYXRlKHNjaGVtYSkuZGlnZXN0KCdoZXgnKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXB1dGVDb3JlU2NoZW1hSGFzaC5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/utils/computeCoreSchemaHash.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/utils/invokeHooks.js":
/*!*******************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/utils/invokeHooks.js ***!
  \*******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invokeDidStartHook: () => (/* binding */ invokeDidStartHook),\n/* harmony export */   invokeHooksUntilDefinedAndNonNull: () => (/* binding */ invokeHooksUntilDefinedAndNonNull),\n/* harmony export */   invokeSyncDidStartHook: () => (/* binding */ invokeSyncDidStartHook)\n/* harmony export */ });\n/* harmony import */ var _isDefined_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./isDefined.js */ \"(rsc)/./node_modules/@apollo/server/dist/esm/utils/isDefined.js\");\n\nasync function invokeDidStartHook(targets, hook) {\n    const didEndHooks = (await Promise.all(targets.map((target) => hook(target)))).filter(_isDefined_js__WEBPACK_IMPORTED_MODULE_0__.isDefined);\n    didEndHooks.reverse();\n    return async (...args) => {\n        for (const didEndHook of didEndHooks) {\n            didEndHook(...args);\n        }\n    };\n}\nfunction invokeSyncDidStartHook(targets, hook) {\n    const didEndHooks = targets\n        .map((target) => hook(target))\n        .filter(_isDefined_js__WEBPACK_IMPORTED_MODULE_0__.isDefined);\n    didEndHooks.reverse();\n    return (...args) => {\n        for (const didEndHook of didEndHooks) {\n            didEndHook(...args);\n        }\n    };\n}\nasync function invokeHooksUntilDefinedAndNonNull(targets, hook) {\n    for (const target of targets) {\n        const value = await hook(target);\n        if (value != null) {\n            return value;\n        }\n    }\n    return null;\n}\n//# sourceMappingURL=invokeHooks.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vdXRpbHMvaW52b2tlSG9va3MuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUEyQztBQUNwQztBQUNQLDBGQUEwRixvREFBUztBQUNuRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBLGdCQUFnQixvREFBUztBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL3V0aWxzL2ludm9rZUhvb2tzLmpzPzVhNDkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgaXNEZWZpbmVkIH0gZnJvbSAnLi9pc0RlZmluZWQuanMnO1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGludm9rZURpZFN0YXJ0SG9vayh0YXJnZXRzLCBob29rKSB7XG4gICAgY29uc3QgZGlkRW5kSG9va3MgPSAoYXdhaXQgUHJvbWlzZS5hbGwodGFyZ2V0cy5tYXAoKHRhcmdldCkgPT4gaG9vayh0YXJnZXQpKSkpLmZpbHRlcihpc0RlZmluZWQpO1xuICAgIGRpZEVuZEhvb2tzLnJldmVyc2UoKTtcbiAgICByZXR1cm4gYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBkaWRFbmRIb29rIG9mIGRpZEVuZEhvb2tzKSB7XG4gICAgICAgICAgICBkaWRFbmRIb29rKC4uLmFyZ3MpO1xuICAgICAgICB9XG4gICAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpbnZva2VTeW5jRGlkU3RhcnRIb29rKHRhcmdldHMsIGhvb2spIHtcbiAgICBjb25zdCBkaWRFbmRIb29rcyA9IHRhcmdldHNcbiAgICAgICAgLm1hcCgodGFyZ2V0KSA9PiBob29rKHRhcmdldCkpXG4gICAgICAgIC5maWx0ZXIoaXNEZWZpbmVkKTtcbiAgICBkaWRFbmRIb29rcy5yZXZlcnNlKCk7XG4gICAgcmV0dXJuICguLi5hcmdzKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3QgZGlkRW5kSG9vayBvZiBkaWRFbmRIb29rcykge1xuICAgICAgICAgICAgZGlkRW5kSG9vayguLi5hcmdzKTtcbiAgICAgICAgfVxuICAgIH07XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW52b2tlSG9va3NVbnRpbERlZmluZWRBbmROb25OdWxsKHRhcmdldHMsIGhvb2spIHtcbiAgICBmb3IgKGNvbnN0IHRhcmdldCBvZiB0YXJnZXRzKSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgaG9vayh0YXJnZXQpO1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBudWxsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW52b2tlSG9va3MuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/utils/invokeHooks.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/utils/isDefined.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/utils/isDefined.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDefined: () => (/* binding */ isDefined)\n/* harmony export */ });\nfunction isDefined(t) {\n    return t != null;\n}\n//# sourceMappingURL=isDefined.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vdXRpbHMvaXNEZWZpbmVkLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBTztBQUNQO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2VzbS91dGlscy9pc0RlZmluZWQuanM/ZTJkZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaXNEZWZpbmVkKHQpIHtcbiAgICByZXR1cm4gdCAhPSBudWxsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNEZWZpbmVkLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/utils/isDefined.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/utils/makeGatewayGraphQLRequestContext.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/utils/makeGatewayGraphQLRequestContext.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeGatewayGraphQLRequestContext: () => (/* binding */ makeGatewayGraphQLRequestContext)\n/* harmony export */ });\nfunction makeGatewayGraphQLRequestContext(as4RequestContext, server, internals) {\n    const request = {};\n    if ('query' in as4RequestContext.request) {\n        request.query = as4RequestContext.request.query;\n    }\n    if ('operationName' in as4RequestContext.request) {\n        request.operationName = as4RequestContext.request.operationName;\n    }\n    if ('variables' in as4RequestContext.request) {\n        request.variables = as4RequestContext.request.variables;\n    }\n    if ('extensions' in as4RequestContext.request) {\n        request.extensions = as4RequestContext.request.extensions;\n    }\n    if (as4RequestContext.request.http) {\n        const as4http = as4RequestContext.request.http;\n        const needQuestion = as4http.search !== '' && !as4http.search.startsWith('?');\n        request.http = {\n            method: as4http.method,\n            url: `https://unknown-url.invalid/${needQuestion ? '?' : ''}${as4http.search}`,\n            headers: new FetcherHeadersForHeaderMap(as4http.headers),\n        };\n    }\n    const response = {\n        http: {\n            headers: new FetcherHeadersForHeaderMap(as4RequestContext.response.http.headers),\n            get status() {\n                return as4RequestContext.response.http.status;\n            },\n            set status(newStatus) {\n                as4RequestContext.response.http.status = newStatus;\n            },\n        },\n    };\n    return {\n        request,\n        response,\n        logger: server.logger,\n        schema: as4RequestContext.schema,\n        schemaHash: 'schemaHash no longer exists in Apollo Server 4',\n        context: as4RequestContext.contextValue,\n        cache: server.cache,\n        queryHash: as4RequestContext.queryHash,\n        document: as4RequestContext.document,\n        source: as4RequestContext.source,\n        operationName: as4RequestContext.operationName,\n        operation: as4RequestContext.operation,\n        errors: as4RequestContext.errors,\n        metrics: as4RequestContext.metrics,\n        debug: internals.includeStacktraceInErrorResponses,\n        overallCachePolicy: as4RequestContext.overallCachePolicy,\n        requestIsBatched: as4RequestContext.requestIsBatched,\n    };\n}\nclass FetcherHeadersForHeaderMap {\n    constructor(map) {\n        this.map = map;\n    }\n    append(name, value) {\n        if (this.map.has(name)) {\n            this.map.set(name, this.map.get(name) + ', ' + value);\n        }\n        else {\n            this.map.set(name, value);\n        }\n    }\n    delete(name) {\n        this.map.delete(name);\n    }\n    get(name) {\n        return this.map.get(name) ?? null;\n    }\n    has(name) {\n        return this.map.has(name);\n    }\n    set(name, value) {\n        this.map.set(name, value);\n    }\n    entries() {\n        return this.map.entries();\n    }\n    keys() {\n        return this.map.keys();\n    }\n    values() {\n        return this.map.values();\n    }\n    [Symbol.iterator]() {\n        return this.map.entries();\n    }\n}\n//# sourceMappingURL=makeGatewayGraphQLRequestContext.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vdXRpbHMvbWFrZUdhdGV3YXlHcmFwaFFMUmVxdWVzdENvbnRleHQuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0RBQWdELHdCQUF3QixFQUFFLGVBQWU7QUFDekY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjtBQUNBO0FBQ0EsYUFBYTtBQUNiLFNBQVM7QUFDVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL3V0aWxzL21ha2VHYXRld2F5R3JhcGhRTFJlcXVlc3RDb250ZXh0LmpzPzM5ZjgiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIG1ha2VHYXRld2F5R3JhcGhRTFJlcXVlc3RDb250ZXh0KGFzNFJlcXVlc3RDb250ZXh0LCBzZXJ2ZXIsIGludGVybmFscykge1xuICAgIGNvbnN0IHJlcXVlc3QgPSB7fTtcbiAgICBpZiAoJ3F1ZXJ5JyBpbiBhczRSZXF1ZXN0Q29udGV4dC5yZXF1ZXN0KSB7XG4gICAgICAgIHJlcXVlc3QucXVlcnkgPSBhczRSZXF1ZXN0Q29udGV4dC5yZXF1ZXN0LnF1ZXJ5O1xuICAgIH1cbiAgICBpZiAoJ29wZXJhdGlvbk5hbWUnIGluIGFzNFJlcXVlc3RDb250ZXh0LnJlcXVlc3QpIHtcbiAgICAgICAgcmVxdWVzdC5vcGVyYXRpb25OYW1lID0gYXM0UmVxdWVzdENvbnRleHQucmVxdWVzdC5vcGVyYXRpb25OYW1lO1xuICAgIH1cbiAgICBpZiAoJ3ZhcmlhYmxlcycgaW4gYXM0UmVxdWVzdENvbnRleHQucmVxdWVzdCkge1xuICAgICAgICByZXF1ZXN0LnZhcmlhYmxlcyA9IGFzNFJlcXVlc3RDb250ZXh0LnJlcXVlc3QudmFyaWFibGVzO1xuICAgIH1cbiAgICBpZiAoJ2V4dGVuc2lvbnMnIGluIGFzNFJlcXVlc3RDb250ZXh0LnJlcXVlc3QpIHtcbiAgICAgICAgcmVxdWVzdC5leHRlbnNpb25zID0gYXM0UmVxdWVzdENvbnRleHQucmVxdWVzdC5leHRlbnNpb25zO1xuICAgIH1cbiAgICBpZiAoYXM0UmVxdWVzdENvbnRleHQucmVxdWVzdC5odHRwKSB7XG4gICAgICAgIGNvbnN0IGFzNGh0dHAgPSBhczRSZXF1ZXN0Q29udGV4dC5yZXF1ZXN0Lmh0dHA7XG4gICAgICAgIGNvbnN0IG5lZWRRdWVzdGlvbiA9IGFzNGh0dHAuc2VhcmNoICE9PSAnJyAmJiAhYXM0aHR0cC5zZWFyY2guc3RhcnRzV2l0aCgnPycpO1xuICAgICAgICByZXF1ZXN0Lmh0dHAgPSB7XG4gICAgICAgICAgICBtZXRob2Q6IGFzNGh0dHAubWV0aG9kLFxuICAgICAgICAgICAgdXJsOiBgaHR0cHM6Ly91bmtub3duLXVybC5pbnZhbGlkLyR7bmVlZFF1ZXN0aW9uID8gJz8nIDogJyd9JHthczRodHRwLnNlYXJjaH1gLFxuICAgICAgICAgICAgaGVhZGVyczogbmV3IEZldGNoZXJIZWFkZXJzRm9ySGVhZGVyTWFwKGFzNGh0dHAuaGVhZGVycyksXG4gICAgICAgIH07XG4gICAgfVxuICAgIGNvbnN0IHJlc3BvbnNlID0ge1xuICAgICAgICBodHRwOiB7XG4gICAgICAgICAgICBoZWFkZXJzOiBuZXcgRmV0Y2hlckhlYWRlcnNGb3JIZWFkZXJNYXAoYXM0UmVxdWVzdENvbnRleHQucmVzcG9uc2UuaHR0cC5oZWFkZXJzKSxcbiAgICAgICAgICAgIGdldCBzdGF0dXMoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFzNFJlcXVlc3RDb250ZXh0LnJlc3BvbnNlLmh0dHAuc3RhdHVzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldCBzdGF0dXMobmV3U3RhdHVzKSB7XG4gICAgICAgICAgICAgICAgYXM0UmVxdWVzdENvbnRleHQucmVzcG9uc2UuaHR0cC5zdGF0dXMgPSBuZXdTdGF0dXM7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgIH07XG4gICAgcmV0dXJuIHtcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgcmVzcG9uc2UsXG4gICAgICAgIGxvZ2dlcjogc2VydmVyLmxvZ2dlcixcbiAgICAgICAgc2NoZW1hOiBhczRSZXF1ZXN0Q29udGV4dC5zY2hlbWEsXG4gICAgICAgIHNjaGVtYUhhc2g6ICdzY2hlbWFIYXNoIG5vIGxvbmdlciBleGlzdHMgaW4gQXBvbGxvIFNlcnZlciA0JyxcbiAgICAgICAgY29udGV4dDogYXM0UmVxdWVzdENvbnRleHQuY29udGV4dFZhbHVlLFxuICAgICAgICBjYWNoZTogc2VydmVyLmNhY2hlLFxuICAgICAgICBxdWVyeUhhc2g6IGFzNFJlcXVlc3RDb250ZXh0LnF1ZXJ5SGFzaCxcbiAgICAgICAgZG9jdW1lbnQ6IGFzNFJlcXVlc3RDb250ZXh0LmRvY3VtZW50LFxuICAgICAgICBzb3VyY2U6IGFzNFJlcXVlc3RDb250ZXh0LnNvdXJjZSxcbiAgICAgICAgb3BlcmF0aW9uTmFtZTogYXM0UmVxdWVzdENvbnRleHQub3BlcmF0aW9uTmFtZSxcbiAgICAgICAgb3BlcmF0aW9uOiBhczRSZXF1ZXN0Q29udGV4dC5vcGVyYXRpb24sXG4gICAgICAgIGVycm9yczogYXM0UmVxdWVzdENvbnRleHQuZXJyb3JzLFxuICAgICAgICBtZXRyaWNzOiBhczRSZXF1ZXN0Q29udGV4dC5tZXRyaWNzLFxuICAgICAgICBkZWJ1ZzogaW50ZXJuYWxzLmluY2x1ZGVTdGFja3RyYWNlSW5FcnJvclJlc3BvbnNlcyxcbiAgICAgICAgb3ZlcmFsbENhY2hlUG9saWN5OiBhczRSZXF1ZXN0Q29udGV4dC5vdmVyYWxsQ2FjaGVQb2xpY3ksXG4gICAgICAgIHJlcXVlc3RJc0JhdGNoZWQ6IGFzNFJlcXVlc3RDb250ZXh0LnJlcXVlc3RJc0JhdGNoZWQsXG4gICAgfTtcbn1cbmNsYXNzIEZldGNoZXJIZWFkZXJzRm9ySGVhZGVyTWFwIHtcbiAgICBjb25zdHJ1Y3RvcihtYXApIHtcbiAgICAgICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgfVxuICAgIGFwcGVuZChuYW1lLCB2YWx1ZSkge1xuICAgICAgICBpZiAodGhpcy5tYXAuaGFzKG5hbWUpKSB7XG4gICAgICAgICAgICB0aGlzLm1hcC5zZXQobmFtZSwgdGhpcy5tYXAuZ2V0KG5hbWUpICsgJywgJyArIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWFwLnNldChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZGVsZXRlKG5hbWUpIHtcbiAgICAgICAgdGhpcy5tYXAuZGVsZXRlKG5hbWUpO1xuICAgIH1cbiAgICBnZXQobmFtZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuZ2V0KG5hbWUpID8/IG51bGw7XG4gICAgfVxuICAgIGhhcyhuYW1lKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5oYXMobmFtZSk7XG4gICAgfVxuICAgIHNldChuYW1lLCB2YWx1ZSkge1xuICAgICAgICB0aGlzLm1hcC5zZXQobmFtZSwgdmFsdWUpO1xuICAgIH1cbiAgICBlbnRyaWVzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAuZW50cmllcygpO1xuICAgIH1cbiAgICBrZXlzKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5tYXAua2V5cygpO1xuICAgIH1cbiAgICB2YWx1ZXMoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC52YWx1ZXMoKTtcbiAgICB9XG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1hcC5lbnRyaWVzKCk7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFrZUdhdGV3YXlHcmFwaFFMUmVxdWVzdENvbnRleHQuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/utils/makeGatewayGraphQLRequestContext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/utils/resolvable.js":
/*!******************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/utils/resolvable.js ***!
  \******************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (() => {\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject) => {\n        resolve = _resolve;\n        reject = _reject;\n    });\n    promise.resolve = resolve;\n    promise.reject = reject;\n    return promise;\n});\n//# sourceMappingURL=resolvable.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vdXRpbHMvcmVzb2x2YWJsZS5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQUEsaUVBQWU7QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLENBQUMsRUFBQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL2Rpc3QvZXNtL3V0aWxzL3Jlc29sdmFibGUuanM/YjNjMSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCAoKSA9PiB7XG4gICAgbGV0IHJlc29sdmU7XG4gICAgbGV0IHJlamVjdDtcbiAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKF9yZXNvbHZlLCBfcmVqZWN0KSA9PiB7XG4gICAgICAgIHJlc29sdmUgPSBfcmVzb2x2ZTtcbiAgICAgICAgcmVqZWN0ID0gX3JlamVjdDtcbiAgICB9KTtcbiAgICBwcm9taXNlLnJlc29sdmUgPSByZXNvbHZlO1xuICAgIHByb21pc2UucmVqZWN0ID0gcmVqZWN0O1xuICAgIHJldHVybiBwcm9taXNlO1xufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlc29sdmFibGUuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/utils/resolvable.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/utils/schemaInstrumentation.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/utils/schemaInstrumentation.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   enablePluginsForSchemaResolvers: () => (/* binding */ enablePluginsForSchemaResolvers),\n/* harmony export */   pluginsEnabledForSchemaResolvers: () => (/* binding */ pluginsEnabledForSchemaResolvers),\n/* harmony export */   symbolExecutionDispatcherWillResolveField: () => (/* binding */ symbolExecutionDispatcherWillResolveField),\n/* harmony export */   symbolUserFieldResolver: () => (/* binding */ symbolUserFieldResolver),\n/* harmony export */   whenResultIsFinished: () => (/* binding */ whenResultIsFinished)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/type/definition.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/execution/execute.mjs\");\n\nconst symbolExecutionDispatcherWillResolveField = Symbol('apolloServerExecutionDispatcherWillResolveField');\nconst symbolUserFieldResolver = Symbol('apolloServerUserFieldResolver');\nconst symbolPluginsEnabled = Symbol('apolloServerPluginsEnabled');\nfunction enablePluginsForSchemaResolvers(schema) {\n    if (pluginsEnabledForSchemaResolvers(schema)) {\n        return schema;\n    }\n    Object.defineProperty(schema, symbolPluginsEnabled, {\n        value: true,\n    });\n    const typeMap = schema.getTypeMap();\n    Object.values(typeMap).forEach((type) => {\n        if (!(0,graphql__WEBPACK_IMPORTED_MODULE_0__.getNamedType)(type).name.startsWith('__') &&\n            type instanceof graphql__WEBPACK_IMPORTED_MODULE_0__.GraphQLObjectType) {\n            const fields = type.getFields();\n            Object.values(fields).forEach((field) => {\n                wrapField(field);\n            });\n        }\n    });\n    return schema;\n}\nfunction pluginsEnabledForSchemaResolvers(schema) {\n    return !!schema[symbolPluginsEnabled];\n}\nfunction wrapField(field) {\n    const originalFieldResolve = field.resolve;\n    field.resolve = (source, args, contextValue, info) => {\n        const willResolveField = contextValue?.[symbolExecutionDispatcherWillResolveField];\n        const userFieldResolver = contextValue?.[symbolUserFieldResolver];\n        const didResolveField = typeof willResolveField === 'function' &&\n            willResolveField({ source, args, contextValue, info });\n        const fieldResolver = originalFieldResolve || userFieldResolver || graphql__WEBPACK_IMPORTED_MODULE_1__.defaultFieldResolver;\n        try {\n            const result = fieldResolver(source, args, contextValue, info);\n            if (typeof didResolveField === 'function') {\n                whenResultIsFinished(result, didResolveField);\n            }\n            return result;\n        }\n        catch (error) {\n            if (typeof didResolveField === 'function') {\n                didResolveField(error);\n            }\n            throw error;\n        }\n    };\n}\nfunction isPromise(x) {\n    return x && typeof x.then === 'function';\n}\nfunction whenResultIsFinished(result, callback) {\n    if (isPromise(result)) {\n        result.then((r) => whenResultIsFinished(r, callback), (err) => callback(err));\n    }\n    else if (Array.isArray(result)) {\n        if (result.some(isPromise)) {\n            Promise.all(result).then((r) => callback(null, r), (err) => callback(err));\n        }\n        else {\n            callback(null, result);\n        }\n    }\n    else {\n        callback(null, result);\n    }\n}\n//# sourceMappingURL=schemaInstrumentation.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vdXRpbHMvc2NoZW1hSW5zdHJ1bWVudGF0aW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFBaUY7QUFDMUU7QUFDQTtBQUNQO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQSxhQUFhLHFEQUFZO0FBQ3pCLDRCQUE0QixzREFBaUI7QUFDN0M7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwrQkFBK0Isa0NBQWtDO0FBQ2pFLDJFQUEyRSx5REFBb0I7QUFDL0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9kaXN0L2VzbS91dGlscy9zY2hlbWFJbnN0cnVtZW50YXRpb24uanM/ZWE4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXROYW1lZFR5cGUsIEdyYXBoUUxPYmplY3RUeXBlLCBkZWZhdWx0RmllbGRSZXNvbHZlciwgfSBmcm9tICdncmFwaHFsJztcbmV4cG9ydCBjb25zdCBzeW1ib2xFeGVjdXRpb25EaXNwYXRjaGVyV2lsbFJlc29sdmVGaWVsZCA9IFN5bWJvbCgnYXBvbGxvU2VydmVyRXhlY3V0aW9uRGlzcGF0Y2hlcldpbGxSZXNvbHZlRmllbGQnKTtcbmV4cG9ydCBjb25zdCBzeW1ib2xVc2VyRmllbGRSZXNvbHZlciA9IFN5bWJvbCgnYXBvbGxvU2VydmVyVXNlckZpZWxkUmVzb2x2ZXInKTtcbmNvbnN0IHN5bWJvbFBsdWdpbnNFbmFibGVkID0gU3ltYm9sKCdhcG9sbG9TZXJ2ZXJQbHVnaW5zRW5hYmxlZCcpO1xuZXhwb3J0IGZ1bmN0aW9uIGVuYWJsZVBsdWdpbnNGb3JTY2hlbWFSZXNvbHZlcnMoc2NoZW1hKSB7XG4gICAgaWYgKHBsdWdpbnNFbmFibGVkRm9yU2NoZW1hUmVzb2x2ZXJzKHNjaGVtYSkpIHtcbiAgICAgICAgcmV0dXJuIHNjaGVtYTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHNjaGVtYSwgc3ltYm9sUGx1Z2luc0VuYWJsZWQsIHtcbiAgICAgICAgdmFsdWU6IHRydWUsXG4gICAgfSk7XG4gICAgY29uc3QgdHlwZU1hcCA9IHNjaGVtYS5nZXRUeXBlTWFwKCk7XG4gICAgT2JqZWN0LnZhbHVlcyh0eXBlTWFwKS5mb3JFYWNoKCh0eXBlKSA9PiB7XG4gICAgICAgIGlmICghZ2V0TmFtZWRUeXBlKHR5cGUpLm5hbWUuc3RhcnRzV2l0aCgnX18nKSAmJlxuICAgICAgICAgICAgdHlwZSBpbnN0YW5jZW9mIEdyYXBoUUxPYmplY3RUeXBlKSB7XG4gICAgICAgICAgICBjb25zdCBmaWVsZHMgPSB0eXBlLmdldEZpZWxkcygpO1xuICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhmaWVsZHMpLmZvckVhY2goKGZpZWxkKSA9PiB7XG4gICAgICAgICAgICAgICAgd3JhcEZpZWxkKGZpZWxkKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHNjaGVtYTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwbHVnaW5zRW5hYmxlZEZvclNjaGVtYVJlc29sdmVycyhzY2hlbWEpIHtcbiAgICByZXR1cm4gISFzY2hlbWFbc3ltYm9sUGx1Z2luc0VuYWJsZWRdO1xufVxuZnVuY3Rpb24gd3JhcEZpZWxkKGZpZWxkKSB7XG4gICAgY29uc3Qgb3JpZ2luYWxGaWVsZFJlc29sdmUgPSBmaWVsZC5yZXNvbHZlO1xuICAgIGZpZWxkLnJlc29sdmUgPSAoc291cmNlLCBhcmdzLCBjb250ZXh0VmFsdWUsIGluZm8pID0+IHtcbiAgICAgICAgY29uc3Qgd2lsbFJlc29sdmVGaWVsZCA9IGNvbnRleHRWYWx1ZT8uW3N5bWJvbEV4ZWN1dGlvbkRpc3BhdGNoZXJXaWxsUmVzb2x2ZUZpZWxkXTtcbiAgICAgICAgY29uc3QgdXNlckZpZWxkUmVzb2x2ZXIgPSBjb250ZXh0VmFsdWU/LltzeW1ib2xVc2VyRmllbGRSZXNvbHZlcl07XG4gICAgICAgIGNvbnN0IGRpZFJlc29sdmVGaWVsZCA9IHR5cGVvZiB3aWxsUmVzb2x2ZUZpZWxkID09PSAnZnVuY3Rpb24nICYmXG4gICAgICAgICAgICB3aWxsUmVzb2x2ZUZpZWxkKHsgc291cmNlLCBhcmdzLCBjb250ZXh0VmFsdWUsIGluZm8gfSk7XG4gICAgICAgIGNvbnN0IGZpZWxkUmVzb2x2ZXIgPSBvcmlnaW5hbEZpZWxkUmVzb2x2ZSB8fCB1c2VyRmllbGRSZXNvbHZlciB8fCBkZWZhdWx0RmllbGRSZXNvbHZlcjtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGZpZWxkUmVzb2x2ZXIoc291cmNlLCBhcmdzLCBjb250ZXh0VmFsdWUsIGluZm8pO1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkaWRSZXNvbHZlRmllbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICB3aGVuUmVzdWx0SXNGaW5pc2hlZChyZXN1bHQsIGRpZFJlc29sdmVGaWVsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBkaWRSZXNvbHZlRmllbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgICBkaWRSZXNvbHZlRmllbGQoZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICB9O1xufVxuZnVuY3Rpb24gaXNQcm9taXNlKHgpIHtcbiAgICByZXR1cm4geCAmJiB0eXBlb2YgeC50aGVuID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHdoZW5SZXN1bHRJc0ZpbmlzaGVkKHJlc3VsdCwgY2FsbGJhY2spIHtcbiAgICBpZiAoaXNQcm9taXNlKHJlc3VsdCkpIHtcbiAgICAgICAgcmVzdWx0LnRoZW4oKHIpID0+IHdoZW5SZXN1bHRJc0ZpbmlzaGVkKHIsIGNhbGxiYWNrKSwgKGVycikgPT4gY2FsbGJhY2soZXJyKSk7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVzdWx0KSkge1xuICAgICAgICBpZiAocmVzdWx0LnNvbWUoaXNQcm9taXNlKSkge1xuICAgICAgICAgICAgUHJvbWlzZS5hbGwocmVzdWx0KS50aGVuKChyKSA9PiBjYWxsYmFjayhudWxsLCByKSwgKGVycikgPT4gY2FsbGJhY2soZXJyKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYWxsYmFjayhudWxsLCByZXN1bHQpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtYUluc3RydW1lbnRhdGlvbi5qcy5tYXAiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/utils/schemaInstrumentation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/dist/esm/utils/schemaManager.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@apollo/server/dist/esm/utils/schemaManager.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   SchemaManager: () => (/* binding */ SchemaManager)\n/* harmony export */ });\nclass SchemaManager {\n    constructor(options) {\n        this.onSchemaLoadOrUpdateListeners = new Set();\n        this.isStopped = false;\n        this.logger = options.logger;\n        this.schemaDerivedDataProvider = options.schemaDerivedDataProvider;\n        if ('gateway' in options) {\n            this.modeSpecificState = {\n                mode: 'gateway',\n                gateway: options.gateway,\n                apolloConfig: options.apolloConfig,\n            };\n        }\n        else {\n            this.modeSpecificState = {\n                mode: 'schema',\n                apiSchema: options.apiSchema,\n                schemaDerivedData: options.schemaDerivedDataProvider(options.apiSchema),\n            };\n        }\n    }\n    async start() {\n        if (this.modeSpecificState.mode === 'gateway') {\n            const gateway = this.modeSpecificState.gateway;\n            if (gateway.onSchemaLoadOrUpdate) {\n                this.modeSpecificState.unsubscribeFromGateway =\n                    gateway.onSchemaLoadOrUpdate((schemaContext) => {\n                        this.processSchemaLoadOrUpdateEvent(schemaContext);\n                    });\n            }\n            else {\n                throw new Error(\"Unexpectedly couldn't find onSchemaLoadOrUpdate on gateway\");\n            }\n            const config = await this.modeSpecificState.gateway.load({\n                apollo: this.modeSpecificState.apolloConfig,\n            });\n            return config.executor;\n        }\n        else {\n            this.processSchemaLoadOrUpdateEvent({\n                apiSchema: this.modeSpecificState.apiSchema,\n            }, this.modeSpecificState.schemaDerivedData);\n            return null;\n        }\n    }\n    onSchemaLoadOrUpdate(callback) {\n        if (!this.schemaContext) {\n            throw new Error('You must call start() before onSchemaLoadOrUpdate()');\n        }\n        if (!this.isStopped) {\n            try {\n                callback(this.schemaContext);\n            }\n            catch (e) {\n                throw new Error(`An error was thrown from an 'onSchemaLoadOrUpdate' listener: ${e.message}`);\n            }\n        }\n        this.onSchemaLoadOrUpdateListeners.add(callback);\n        return () => {\n            this.onSchemaLoadOrUpdateListeners.delete(callback);\n        };\n    }\n    getSchemaDerivedData() {\n        if (!this.schemaDerivedData) {\n            throw new Error('You must call start() before getSchemaDerivedData()');\n        }\n        return this.schemaDerivedData;\n    }\n    async stop() {\n        this.isStopped = true;\n        if (this.modeSpecificState.mode === 'gateway') {\n            this.modeSpecificState.unsubscribeFromGateway?.();\n            await this.modeSpecificState.gateway.stop?.();\n        }\n    }\n    processSchemaLoadOrUpdateEvent(schemaContext, schemaDerivedData) {\n        if (!this.isStopped) {\n            this.schemaDerivedData =\n                schemaDerivedData ??\n                    this.schemaDerivedDataProvider(schemaContext.apiSchema);\n            this.schemaContext = schemaContext;\n            this.onSchemaLoadOrUpdateListeners.forEach((listener) => {\n                try {\n                    listener(schemaContext);\n                }\n                catch (e) {\n                    this.logger.error(\"An error was thrown from an 'onSchemaLoadOrUpdate' listener\");\n                    this.logger.error(e);\n                }\n            });\n        }\n    }\n}\n//# sourceMappingURL=schemaManager.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vdXRpbHMvc2NoZW1hTWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiOzs7O0FBQU87QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0dBQWdHLFVBQVU7QUFDMUc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvZGlzdC9lc20vdXRpbHMvc2NoZW1hTWFuYWdlci5qcz8zY2NkIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBTY2hlbWFNYW5hZ2VyIHtcbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgICAgIHRoaXMub25TY2hlbWFMb2FkT3JVcGRhdGVMaXN0ZW5lcnMgPSBuZXcgU2V0KCk7XG4gICAgICAgIHRoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMubG9nZ2VyID0gb3B0aW9ucy5sb2dnZXI7XG4gICAgICAgIHRoaXMuc2NoZW1hRGVyaXZlZERhdGFQcm92aWRlciA9IG9wdGlvbnMuc2NoZW1hRGVyaXZlZERhdGFQcm92aWRlcjtcbiAgICAgICAgaWYgKCdnYXRld2F5JyBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICB0aGlzLm1vZGVTcGVjaWZpY1N0YXRlID0ge1xuICAgICAgICAgICAgICAgIG1vZGU6ICdnYXRld2F5JyxcbiAgICAgICAgICAgICAgICBnYXRld2F5OiBvcHRpb25zLmdhdGV3YXksXG4gICAgICAgICAgICAgICAgYXBvbGxvQ29uZmlnOiBvcHRpb25zLmFwb2xsb0NvbmZpZyxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLm1vZGVTcGVjaWZpY1N0YXRlID0ge1xuICAgICAgICAgICAgICAgIG1vZGU6ICdzY2hlbWEnLFxuICAgICAgICAgICAgICAgIGFwaVNjaGVtYTogb3B0aW9ucy5hcGlTY2hlbWEsXG4gICAgICAgICAgICAgICAgc2NoZW1hRGVyaXZlZERhdGE6IG9wdGlvbnMuc2NoZW1hRGVyaXZlZERhdGFQcm92aWRlcihvcHRpb25zLmFwaVNjaGVtYSksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGFzeW5jIHN0YXJ0KCkge1xuICAgICAgICBpZiAodGhpcy5tb2RlU3BlY2lmaWNTdGF0ZS5tb2RlID09PSAnZ2F0ZXdheScpIHtcbiAgICAgICAgICAgIGNvbnN0IGdhdGV3YXkgPSB0aGlzLm1vZGVTcGVjaWZpY1N0YXRlLmdhdGV3YXk7XG4gICAgICAgICAgICBpZiAoZ2F0ZXdheS5vblNjaGVtYUxvYWRPclVwZGF0ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMubW9kZVNwZWNpZmljU3RhdGUudW5zdWJzY3JpYmVGcm9tR2F0ZXdheSA9XG4gICAgICAgICAgICAgICAgICAgIGdhdGV3YXkub25TY2hlbWFMb2FkT3JVcGRhdGUoKHNjaGVtYUNvbnRleHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucHJvY2Vzc1NjaGVtYUxvYWRPclVwZGF0ZUV2ZW50KHNjaGVtYUNvbnRleHQpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVuZXhwZWN0ZWRseSBjb3VsZG4ndCBmaW5kIG9uU2NoZW1hTG9hZE9yVXBkYXRlIG9uIGdhdGV3YXlcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBjb25maWcgPSBhd2FpdCB0aGlzLm1vZGVTcGVjaWZpY1N0YXRlLmdhdGV3YXkubG9hZCh7XG4gICAgICAgICAgICAgICAgYXBvbGxvOiB0aGlzLm1vZGVTcGVjaWZpY1N0YXRlLmFwb2xsb0NvbmZpZyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmV0dXJuIGNvbmZpZy5leGVjdXRvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucHJvY2Vzc1NjaGVtYUxvYWRPclVwZGF0ZUV2ZW50KHtcbiAgICAgICAgICAgICAgICBhcGlTY2hlbWE6IHRoaXMubW9kZVNwZWNpZmljU3RhdGUuYXBpU2NoZW1hLFxuICAgICAgICAgICAgfSwgdGhpcy5tb2RlU3BlY2lmaWNTdGF0ZS5zY2hlbWFEZXJpdmVkRGF0YSk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBvblNjaGVtYUxvYWRPclVwZGF0ZShjYWxsYmFjaykge1xuICAgICAgICBpZiAoIXRoaXMuc2NoZW1hQ29udGV4dCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBjYWxsIHN0YXJ0KCkgYmVmb3JlIG9uU2NoZW1hTG9hZE9yVXBkYXRlKCknKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRoaXMuc2NoZW1hQ29udGV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQW4gZXJyb3Igd2FzIHRocm93biBmcm9tIGFuICdvblNjaGVtYUxvYWRPclVwZGF0ZScgbGlzdGVuZXI6ICR7ZS5tZXNzYWdlfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMub25TY2hlbWFMb2FkT3JVcGRhdGVMaXN0ZW5lcnMuYWRkKGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMub25TY2hlbWFMb2FkT3JVcGRhdGVMaXN0ZW5lcnMuZGVsZXRlKGNhbGxiYWNrKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgZ2V0U2NoZW1hRGVyaXZlZERhdGEoKSB7XG4gICAgICAgIGlmICghdGhpcy5zY2hlbWFEZXJpdmVkRGF0YSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdZb3UgbXVzdCBjYWxsIHN0YXJ0KCkgYmVmb3JlIGdldFNjaGVtYURlcml2ZWREYXRhKCknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWFEZXJpdmVkRGF0YTtcbiAgICB9XG4gICAgYXN5bmMgc3RvcCgpIHtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5tb2RlU3BlY2lmaWNTdGF0ZS5tb2RlID09PSAnZ2F0ZXdheScpIHtcbiAgICAgICAgICAgIHRoaXMubW9kZVNwZWNpZmljU3RhdGUudW5zdWJzY3JpYmVGcm9tR2F0ZXdheT8uKCk7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLm1vZGVTcGVjaWZpY1N0YXRlLmdhdGV3YXkuc3RvcD8uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvY2Vzc1NjaGVtYUxvYWRPclVwZGF0ZUV2ZW50KHNjaGVtYUNvbnRleHQsIHNjaGVtYURlcml2ZWREYXRhKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hRGVyaXZlZERhdGEgPVxuICAgICAgICAgICAgICAgIHNjaGVtYURlcml2ZWREYXRhID8/XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZW1hRGVyaXZlZERhdGFQcm92aWRlcihzY2hlbWFDb250ZXh0LmFwaVNjaGVtYSk7XG4gICAgICAgICAgICB0aGlzLnNjaGVtYUNvbnRleHQgPSBzY2hlbWFDb250ZXh0O1xuICAgICAgICAgICAgdGhpcy5vblNjaGVtYUxvYWRPclVwZGF0ZUxpc3RlbmVycy5mb3JFYWNoKChsaXN0ZW5lcikgPT4ge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVyKHNjaGVtYUNvbnRleHQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihcIkFuIGVycm9yIHdhcyB0aHJvd24gZnJvbSBhbiAnb25TY2hlbWFMb2FkT3JVcGRhdGUnIGxpc3RlbmVyXCIpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcihlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXNjaGVtYU1hbmFnZXIuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/dist/esm/utils/schemaManager.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/extensions.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/extensions.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   applyExtensions: () => (/* binding */ applyExtensions),\n/* harmony export */   extractExtensionsFromSchema: () => (/* reexport safe */ _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.extractExtensionsFromSchema),\n/* harmony export */   mergeExtensions: () => (/* binding */ mergeExtensions)\n/* harmony export */ });\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/mergeDeep.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/extractExtensionsFromSchema.js\");\n\n\nfunction mergeExtensions(extensions) {\n    return (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)(extensions);\n}\nfunction applyExtensionObject(obj, extensions) {\n    if (!obj) {\n        return;\n    }\n    obj.extensions = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_1__.mergeDeep)([obj.extensions || {}, extensions || {}]);\n}\nfunction applyExtensions(schema, extensions) {\n    applyExtensionObject(schema, extensions.schemaExtensions);\n    for (const [typeName, data] of Object.entries(extensions.types || {})) {\n        const type = schema.getType(typeName);\n        if (type) {\n            applyExtensionObject(type, data.extensions);\n            if (data.type === 'object' || data.type === 'interface') {\n                for (const [fieldName, fieldData] of Object.entries(data.fields)) {\n                    const field = type.getFields()[fieldName];\n                    if (field) {\n                        applyExtensionObject(field, fieldData.extensions);\n                        for (const [arg, argData] of Object.entries(fieldData.arguments)) {\n                            applyExtensionObject(field.args.find(a => a.name === arg), argData);\n                        }\n                    }\n                }\n            }\n            else if (data.type === 'input') {\n                for (const [fieldName, fieldData] of Object.entries(data.fields)) {\n                    const field = type.getFields()[fieldName];\n                    applyExtensionObject(field, fieldData.extensions);\n                }\n            }\n            else if (data.type === 'enum') {\n                for (const [valueName, valueData] of Object.entries(data.values)) {\n                    const value = type.getValue(valueName);\n                    applyExtensionObject(value, valueData);\n                }\n            }\n        }\n    }\n    return schema;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS9leHRlbnNpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQWlEO0FBQ2tCO0FBQzVEO0FBQ1AsV0FBVywrREFBUztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLCtEQUFTLHNCQUFzQixrQkFBa0I7QUFDdEU7QUFDTztBQUNQO0FBQ0Esd0VBQXdFO0FBQ3hFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvZXNtL2V4dGVuc2lvbnMuanM/NDczMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtZXJnZURlZXAgfSBmcm9tICdAZ3JhcGhxbC10b29scy91dGlscyc7XG5leHBvcnQgeyBleHRyYWN0RXh0ZW5zaW9uc0Zyb21TY2hlbWEgfSBmcm9tICdAZ3JhcGhxbC10b29scy91dGlscyc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VFeHRlbnNpb25zKGV4dGVuc2lvbnMpIHtcbiAgICByZXR1cm4gbWVyZ2VEZWVwKGV4dGVuc2lvbnMpO1xufVxuZnVuY3Rpb24gYXBwbHlFeHRlbnNpb25PYmplY3Qob2JqLCBleHRlbnNpb25zKSB7XG4gICAgaWYgKCFvYmopIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBvYmouZXh0ZW5zaW9ucyA9IG1lcmdlRGVlcChbb2JqLmV4dGVuc2lvbnMgfHwge30sIGV4dGVuc2lvbnMgfHwge31dKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUV4dGVuc2lvbnMoc2NoZW1hLCBleHRlbnNpb25zKSB7XG4gICAgYXBwbHlFeHRlbnNpb25PYmplY3Qoc2NoZW1hLCBleHRlbnNpb25zLnNjaGVtYUV4dGVuc2lvbnMpO1xuICAgIGZvciAoY29uc3QgW3R5cGVOYW1lLCBkYXRhXSBvZiBPYmplY3QuZW50cmllcyhleHRlbnNpb25zLnR5cGVzIHx8IHt9KSkge1xuICAgICAgICBjb25zdCB0eXBlID0gc2NoZW1hLmdldFR5cGUodHlwZU5hbWUpO1xuICAgICAgICBpZiAodHlwZSkge1xuICAgICAgICAgICAgYXBwbHlFeHRlbnNpb25PYmplY3QodHlwZSwgZGF0YS5leHRlbnNpb25zKTtcbiAgICAgICAgICAgIGlmIChkYXRhLnR5cGUgPT09ICdvYmplY3QnIHx8IGRhdGEudHlwZSA9PT0gJ2ludGVyZmFjZScpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFtmaWVsZE5hbWUsIGZpZWxkRGF0YV0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YS5maWVsZHMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZpZWxkID0gdHlwZS5nZXRGaWVsZHMoKVtmaWVsZE5hbWVdO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFwcGx5RXh0ZW5zaW9uT2JqZWN0KGZpZWxkLCBmaWVsZERhdGEuZXh0ZW5zaW9ucyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFthcmcsIGFyZ0RhdGFdIG9mIE9iamVjdC5lbnRyaWVzKGZpZWxkRGF0YS5hcmd1bWVudHMpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwbHlFeHRlbnNpb25PYmplY3QoZmllbGQuYXJncy5maW5kKGEgPT4gYS5uYW1lID09PSBhcmcpLCBhcmdEYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGRhdGEudHlwZSA9PT0gJ2lucHV0Jykge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgW2ZpZWxkTmFtZSwgZmllbGREYXRhXSBvZiBPYmplY3QuZW50cmllcyhkYXRhLmZpZWxkcykpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmllbGQgPSB0eXBlLmdldEZpZWxkcygpW2ZpZWxkTmFtZV07XG4gICAgICAgICAgICAgICAgICAgIGFwcGx5RXh0ZW5zaW9uT2JqZWN0KGZpZWxkLCBmaWVsZERhdGEuZXh0ZW5zaW9ucyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGF0YS50eXBlID09PSAnZW51bScpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IFt2YWx1ZU5hbWUsIHZhbHVlRGF0YV0gb2YgT2JqZWN0LmVudHJpZXMoZGF0YS52YWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdHlwZS5nZXRWYWx1ZSh2YWx1ZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICBhcHBseUV4dGVuc2lvbk9iamVjdCh2YWx1ZSwgdmFsdWVEYXRhKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNjaGVtYTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/extensions.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/merge-resolvers.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/merge-resolvers.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeResolvers: () => (/* binding */ mergeResolvers)\n/* harmony export */ });\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/mergeDeep.js\");\n\n/**\n * Deep merges multiple resolver definition objects into a single definition.\n * @param resolversDefinitions Resolver definitions to be merged\n * @param options Additional options\n *\n * ```js\n * const { mergeResolvers } = require('@graphql-tools/merge');\n * const clientResolver = require('./clientResolver');\n * const productResolver = require('./productResolver');\n *\n * const resolvers = mergeResolvers([\n *  clientResolver,\n *  productResolver,\n * ]);\n * ```\n *\n * If you don't want to manually create the array of resolver objects, you can\n * also use this function along with loadFiles:\n *\n * ```js\n * const path = require('path');\n * const { mergeResolvers } = require('@graphql-tools/merge');\n * const { loadFilesSync } = require('@graphql-tools/load-files');\n *\n * const resolversArray = loadFilesSync(path.join(__dirname, './resolvers'));\n *\n * const resolvers = mergeResolvers(resolversArray)\n * ```\n */\nfunction mergeResolvers(resolversDefinitions, options) {\n    if (!resolversDefinitions || (Array.isArray(resolversDefinitions) && resolversDefinitions.length === 0)) {\n        return {};\n    }\n    if (!Array.isArray(resolversDefinitions)) {\n        return resolversDefinitions;\n    }\n    if (resolversDefinitions.length === 1) {\n        return resolversDefinitions[0] || {};\n    }\n    const resolvers = new Array();\n    for (let resolversDefinition of resolversDefinitions) {\n        if (Array.isArray(resolversDefinition)) {\n            resolversDefinition = mergeResolvers(resolversDefinition);\n        }\n        if (typeof resolversDefinition === 'object' && resolversDefinition) {\n            resolvers.push(resolversDefinition);\n        }\n    }\n    const result = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.mergeDeep)(resolvers, true);\n    if (options === null || options === void 0 ? void 0 : options.exclusions) {\n        for (const exclusion of options.exclusions) {\n            const [typeName, fieldName] = exclusion.split('.');\n            if (!fieldName || fieldName === '*') {\n                delete result[typeName];\n            }\n            else if (result[typeName]) {\n                delete result[typeName][fieldName];\n            }\n        }\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS9tZXJnZS1yZXNvbHZlcnMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBaUQ7QUFDakQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxpQkFBaUI7QUFDNUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsaUJBQWlCO0FBQzVCLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsbUJBQW1CLCtEQUFTO0FBQzVCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9tZXJnZS9lc20vbWVyZ2UtcmVzb2x2ZXJzLmpzPzI5NTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWVyZ2VEZWVwIH0gZnJvbSAnQGdyYXBocWwtdG9vbHMvdXRpbHMnO1xuLyoqXG4gKiBEZWVwIG1lcmdlcyBtdWx0aXBsZSByZXNvbHZlciBkZWZpbml0aW9uIG9iamVjdHMgaW50byBhIHNpbmdsZSBkZWZpbml0aW9uLlxuICogQHBhcmFtIHJlc29sdmVyc0RlZmluaXRpb25zIFJlc29sdmVyIGRlZmluaXRpb25zIHRvIGJlIG1lcmdlZFxuICogQHBhcmFtIG9wdGlvbnMgQWRkaXRpb25hbCBvcHRpb25zXG4gKlxuICogYGBganNcbiAqIGNvbnN0IHsgbWVyZ2VSZXNvbHZlcnMgfSA9IHJlcXVpcmUoJ0BncmFwaHFsLXRvb2xzL21lcmdlJyk7XG4gKiBjb25zdCBjbGllbnRSZXNvbHZlciA9IHJlcXVpcmUoJy4vY2xpZW50UmVzb2x2ZXInKTtcbiAqIGNvbnN0IHByb2R1Y3RSZXNvbHZlciA9IHJlcXVpcmUoJy4vcHJvZHVjdFJlc29sdmVyJyk7XG4gKlxuICogY29uc3QgcmVzb2x2ZXJzID0gbWVyZ2VSZXNvbHZlcnMoW1xuICogIGNsaWVudFJlc29sdmVyLFxuICogIHByb2R1Y3RSZXNvbHZlcixcbiAqIF0pO1xuICogYGBgXG4gKlxuICogSWYgeW91IGRvbid0IHdhbnQgdG8gbWFudWFsbHkgY3JlYXRlIHRoZSBhcnJheSBvZiByZXNvbHZlciBvYmplY3RzLCB5b3UgY2FuXG4gKiBhbHNvIHVzZSB0aGlzIGZ1bmN0aW9uIGFsb25nIHdpdGggbG9hZEZpbGVzOlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpO1xuICogY29uc3QgeyBtZXJnZVJlc29sdmVycyB9ID0gcmVxdWlyZSgnQGdyYXBocWwtdG9vbHMvbWVyZ2UnKTtcbiAqIGNvbnN0IHsgbG9hZEZpbGVzU3luYyB9ID0gcmVxdWlyZSgnQGdyYXBocWwtdG9vbHMvbG9hZC1maWxlcycpO1xuICpcbiAqIGNvbnN0IHJlc29sdmVyc0FycmF5ID0gbG9hZEZpbGVzU3luYyhwYXRoLmpvaW4oX19kaXJuYW1lLCAnLi9yZXNvbHZlcnMnKSk7XG4gKlxuICogY29uc3QgcmVzb2x2ZXJzID0gbWVyZ2VSZXNvbHZlcnMocmVzb2x2ZXJzQXJyYXkpXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlUmVzb2x2ZXJzKHJlc29sdmVyc0RlZmluaXRpb25zLCBvcHRpb25zKSB7XG4gICAgaWYgKCFyZXNvbHZlcnNEZWZpbml0aW9ucyB8fCAoQXJyYXkuaXNBcnJheShyZXNvbHZlcnNEZWZpbml0aW9ucykgJiYgcmVzb2x2ZXJzRGVmaW5pdGlvbnMubGVuZ3RoID09PSAwKSkge1xuICAgICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmICghQXJyYXkuaXNBcnJheShyZXNvbHZlcnNEZWZpbml0aW9ucykpIHtcbiAgICAgICAgcmV0dXJuIHJlc29sdmVyc0RlZmluaXRpb25zO1xuICAgIH1cbiAgICBpZiAocmVzb2x2ZXJzRGVmaW5pdGlvbnMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIHJldHVybiByZXNvbHZlcnNEZWZpbml0aW9uc1swXSB8fCB7fTtcbiAgICB9XG4gICAgY29uc3QgcmVzb2x2ZXJzID0gbmV3IEFycmF5KCk7XG4gICAgZm9yIChsZXQgcmVzb2x2ZXJzRGVmaW5pdGlvbiBvZiByZXNvbHZlcnNEZWZpbml0aW9ucykge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShyZXNvbHZlcnNEZWZpbml0aW9uKSkge1xuICAgICAgICAgICAgcmVzb2x2ZXJzRGVmaW5pdGlvbiA9IG1lcmdlUmVzb2x2ZXJzKHJlc29sdmVyc0RlZmluaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgcmVzb2x2ZXJzRGVmaW5pdGlvbiA9PT0gJ29iamVjdCcgJiYgcmVzb2x2ZXJzRGVmaW5pdGlvbikge1xuICAgICAgICAgICAgcmVzb2x2ZXJzLnB1c2gocmVzb2x2ZXJzRGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gbWVyZ2VEZWVwKHJlc29sdmVycywgdHJ1ZSk7XG4gICAgaWYgKG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5leGNsdXNpb25zKSB7XG4gICAgICAgIGZvciAoY29uc3QgZXhjbHVzaW9uIG9mIG9wdGlvbnMuZXhjbHVzaW9ucykge1xuICAgICAgICAgICAgY29uc3QgW3R5cGVOYW1lLCBmaWVsZE5hbWVdID0gZXhjbHVzaW9uLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICBpZiAoIWZpZWxkTmFtZSB8fCBmaWVsZE5hbWUgPT09ICcqJykge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSByZXN1bHRbdHlwZU5hbWVdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVzdWx0W3R5cGVOYW1lXSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSByZXN1bHRbdHlwZU5hbWVdW2ZpZWxkTmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/merge-resolvers.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/arguments.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/arguments.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeArguments: () => (/* binding */ mergeArguments)\n/* harmony export */ });\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/helpers.js\");\n\nfunction mergeArguments(args1, args2, config) {\n    const result = deduplicateArguments([...args2, ...args1].filter(_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.isSome), config);\n    if (config && config.sort) {\n        result.sort(_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.compareNodes);\n    }\n    return result;\n}\nfunction deduplicateArguments(args, config) {\n    return args.reduce((acc, current) => {\n        const dupIndex = acc.findIndex(arg => arg.name.value === current.name.value);\n        if (dupIndex === -1) {\n            return acc.concat([current]);\n        }\n        else if (!(config === null || config === void 0 ? void 0 : config.reverseArguments)) {\n            acc[dupIndex] = current;\n        }\n        return acc;\n    }, []);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL2FyZ3VtZW50cy5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUE0RDtBQUNyRDtBQUNQLG9FQUFvRSx3REFBTTtBQUMxRTtBQUNBLG9CQUFvQiw4REFBWTtBQUNoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvZXNtL3R5cGVkZWZzLW1lcmdlcnMvYXJndW1lbnRzLmpzPzgyNzAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcGFyZU5vZGVzLCBpc1NvbWUgfSBmcm9tICdAZ3JhcGhxbC10b29scy91dGlscyc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VBcmd1bWVudHMoYXJnczEsIGFyZ3MyLCBjb25maWcpIHtcbiAgICBjb25zdCByZXN1bHQgPSBkZWR1cGxpY2F0ZUFyZ3VtZW50cyhbLi4uYXJnczIsIC4uLmFyZ3MxXS5maWx0ZXIoaXNTb21lKSwgY29uZmlnKTtcbiAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5zb3J0KSB7XG4gICAgICAgIHJlc3VsdC5zb3J0KGNvbXBhcmVOb2Rlcyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBkZWR1cGxpY2F0ZUFyZ3VtZW50cyhhcmdzLCBjb25maWcpIHtcbiAgICByZXR1cm4gYXJncy5yZWR1Y2UoKGFjYywgY3VycmVudCkgPT4ge1xuICAgICAgICBjb25zdCBkdXBJbmRleCA9IGFjYy5maW5kSW5kZXgoYXJnID0+IGFyZy5uYW1lLnZhbHVlID09PSBjdXJyZW50Lm5hbWUudmFsdWUpO1xuICAgICAgICBpZiAoZHVwSW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjLmNvbmNhdChbY3VycmVudF0pO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCEoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLnJldmVyc2VBcmd1bWVudHMpKSB7XG4gICAgICAgICAgICBhY2NbZHVwSW5kZXhdID0gY3VycmVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIFtdKTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/arguments.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeDirective: () => (/* binding */ mergeDirective),\n/* harmony export */   mergeDirectives: () => (/* binding */ mergeDirectives)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/printer.mjs\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/helpers.js\");\n\n\nfunction directiveAlreadyExists(directivesArr, otherDirective) {\n    return !!directivesArr.find(directive => directive.name.value === otherDirective.name.value);\n}\nfunction isRepeatableDirective(directive, directives) {\n    var _a;\n    return !!((_a = directives === null || directives === void 0 ? void 0 : directives[directive.name.value]) === null || _a === void 0 ? void 0 : _a.repeatable);\n}\nfunction nameAlreadyExists(name, namesArr) {\n    return namesArr.some(({ value }) => value === name.value);\n}\nfunction mergeArguments(a1, a2) {\n    const result = [...a2];\n    for (const argument of a1) {\n        const existingIndex = result.findIndex(a => a.name.value === argument.name.value);\n        if (existingIndex > -1) {\n            const existingArg = result[existingIndex];\n            if (existingArg.value.kind === 'ListValue') {\n                const source = existingArg.value.values;\n                const target = argument.value.values;\n                // merge values of two lists\n                existingArg.value.values = deduplicateLists(source, target, (targetVal, source) => {\n                    const value = targetVal.value;\n                    return !value || !source.some((sourceVal) => sourceVal.value === value);\n                });\n            }\n            else {\n                existingArg.value = argument.value;\n            }\n        }\n        else {\n            result.push(argument);\n        }\n    }\n    return result;\n}\nfunction deduplicateDirectives(directives, definitions) {\n    return directives\n        .map((directive, i, all) => {\n        const firstAt = all.findIndex(d => d.name.value === directive.name.value);\n        if (firstAt !== i && !isRepeatableDirective(directive, definitions)) {\n            const dup = all[firstAt];\n            directive.arguments = mergeArguments(directive.arguments, dup.arguments);\n            return null;\n        }\n        return directive;\n    })\n        .filter(_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.isSome);\n}\nfunction mergeDirectives(d1 = [], d2 = [], config, directives) {\n    const reverseOrder = config && config.reverseDirectives;\n    const asNext = reverseOrder ? d1 : d2;\n    const asFirst = reverseOrder ? d2 : d1;\n    const result = deduplicateDirectives([...asNext], directives);\n    for (const directive of asFirst) {\n        if (directiveAlreadyExists(result, directive) && !isRepeatableDirective(directive, directives)) {\n            const existingDirectiveIndex = result.findIndex(d => d.name.value === directive.name.value);\n            const existingDirective = result[existingDirectiveIndex];\n            result[existingDirectiveIndex].arguments = mergeArguments(directive.arguments || [], existingDirective.arguments || []);\n        }\n        else {\n            result.push(directive);\n        }\n    }\n    return result;\n}\nfunction validateInputs(node, existingNode) {\n    const printedNode = (0,graphql__WEBPACK_IMPORTED_MODULE_1__.print)({\n        ...node,\n        description: undefined,\n    });\n    const printedExistingNode = (0,graphql__WEBPACK_IMPORTED_MODULE_1__.print)({\n        ...existingNode,\n        description: undefined,\n    });\n    // eslint-disable-next-line\n    const leaveInputs = new RegExp('(directive @w*d*)|( on .*$)', 'g');\n    const sameArguments = printedNode.replace(leaveInputs, '') === printedExistingNode.replace(leaveInputs, '');\n    if (!sameArguments) {\n        throw new Error(`Unable to merge GraphQL directive \"${node.name.value}\". \\nExisting directive:  \\n\\t${printedExistingNode} \\nReceived directive: \\n\\t${printedNode}`);\n    }\n}\nfunction mergeDirective(node, existingNode) {\n    if (existingNode) {\n        validateInputs(node, existingNode);\n        return {\n            ...node,\n            locations: [\n                ...existingNode.locations,\n                ...node.locations.filter(name => !nameAlreadyExists(name, existingNode.locations)),\n            ],\n        };\n    }\n    return node;\n}\nfunction deduplicateLists(source, target, filterFn) {\n    return source.concat(target.filter(val => filterFn(val, source)));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL2RpcmVjdGl2ZXMuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnQztBQUNjO0FBQzlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSw0QkFBNEIsT0FBTztBQUNuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxnQkFBZ0Isd0RBQU07QUFDdEI7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBd0IsOENBQUs7QUFDN0I7QUFDQTtBQUNBLEtBQUs7QUFDTCxnQ0FBZ0MsOENBQUs7QUFDckM7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhEQUE4RCxnQkFBZ0IsZ0NBQWdDLHFCQUFxQiw0QkFBNEIsWUFBWTtBQUMzSztBQUNBO0FBQ087QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL2RpcmVjdGl2ZXMuanM/NzVkMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwcmludCB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHsgaXNTb21lIH0gZnJvbSAnQGdyYXBocWwtdG9vbHMvdXRpbHMnO1xuZnVuY3Rpb24gZGlyZWN0aXZlQWxyZWFkeUV4aXN0cyhkaXJlY3RpdmVzQXJyLCBvdGhlckRpcmVjdGl2ZSkge1xuICAgIHJldHVybiAhIWRpcmVjdGl2ZXNBcnIuZmluZChkaXJlY3RpdmUgPT4gZGlyZWN0aXZlLm5hbWUudmFsdWUgPT09IG90aGVyRGlyZWN0aXZlLm5hbWUudmFsdWUpO1xufVxuZnVuY3Rpb24gaXNSZXBlYXRhYmxlRGlyZWN0aXZlKGRpcmVjdGl2ZSwgZGlyZWN0aXZlcykge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gISEoKF9hID0gZGlyZWN0aXZlcyA9PT0gbnVsbCB8fCBkaXJlY3RpdmVzID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkaXJlY3RpdmVzW2RpcmVjdGl2ZS5uYW1lLnZhbHVlXSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnJlcGVhdGFibGUpO1xufVxuZnVuY3Rpb24gbmFtZUFscmVhZHlFeGlzdHMobmFtZSwgbmFtZXNBcnIpIHtcbiAgICByZXR1cm4gbmFtZXNBcnIuc29tZSgoeyB2YWx1ZSB9KSA9PiB2YWx1ZSA9PT0gbmFtZS52YWx1ZSk7XG59XG5mdW5jdGlvbiBtZXJnZUFyZ3VtZW50cyhhMSwgYTIpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbLi4uYTJdO1xuICAgIGZvciAoY29uc3QgYXJndW1lbnQgb2YgYTEpIHtcbiAgICAgICAgY29uc3QgZXhpc3RpbmdJbmRleCA9IHJlc3VsdC5maW5kSW5kZXgoYSA9PiBhLm5hbWUudmFsdWUgPT09IGFyZ3VtZW50Lm5hbWUudmFsdWUpO1xuICAgICAgICBpZiAoZXhpc3RpbmdJbmRleCA+IC0xKSB7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0FyZyA9IHJlc3VsdFtleGlzdGluZ0luZGV4XTtcbiAgICAgICAgICAgIGlmIChleGlzdGluZ0FyZy52YWx1ZS5raW5kID09PSAnTGlzdFZhbHVlJykge1xuICAgICAgICAgICAgICAgIGNvbnN0IHNvdXJjZSA9IGV4aXN0aW5nQXJnLnZhbHVlLnZhbHVlcztcbiAgICAgICAgICAgICAgICBjb25zdCB0YXJnZXQgPSBhcmd1bWVudC52YWx1ZS52YWx1ZXM7XG4gICAgICAgICAgICAgICAgLy8gbWVyZ2UgdmFsdWVzIG9mIHR3byBsaXN0c1xuICAgICAgICAgICAgICAgIGV4aXN0aW5nQXJnLnZhbHVlLnZhbHVlcyA9IGRlZHVwbGljYXRlTGlzdHMoc291cmNlLCB0YXJnZXQsICh0YXJnZXRWYWwsIHNvdXJjZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHRhcmdldFZhbC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICF2YWx1ZSB8fCAhc291cmNlLnNvbWUoKHNvdXJjZVZhbCkgPT4gc291cmNlVmFsLnZhbHVlID09PSB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBleGlzdGluZ0FyZy52YWx1ZSA9IGFyZ3VtZW50LnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJndW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5mdW5jdGlvbiBkZWR1cGxpY2F0ZURpcmVjdGl2ZXMoZGlyZWN0aXZlcywgZGVmaW5pdGlvbnMpIHtcbiAgICByZXR1cm4gZGlyZWN0aXZlc1xuICAgICAgICAubWFwKChkaXJlY3RpdmUsIGksIGFsbCkgPT4ge1xuICAgICAgICBjb25zdCBmaXJzdEF0ID0gYWxsLmZpbmRJbmRleChkID0+IGQubmFtZS52YWx1ZSA9PT0gZGlyZWN0aXZlLm5hbWUudmFsdWUpO1xuICAgICAgICBpZiAoZmlyc3RBdCAhPT0gaSAmJiAhaXNSZXBlYXRhYmxlRGlyZWN0aXZlKGRpcmVjdGl2ZSwgZGVmaW5pdGlvbnMpKSB7XG4gICAgICAgICAgICBjb25zdCBkdXAgPSBhbGxbZmlyc3RBdF07XG4gICAgICAgICAgICBkaXJlY3RpdmUuYXJndW1lbnRzID0gbWVyZ2VBcmd1bWVudHMoZGlyZWN0aXZlLmFyZ3VtZW50cywgZHVwLmFyZ3VtZW50cyk7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlO1xuICAgIH0pXG4gICAgICAgIC5maWx0ZXIoaXNTb21lKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZURpcmVjdGl2ZXMoZDEgPSBbXSwgZDIgPSBbXSwgY29uZmlnLCBkaXJlY3RpdmVzKSB7XG4gICAgY29uc3QgcmV2ZXJzZU9yZGVyID0gY29uZmlnICYmIGNvbmZpZy5yZXZlcnNlRGlyZWN0aXZlcztcbiAgICBjb25zdCBhc05leHQgPSByZXZlcnNlT3JkZXIgPyBkMSA6IGQyO1xuICAgIGNvbnN0IGFzRmlyc3QgPSByZXZlcnNlT3JkZXIgPyBkMiA6IGQxO1xuICAgIGNvbnN0IHJlc3VsdCA9IGRlZHVwbGljYXRlRGlyZWN0aXZlcyhbLi4uYXNOZXh0XSwgZGlyZWN0aXZlcyk7XG4gICAgZm9yIChjb25zdCBkaXJlY3RpdmUgb2YgYXNGaXJzdCkge1xuICAgICAgICBpZiAoZGlyZWN0aXZlQWxyZWFkeUV4aXN0cyhyZXN1bHQsIGRpcmVjdGl2ZSkgJiYgIWlzUmVwZWF0YWJsZURpcmVjdGl2ZShkaXJlY3RpdmUsIGRpcmVjdGl2ZXMpKSB7XG4gICAgICAgICAgICBjb25zdCBleGlzdGluZ0RpcmVjdGl2ZUluZGV4ID0gcmVzdWx0LmZpbmRJbmRleChkID0+IGQubmFtZS52YWx1ZSA9PT0gZGlyZWN0aXZlLm5hbWUudmFsdWUpO1xuICAgICAgICAgICAgY29uc3QgZXhpc3RpbmdEaXJlY3RpdmUgPSByZXN1bHRbZXhpc3RpbmdEaXJlY3RpdmVJbmRleF07XG4gICAgICAgICAgICByZXN1bHRbZXhpc3RpbmdEaXJlY3RpdmVJbmRleF0uYXJndW1lbnRzID0gbWVyZ2VBcmd1bWVudHMoZGlyZWN0aXZlLmFyZ3VtZW50cyB8fCBbXSwgZXhpc3RpbmdEaXJlY3RpdmUuYXJndW1lbnRzIHx8IFtdKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGRpcmVjdGl2ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbmZ1bmN0aW9uIHZhbGlkYXRlSW5wdXRzKG5vZGUsIGV4aXN0aW5nTm9kZSkge1xuICAgIGNvbnN0IHByaW50ZWROb2RlID0gcHJpbnQoe1xuICAgICAgICAuLi5ub2RlLFxuICAgICAgICBkZXNjcmlwdGlvbjogdW5kZWZpbmVkLFxuICAgIH0pO1xuICAgIGNvbnN0IHByaW50ZWRFeGlzdGluZ05vZGUgPSBwcmludCh7XG4gICAgICAgIC4uLmV4aXN0aW5nTm9kZSxcbiAgICAgICAgZGVzY3JpcHRpb246IHVuZGVmaW5lZCxcbiAgICB9KTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgICBjb25zdCBsZWF2ZUlucHV0cyA9IG5ldyBSZWdFeHAoJyhkaXJlY3RpdmUgQHcqZCopfCggb24gLiokKScsICdnJyk7XG4gICAgY29uc3Qgc2FtZUFyZ3VtZW50cyA9IHByaW50ZWROb2RlLnJlcGxhY2UobGVhdmVJbnB1dHMsICcnKSA9PT0gcHJpbnRlZEV4aXN0aW5nTm9kZS5yZXBsYWNlKGxlYXZlSW5wdXRzLCAnJyk7XG4gICAgaWYgKCFzYW1lQXJndW1lbnRzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIG1lcmdlIEdyYXBoUUwgZGlyZWN0aXZlIFwiJHtub2RlLm5hbWUudmFsdWV9XCIuIFxcbkV4aXN0aW5nIGRpcmVjdGl2ZTogIFxcblxcdCR7cHJpbnRlZEV4aXN0aW5nTm9kZX0gXFxuUmVjZWl2ZWQgZGlyZWN0aXZlOiBcXG5cXHQke3ByaW50ZWROb2RlfWApO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZURpcmVjdGl2ZShub2RlLCBleGlzdGluZ05vZGUpIHtcbiAgICBpZiAoZXhpc3RpbmdOb2RlKSB7XG4gICAgICAgIHZhbGlkYXRlSW5wdXRzKG5vZGUsIGV4aXN0aW5nTm9kZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5ub2RlLFxuICAgICAgICAgICAgbG9jYXRpb25zOiBbXG4gICAgICAgICAgICAgICAgLi4uZXhpc3RpbmdOb2RlLmxvY2F0aW9ucyxcbiAgICAgICAgICAgICAgICAuLi5ub2RlLmxvY2F0aW9ucy5maWx0ZXIobmFtZSA9PiAhbmFtZUFscmVhZHlFeGlzdHMobmFtZSwgZXhpc3RpbmdOb2RlLmxvY2F0aW9ucykpLFxuICAgICAgICAgICAgXSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG5vZGU7XG59XG5mdW5jdGlvbiBkZWR1cGxpY2F0ZUxpc3RzKHNvdXJjZSwgdGFyZ2V0LCBmaWx0ZXJGbikge1xuICAgIHJldHVybiBzb3VyY2UuY29uY2F0KHRhcmdldC5maWx0ZXIodmFsID0+IGZpbHRlckZuKHZhbCwgc291cmNlKSkpO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/enum-values.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/enum-values.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeEnumValues: () => (/* binding */ mergeEnumValues)\n/* harmony export */ });\n/* harmony import */ var _directives_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/helpers.js\");\n\n\nfunction mergeEnumValues(first, second, config, directives) {\n    if (config === null || config === void 0 ? void 0 : config.consistentEnumMerge) {\n        const reversed = [];\n        if (first) {\n            reversed.push(...first);\n        }\n        first = second;\n        second = reversed;\n    }\n    const enumValueMap = new Map();\n    if (first) {\n        for (const firstValue of first) {\n            enumValueMap.set(firstValue.name.value, firstValue);\n        }\n    }\n    if (second) {\n        for (const secondValue of second) {\n            const enumValue = secondValue.name.value;\n            if (enumValueMap.has(enumValue)) {\n                const firstValue = enumValueMap.get(enumValue);\n                firstValue.description = secondValue.description || firstValue.description;\n                firstValue.directives = (0,_directives_js__WEBPACK_IMPORTED_MODULE_0__.mergeDirectives)(secondValue.directives, firstValue.directives, directives);\n            }\n            else {\n                enumValueMap.set(enumValue, secondValue);\n            }\n        }\n    }\n    const result = [...enumValueMap.values()];\n    if (config && config.sort) {\n        result.sort(_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_1__.compareNodes);\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL2VudW0tdmFsdWVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFrRDtBQUNFO0FBQzdDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdDQUF3QywrREFBZTtBQUN2RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9CLDhEQUFZO0FBQ2hDO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvZXNtL3R5cGVkZWZzLW1lcmdlcnMvZW51bS12YWx1ZXMuanM/Y2IwOCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtZXJnZURpcmVjdGl2ZXMgfSBmcm9tICcuL2RpcmVjdGl2ZXMuanMnO1xuaW1wb3J0IHsgY29tcGFyZU5vZGVzIH0gZnJvbSAnQGdyYXBocWwtdG9vbHMvdXRpbHMnO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlRW51bVZhbHVlcyhmaXJzdCwgc2Vjb25kLCBjb25maWcsIGRpcmVjdGl2ZXMpIHtcbiAgICBpZiAoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmNvbnNpc3RlbnRFbnVtTWVyZ2UpIHtcbiAgICAgICAgY29uc3QgcmV2ZXJzZWQgPSBbXTtcbiAgICAgICAgaWYgKGZpcnN0KSB7XG4gICAgICAgICAgICByZXZlcnNlZC5wdXNoKC4uLmZpcnN0KTtcbiAgICAgICAgfVxuICAgICAgICBmaXJzdCA9IHNlY29uZDtcbiAgICAgICAgc2Vjb25kID0gcmV2ZXJzZWQ7XG4gICAgfVxuICAgIGNvbnN0IGVudW1WYWx1ZU1hcCA9IG5ldyBNYXAoKTtcbiAgICBpZiAoZmlyc3QpIHtcbiAgICAgICAgZm9yIChjb25zdCBmaXJzdFZhbHVlIG9mIGZpcnN0KSB7XG4gICAgICAgICAgICBlbnVtVmFsdWVNYXAuc2V0KGZpcnN0VmFsdWUubmFtZS52YWx1ZSwgZmlyc3RWYWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKHNlY29uZCkge1xuICAgICAgICBmb3IgKGNvbnN0IHNlY29uZFZhbHVlIG9mIHNlY29uZCkge1xuICAgICAgICAgICAgY29uc3QgZW51bVZhbHVlID0gc2Vjb25kVmFsdWUubmFtZS52YWx1ZTtcbiAgICAgICAgICAgIGlmIChlbnVtVmFsdWVNYXAuaGFzKGVudW1WYWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBmaXJzdFZhbHVlID0gZW51bVZhbHVlTWFwLmdldChlbnVtVmFsdWUpO1xuICAgICAgICAgICAgICAgIGZpcnN0VmFsdWUuZGVzY3JpcHRpb24gPSBzZWNvbmRWYWx1ZS5kZXNjcmlwdGlvbiB8fCBmaXJzdFZhbHVlLmRlc2NyaXB0aW9uO1xuICAgICAgICAgICAgICAgIGZpcnN0VmFsdWUuZGlyZWN0aXZlcyA9IG1lcmdlRGlyZWN0aXZlcyhzZWNvbmRWYWx1ZS5kaXJlY3RpdmVzLCBmaXJzdFZhbHVlLmRpcmVjdGl2ZXMsIGRpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZW51bVZhbHVlTWFwLnNldChlbnVtVmFsdWUsIHNlY29uZFZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBjb25zdCByZXN1bHQgPSBbLi4uZW51bVZhbHVlTWFwLnZhbHVlcygpXTtcbiAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5zb3J0KSB7XG4gICAgICAgIHJlc3VsdC5zb3J0KGNvbXBhcmVOb2Rlcyk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/enum-values.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/enum.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/enum.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeEnum: () => (/* binding */ mergeEnum)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _directives_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js\");\n/* harmony import */ var _enum_values_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./enum-values.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/enum-values.js\");\n\n\n\nfunction mergeEnum(e1, e2, config, directives) {\n    if (e2) {\n        return {\n            name: e1.name,\n            description: e1['description'] || e2['description'],\n            kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) || e1.kind === 'EnumTypeDefinition' || e2.kind === 'EnumTypeDefinition'\n                ? 'EnumTypeDefinition'\n                : 'EnumTypeExtension',\n            loc: e1.loc,\n            directives: (0,_directives_js__WEBPACK_IMPORTED_MODULE_0__.mergeDirectives)(e1.directives, e2.directives, config, directives),\n            values: (0,_enum_values_js__WEBPACK_IMPORTED_MODULE_1__.mergeEnumValues)(e1.values, e2.values, config),\n        };\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...e1,\n            kind: graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.ENUM_TYPE_DEFINITION,\n        }\n        : e1;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL2VudW0uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUErQjtBQUNtQjtBQUNDO0FBQzVDO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwrREFBZTtBQUN2QyxvQkFBb0IsZ0VBQWU7QUFDbkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix5Q0FBSTtBQUN0QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL2VudW0uanM/ZTU1ZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLaW5kIH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyBtZXJnZURpcmVjdGl2ZXMgfSBmcm9tICcuL2RpcmVjdGl2ZXMuanMnO1xuaW1wb3J0IHsgbWVyZ2VFbnVtVmFsdWVzIH0gZnJvbSAnLi9lbnVtLXZhbHVlcy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VFbnVtKGUxLCBlMiwgY29uZmlnLCBkaXJlY3RpdmVzKSB7XG4gICAgaWYgKGUyKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBuYW1lOiBlMS5uYW1lLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246IGUxWydkZXNjcmlwdGlvbiddIHx8IGUyWydkZXNjcmlwdGlvbiddLFxuICAgICAgICAgICAga2luZDogKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5jb252ZXJ0RXh0ZW5zaW9ucykgfHwgZTEua2luZCA9PT0gJ0VudW1UeXBlRGVmaW5pdGlvbicgfHwgZTIua2luZCA9PT0gJ0VudW1UeXBlRGVmaW5pdGlvbidcbiAgICAgICAgICAgICAgICA/ICdFbnVtVHlwZURlZmluaXRpb24nXG4gICAgICAgICAgICAgICAgOiAnRW51bVR5cGVFeHRlbnNpb24nLFxuICAgICAgICAgICAgbG9jOiBlMS5sb2MsXG4gICAgICAgICAgICBkaXJlY3RpdmVzOiBtZXJnZURpcmVjdGl2ZXMoZTEuZGlyZWN0aXZlcywgZTIuZGlyZWN0aXZlcywgY29uZmlnLCBkaXJlY3RpdmVzKSxcbiAgICAgICAgICAgIHZhbHVlczogbWVyZ2VFbnVtVmFsdWVzKGUxLnZhbHVlcywgZTIudmFsdWVzLCBjb25maWcpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5jb252ZXJ0RXh0ZW5zaW9ucylcbiAgICAgICAgPyB7XG4gICAgICAgICAgICAuLi5lMSxcbiAgICAgICAgICAgIGtpbmQ6IEtpbmQuRU5VTV9UWVBFX0RFRklOSVRJT04sXG4gICAgICAgIH1cbiAgICAgICAgOiBlMTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/enum.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/fields.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/fields.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeFields: () => (/* binding */ mergeFields)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/utils.js\");\n/* harmony import */ var _directives_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/helpers.js\");\n/* harmony import */ var _arguments_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./arguments.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/arguments.js\");\n\n\n\n\nfunction fieldAlreadyExists(fieldsArr, otherField) {\n    const resultIndex = fieldsArr.findIndex(field => field.name.value === otherField.name.value);\n    return [resultIndex > -1 ? fieldsArr[resultIndex] : null, resultIndex];\n}\nfunction mergeFields(type, f1, f2, config, directives) {\n    const result = [];\n    if (f2 != null) {\n        result.push(...f2);\n    }\n    if (f1 != null) {\n        for (const field of f1) {\n            const [existing, existingIndex] = fieldAlreadyExists(result, field);\n            if (existing && !(config === null || config === void 0 ? void 0 : config.ignoreFieldConflicts)) {\n                const newField = ((config === null || config === void 0 ? void 0 : config.onFieldTypeConflict) && config.onFieldTypeConflict(existing, field, type, config === null || config === void 0 ? void 0 : config.throwOnConflict)) ||\n                    preventConflicts(type, existing, field, config === null || config === void 0 ? void 0 : config.throwOnConflict);\n                newField.arguments = (0,_arguments_js__WEBPACK_IMPORTED_MODULE_0__.mergeArguments)(field['arguments'] || [], existing['arguments'] || [], config);\n                newField.directives = (0,_directives_js__WEBPACK_IMPORTED_MODULE_1__.mergeDirectives)(field.directives, existing.directives, config, directives);\n                newField.description = field.description || existing.description;\n                result[existingIndex] = newField;\n            }\n            else {\n                result.push(field);\n            }\n        }\n    }\n    if (config && config.sort) {\n        result.sort(_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_2__.compareNodes);\n    }\n    if (config && config.exclusions) {\n        const exclusions = config.exclusions;\n        return result.filter(field => !exclusions.includes(`${type.name.value}.${field.name.value}`));\n    }\n    return result;\n}\nfunction preventConflicts(type, a, b, ignoreNullability = false) {\n    const aType = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.printTypeNode)(a.type);\n    const bType = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.printTypeNode)(b.type);\n    if (aType !== bType) {\n        const t1 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.extractType)(a.type);\n        const t2 = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.extractType)(b.type);\n        if (t1.name.value !== t2.name.value) {\n            throw new Error(`Field \"${b.name.value}\" already defined with a different type. Declared as \"${t1.name.value}\", but you tried to override with \"${t2.name.value}\"`);\n        }\n        if (!safeChangeForFieldType(a.type, b.type, !ignoreNullability)) {\n            throw new Error(`Field '${type.name.value}.${a.name.value}' changed type from '${aType}' to '${bType}'`);\n        }\n    }\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullTypeNode)(b.type) && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullTypeNode)(a.type)) {\n        a.type = b.type;\n    }\n    return a;\n}\nfunction safeChangeForFieldType(oldType, newType, ignoreNullability = false) {\n    // both are named\n    if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isWrappingTypeNode)(oldType) && !(0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isWrappingTypeNode)(newType)) {\n        return oldType.toString() === newType.toString();\n    }\n    // new is non-null\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullTypeNode)(newType)) {\n        const ofType = (0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullTypeNode)(oldType) ? oldType.type : oldType;\n        return safeChangeForFieldType(ofType, newType.type);\n    }\n    // old is non-null\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullTypeNode)(oldType)) {\n        return safeChangeForFieldType(newType, oldType, ignoreNullability);\n    }\n    // old is list\n    if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isListTypeNode)(oldType)) {\n        return (((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isListTypeNode)(newType) && safeChangeForFieldType(oldType.type, newType.type)) ||\n            ((0,_utils_js__WEBPACK_IMPORTED_MODULE_3__.isNonNullTypeNode)(newType) && safeChangeForFieldType(oldType, newType['type'])));\n    }\n    return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL2ZpZWxkcy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUErRztBQUM3RDtBQUNFO0FBQ0o7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLDZEQUFjO0FBQ25ELHNDQUFzQywrREFBZTtBQUNyRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxvQkFBb0IsOERBQVk7QUFDaEM7QUFDQTtBQUNBO0FBQ0EsOERBQThELGdCQUFnQixHQUFHLGlCQUFpQjtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix3REFBYTtBQUMvQixrQkFBa0Isd0RBQWE7QUFDL0I7QUFDQSxtQkFBbUIsc0RBQVc7QUFDOUIsbUJBQW1CLHNEQUFXO0FBQzlCO0FBQ0Esc0NBQXNDLGFBQWEsd0RBQXdELGNBQWMscUNBQXFDLGNBQWM7QUFDNUs7QUFDQTtBQUNBLHNDQUFzQyxnQkFBZ0IsR0FBRyxhQUFhLHVCQUF1QixNQUFNLFFBQVEsTUFBTTtBQUNqSDtBQUNBO0FBQ0EsUUFBUSw0REFBaUIsYUFBYSw0REFBaUI7QUFDdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUyw2REFBa0IsY0FBYyw2REFBa0I7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSw0REFBaUI7QUFDekIsdUJBQXVCLDREQUFpQjtBQUN4QztBQUNBO0FBQ0E7QUFDQSxRQUFRLDREQUFpQjtBQUN6QjtBQUNBO0FBQ0E7QUFDQSxRQUFRLHlEQUFjO0FBQ3RCLGlCQUFpQix5REFBYztBQUMvQixhQUFhLDREQUFpQjtBQUM5QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL2ZpZWxkcy5qcz9iYTY0Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGV4dHJhY3RUeXBlLCBpc1dyYXBwaW5nVHlwZU5vZGUsIGlzTGlzdFR5cGVOb2RlLCBpc05vbk51bGxUeXBlTm9kZSwgcHJpbnRUeXBlTm9kZSB9IGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IHsgbWVyZ2VEaXJlY3RpdmVzIH0gZnJvbSAnLi9kaXJlY3RpdmVzLmpzJztcbmltcG9ydCB7IGNvbXBhcmVOb2RlcyB9IGZyb20gJ0BncmFwaHFsLXRvb2xzL3V0aWxzJztcbmltcG9ydCB7IG1lcmdlQXJndW1lbnRzIH0gZnJvbSAnLi9hcmd1bWVudHMuanMnO1xuZnVuY3Rpb24gZmllbGRBbHJlYWR5RXhpc3RzKGZpZWxkc0Fyciwgb3RoZXJGaWVsZCkge1xuICAgIGNvbnN0IHJlc3VsdEluZGV4ID0gZmllbGRzQXJyLmZpbmRJbmRleChmaWVsZCA9PiBmaWVsZC5uYW1lLnZhbHVlID09PSBvdGhlckZpZWxkLm5hbWUudmFsdWUpO1xuICAgIHJldHVybiBbcmVzdWx0SW5kZXggPiAtMSA/IGZpZWxkc0FycltyZXN1bHRJbmRleF0gOiBudWxsLCByZXN1bHRJbmRleF07XG59XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VGaWVsZHModHlwZSwgZjEsIGYyLCBjb25maWcsIGRpcmVjdGl2ZXMpIHtcbiAgICBjb25zdCByZXN1bHQgPSBbXTtcbiAgICBpZiAoZjIgIT0gbnVsbCkge1xuICAgICAgICByZXN1bHQucHVzaCguLi5mMik7XG4gICAgfVxuICAgIGlmIChmMSAhPSBudWxsKSB7XG4gICAgICAgIGZvciAoY29uc3QgZmllbGQgb2YgZjEpIHtcbiAgICAgICAgICAgIGNvbnN0IFtleGlzdGluZywgZXhpc3RpbmdJbmRleF0gPSBmaWVsZEFscmVhZHlFeGlzdHMocmVzdWx0LCBmaWVsZCk7XG4gICAgICAgICAgICBpZiAoZXhpc3RpbmcgJiYgIShjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuaWdub3JlRmllbGRDb25mbGljdHMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbmV3RmllbGQgPSAoKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5vbkZpZWxkVHlwZUNvbmZsaWN0KSAmJiBjb25maWcub25GaWVsZFR5cGVDb25mbGljdChleGlzdGluZywgZmllbGQsIHR5cGUsIGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy50aHJvd09uQ29uZmxpY3QpKSB8fFxuICAgICAgICAgICAgICAgICAgICBwcmV2ZW50Q29uZmxpY3RzKHR5cGUsIGV4aXN0aW5nLCBmaWVsZCwgY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLnRocm93T25Db25mbGljdCk7XG4gICAgICAgICAgICAgICAgbmV3RmllbGQuYXJndW1lbnRzID0gbWVyZ2VBcmd1bWVudHMoZmllbGRbJ2FyZ3VtZW50cyddIHx8IFtdLCBleGlzdGluZ1snYXJndW1lbnRzJ10gfHwgW10sIGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgbmV3RmllbGQuZGlyZWN0aXZlcyA9IG1lcmdlRGlyZWN0aXZlcyhmaWVsZC5kaXJlY3RpdmVzLCBleGlzdGluZy5kaXJlY3RpdmVzLCBjb25maWcsIGRpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgICAgIG5ld0ZpZWxkLmRlc2NyaXB0aW9uID0gZmllbGQuZGVzY3JpcHRpb24gfHwgZXhpc3RpbmcuZGVzY3JpcHRpb247XG4gICAgICAgICAgICAgICAgcmVzdWx0W2V4aXN0aW5nSW5kZXhdID0gbmV3RmllbGQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChmaWVsZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGNvbmZpZyAmJiBjb25maWcuc29ydCkge1xuICAgICAgICByZXN1bHQuc29ydChjb21wYXJlTm9kZXMpO1xuICAgIH1cbiAgICBpZiAoY29uZmlnICYmIGNvbmZpZy5leGNsdXNpb25zKSB7XG4gICAgICAgIGNvbnN0IGV4Y2x1c2lvbnMgPSBjb25maWcuZXhjbHVzaW9ucztcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5maWx0ZXIoZmllbGQgPT4gIWV4Y2x1c2lvbnMuaW5jbHVkZXMoYCR7dHlwZS5uYW1lLnZhbHVlfS4ke2ZpZWxkLm5hbWUudmFsdWV9YCkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuZnVuY3Rpb24gcHJldmVudENvbmZsaWN0cyh0eXBlLCBhLCBiLCBpZ25vcmVOdWxsYWJpbGl0eSA9IGZhbHNlKSB7XG4gICAgY29uc3QgYVR5cGUgPSBwcmludFR5cGVOb2RlKGEudHlwZSk7XG4gICAgY29uc3QgYlR5cGUgPSBwcmludFR5cGVOb2RlKGIudHlwZSk7XG4gICAgaWYgKGFUeXBlICE9PSBiVHlwZSkge1xuICAgICAgICBjb25zdCB0MSA9IGV4dHJhY3RUeXBlKGEudHlwZSk7XG4gICAgICAgIGNvbnN0IHQyID0gZXh0cmFjdFR5cGUoYi50eXBlKTtcbiAgICAgICAgaWYgKHQxLm5hbWUudmFsdWUgIT09IHQyLm5hbWUudmFsdWUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmllbGQgXCIke2IubmFtZS52YWx1ZX1cIiBhbHJlYWR5IGRlZmluZWQgd2l0aCBhIGRpZmZlcmVudCB0eXBlLiBEZWNsYXJlZCBhcyBcIiR7dDEubmFtZS52YWx1ZX1cIiwgYnV0IHlvdSB0cmllZCB0byBvdmVycmlkZSB3aXRoIFwiJHt0Mi5uYW1lLnZhbHVlfVwiYCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzYWZlQ2hhbmdlRm9yRmllbGRUeXBlKGEudHlwZSwgYi50eXBlLCAhaWdub3JlTnVsbGFiaWxpdHkpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpZWxkICcke3R5cGUubmFtZS52YWx1ZX0uJHthLm5hbWUudmFsdWV9JyBjaGFuZ2VkIHR5cGUgZnJvbSAnJHthVHlwZX0nIHRvICcke2JUeXBlfSdgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAoaXNOb25OdWxsVHlwZU5vZGUoYi50eXBlKSAmJiAhaXNOb25OdWxsVHlwZU5vZGUoYS50eXBlKSkge1xuICAgICAgICBhLnR5cGUgPSBiLnR5cGU7XG4gICAgfVxuICAgIHJldHVybiBhO1xufVxuZnVuY3Rpb24gc2FmZUNoYW5nZUZvckZpZWxkVHlwZShvbGRUeXBlLCBuZXdUeXBlLCBpZ25vcmVOdWxsYWJpbGl0eSA9IGZhbHNlKSB7XG4gICAgLy8gYm90aCBhcmUgbmFtZWRcbiAgICBpZiAoIWlzV3JhcHBpbmdUeXBlTm9kZShvbGRUeXBlKSAmJiAhaXNXcmFwcGluZ1R5cGVOb2RlKG5ld1R5cGUpKSB7XG4gICAgICAgIHJldHVybiBvbGRUeXBlLnRvU3RyaW5nKCkgPT09IG5ld1R5cGUudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgLy8gbmV3IGlzIG5vbi1udWxsXG4gICAgaWYgKGlzTm9uTnVsbFR5cGVOb2RlKG5ld1R5cGUpKSB7XG4gICAgICAgIGNvbnN0IG9mVHlwZSA9IGlzTm9uTnVsbFR5cGVOb2RlKG9sZFR5cGUpID8gb2xkVHlwZS50eXBlIDogb2xkVHlwZTtcbiAgICAgICAgcmV0dXJuIHNhZmVDaGFuZ2VGb3JGaWVsZFR5cGUob2ZUeXBlLCBuZXdUeXBlLnR5cGUpO1xuICAgIH1cbiAgICAvLyBvbGQgaXMgbm9uLW51bGxcbiAgICBpZiAoaXNOb25OdWxsVHlwZU5vZGUob2xkVHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIHNhZmVDaGFuZ2VGb3JGaWVsZFR5cGUobmV3VHlwZSwgb2xkVHlwZSwgaWdub3JlTnVsbGFiaWxpdHkpO1xuICAgIH1cbiAgICAvLyBvbGQgaXMgbGlzdFxuICAgIGlmIChpc0xpc3RUeXBlTm9kZShvbGRUeXBlKSkge1xuICAgICAgICByZXR1cm4gKChpc0xpc3RUeXBlTm9kZShuZXdUeXBlKSAmJiBzYWZlQ2hhbmdlRm9yRmllbGRUeXBlKG9sZFR5cGUudHlwZSwgbmV3VHlwZS50eXBlKSkgfHxcbiAgICAgICAgICAgIChpc05vbk51bGxUeXBlTm9kZShuZXdUeXBlKSAmJiBzYWZlQ2hhbmdlRm9yRmllbGRUeXBlKG9sZFR5cGUsIG5ld1R5cGVbJ3R5cGUnXSkpKTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/fields.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/input-type.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/input-type.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeInputType: () => (/* binding */ mergeInputType)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _fields_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fields.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/fields.js\");\n/* harmony import */ var _directives_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js\");\n\n\n\nfunction mergeInputType(node, existingNode, config, directives) {\n    if (existingNode) {\n        try {\n            return {\n                name: node.name,\n                description: node['description'] || existingNode['description'],\n                kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) ||\n                    node.kind === 'InputObjectTypeDefinition' ||\n                    existingNode.kind === 'InputObjectTypeDefinition'\n                    ? 'InputObjectTypeDefinition'\n                    : 'InputObjectTypeExtension',\n                loc: node.loc,\n                fields: (0,_fields_js__WEBPACK_IMPORTED_MODULE_0__.mergeFields)(node, node.fields, existingNode.fields, config),\n                directives: (0,_directives_js__WEBPACK_IMPORTED_MODULE_1__.mergeDirectives)(node.directives, existingNode.directives, config, directives),\n            };\n        }\n        catch (e) {\n            throw new Error(`Unable to merge GraphQL input type \"${node.name.value}\": ${e.message}`);\n        }\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: graphql__WEBPACK_IMPORTED_MODULE_2__.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n        }\n        : node;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL2lucHV0LXR5cGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnQztBQUNVO0FBQ1E7QUFDM0M7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVEQUFXO0FBQ25DLDRCQUE0QiwrREFBZTtBQUMzQztBQUNBO0FBQ0E7QUFDQSxtRUFBbUUsZ0JBQWdCLEtBQUssVUFBVTtBQUNsRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHlDQUFJO0FBQ3RCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvZXNtL3R5cGVkZWZzLW1lcmdlcnMvaW5wdXQtdHlwZS5qcz9lZTJkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtpbmQsIH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyBtZXJnZUZpZWxkcyB9IGZyb20gJy4vZmllbGRzLmpzJztcbmltcG9ydCB7IG1lcmdlRGlyZWN0aXZlcyB9IGZyb20gJy4vZGlyZWN0aXZlcy5qcyc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VJbnB1dFR5cGUobm9kZSwgZXhpc3RpbmdOb2RlLCBjb25maWcsIGRpcmVjdGl2ZXMpIHtcbiAgICBpZiAoZXhpc3RpbmdOb2RlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5vZGUubmFtZSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbm9kZVsnZGVzY3JpcHRpb24nXSB8fCBleGlzdGluZ05vZGVbJ2Rlc2NyaXB0aW9uJ10sXG4gICAgICAgICAgICAgICAga2luZDogKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5jb252ZXJ0RXh0ZW5zaW9ucykgfHxcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5raW5kID09PSAnSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdOb2RlLmtpbmQgPT09ICdJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA/ICdJbnB1dE9iamVjdFR5cGVEZWZpbml0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA6ICdJbnB1dE9iamVjdFR5cGVFeHRlbnNpb24nLFxuICAgICAgICAgICAgICAgIGxvYzogbm9kZS5sb2MsXG4gICAgICAgICAgICAgICAgZmllbGRzOiBtZXJnZUZpZWxkcyhub2RlLCBub2RlLmZpZWxkcywgZXhpc3RpbmdOb2RlLmZpZWxkcywgY29uZmlnKSxcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBtZXJnZURpcmVjdGl2ZXMobm9kZS5kaXJlY3RpdmVzLCBleGlzdGluZ05vZGUuZGlyZWN0aXZlcywgY29uZmlnLCBkaXJlY3RpdmVzKSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5hYmxlIHRvIG1lcmdlIEdyYXBoUUwgaW5wdXQgdHlwZSBcIiR7bm9kZS5uYW1lLnZhbHVlfVwiOiAke2UubWVzc2FnZX1gKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5jb252ZXJ0RXh0ZW5zaW9ucylcbiAgICAgICAgPyB7XG4gICAgICAgICAgICAuLi5ub2RlLFxuICAgICAgICAgICAga2luZDogS2luZC5JTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OLFxuICAgICAgICB9XG4gICAgICAgIDogbm9kZTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/input-type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/interface.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/interface.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeInterface: () => (/* binding */ mergeInterface)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _fields_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fields.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/fields.js\");\n/* harmony import */ var _directives_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js\");\n/* harmony import */ var _merge_named_type_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./merge-named-type-array.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-named-type-array.js\");\n\n\n\n\nfunction mergeInterface(node, existingNode, config, directives) {\n    if (existingNode) {\n        try {\n            return {\n                name: node.name,\n                description: node['description'] || existingNode['description'],\n                kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) ||\n                    node.kind === 'InterfaceTypeDefinition' ||\n                    existingNode.kind === 'InterfaceTypeDefinition'\n                    ? 'InterfaceTypeDefinition'\n                    : 'InterfaceTypeExtension',\n                loc: node.loc,\n                fields: (0,_fields_js__WEBPACK_IMPORTED_MODULE_0__.mergeFields)(node, node.fields, existingNode.fields, config),\n                directives: (0,_directives_js__WEBPACK_IMPORTED_MODULE_1__.mergeDirectives)(node.directives, existingNode.directives, config, directives),\n                interfaces: node['interfaces']\n                    ? (0,_merge_named_type_array_js__WEBPACK_IMPORTED_MODULE_2__.mergeNamedTypeArray)(node['interfaces'], existingNode['interfaces'], config)\n                    : undefined,\n            };\n        }\n        catch (e) {\n            throw new Error(`Unable to merge GraphQL interface \"${node.name.value}\": ${e.message}`);\n        }\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.INTERFACE_TYPE_DEFINITION,\n        }\n        : node;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL2ludGVyZmFjZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUErQjtBQUNXO0FBQ1E7QUFDZ0I7QUFDM0Q7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLHVEQUFXO0FBQ25DLDRCQUE0QiwrREFBZTtBQUMzQztBQUNBLHNCQUFzQiwrRUFBbUI7QUFDekM7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrRUFBa0UsZ0JBQWdCLEtBQUssVUFBVTtBQUNqRztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHlDQUFJO0FBQ3RCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvZXNtL3R5cGVkZWZzLW1lcmdlcnMvaW50ZXJmYWNlLmpzPzFlMTUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS2luZCB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHsgbWVyZ2VGaWVsZHMgfSBmcm9tICcuL2ZpZWxkcy5qcyc7XG5pbXBvcnQgeyBtZXJnZURpcmVjdGl2ZXMgfSBmcm9tICcuL2RpcmVjdGl2ZXMuanMnO1xuaW1wb3J0IHsgbWVyZ2VOYW1lZFR5cGVBcnJheSB9IGZyb20gJy4vbWVyZ2UtbmFtZWQtdHlwZS1hcnJheS5qcyc7XG5leHBvcnQgZnVuY3Rpb24gbWVyZ2VJbnRlcmZhY2Uobm9kZSwgZXhpc3RpbmdOb2RlLCBjb25maWcsIGRpcmVjdGl2ZXMpIHtcbiAgICBpZiAoZXhpc3RpbmdOb2RlKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIG5hbWU6IG5vZGUubmFtZSxcbiAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogbm9kZVsnZGVzY3JpcHRpb24nXSB8fCBleGlzdGluZ05vZGVbJ2Rlc2NyaXB0aW9uJ10sXG4gICAgICAgICAgICAgICAga2luZDogKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5jb252ZXJ0RXh0ZW5zaW9ucykgfHxcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5raW5kID09PSAnSW50ZXJmYWNlVHlwZURlZmluaXRpb24nIHx8XG4gICAgICAgICAgICAgICAgICAgIGV4aXN0aW5nTm9kZS5raW5kID09PSAnSW50ZXJmYWNlVHlwZURlZmluaXRpb24nXG4gICAgICAgICAgICAgICAgICAgID8gJ0ludGVyZmFjZVR5cGVEZWZpbml0aW9uJ1xuICAgICAgICAgICAgICAgICAgICA6ICdJbnRlcmZhY2VUeXBlRXh0ZW5zaW9uJyxcbiAgICAgICAgICAgICAgICBsb2M6IG5vZGUubG9jLFxuICAgICAgICAgICAgICAgIGZpZWxkczogbWVyZ2VGaWVsZHMobm9kZSwgbm9kZS5maWVsZHMsIGV4aXN0aW5nTm9kZS5maWVsZHMsIGNvbmZpZyksXG4gICAgICAgICAgICAgICAgZGlyZWN0aXZlczogbWVyZ2VEaXJlY3RpdmVzKG5vZGUuZGlyZWN0aXZlcywgZXhpc3RpbmdOb2RlLmRpcmVjdGl2ZXMsIGNvbmZpZywgZGlyZWN0aXZlcyksXG4gICAgICAgICAgICAgICAgaW50ZXJmYWNlczogbm9kZVsnaW50ZXJmYWNlcyddXG4gICAgICAgICAgICAgICAgICAgID8gbWVyZ2VOYW1lZFR5cGVBcnJheShub2RlWydpbnRlcmZhY2VzJ10sIGV4aXN0aW5nTm9kZVsnaW50ZXJmYWNlcyddLCBjb25maWcpXG4gICAgICAgICAgICAgICAgICAgIDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gbWVyZ2UgR3JhcGhRTCBpbnRlcmZhY2UgXCIke25vZGUubmFtZS52YWx1ZX1cIjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuY29udmVydEV4dGVuc2lvbnMpXG4gICAgICAgID8ge1xuICAgICAgICAgICAgLi4ubm9kZSxcbiAgICAgICAgICAgIGtpbmQ6IEtpbmQuSU5URVJGQUNFX1RZUEVfREVGSU5JVElPTixcbiAgICAgICAgfVxuICAgICAgICA6IG5vZGU7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/interface.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-named-type-array.js":
/*!**********************************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-named-type-array.js ***!
  \**********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeNamedTypeArray: () => (/* binding */ mergeNamedTypeArray)\n/* harmony export */ });\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/helpers.js\");\n\nfunction alreadyExists(arr, other) {\n    return !!arr.find(i => i.name.value === other.name.value);\n}\nfunction mergeNamedTypeArray(first = [], second = [], config = {}) {\n    const result = [...second, ...first.filter(d => !alreadyExists(second, d))];\n    if (config && config.sort) {\n        result.sort(_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.compareNodes);\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL21lcmdlLW5hbWVkLXR5cGUtYXJyYXkuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBb0Q7QUFDcEQ7QUFDQTtBQUNBO0FBQ08saUVBQWlFO0FBQ3hFO0FBQ0E7QUFDQSxvQkFBb0IsOERBQVk7QUFDaEM7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9tZXJnZS9lc20vdHlwZWRlZnMtbWVyZ2Vycy9tZXJnZS1uYW1lZC10eXBlLWFycmF5LmpzPzUxYjMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29tcGFyZU5vZGVzIH0gZnJvbSAnQGdyYXBocWwtdG9vbHMvdXRpbHMnO1xuZnVuY3Rpb24gYWxyZWFkeUV4aXN0cyhhcnIsIG90aGVyKSB7XG4gICAgcmV0dXJuICEhYXJyLmZpbmQoaSA9PiBpLm5hbWUudmFsdWUgPT09IG90aGVyLm5hbWUudmFsdWUpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlTmFtZWRUeXBlQXJyYXkoZmlyc3QgPSBbXSwgc2Vjb25kID0gW10sIGNvbmZpZyA9IHt9KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gWy4uLnNlY29uZCwgLi4uZmlyc3QuZmlsdGVyKGQgPT4gIWFscmVhZHlFeGlzdHMoc2Vjb25kLCBkKSldO1xuICAgIGlmIChjb25maWcgJiYgY29uZmlnLnNvcnQpIHtcbiAgICAgICAgcmVzdWx0LnNvcnQoY29tcGFyZU5vZGVzKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-named-type-array.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-nodes.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-nodes.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isNamedDefinitionNode: () => (/* binding */ isNamedDefinitionNode),\n/* harmony export */   mergeGraphQLNodes: () => (/* binding */ mergeGraphQLNodes),\n/* harmony export */   schemaDefSymbol: () => (/* binding */ schemaDefSymbol)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _type_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./type.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/type.js\");\n/* harmony import */ var _enum_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./enum.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/enum.js\");\n/* harmony import */ var _scalar_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./scalar.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/scalar.js\");\n/* harmony import */ var _union_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./union.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/union.js\");\n/* harmony import */ var _input_type_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./input-type.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/input-type.js\");\n/* harmony import */ var _interface_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./interface.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/interface.js\");\n/* harmony import */ var _directives_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js\");\n/* harmony import */ var _schema_def_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./schema-def.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/schema-def.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/comments.js\");\n\n\n\n\n\n\n\n\n\n\nconst schemaDefSymbol = 'SCHEMA_DEF_SYMBOL';\nfunction isNamedDefinitionNode(definitionNode) {\n    return 'name' in definitionNode;\n}\nfunction mergeGraphQLNodes(nodes, config, directives = {}) {\n    var _a, _b, _c;\n    const mergedResultMap = directives;\n    for (const nodeDefinition of nodes) {\n        if (isNamedDefinitionNode(nodeDefinition)) {\n            const name = (_a = nodeDefinition.name) === null || _a === void 0 ? void 0 : _a.value;\n            if (config === null || config === void 0 ? void 0 : config.commentDescriptions) {\n                (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.collectComment)(nodeDefinition);\n            }\n            if (name == null) {\n                continue;\n            }\n            if (((_b = config === null || config === void 0 ? void 0 : config.exclusions) === null || _b === void 0 ? void 0 : _b.includes(name + '.*')) || ((_c = config === null || config === void 0 ? void 0 : config.exclusions) === null || _c === void 0 ? void 0 : _c.includes(name))) {\n                delete mergedResultMap[name];\n            }\n            else {\n                switch (nodeDefinition.kind) {\n                    case graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OBJECT_TYPE_DEFINITION:\n                    case graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OBJECT_TYPE_EXTENSION:\n                        mergedResultMap[name] = (0,_type_js__WEBPACK_IMPORTED_MODULE_2__.mergeType)(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.ENUM_TYPE_DEFINITION:\n                    case graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.ENUM_TYPE_EXTENSION:\n                        mergedResultMap[name] = (0,_enum_js__WEBPACK_IMPORTED_MODULE_3__.mergeEnum)(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.UNION_TYPE_DEFINITION:\n                    case graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.UNION_TYPE_EXTENSION:\n                        mergedResultMap[name] = (0,_union_js__WEBPACK_IMPORTED_MODULE_4__.mergeUnion)(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.SCALAR_TYPE_DEFINITION:\n                    case graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.SCALAR_TYPE_EXTENSION:\n                        mergedResultMap[name] = (0,_scalar_js__WEBPACK_IMPORTED_MODULE_5__.mergeScalar)(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.INPUT_OBJECT_TYPE_DEFINITION:\n                    case graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.INPUT_OBJECT_TYPE_EXTENSION:\n                        mergedResultMap[name] = (0,_input_type_js__WEBPACK_IMPORTED_MODULE_6__.mergeInputType)(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.INTERFACE_TYPE_DEFINITION:\n                    case graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.INTERFACE_TYPE_EXTENSION:\n                        mergedResultMap[name] = (0,_interface_js__WEBPACK_IMPORTED_MODULE_7__.mergeInterface)(nodeDefinition, mergedResultMap[name], config, directives);\n                        break;\n                    case graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.DIRECTIVE_DEFINITION:\n                        mergedResultMap[name] = (0,_directives_js__WEBPACK_IMPORTED_MODULE_8__.mergeDirective)(nodeDefinition, mergedResultMap[name]);\n                        break;\n                }\n            }\n        }\n        else if (nodeDefinition.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.SCHEMA_DEFINITION || nodeDefinition.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.SCHEMA_EXTENSION) {\n            mergedResultMap[schemaDefSymbol] = (0,_schema_def_js__WEBPACK_IMPORTED_MODULE_9__.mergeSchemaDefs)(nodeDefinition, mergedResultMap[schemaDefSymbol], config);\n        }\n    }\n    return mergedResultMap;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL21lcmdlLW5vZGVzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBK0I7QUFDTztBQUNBO0FBQ0k7QUFDRjtBQUNTO0FBQ0Q7QUFDQztBQUNDO0FBQ0k7QUFDL0M7QUFDQTtBQUNQO0FBQ0E7QUFDTyx5REFBeUQ7QUFDaEU7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCLG9FQUFjO0FBQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHlCQUF5Qix5Q0FBSTtBQUM3Qix5QkFBeUIseUNBQUk7QUFDN0IsZ0RBQWdELG1EQUFTO0FBQ3pEO0FBQ0EseUJBQXlCLHlDQUFJO0FBQzdCLHlCQUF5Qix5Q0FBSTtBQUM3QixnREFBZ0QsbURBQVM7QUFDekQ7QUFDQSx5QkFBeUIseUNBQUk7QUFDN0IseUJBQXlCLHlDQUFJO0FBQzdCLGdEQUFnRCxxREFBVTtBQUMxRDtBQUNBLHlCQUF5Qix5Q0FBSTtBQUM3Qix5QkFBeUIseUNBQUk7QUFDN0IsZ0RBQWdELHVEQUFXO0FBQzNEO0FBQ0EseUJBQXlCLHlDQUFJO0FBQzdCLHlCQUF5Qix5Q0FBSTtBQUM3QixnREFBZ0QsOERBQWM7QUFDOUQ7QUFDQSx5QkFBeUIseUNBQUk7QUFDN0IseUJBQXlCLHlDQUFJO0FBQzdCLGdEQUFnRCw2REFBYztBQUM5RDtBQUNBLHlCQUF5Qix5Q0FBSTtBQUM3QixnREFBZ0QsOERBQWM7QUFDOUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSx5Q0FBeUMseUNBQUksOENBQThDLHlDQUFJO0FBQy9GLCtDQUErQywrREFBZTtBQUM5RDtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvZXNtL3R5cGVkZWZzLW1lcmdlcnMvbWVyZ2Utbm9kZXMuanM/NmM4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBLaW5kIH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyBtZXJnZVR5cGUgfSBmcm9tICcuL3R5cGUuanMnO1xuaW1wb3J0IHsgbWVyZ2VFbnVtIH0gZnJvbSAnLi9lbnVtLmpzJztcbmltcG9ydCB7IG1lcmdlU2NhbGFyIH0gZnJvbSAnLi9zY2FsYXIuanMnO1xuaW1wb3J0IHsgbWVyZ2VVbmlvbiB9IGZyb20gJy4vdW5pb24uanMnO1xuaW1wb3J0IHsgbWVyZ2VJbnB1dFR5cGUgfSBmcm9tICcuL2lucHV0LXR5cGUuanMnO1xuaW1wb3J0IHsgbWVyZ2VJbnRlcmZhY2UgfSBmcm9tICcuL2ludGVyZmFjZS5qcyc7XG5pbXBvcnQgeyBtZXJnZURpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy5qcyc7XG5pbXBvcnQgeyBtZXJnZVNjaGVtYURlZnMgfSBmcm9tICcuL3NjaGVtYS1kZWYuanMnO1xuaW1wb3J0IHsgY29sbGVjdENvbW1lbnQgfSBmcm9tICdAZ3JhcGhxbC10b29scy91dGlscyc7XG5leHBvcnQgY29uc3Qgc2NoZW1hRGVmU3ltYm9sID0gJ1NDSEVNQV9ERUZfU1lNQk9MJztcbmV4cG9ydCBmdW5jdGlvbiBpc05hbWVkRGVmaW5pdGlvbk5vZGUoZGVmaW5pdGlvbk5vZGUpIHtcbiAgICByZXR1cm4gJ25hbWUnIGluIGRlZmluaXRpb25Ob2RlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlR3JhcGhRTE5vZGVzKG5vZGVzLCBjb25maWcsIGRpcmVjdGl2ZXMgPSB7fSkge1xuICAgIHZhciBfYSwgX2IsIF9jO1xuICAgIGNvbnN0IG1lcmdlZFJlc3VsdE1hcCA9IGRpcmVjdGl2ZXM7XG4gICAgZm9yIChjb25zdCBub2RlRGVmaW5pdGlvbiBvZiBub2Rlcykge1xuICAgICAgICBpZiAoaXNOYW1lZERlZmluaXRpb25Ob2RlKG5vZGVEZWZpbml0aW9uKSkge1xuICAgICAgICAgICAgY29uc3QgbmFtZSA9IChfYSA9IG5vZGVEZWZpbml0aW9uLm5hbWUpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS52YWx1ZTtcbiAgICAgICAgICAgIGlmIChjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuY29tbWVudERlc2NyaXB0aW9ucykge1xuICAgICAgICAgICAgICAgIGNvbGxlY3RDb21tZW50KG5vZGVEZWZpbml0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChuYW1lID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICgoKF9iID0gY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmV4Y2x1c2lvbnMpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pbmNsdWRlcyhuYW1lICsgJy4qJykpIHx8ICgoX2MgPSBjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuZXhjbHVzaW9ucykgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLmluY2x1ZGVzKG5hbWUpKSkge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSBtZXJnZWRSZXN1bHRNYXBbbmFtZV07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG5vZGVEZWZpbml0aW9uLmtpbmQpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLaW5kLk9CSkVDVF9UWVBFX0RFRklOSVRJT046XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2luZC5PQkpFQ1RfVFlQRV9FWFRFTlNJT046XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZWRSZXN1bHRNYXBbbmFtZV0gPSBtZXJnZVR5cGUobm9kZURlZmluaXRpb24sIG1lcmdlZFJlc3VsdE1hcFtuYW1lXSwgY29uZmlnLCBkaXJlY3RpdmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEtpbmQuRU5VTV9UWVBFX0RFRklOSVRJT046XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2luZC5FTlVNX1RZUEVfRVhURU5TSU9OOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VkUmVzdWx0TWFwW25hbWVdID0gbWVyZ2VFbnVtKG5vZGVEZWZpbml0aW9uLCBtZXJnZWRSZXN1bHRNYXBbbmFtZV0sIGNvbmZpZywgZGlyZWN0aXZlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLaW5kLlVOSU9OX1RZUEVfREVGSU5JVElPTjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLaW5kLlVOSU9OX1RZUEVfRVhURU5TSU9OOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VkUmVzdWx0TWFwW25hbWVdID0gbWVyZ2VVbmlvbihub2RlRGVmaW5pdGlvbiwgbWVyZ2VkUmVzdWx0TWFwW25hbWVdLCBjb25maWcsIGRpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2luZC5TQ0FMQVJfVFlQRV9ERUZJTklUSU9OOlxuICAgICAgICAgICAgICAgICAgICBjYXNlIEtpbmQuU0NBTEFSX1RZUEVfRVhURU5TSU9OOlxuICAgICAgICAgICAgICAgICAgICAgICAgbWVyZ2VkUmVzdWx0TWFwW25hbWVdID0gbWVyZ2VTY2FsYXIobm9kZURlZmluaXRpb24sIG1lcmdlZFJlc3VsdE1hcFtuYW1lXSwgY29uZmlnLCBkaXJlY3RpdmVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIEtpbmQuSU5QVVRfT0JKRUNUX1RZUEVfREVGSU5JVElPTjpcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLaW5kLklOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlZFJlc3VsdE1hcFtuYW1lXSA9IG1lcmdlSW5wdXRUeXBlKG5vZGVEZWZpbml0aW9uLCBtZXJnZWRSZXN1bHRNYXBbbmFtZV0sIGNvbmZpZywgZGlyZWN0aXZlcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBLaW5kLklOVEVSRkFDRV9UWVBFX0RFRklOSVRJT046XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2luZC5JTlRFUkZBQ0VfVFlQRV9FWFRFTlNJT046XG4gICAgICAgICAgICAgICAgICAgICAgICBtZXJnZWRSZXN1bHRNYXBbbmFtZV0gPSBtZXJnZUludGVyZmFjZShub2RlRGVmaW5pdGlvbiwgbWVyZ2VkUmVzdWx0TWFwW25hbWVdLCBjb25maWcsIGRpcmVjdGl2ZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgS2luZC5ESVJFQ1RJVkVfREVGSU5JVElPTjpcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lcmdlZFJlc3VsdE1hcFtuYW1lXSA9IG1lcmdlRGlyZWN0aXZlKG5vZGVEZWZpbml0aW9uLCBtZXJnZWRSZXN1bHRNYXBbbmFtZV0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG5vZGVEZWZpbml0aW9uLmtpbmQgPT09IEtpbmQuU0NIRU1BX0RFRklOSVRJT04gfHwgbm9kZURlZmluaXRpb24ua2luZCA9PT0gS2luZC5TQ0hFTUFfRVhURU5TSU9OKSB7XG4gICAgICAgICAgICBtZXJnZWRSZXN1bHRNYXBbc2NoZW1hRGVmU3ltYm9sXSA9IG1lcmdlU2NoZW1hRGVmcyhub2RlRGVmaW5pdGlvbiwgbWVyZ2VkUmVzdWx0TWFwW3NjaGVtYURlZlN5bWJvbF0sIGNvbmZpZyk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1lcmdlZFJlc3VsdE1hcDtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-nodes.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-typedefs.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-typedefs.js ***!
  \**************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeGraphQLTypes: () => (/* binding */ mergeGraphQLTypes),\n/* harmony export */   mergeTypeDefs: () => (/* binding */ mergeTypeDefs)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/type/schema.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/parser.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/predicates.mjs\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/utils.js\");\n/* harmony import */ var _merge_nodes_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./merge-nodes.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-nodes.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/comments.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/print-schema-with-directives.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/isDocumentNode.js\");\n/* harmony import */ var _schema_def_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./schema-def.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/schema-def.js\");\n\n\n\n\n\nfunction mergeTypeDefs(typeSource, config) {\n    (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.resetComments)();\n    const doc = {\n        kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.DOCUMENT,\n        definitions: mergeGraphQLTypes(typeSource, {\n            useSchemaDefinition: true,\n            forceSchemaDefinition: false,\n            throwOnConflict: false,\n            commentDescriptions: false,\n            ...config,\n        }),\n    };\n    let result;\n    if (config === null || config === void 0 ? void 0 : config.commentDescriptions) {\n        result = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.printWithComments)(doc);\n    }\n    else {\n        result = doc;\n    }\n    (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.resetComments)();\n    return result;\n}\nfunction visitTypeSources(typeSource, options, allDirectives = [], allNodes = [], visitedTypeSources = new Set()) {\n    if (typeSource && !visitedTypeSources.has(typeSource)) {\n        visitedTypeSources.add(typeSource);\n        if (typeof typeSource === 'function') {\n            visitTypeSources(typeSource(), options, allDirectives, allNodes, visitedTypeSources);\n        }\n        else if (Array.isArray(typeSource)) {\n            for (const type of typeSource) {\n                visitTypeSources(type, options, allDirectives, allNodes, visitedTypeSources);\n            }\n        }\n        else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isSchema)(typeSource)) {\n            const documentNode = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_3__.getDocumentNodeFromSchema)(typeSource, options);\n            visitTypeSources(documentNode.definitions, options, allDirectives, allNodes, visitedTypeSources);\n        }\n        else if ((0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isStringTypes)(typeSource) || (0,_utils_js__WEBPACK_IMPORTED_MODULE_4__.isSourceTypes)(typeSource)) {\n            const documentNode = (0,graphql__WEBPACK_IMPORTED_MODULE_5__.parse)(typeSource, options);\n            visitTypeSources(documentNode.definitions, options, allDirectives, allNodes, visitedTypeSources);\n        }\n        else if (typeof typeSource === 'object' && (0,graphql__WEBPACK_IMPORTED_MODULE_6__.isDefinitionNode)(typeSource)) {\n            if (typeSource.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.DIRECTIVE_DEFINITION) {\n                allDirectives.push(typeSource);\n            }\n            else {\n                allNodes.push(typeSource);\n            }\n        }\n        else if ((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_7__.isDocumentNode)(typeSource)) {\n            visitTypeSources(typeSource.definitions, options, allDirectives, allNodes, visitedTypeSources);\n        }\n        else {\n            throw new Error(`typeDefs must contain only strings, documents, schemas, or functions, got ${typeof typeSource}`);\n        }\n    }\n    return { allDirectives, allNodes };\n}\nfunction mergeGraphQLTypes(typeSource, config) {\n    var _a, _b, _c;\n    (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.resetComments)();\n    const { allDirectives, allNodes } = visitTypeSources(typeSource, config);\n    const mergedDirectives = (0,_merge_nodes_js__WEBPACK_IMPORTED_MODULE_8__.mergeGraphQLNodes)(allDirectives, config);\n    const mergedNodes = (0,_merge_nodes_js__WEBPACK_IMPORTED_MODULE_8__.mergeGraphQLNodes)(allNodes, config, mergedDirectives);\n    if (config === null || config === void 0 ? void 0 : config.useSchemaDefinition) {\n        // XXX: right now we don't handle multiple schema definitions\n        const schemaDef = mergedNodes[_merge_nodes_js__WEBPACK_IMPORTED_MODULE_8__.schemaDefSymbol] || {\n            kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.SCHEMA_DEFINITION,\n            operationTypes: [],\n        };\n        const operationTypes = schemaDef.operationTypes;\n        for (const opTypeDefNodeType in _schema_def_js__WEBPACK_IMPORTED_MODULE_9__.DEFAULT_OPERATION_TYPE_NAME_MAP) {\n            const opTypeDefNode = operationTypes.find(operationType => operationType.operation === opTypeDefNodeType);\n            if (!opTypeDefNode) {\n                const possibleRootTypeName = _schema_def_js__WEBPACK_IMPORTED_MODULE_9__.DEFAULT_OPERATION_TYPE_NAME_MAP[opTypeDefNodeType];\n                const existingPossibleRootType = mergedNodes[possibleRootTypeName];\n                if (existingPossibleRootType != null && existingPossibleRootType.name != null) {\n                    operationTypes.push({\n                        kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_TYPE_DEFINITION,\n                        type: {\n                            kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NAMED_TYPE,\n                            name: existingPossibleRootType.name,\n                        },\n                        operation: opTypeDefNodeType,\n                    });\n                }\n            }\n        }\n        if (((_a = schemaDef === null || schemaDef === void 0 ? void 0 : schemaDef.operationTypes) === null || _a === void 0 ? void 0 : _a.length) != null && schemaDef.operationTypes.length > 0) {\n            mergedNodes[_merge_nodes_js__WEBPACK_IMPORTED_MODULE_8__.schemaDefSymbol] = schemaDef;\n        }\n    }\n    if ((config === null || config === void 0 ? void 0 : config.forceSchemaDefinition) && !((_c = (_b = mergedNodes[_merge_nodes_js__WEBPACK_IMPORTED_MODULE_8__.schemaDefSymbol]) === null || _b === void 0 ? void 0 : _b.operationTypes) === null || _c === void 0 ? void 0 : _c.length)) {\n        mergedNodes[_merge_nodes_js__WEBPACK_IMPORTED_MODULE_8__.schemaDefSymbol] = {\n            kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.SCHEMA_DEFINITION,\n            operationTypes: [\n                {\n                    kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.OPERATION_TYPE_DEFINITION,\n                    operation: 'query',\n                    type: {\n                        kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NAMED_TYPE,\n                        name: {\n                            kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NAME,\n                            value: 'Query',\n                        },\n                    },\n                },\n            ],\n        };\n    }\n    const mergedNodeDefinitions = Object.values(mergedNodes);\n    if (config === null || config === void 0 ? void 0 : config.sort) {\n        const sortFn = typeof config.sort === 'function' ? config.sort : _utils_js__WEBPACK_IMPORTED_MODULE_4__.defaultStringComparator;\n        mergedNodeDefinitions.sort((a, b) => { var _a, _b; return sortFn((_a = a.name) === null || _a === void 0 ? void 0 : _a.value, (_b = b.name) === null || _b === void 0 ? void 0 : _b.value); });\n    }\n    return mergedNodeDefinitions;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-typedefs.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/scalar.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/scalar.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeScalar: () => (/* binding */ mergeScalar)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _directives_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js\");\n\n\nfunction mergeScalar(node, existingNode, config, directives) {\n    if (existingNode) {\n        return {\n            name: node.name,\n            description: node['description'] || existingNode['description'],\n            kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) ||\n                node.kind === 'ScalarTypeDefinition' ||\n                existingNode.kind === 'ScalarTypeDefinition'\n                ? 'ScalarTypeDefinition'\n                : 'ScalarTypeExtension',\n            loc: node.loc,\n            directives: (0,_directives_js__WEBPACK_IMPORTED_MODULE_0__.mergeDirectives)(node.directives, existingNode.directives, config, directives),\n        };\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.SCALAR_TYPE_DEFINITION,\n        }\n        : node;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL3NjYWxhci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBK0I7QUFDbUI7QUFDM0M7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3QiwrREFBZTtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHlDQUFJO0FBQ3RCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvZXNtL3R5cGVkZWZzLW1lcmdlcnMvc2NhbGFyLmpzPzkzN2MiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS2luZCB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHsgbWVyZ2VEaXJlY3RpdmVzIH0gZnJvbSAnLi9kaXJlY3RpdmVzLmpzJztcbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVNjYWxhcihub2RlLCBleGlzdGluZ05vZGUsIGNvbmZpZywgZGlyZWN0aXZlcykge1xuICAgIGlmIChleGlzdGluZ05vZGUpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIG5hbWU6IG5vZGUubmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBub2RlWydkZXNjcmlwdGlvbiddIHx8IGV4aXN0aW5nTm9kZVsnZGVzY3JpcHRpb24nXSxcbiAgICAgICAgICAgIGtpbmQ6IChjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuY29udmVydEV4dGVuc2lvbnMpIHx8XG4gICAgICAgICAgICAgICAgbm9kZS5raW5kID09PSAnU2NhbGFyVHlwZURlZmluaXRpb24nIHx8XG4gICAgICAgICAgICAgICAgZXhpc3RpbmdOb2RlLmtpbmQgPT09ICdTY2FsYXJUeXBlRGVmaW5pdGlvbidcbiAgICAgICAgICAgICAgICA/ICdTY2FsYXJUeXBlRGVmaW5pdGlvbidcbiAgICAgICAgICAgICAgICA6ICdTY2FsYXJUeXBlRXh0ZW5zaW9uJyxcbiAgICAgICAgICAgIGxvYzogbm9kZS5sb2MsXG4gICAgICAgICAgICBkaXJlY3RpdmVzOiBtZXJnZURpcmVjdGl2ZXMobm9kZS5kaXJlY3RpdmVzLCBleGlzdGluZ05vZGUuZGlyZWN0aXZlcywgY29uZmlnLCBkaXJlY3RpdmVzKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIChjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuY29udmVydEV4dGVuc2lvbnMpXG4gICAgICAgID8ge1xuICAgICAgICAgICAgLi4ubm9kZSxcbiAgICAgICAgICAgIGtpbmQ6IEtpbmQuU0NBTEFSX1RZUEVfREVGSU5JVElPTixcbiAgICAgICAgfVxuICAgICAgICA6IG5vZGU7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/scalar.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/schema-def.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/schema-def.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DEFAULT_OPERATION_TYPE_NAME_MAP: () => (/* binding */ DEFAULT_OPERATION_TYPE_NAME_MAP),\n/* harmony export */   mergeSchemaDefs: () => (/* binding */ mergeSchemaDefs)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _directives_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js\");\n\n\nconst DEFAULT_OPERATION_TYPE_NAME_MAP = {\n    query: 'Query',\n    mutation: 'Mutation',\n    subscription: 'Subscription',\n};\nfunction mergeOperationTypes(opNodeList = [], existingOpNodeList = []) {\n    const finalOpNodeList = [];\n    for (const opNodeType in DEFAULT_OPERATION_TYPE_NAME_MAP) {\n        const opNode = opNodeList.find(n => n.operation === opNodeType) || existingOpNodeList.find(n => n.operation === opNodeType);\n        if (opNode) {\n            finalOpNodeList.push(opNode);\n        }\n    }\n    return finalOpNodeList;\n}\nfunction mergeSchemaDefs(node, existingNode, config, directives) {\n    if (existingNode) {\n        return {\n            kind: node.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.SCHEMA_DEFINITION || existingNode.kind === graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.SCHEMA_DEFINITION\n                ? graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.SCHEMA_DEFINITION\n                : graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.SCHEMA_EXTENSION,\n            description: node['description'] || existingNode['description'],\n            directives: (0,_directives_js__WEBPACK_IMPORTED_MODULE_1__.mergeDirectives)(node.directives, existingNode.directives, config, directives),\n            operationTypes: mergeOperationTypes(node.operationTypes, existingNode.operationTypes),\n        };\n    }\n    return ((config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: graphql__WEBPACK_IMPORTED_MODULE_0__.Kind.SCHEMA_DEFINITION,\n        }\n        : node);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL3NjaGVtYS1kZWYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFnQztBQUNrQjtBQUMzQztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDTztBQUNQO0FBQ0E7QUFDQSxnQ0FBZ0MseUNBQUksNENBQTRDLHlDQUFJO0FBQ3BGLGtCQUFrQix5Q0FBSTtBQUN0QixrQkFBa0IseUNBQUk7QUFDdEI7QUFDQSx3QkFBd0IsK0RBQWU7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHlDQUFJO0FBQ3RCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvZXNtL3R5cGVkZWZzLW1lcmdlcnMvc2NoZW1hLWRlZi5qcz9hMGI2Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtpbmQsIH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyBtZXJnZURpcmVjdGl2ZXMgfSBmcm9tICcuL2RpcmVjdGl2ZXMuanMnO1xuZXhwb3J0IGNvbnN0IERFRkFVTFRfT1BFUkFUSU9OX1RZUEVfTkFNRV9NQVAgPSB7XG4gICAgcXVlcnk6ICdRdWVyeScsXG4gICAgbXV0YXRpb246ICdNdXRhdGlvbicsXG4gICAgc3Vic2NyaXB0aW9uOiAnU3Vic2NyaXB0aW9uJyxcbn07XG5mdW5jdGlvbiBtZXJnZU9wZXJhdGlvblR5cGVzKG9wTm9kZUxpc3QgPSBbXSwgZXhpc3RpbmdPcE5vZGVMaXN0ID0gW10pIHtcbiAgICBjb25zdCBmaW5hbE9wTm9kZUxpc3QgPSBbXTtcbiAgICBmb3IgKGNvbnN0IG9wTm9kZVR5cGUgaW4gREVGQVVMVF9PUEVSQVRJT05fVFlQRV9OQU1FX01BUCkge1xuICAgICAgICBjb25zdCBvcE5vZGUgPSBvcE5vZGVMaXN0LmZpbmQobiA9PiBuLm9wZXJhdGlvbiA9PT0gb3BOb2RlVHlwZSkgfHwgZXhpc3RpbmdPcE5vZGVMaXN0LmZpbmQobiA9PiBuLm9wZXJhdGlvbiA9PT0gb3BOb2RlVHlwZSk7XG4gICAgICAgIGlmIChvcE5vZGUpIHtcbiAgICAgICAgICAgIGZpbmFsT3BOb2RlTGlzdC5wdXNoKG9wTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZpbmFsT3BOb2RlTGlzdDtcbn1cbmV4cG9ydCBmdW5jdGlvbiBtZXJnZVNjaGVtYURlZnMobm9kZSwgZXhpc3RpbmdOb2RlLCBjb25maWcsIGRpcmVjdGl2ZXMpIHtcbiAgICBpZiAoZXhpc3RpbmdOb2RlKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBraW5kOiBub2RlLmtpbmQgPT09IEtpbmQuU0NIRU1BX0RFRklOSVRJT04gfHwgZXhpc3RpbmdOb2RlLmtpbmQgPT09IEtpbmQuU0NIRU1BX0RFRklOSVRJT05cbiAgICAgICAgICAgICAgICA/IEtpbmQuU0NIRU1BX0RFRklOSVRJT05cbiAgICAgICAgICAgICAgICA6IEtpbmQuU0NIRU1BX0VYVEVOU0lPTixcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBub2RlWydkZXNjcmlwdGlvbiddIHx8IGV4aXN0aW5nTm9kZVsnZGVzY3JpcHRpb24nXSxcbiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IG1lcmdlRGlyZWN0aXZlcyhub2RlLmRpcmVjdGl2ZXMsIGV4aXN0aW5nTm9kZS5kaXJlY3RpdmVzLCBjb25maWcsIGRpcmVjdGl2ZXMpLFxuICAgICAgICAgICAgb3BlcmF0aW9uVHlwZXM6IG1lcmdlT3BlcmF0aW9uVHlwZXMobm9kZS5vcGVyYXRpb25UeXBlcywgZXhpc3RpbmdOb2RlLm9wZXJhdGlvblR5cGVzKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuICgoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmNvbnZlcnRFeHRlbnNpb25zKVxuICAgICAgICA/IHtcbiAgICAgICAgICAgIC4uLm5vZGUsXG4gICAgICAgICAgICBraW5kOiBLaW5kLlNDSEVNQV9ERUZJTklUSU9OLFxuICAgICAgICB9XG4gICAgICAgIDogbm9kZSk7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/schema-def.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/type.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/type.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeType: () => (/* binding */ mergeType)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _fields_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./fields.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/fields.js\");\n/* harmony import */ var _directives_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js\");\n/* harmony import */ var _merge_named_type_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./merge-named-type-array.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-named-type-array.js\");\n\n\n\n\nfunction mergeType(node, existingNode, config, directives) {\n    if (existingNode) {\n        try {\n            return {\n                name: node.name,\n                description: node['description'] || existingNode['description'],\n                kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) ||\n                    node.kind === 'ObjectTypeDefinition' ||\n                    existingNode.kind === 'ObjectTypeDefinition'\n                    ? 'ObjectTypeDefinition'\n                    : 'ObjectTypeExtension',\n                loc: node.loc,\n                fields: (0,_fields_js__WEBPACK_IMPORTED_MODULE_0__.mergeFields)(node, node.fields, existingNode.fields, config),\n                directives: (0,_directives_js__WEBPACK_IMPORTED_MODULE_1__.mergeDirectives)(node.directives, existingNode.directives, config, directives),\n                interfaces: (0,_merge_named_type_array_js__WEBPACK_IMPORTED_MODULE_2__.mergeNamedTypeArray)(node.interfaces, existingNode.interfaces, config),\n            };\n        }\n        catch (e) {\n            throw new Error(`Unable to merge GraphQL type \"${node.name.value}\": ${e.message}`);\n        }\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...node,\n            kind: graphql__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT_TYPE_DEFINITION,\n        }\n        : node;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL3R5cGUuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBK0I7QUFDVztBQUNRO0FBQ2dCO0FBQzNEO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHdCQUF3Qix1REFBVztBQUNuQyw0QkFBNEIsK0RBQWU7QUFDM0MsNEJBQTRCLCtFQUFtQjtBQUMvQztBQUNBO0FBQ0E7QUFDQSw2REFBNkQsZ0JBQWdCLEtBQUssVUFBVTtBQUM1RjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHlDQUFJO0FBQ3RCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvZXNtL3R5cGVkZWZzLW1lcmdlcnMvdHlwZS5qcz80OGE1Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEtpbmQgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IG1lcmdlRmllbGRzIH0gZnJvbSAnLi9maWVsZHMuanMnO1xuaW1wb3J0IHsgbWVyZ2VEaXJlY3RpdmVzIH0gZnJvbSAnLi9kaXJlY3RpdmVzLmpzJztcbmltcG9ydCB7IG1lcmdlTmFtZWRUeXBlQXJyYXkgfSBmcm9tICcuL21lcmdlLW5hbWVkLXR5cGUtYXJyYXkuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlVHlwZShub2RlLCBleGlzdGluZ05vZGUsIGNvbmZpZywgZGlyZWN0aXZlcykge1xuICAgIGlmIChleGlzdGluZ05vZGUpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgbmFtZTogbm9kZS5uYW1lLFxuICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBub2RlWydkZXNjcmlwdGlvbiddIHx8IGV4aXN0aW5nTm9kZVsnZGVzY3JpcHRpb24nXSxcbiAgICAgICAgICAgICAgICBraW5kOiAoY29uZmlnID09PSBudWxsIHx8IGNvbmZpZyA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29uZmlnLmNvbnZlcnRFeHRlbnNpb25zKSB8fFxuICAgICAgICAgICAgICAgICAgICBub2RlLmtpbmQgPT09ICdPYmplY3RUeXBlRGVmaW5pdGlvbicgfHxcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdOb2RlLmtpbmQgPT09ICdPYmplY3RUeXBlRGVmaW5pdGlvbidcbiAgICAgICAgICAgICAgICAgICAgPyAnT2JqZWN0VHlwZURlZmluaXRpb24nXG4gICAgICAgICAgICAgICAgICAgIDogJ09iamVjdFR5cGVFeHRlbnNpb24nLFxuICAgICAgICAgICAgICAgIGxvYzogbm9kZS5sb2MsXG4gICAgICAgICAgICAgICAgZmllbGRzOiBtZXJnZUZpZWxkcyhub2RlLCBub2RlLmZpZWxkcywgZXhpc3RpbmdOb2RlLmZpZWxkcywgY29uZmlnKSxcbiAgICAgICAgICAgICAgICBkaXJlY3RpdmVzOiBtZXJnZURpcmVjdGl2ZXMobm9kZS5kaXJlY3RpdmVzLCBleGlzdGluZ05vZGUuZGlyZWN0aXZlcywgY29uZmlnLCBkaXJlY3RpdmVzKSxcbiAgICAgICAgICAgICAgICBpbnRlcmZhY2VzOiBtZXJnZU5hbWVkVHlwZUFycmF5KG5vZGUuaW50ZXJmYWNlcywgZXhpc3RpbmdOb2RlLmludGVyZmFjZXMsIGNvbmZpZyksXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuYWJsZSB0byBtZXJnZSBHcmFwaFFMIHR5cGUgXCIke25vZGUubmFtZS52YWx1ZX1cIjogJHtlLm1lc3NhZ2V9YCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIChjb25maWcgPT09IG51bGwgfHwgY29uZmlnID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjb25maWcuY29udmVydEV4dGVuc2lvbnMpXG4gICAgICAgID8ge1xuICAgICAgICAgICAgLi4ubm9kZSxcbiAgICAgICAgICAgIGtpbmQ6IEtpbmQuT0JKRUNUX1RZUEVfREVGSU5JVElPTixcbiAgICAgICAgfVxuICAgICAgICA6IG5vZGU7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/type.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/union.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/union.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   mergeUnion: () => (/* binding */ mergeUnion)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _directives_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./directives.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/directives.js\");\n/* harmony import */ var _merge_named_type_array_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./merge-named-type-array.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-named-type-array.js\");\n\n\n\nfunction mergeUnion(first, second, config, directives) {\n    if (second) {\n        return {\n            name: first.name,\n            description: first['description'] || second['description'],\n            // ConstXNode has been introduced in v16 but it is not compatible with XNode so we do `as any` for backwards compatibility\n            directives: (0,_directives_js__WEBPACK_IMPORTED_MODULE_0__.mergeDirectives)(first.directives, second.directives, config, directives),\n            kind: (config === null || config === void 0 ? void 0 : config.convertExtensions) || first.kind === 'UnionTypeDefinition' || second.kind === 'UnionTypeDefinition'\n                ? graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.UNION_TYPE_DEFINITION\n                : graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.UNION_TYPE_EXTENSION,\n            loc: first.loc,\n            types: (0,_merge_named_type_array_js__WEBPACK_IMPORTED_MODULE_2__.mergeNamedTypeArray)(first.types, second.types, config),\n        };\n    }\n    return (config === null || config === void 0 ? void 0 : config.convertExtensions)\n        ? {\n            ...first,\n            kind: graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.UNION_TYPE_DEFINITION,\n        }\n        : first;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL3VuaW9uLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7QUFBK0I7QUFDbUI7QUFDZ0I7QUFDM0Q7QUFDUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLCtEQUFlO0FBQ3ZDO0FBQ0Esa0JBQWtCLHlDQUFJO0FBQ3RCLGtCQUFrQix5Q0FBSTtBQUN0QjtBQUNBLG1CQUFtQiwrRUFBbUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQix5Q0FBSTtBQUN0QjtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL3VuaW9uLmpzPzExZTIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgS2luZCB9IGZyb20gJ2dyYXBocWwnO1xuaW1wb3J0IHsgbWVyZ2VEaXJlY3RpdmVzIH0gZnJvbSAnLi9kaXJlY3RpdmVzLmpzJztcbmltcG9ydCB7IG1lcmdlTmFtZWRUeXBlQXJyYXkgfSBmcm9tICcuL21lcmdlLW5hbWVkLXR5cGUtYXJyYXkuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIG1lcmdlVW5pb24oZmlyc3QsIHNlY29uZCwgY29uZmlnLCBkaXJlY3RpdmVzKSB7XG4gICAgaWYgKHNlY29uZCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbmFtZTogZmlyc3QubmFtZSxcbiAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBmaXJzdFsnZGVzY3JpcHRpb24nXSB8fCBzZWNvbmRbJ2Rlc2NyaXB0aW9uJ10sXG4gICAgICAgICAgICAvLyBDb25zdFhOb2RlIGhhcyBiZWVuIGludHJvZHVjZWQgaW4gdjE2IGJ1dCBpdCBpcyBub3QgY29tcGF0aWJsZSB3aXRoIFhOb2RlIHNvIHdlIGRvIGBhcyBhbnlgIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuICAgICAgICAgICAgZGlyZWN0aXZlczogbWVyZ2VEaXJlY3RpdmVzKGZpcnN0LmRpcmVjdGl2ZXMsIHNlY29uZC5kaXJlY3RpdmVzLCBjb25maWcsIGRpcmVjdGl2ZXMpLFxuICAgICAgICAgICAga2luZDogKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5jb252ZXJ0RXh0ZW5zaW9ucykgfHwgZmlyc3Qua2luZCA9PT0gJ1VuaW9uVHlwZURlZmluaXRpb24nIHx8IHNlY29uZC5raW5kID09PSAnVW5pb25UeXBlRGVmaW5pdGlvbidcbiAgICAgICAgICAgICAgICA/IEtpbmQuVU5JT05fVFlQRV9ERUZJTklUSU9OXG4gICAgICAgICAgICAgICAgOiBLaW5kLlVOSU9OX1RZUEVfRVhURU5TSU9OLFxuICAgICAgICAgICAgbG9jOiBmaXJzdC5sb2MsXG4gICAgICAgICAgICB0eXBlczogbWVyZ2VOYW1lZFR5cGVBcnJheShmaXJzdC50eXBlcywgc2Vjb25kLnR5cGVzLCBjb25maWcpLFxuICAgICAgICB9O1xuICAgIH1cbiAgICByZXR1cm4gKGNvbmZpZyA9PT0gbnVsbCB8fCBjb25maWcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGNvbmZpZy5jb252ZXJ0RXh0ZW5zaW9ucylcbiAgICAgICAgPyB7XG4gICAgICAgICAgICAuLi5maXJzdCxcbiAgICAgICAgICAgIGtpbmQ6IEtpbmQuVU5JT05fVFlQRV9ERUZJTklUSU9OLFxuICAgICAgICB9XG4gICAgICAgIDogZmlyc3Q7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/union.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/utils.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/utils.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CompareVal: () => (/* binding */ CompareVal),\n/* harmony export */   defaultStringComparator: () => (/* binding */ defaultStringComparator),\n/* harmony export */   extractType: () => (/* binding */ extractType),\n/* harmony export */   isListTypeNode: () => (/* binding */ isListTypeNode),\n/* harmony export */   isNonNullTypeNode: () => (/* binding */ isNonNullTypeNode),\n/* harmony export */   isSourceTypes: () => (/* binding */ isSourceTypes),\n/* harmony export */   isStringTypes: () => (/* binding */ isStringTypes),\n/* harmony export */   isWrappingTypeNode: () => (/* binding */ isWrappingTypeNode),\n/* harmony export */   printTypeNode: () => (/* binding */ printTypeNode)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/source.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/language/kinds.mjs\");\n\nfunction isStringTypes(types) {\n    return typeof types === 'string';\n}\nfunction isSourceTypes(types) {\n    return types instanceof graphql__WEBPACK_IMPORTED_MODULE_0__.Source;\n}\nfunction extractType(type) {\n    let visitedType = type;\n    while (visitedType.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.LIST_TYPE || visitedType.kind === 'NonNullType') {\n        visitedType = visitedType.type;\n    }\n    return visitedType;\n}\nfunction isWrappingTypeNode(type) {\n    return type.kind !== graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NAMED_TYPE;\n}\nfunction isListTypeNode(type) {\n    return type.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.LIST_TYPE;\n}\nfunction isNonNullTypeNode(type) {\n    return type.kind === graphql__WEBPACK_IMPORTED_MODULE_1__.Kind.NON_NULL_TYPE;\n}\nfunction printTypeNode(type) {\n    if (isListTypeNode(type)) {\n        return `[${printTypeNode(type.type)}]`;\n    }\n    if (isNonNullTypeNode(type)) {\n        return `${printTypeNode(type.type)}!`;\n    }\n    return type.name.value;\n}\nvar CompareVal;\n(function (CompareVal) {\n    CompareVal[CompareVal[\"A_SMALLER_THAN_B\"] = -1] = \"A_SMALLER_THAN_B\";\n    CompareVal[CompareVal[\"A_EQUALS_B\"] = 0] = \"A_EQUALS_B\";\n    CompareVal[CompareVal[\"A_GREATER_THAN_B\"] = 1] = \"A_GREATER_THAN_B\";\n})(CompareVal || (CompareVal = {}));\nfunction defaultStringComparator(a, b) {\n    if (a == null && b == null) {\n        return CompareVal.A_EQUALS_B;\n    }\n    if (a == null) {\n        return CompareVal.A_SMALLER_THAN_B;\n    }\n    if (b == null) {\n        return CompareVal.A_GREATER_THAN_B;\n    }\n    if (a < b)\n        return CompareVal.A_SMALLER_THAN_B;\n    if (a > b)\n        return CompareVal.A_GREATER_THAN_B;\n    return CompareVal.A_EQUALS_B;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL21lcmdlL2VzbS90eXBlZGVmcy1tZXJnZXJzL3V0aWxzLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQXVDO0FBQ2hDO0FBQ1A7QUFDQTtBQUNPO0FBQ1AsNEJBQTRCLDJDQUFNO0FBQ2xDO0FBQ087QUFDUDtBQUNBLGdDQUFnQyx5Q0FBSTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNPO0FBQ1AseUJBQXlCLHlDQUFJO0FBQzdCO0FBQ087QUFDUCx5QkFBeUIseUNBQUk7QUFDN0I7QUFDTztBQUNQLHlCQUF5Qix5Q0FBSTtBQUM3QjtBQUNPO0FBQ1A7QUFDQSxtQkFBbUIseUJBQXlCO0FBQzVDO0FBQ0E7QUFDQSxrQkFBa0IseUJBQXlCO0FBQzNDO0FBQ0E7QUFDQTtBQUNPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDLGdDQUFnQztBQUMxQjtBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvbWVyZ2UvZXNtL3R5cGVkZWZzLW1lcmdlcnMvdXRpbHMuanM/YzVhMCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBTb3VyY2UsIEtpbmQgfSBmcm9tICdncmFwaHFsJztcbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZ1R5cGVzKHR5cGVzKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0eXBlcyA9PT0gJ3N0cmluZyc7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNTb3VyY2VUeXBlcyh0eXBlcykge1xuICAgIHJldHVybiB0eXBlcyBpbnN0YW5jZW9mIFNvdXJjZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBleHRyYWN0VHlwZSh0eXBlKSB7XG4gICAgbGV0IHZpc2l0ZWRUeXBlID0gdHlwZTtcbiAgICB3aGlsZSAodmlzaXRlZFR5cGUua2luZCA9PT0gS2luZC5MSVNUX1RZUEUgfHwgdmlzaXRlZFR5cGUua2luZCA9PT0gJ05vbk51bGxUeXBlJykge1xuICAgICAgICB2aXNpdGVkVHlwZSA9IHZpc2l0ZWRUeXBlLnR5cGU7XG4gICAgfVxuICAgIHJldHVybiB2aXNpdGVkVHlwZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc1dyYXBwaW5nVHlwZU5vZGUodHlwZSkge1xuICAgIHJldHVybiB0eXBlLmtpbmQgIT09IEtpbmQuTkFNRURfVFlQRTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBpc0xpc3RUeXBlTm9kZSh0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUua2luZCA9PT0gS2luZC5MSVNUX1RZUEU7XG59XG5leHBvcnQgZnVuY3Rpb24gaXNOb25OdWxsVHlwZU5vZGUodHlwZSkge1xuICAgIHJldHVybiB0eXBlLmtpbmQgPT09IEtpbmQuTk9OX05VTExfVFlQRTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwcmludFR5cGVOb2RlKHR5cGUpIHtcbiAgICBpZiAoaXNMaXN0VHlwZU5vZGUodHlwZSkpIHtcbiAgICAgICAgcmV0dXJuIGBbJHtwcmludFR5cGVOb2RlKHR5cGUudHlwZSl9XWA7XG4gICAgfVxuICAgIGlmIChpc05vbk51bGxUeXBlTm9kZSh0eXBlKSkge1xuICAgICAgICByZXR1cm4gYCR7cHJpbnRUeXBlTm9kZSh0eXBlLnR5cGUpfSFgO1xuICAgIH1cbiAgICByZXR1cm4gdHlwZS5uYW1lLnZhbHVlO1xufVxuZXhwb3J0IHZhciBDb21wYXJlVmFsO1xuKGZ1bmN0aW9uIChDb21wYXJlVmFsKSB7XG4gICAgQ29tcGFyZVZhbFtDb21wYXJlVmFsW1wiQV9TTUFMTEVSX1RIQU5fQlwiXSA9IC0xXSA9IFwiQV9TTUFMTEVSX1RIQU5fQlwiO1xuICAgIENvbXBhcmVWYWxbQ29tcGFyZVZhbFtcIkFfRVFVQUxTX0JcIl0gPSAwXSA9IFwiQV9FUVVBTFNfQlwiO1xuICAgIENvbXBhcmVWYWxbQ29tcGFyZVZhbFtcIkFfR1JFQVRFUl9USEFOX0JcIl0gPSAxXSA9IFwiQV9HUkVBVEVSX1RIQU5fQlwiO1xufSkoQ29tcGFyZVZhbCB8fCAoQ29tcGFyZVZhbCA9IHt9KSk7XG5leHBvcnQgZnVuY3Rpb24gZGVmYXVsdFN0cmluZ0NvbXBhcmF0b3IoYSwgYikge1xuICAgIGlmIChhID09IG51bGwgJiYgYiA9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBDb21wYXJlVmFsLkFfRVFVQUxTX0I7XG4gICAgfVxuICAgIGlmIChhID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIENvbXBhcmVWYWwuQV9TTUFMTEVSX1RIQU5fQjtcbiAgICB9XG4gICAgaWYgKGIgPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gQ29tcGFyZVZhbC5BX0dSRUFURVJfVEhBTl9CO1xuICAgIH1cbiAgICBpZiAoYSA8IGIpXG4gICAgICAgIHJldHVybiBDb21wYXJlVmFsLkFfU01BTExFUl9USEFOX0I7XG4gICAgaWYgKGEgPiBiKVxuICAgICAgICByZXR1cm4gQ29tcGFyZVZhbC5BX0dSRUFURVJfVEhBTl9CO1xuICAgIHJldHVybiBDb21wYXJlVmFsLkFfRVFVQUxTX0I7XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/utils.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/addResolversToSchema.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/addResolversToSchema.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addResolversToSchema: () => (/* binding */ addResolversToSchema)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/type/scalars.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/type/definition.mjs\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/forEachDefaultValue.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/transformInputValue.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/heal.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/forEachField.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/mapSchema.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/Interfaces.js\");\n/* harmony import */ var _checkForResolveTypeResolver_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./checkForResolveTypeResolver.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/checkForResolveTypeResolver.js\");\n/* harmony import */ var _extendResolversFromInterfaces_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./extendResolversFromInterfaces.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/extendResolversFromInterfaces.js\");\n\n\n\n\nfunction addResolversToSchema({ schema, resolvers: inputResolvers, defaultFieldResolver, resolverValidationOptions = {}, inheritResolversFromInterfaces = false, updateResolversInPlace = false, }) {\n    const { requireResolversToMatchSchema = 'error', requireResolversForResolveType } = resolverValidationOptions;\n    const resolvers = inheritResolversFromInterfaces\n        ? (0,_extendResolversFromInterfaces_js__WEBPACK_IMPORTED_MODULE_0__.extendResolversFromInterfaces)(schema, inputResolvers)\n        : inputResolvers;\n    for (const typeName in resolvers) {\n        const resolverValue = resolvers[typeName];\n        const resolverType = typeof resolverValue;\n        if (resolverType !== 'object') {\n            throw new Error(`\"${typeName}\" defined in resolvers, but has invalid value \"${resolverValue}\". The resolver's value must be of type object.`);\n        }\n        const type = schema.getType(typeName);\n        if (type == null) {\n            if (requireResolversToMatchSchema === 'ignore') {\n                continue;\n            }\n            throw new Error(`\"${typeName}\" defined in resolvers, but not in schema`);\n        }\n        else if ((0,graphql__WEBPACK_IMPORTED_MODULE_1__.isSpecifiedScalarType)(type)) {\n            // allow -- without recommending -- overriding of specified scalar types\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n                else {\n                    type[fieldName] = resolverValue[fieldName];\n                }\n            }\n        }\n        else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isEnumType)(type)) {\n            const values = type.getValues();\n            for (const fieldName in resolverValue) {\n                if (!fieldName.startsWith('__') &&\n                    !values.some(value => value.name === fieldName) &&\n                    requireResolversToMatchSchema &&\n                    requireResolversToMatchSchema !== 'ignore') {\n                    throw new Error(`${type.name}.${fieldName} was defined in resolvers, but not present within ${type.name}`);\n                }\n            }\n        }\n        else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isUnionType)(type)) {\n            for (const fieldName in resolverValue) {\n                if (!fieldName.startsWith('__') &&\n                    requireResolversToMatchSchema &&\n                    requireResolversToMatchSchema !== 'ignore') {\n                    throw new Error(`${type.name}.${fieldName} was defined in resolvers, but ${type.name} is not an object or interface type`);\n                }\n            }\n        }\n        else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isObjectType)(type) || (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInterfaceType)(type)) {\n            for (const fieldName in resolverValue) {\n                if (!fieldName.startsWith('__')) {\n                    const fields = type.getFields();\n                    const field = fields[fieldName];\n                    if (field == null) {\n                        // Field present in resolver but not in schema\n                        if (requireResolversToMatchSchema && requireResolversToMatchSchema !== 'ignore') {\n                            throw new Error(`${typeName}.${fieldName} defined in resolvers, but not in schema`);\n                        }\n                    }\n                    else {\n                        // Field present in both the resolver and schema\n                        const fieldResolve = resolverValue[fieldName];\n                        if (typeof fieldResolve !== 'function' && typeof fieldResolve !== 'object') {\n                            throw new Error(`Resolver ${typeName}.${fieldName} must be object or function`);\n                        }\n                    }\n                }\n            }\n        }\n    }\n    schema = updateResolversInPlace\n        ? addResolversToExistingSchema(schema, resolvers, defaultFieldResolver)\n        : createNewSchemaWithResolvers(schema, resolvers, defaultFieldResolver);\n    if (requireResolversForResolveType && requireResolversForResolveType !== 'ignore') {\n        (0,_checkForResolveTypeResolver_js__WEBPACK_IMPORTED_MODULE_3__.checkForResolveTypeResolver)(schema, requireResolversForResolveType);\n    }\n    return schema;\n}\nfunction addResolversToExistingSchema(schema, resolvers, defaultFieldResolver) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    const typeMap = schema.getTypeMap();\n    for (const typeName in resolvers) {\n        const type = schema.getType(typeName);\n        const resolverValue = resolvers[typeName];\n        if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isScalarType)(type)) {\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n                else if (fieldName === 'astNode' && type.astNode != null) {\n                    type.astNode = {\n                        ...type.astNode,\n                        description: (_b = (_a = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : type.astNode.description,\n                        directives: ((_c = type.astNode.directives) !== null && _c !== void 0 ? _c : []).concat((_e = (_d = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d === void 0 ? void 0 : _d.directives) !== null && _e !== void 0 ? _e : []),\n                    };\n                }\n                else if (fieldName === 'extensionASTNodes' && type.extensionASTNodes != null) {\n                    type.extensionASTNodes = type.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);\n                }\n                else if (fieldName === 'extensions' &&\n                    type.extensions != null &&\n                    resolverValue.extensions != null) {\n                    type.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                }\n                else {\n                    type[fieldName] = resolverValue[fieldName];\n                }\n            }\n        }\n        else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isEnumType)(type)) {\n            const config = type.toConfig();\n            const enumValueConfigMap = config.values;\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    config[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n                else if (fieldName === 'astNode' && config.astNode != null) {\n                    config.astNode = {\n                        ...config.astNode,\n                        description: (_h = (_g = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _g === void 0 ? void 0 : _g.description) !== null && _h !== void 0 ? _h : config.astNode.description,\n                        directives: ((_j = config.astNode.directives) !== null && _j !== void 0 ? _j : []).concat((_l = (_k = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _k === void 0 ? void 0 : _k.directives) !== null && _l !== void 0 ? _l : []),\n                    };\n                }\n                else if (fieldName === 'extensionASTNodes' && config.extensionASTNodes != null) {\n                    config.extensionASTNodes = config.extensionASTNodes.concat((_m = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _m !== void 0 ? _m : []);\n                }\n                else if (fieldName === 'extensions' &&\n                    type.extensions != null &&\n                    resolverValue.extensions != null) {\n                    type.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                }\n                else if (enumValueConfigMap[fieldName]) {\n                    enumValueConfigMap[fieldName].value = resolverValue[fieldName];\n                }\n            }\n            typeMap[typeName] = new graphql__WEBPACK_IMPORTED_MODULE_2__.GraphQLEnumType(config);\n        }\n        else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isUnionType)(type)) {\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                }\n            }\n        }\n        else if ((0,graphql__WEBPACK_IMPORTED_MODULE_2__.isObjectType)(type) || (0,graphql__WEBPACK_IMPORTED_MODULE_2__.isInterfaceType)(type)) {\n            for (const fieldName in resolverValue) {\n                if (fieldName.startsWith('__')) {\n                    // this is for isTypeOf and resolveType and all the other stuff.\n                    type[fieldName.substring(2)] = resolverValue[fieldName];\n                    continue;\n                }\n                const fields = type.getFields();\n                const field = fields[fieldName];\n                if (field != null) {\n                    const fieldResolve = resolverValue[fieldName];\n                    if (typeof fieldResolve === 'function') {\n                        // for convenience. Allows shorter syntax in resolver definition file\n                        field.resolve = fieldResolve.bind(resolverValue);\n                    }\n                    else {\n                        setFieldProperties(field, fieldResolve);\n                    }\n                }\n            }\n        }\n    }\n    // serialize all default values prior to healing fields with new scalar/enum types.\n    (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_4__.forEachDefaultValue)(schema, _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_5__.serializeInputValue);\n    // schema may have new scalar/enum types that require healing\n    (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_6__.healSchema)(schema);\n    // reparse all default values with new parsing functions.\n    (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_4__.forEachDefaultValue)(schema, _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_5__.parseInputValue);\n    if (defaultFieldResolver != null) {\n        (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_7__.forEachField)(schema, field => {\n            if (!field.resolve) {\n                field.resolve = defaultFieldResolver;\n            }\n        });\n    }\n    return schema;\n}\nfunction createNewSchemaWithResolvers(schema, resolvers, defaultFieldResolver) {\n    schema = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_8__.mapSchema)(schema, {\n        [_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.MapperKind.SCALAR_TYPE]: type => {\n            var _a, _b, _c, _d, _e, _f;\n            const config = type.toConfig();\n            const resolverValue = resolvers[type.name];\n            if (!(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isSpecifiedScalarType)(type) && resolverValue != null) {\n                for (const fieldName in resolverValue) {\n                    if (fieldName.startsWith('__')) {\n                        config[fieldName.substring(2)] = resolverValue[fieldName];\n                    }\n                    else if (fieldName === 'astNode' && config.astNode != null) {\n                        config.astNode = {\n                            ...config.astNode,\n                            description: (_b = (_a = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : config.astNode.description,\n                            directives: ((_c = config.astNode.directives) !== null && _c !== void 0 ? _c : []).concat((_e = (_d = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d === void 0 ? void 0 : _d.directives) !== null && _e !== void 0 ? _e : []),\n                        };\n                    }\n                    else if (fieldName === 'extensionASTNodes' && config.extensionASTNodes != null) {\n                        config.extensionASTNodes = config.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);\n                    }\n                    else if (fieldName === 'extensions' &&\n                        config.extensions != null &&\n                        resolverValue.extensions != null) {\n                        config.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                    }\n                    else {\n                        config[fieldName] = resolverValue[fieldName];\n                    }\n                }\n                return new graphql__WEBPACK_IMPORTED_MODULE_2__.GraphQLScalarType(config);\n            }\n        },\n        [_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.MapperKind.ENUM_TYPE]: type => {\n            var _a, _b, _c, _d, _e, _f;\n            const resolverValue = resolvers[type.name];\n            const config = type.toConfig();\n            const enumValueConfigMap = config.values;\n            if (resolverValue != null) {\n                for (const fieldName in resolverValue) {\n                    if (fieldName.startsWith('__')) {\n                        config[fieldName.substring(2)] = resolverValue[fieldName];\n                    }\n                    else if (fieldName === 'astNode' && config.astNode != null) {\n                        config.astNode = {\n                            ...config.astNode,\n                            description: (_b = (_a = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _a === void 0 ? void 0 : _a.description) !== null && _b !== void 0 ? _b : config.astNode.description,\n                            directives: ((_c = config.astNode.directives) !== null && _c !== void 0 ? _c : []).concat((_e = (_d = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.astNode) === null || _d === void 0 ? void 0 : _d.directives) !== null && _e !== void 0 ? _e : []),\n                        };\n                    }\n                    else if (fieldName === 'extensionASTNodes' && config.extensionASTNodes != null) {\n                        config.extensionASTNodes = config.extensionASTNodes.concat((_f = resolverValue === null || resolverValue === void 0 ? void 0 : resolverValue.extensionASTNodes) !== null && _f !== void 0 ? _f : []);\n                    }\n                    else if (fieldName === 'extensions' &&\n                        config.extensions != null &&\n                        resolverValue.extensions != null) {\n                        config.extensions = Object.assign(Object.create(null), type.extensions, resolverValue.extensions);\n                    }\n                    else if (enumValueConfigMap[fieldName]) {\n                        enumValueConfigMap[fieldName].value = resolverValue[fieldName];\n                    }\n                }\n                return new graphql__WEBPACK_IMPORTED_MODULE_2__.GraphQLEnumType(config);\n            }\n        },\n        [_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.MapperKind.UNION_TYPE]: type => {\n            const resolverValue = resolvers[type.name];\n            if (resolverValue != null) {\n                const config = type.toConfig();\n                if (resolverValue['__resolveType']) {\n                    config.resolveType = resolverValue['__resolveType'];\n                }\n                return new graphql__WEBPACK_IMPORTED_MODULE_2__.GraphQLUnionType(config);\n            }\n        },\n        [_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.MapperKind.OBJECT_TYPE]: type => {\n            const resolverValue = resolvers[type.name];\n            if (resolverValue != null) {\n                const config = type.toConfig();\n                if (resolverValue['__isTypeOf']) {\n                    config.isTypeOf = resolverValue['__isTypeOf'];\n                }\n                return new graphql__WEBPACK_IMPORTED_MODULE_2__.GraphQLObjectType(config);\n            }\n        },\n        [_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.MapperKind.INTERFACE_TYPE]: type => {\n            const resolverValue = resolvers[type.name];\n            if (resolverValue != null) {\n                const config = type.toConfig();\n                if (resolverValue['__resolveType']) {\n                    config.resolveType = resolverValue['__resolveType'];\n                }\n                return new graphql__WEBPACK_IMPORTED_MODULE_2__.GraphQLInterfaceType(config);\n            }\n        },\n        [_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.MapperKind.COMPOSITE_FIELD]: (fieldConfig, fieldName, typeName) => {\n            const resolverValue = resolvers[typeName];\n            if (resolverValue != null) {\n                const fieldResolve = resolverValue[fieldName];\n                if (fieldResolve != null) {\n                    const newFieldConfig = { ...fieldConfig };\n                    if (typeof fieldResolve === 'function') {\n                        // for convenience. Allows shorter syntax in resolver definition file\n                        newFieldConfig.resolve = fieldResolve.bind(resolverValue);\n                    }\n                    else {\n                        setFieldProperties(newFieldConfig, fieldResolve);\n                    }\n                    return newFieldConfig;\n                }\n            }\n        },\n    });\n    if (defaultFieldResolver != null) {\n        schema = (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_8__.mapSchema)(schema, {\n            [_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_9__.MapperKind.OBJECT_FIELD]: fieldConfig => ({\n                ...fieldConfig,\n                resolve: fieldConfig.resolve != null ? fieldConfig.resolve : defaultFieldResolver,\n            }),\n        });\n    }\n    return schema;\n}\nfunction setFieldProperties(field, propertiesObj) {\n    for (const propertyName in propertiesObj) {\n        field[propertyName] = propertiesObj[propertyName];\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/addResolversToSchema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/assertResolversPresent.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/assertResolversPresent.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   assertResolversPresent: () => (/* binding */ assertResolversPresent)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/type/definition.mjs\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/forEachField.js\");\n\n\nfunction assertResolversPresent(schema, resolverValidationOptions = {}) {\n    const { requireResolversForArgs, requireResolversForNonScalar, requireResolversForAllFields } = resolverValidationOptions;\n    if (requireResolversForAllFields && (requireResolversForArgs || requireResolversForNonScalar)) {\n        throw new TypeError('requireResolversForAllFields takes precedence over the more specific assertions. ' +\n            'Please configure either requireResolversForAllFields or requireResolversForArgs / ' +\n            'requireResolversForNonScalar, but not a combination of them.');\n    }\n    (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.forEachField)(schema, (field, typeName, fieldName) => {\n        // requires a resolver for *every* field.\n        if (requireResolversForAllFields) {\n            expectResolver('requireResolversForAllFields', requireResolversForAllFields, field, typeName, fieldName);\n        }\n        // requires a resolver on every field that has arguments\n        if (requireResolversForArgs && field.args.length > 0) {\n            expectResolver('requireResolversForArgs', requireResolversForArgs, field, typeName, fieldName);\n        }\n        // requires a resolver on every field that returns a non-scalar type\n        if (requireResolversForNonScalar !== 'ignore' && !(0,graphql__WEBPACK_IMPORTED_MODULE_1__.isScalarType)((0,graphql__WEBPACK_IMPORTED_MODULE_1__.getNamedType)(field.type))) {\n            expectResolver('requireResolversForNonScalar', requireResolversForNonScalar, field, typeName, fieldName);\n        }\n    });\n}\nfunction expectResolver(validator, behavior, field, typeName, fieldName) {\n    if (!field.resolve) {\n        const message = `Resolver missing for \"${typeName}.${fieldName}\".\nTo disable this validator, use:\n  resolverValidationOptions: {\n    ${validator}: 'ignore'\n  }`;\n        if (behavior === 'error') {\n            throw new Error(message);\n        }\n        if (behavior === 'warn') {\n            console.warn(message);\n        }\n        return;\n    }\n    if (typeof field.resolve !== 'function') {\n        throw new Error(`Resolver \"${typeName}.${fieldName}\" must be a function`);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9lc20vYXNzZXJ0UmVzb2x2ZXJzUHJlc2VudC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBcUQ7QUFDRDtBQUM3QyxzRUFBc0U7QUFDN0UsWUFBWSxzRkFBc0Y7QUFDbEc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUksa0VBQVk7QUFDaEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMERBQTBELHFEQUFZLENBQUMscURBQVk7QUFDbkY7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxpREFBaUQsU0FBUyxHQUFHLFVBQVU7QUFDdkU7QUFDQTtBQUNBLE1BQU0sVUFBVTtBQUNoQixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDLFNBQVMsR0FBRyxVQUFVO0FBQzNEO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tYXRlcmlhbC11aS1uZXh0anMvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9lc20vYXNzZXJ0UmVzb2x2ZXJzUHJlc2VudC5qcz8wZTI4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGdldE5hbWVkVHlwZSwgaXNTY2FsYXJUeXBlIH0gZnJvbSAnZ3JhcGhxbCc7XG5pbXBvcnQgeyBmb3JFYWNoRmllbGQgfSBmcm9tICdAZ3JhcGhxbC10b29scy91dGlscyc7XG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0UmVzb2x2ZXJzUHJlc2VudChzY2hlbWEsIHJlc29sdmVyVmFsaWRhdGlvbk9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgcmVxdWlyZVJlc29sdmVyc0ZvckFyZ3MsIHJlcXVpcmVSZXNvbHZlcnNGb3JOb25TY2FsYXIsIHJlcXVpcmVSZXNvbHZlcnNGb3JBbGxGaWVsZHMgfSA9IHJlc29sdmVyVmFsaWRhdGlvbk9wdGlvbnM7XG4gICAgaWYgKHJlcXVpcmVSZXNvbHZlcnNGb3JBbGxGaWVsZHMgJiYgKHJlcXVpcmVSZXNvbHZlcnNGb3JBcmdzIHx8IHJlcXVpcmVSZXNvbHZlcnNGb3JOb25TY2FsYXIpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlcXVpcmVSZXNvbHZlcnNGb3JBbGxGaWVsZHMgdGFrZXMgcHJlY2VkZW5jZSBvdmVyIHRoZSBtb3JlIHNwZWNpZmljIGFzc2VydGlvbnMuICcgK1xuICAgICAgICAgICAgJ1BsZWFzZSBjb25maWd1cmUgZWl0aGVyIHJlcXVpcmVSZXNvbHZlcnNGb3JBbGxGaWVsZHMgb3IgcmVxdWlyZVJlc29sdmVyc0ZvckFyZ3MgLyAnICtcbiAgICAgICAgICAgICdyZXF1aXJlUmVzb2x2ZXJzRm9yTm9uU2NhbGFyLCBidXQgbm90IGEgY29tYmluYXRpb24gb2YgdGhlbS4nKTtcbiAgICB9XG4gICAgZm9yRWFjaEZpZWxkKHNjaGVtYSwgKGZpZWxkLCB0eXBlTmFtZSwgZmllbGROYW1lKSA9PiB7XG4gICAgICAgIC8vIHJlcXVpcmVzIGEgcmVzb2x2ZXIgZm9yICpldmVyeSogZmllbGQuXG4gICAgICAgIGlmIChyZXF1aXJlUmVzb2x2ZXJzRm9yQWxsRmllbGRzKSB7XG4gICAgICAgICAgICBleHBlY3RSZXNvbHZlcigncmVxdWlyZVJlc29sdmVyc0ZvckFsbEZpZWxkcycsIHJlcXVpcmVSZXNvbHZlcnNGb3JBbGxGaWVsZHMsIGZpZWxkLCB0eXBlTmFtZSwgZmllbGROYW1lKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZXF1aXJlcyBhIHJlc29sdmVyIG9uIGV2ZXJ5IGZpZWxkIHRoYXQgaGFzIGFyZ3VtZW50c1xuICAgICAgICBpZiAocmVxdWlyZVJlc29sdmVyc0ZvckFyZ3MgJiYgZmllbGQuYXJncy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBleHBlY3RSZXNvbHZlcigncmVxdWlyZVJlc29sdmVyc0ZvckFyZ3MnLCByZXF1aXJlUmVzb2x2ZXJzRm9yQXJncywgZmllbGQsIHR5cGVOYW1lLCBmaWVsZE5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlcXVpcmVzIGEgcmVzb2x2ZXIgb24gZXZlcnkgZmllbGQgdGhhdCByZXR1cm5zIGEgbm9uLXNjYWxhciB0eXBlXG4gICAgICAgIGlmIChyZXF1aXJlUmVzb2x2ZXJzRm9yTm9uU2NhbGFyICE9PSAnaWdub3JlJyAmJiAhaXNTY2FsYXJUeXBlKGdldE5hbWVkVHlwZShmaWVsZC50eXBlKSkpIHtcbiAgICAgICAgICAgIGV4cGVjdFJlc29sdmVyKCdyZXF1aXJlUmVzb2x2ZXJzRm9yTm9uU2NhbGFyJywgcmVxdWlyZVJlc29sdmVyc0Zvck5vblNjYWxhciwgZmllbGQsIHR5cGVOYW1lLCBmaWVsZE5hbWUpO1xuICAgICAgICB9XG4gICAgfSk7XG59XG5mdW5jdGlvbiBleHBlY3RSZXNvbHZlcih2YWxpZGF0b3IsIGJlaGF2aW9yLCBmaWVsZCwgdHlwZU5hbWUsIGZpZWxkTmFtZSkge1xuICAgIGlmICghZmllbGQucmVzb2x2ZSkge1xuICAgICAgICBjb25zdCBtZXNzYWdlID0gYFJlc29sdmVyIG1pc3NpbmcgZm9yIFwiJHt0eXBlTmFtZX0uJHtmaWVsZE5hbWV9XCIuXG5UbyBkaXNhYmxlIHRoaXMgdmFsaWRhdG9yLCB1c2U6XG4gIHJlc29sdmVyVmFsaWRhdGlvbk9wdGlvbnM6IHtcbiAgICAke3ZhbGlkYXRvcn06ICdpZ25vcmUnXG4gIH1gO1xuICAgICAgICBpZiAoYmVoYXZpb3IgPT09ICdlcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmVoYXZpb3IgPT09ICd3YXJuJykge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKG1lc3NhZ2UpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBmaWVsZC5yZXNvbHZlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgUmVzb2x2ZXIgXCIke3R5cGVOYW1lfS4ke2ZpZWxkTmFtZX1cIiBtdXN0IGJlIGEgZnVuY3Rpb25gKTtcbiAgICB9XG59XG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/assertResolversPresent.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/checkForResolveTypeResolver.js":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/checkForResolveTypeResolver.js ***!
  \***********************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkForResolveTypeResolver: () => (/* binding */ checkForResolveTypeResolver)\n/* harmony export */ });\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/mapSchema.js\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/Interfaces.js\");\n\n// If we have any union or interface types throw if no there is no resolveType resolver\nfunction checkForResolveTypeResolver(schema, requireResolversForResolveType) {\n    (0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_0__.mapSchema)(schema, {\n        [_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_1__.MapperKind.ABSTRACT_TYPE]: type => {\n            if (!type.resolveType) {\n                const message = `Type \"${type.name}\" is missing a \"__resolveType\" resolver. Pass 'ignore' into ` +\n                    '\"resolverValidationOptions.requireResolversForResolveType\" to disable this error.';\n                if (requireResolversForResolveType === 'error') {\n                    throw new Error(message);\n                }\n                if (requireResolversForResolveType === 'warn') {\n                    console.warn(message);\n                }\n            }\n            return undefined;\n        },\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9lc20vY2hlY2tGb3JSZXNvbHZlVHlwZVJlc29sdmVyLmpzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUE2RDtBQUM3RDtBQUNPO0FBQ1AsSUFBSSwrREFBUztBQUNiLFNBQVMsNERBQVU7QUFDbkI7QUFDQSx5Q0FBeUMsVUFBVTtBQUNuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1QsS0FBSztBQUNMIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9zY2hlbWEvZXNtL2NoZWNrRm9yUmVzb2x2ZVR5cGVSZXNvbHZlci5qcz8zZjJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE1hcHBlcktpbmQsIG1hcFNjaGVtYSB9IGZyb20gJ0BncmFwaHFsLXRvb2xzL3V0aWxzJztcbi8vIElmIHdlIGhhdmUgYW55IHVuaW9uIG9yIGludGVyZmFjZSB0eXBlcyB0aHJvdyBpZiBubyB0aGVyZSBpcyBubyByZXNvbHZlVHlwZSByZXNvbHZlclxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrRm9yUmVzb2x2ZVR5cGVSZXNvbHZlcihzY2hlbWEsIHJlcXVpcmVSZXNvbHZlcnNGb3JSZXNvbHZlVHlwZSkge1xuICAgIG1hcFNjaGVtYShzY2hlbWEsIHtcbiAgICAgICAgW01hcHBlcktpbmQuQUJTVFJBQ1RfVFlQRV06IHR5cGUgPT4ge1xuICAgICAgICAgICAgaWYgKCF0eXBlLnJlc29sdmVUeXBlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGBUeXBlIFwiJHt0eXBlLm5hbWV9XCIgaXMgbWlzc2luZyBhIFwiX19yZXNvbHZlVHlwZVwiIHJlc29sdmVyLiBQYXNzICdpZ25vcmUnIGludG8gYCArXG4gICAgICAgICAgICAgICAgICAgICdcInJlc29sdmVyVmFsaWRhdGlvbk9wdGlvbnMucmVxdWlyZVJlc29sdmVyc0ZvclJlc29sdmVUeXBlXCIgdG8gZGlzYWJsZSB0aGlzIGVycm9yLic7XG4gICAgICAgICAgICAgICAgaWYgKHJlcXVpcmVSZXNvbHZlcnNGb3JSZXNvbHZlVHlwZSA9PT0gJ2Vycm9yJykge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChyZXF1aXJlUmVzb2x2ZXJzRm9yUmVzb2x2ZVR5cGUgPT09ICd3YXJuJykge1xuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4obWVzc2FnZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfSxcbiAgICB9KTtcbn1cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/checkForResolveTypeResolver.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/extendResolversFromInterfaces.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/extendResolversFromInterfaces.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   extendResolversFromInterfaces: () => (/* binding */ extendResolversFromInterfaces)\n/* harmony export */ });\nfunction extendResolversFromInterfaces(schema, resolvers) {\n    const extendedResolvers = {};\n    const typeMap = schema.getTypeMap();\n    for (const typeName in typeMap) {\n        const type = typeMap[typeName];\n        if ('getInterfaces' in type) {\n            extendedResolvers[typeName] = {};\n            for (const iFace of type.getInterfaces()) {\n                if (resolvers[iFace.name]) {\n                    for (const fieldName in resolvers[iFace.name]) {\n                        if (fieldName === '__isTypeOf' || !fieldName.startsWith('__')) {\n                            extendedResolvers[typeName][fieldName] = resolvers[iFace.name][fieldName];\n                        }\n                    }\n                }\n            }\n            const typeResolvers = resolvers[typeName];\n            extendedResolvers[typeName] = {\n                ...extendedResolvers[typeName],\n                ...typeResolvers,\n            };\n        }\n        else {\n            const typeResolvers = resolvers[typeName];\n            if (typeResolvers != null) {\n                extendedResolvers[typeName] = typeResolvers;\n            }\n        }\n    }\n    return extendedResolvers;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9lc20vZXh0ZW5kUmVzb2x2ZXJzRnJvbUludGVyZmFjZXMuanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbWF0ZXJpYWwtdWktbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0BhcG9sbG8vc2VydmVyL25vZGVfbW9kdWxlcy9AZ3JhcGhxbC10b29scy9zY2hlbWEvZXNtL2V4dGVuZFJlc29sdmVyc0Zyb21JbnRlcmZhY2VzLmpzP2RkZTMiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGZ1bmN0aW9uIGV4dGVuZFJlc29sdmVyc0Zyb21JbnRlcmZhY2VzKHNjaGVtYSwgcmVzb2x2ZXJzKSB7XG4gICAgY29uc3QgZXh0ZW5kZWRSZXNvbHZlcnMgPSB7fTtcbiAgICBjb25zdCB0eXBlTWFwID0gc2NoZW1hLmdldFR5cGVNYXAoKTtcbiAgICBmb3IgKGNvbnN0IHR5cGVOYW1lIGluIHR5cGVNYXApIHtcbiAgICAgICAgY29uc3QgdHlwZSA9IHR5cGVNYXBbdHlwZU5hbWVdO1xuICAgICAgICBpZiAoJ2dldEludGVyZmFjZXMnIGluIHR5cGUpIHtcbiAgICAgICAgICAgIGV4dGVuZGVkUmVzb2x2ZXJzW3R5cGVOYW1lXSA9IHt9O1xuICAgICAgICAgICAgZm9yIChjb25zdCBpRmFjZSBvZiB0eXBlLmdldEludGVyZmFjZXMoKSkge1xuICAgICAgICAgICAgICAgIGlmIChyZXNvbHZlcnNbaUZhY2UubmFtZV0pIHtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBmaWVsZE5hbWUgaW4gcmVzb2x2ZXJzW2lGYWNlLm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmllbGROYW1lID09PSAnX19pc1R5cGVPZicgfHwgIWZpZWxkTmFtZS5zdGFydHNXaXRoKCdfXycpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0ZW5kZWRSZXNvbHZlcnNbdHlwZU5hbWVdW2ZpZWxkTmFtZV0gPSByZXNvbHZlcnNbaUZhY2UubmFtZV1bZmllbGROYW1lXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IHR5cGVSZXNvbHZlcnMgPSByZXNvbHZlcnNbdHlwZU5hbWVdO1xuICAgICAgICAgICAgZXh0ZW5kZWRSZXNvbHZlcnNbdHlwZU5hbWVdID0ge1xuICAgICAgICAgICAgICAgIC4uLmV4dGVuZGVkUmVzb2x2ZXJzW3R5cGVOYW1lXSxcbiAgICAgICAgICAgICAgICAuLi50eXBlUmVzb2x2ZXJzLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IHR5cGVSZXNvbHZlcnMgPSByZXNvbHZlcnNbdHlwZU5hbWVdO1xuICAgICAgICAgICAgaWYgKHR5cGVSZXNvbHZlcnMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGV4dGVuZGVkUmVzb2x2ZXJzW3R5cGVOYW1lXSA9IHR5cGVSZXNvbHZlcnM7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGV4dGVuZGVkUmVzb2x2ZXJzO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/extendResolversFromInterfaces.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/makeExecutableSchema.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/makeExecutableSchema.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   makeExecutableSchema: () => (/* binding */ makeExecutableSchema)\n/* harmony export */ });\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/type/schema.mjs\");\n/* harmony import */ var graphql__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! graphql */ \"(rsc)/./node_modules/graphql/utilities/buildASTSchema.mjs\");\n/* harmony import */ var _graphql_tools_utils__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @graphql-tools/utils */ \"(rsc)/./node_modules/@graphql-tools/utils/esm/helpers.js\");\n/* harmony import */ var _addResolversToSchema_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./addResolversToSchema.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/addResolversToSchema.js\");\n/* harmony import */ var _assertResolversPresent_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./assertResolversPresent.js */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/assertResolversPresent.js\");\n/* harmony import */ var _graphql_tools_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @graphql-tools/merge */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/typedefs-mergers/merge-typedefs.js\");\n/* harmony import */ var _graphql_tools_merge__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @graphql-tools/merge */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/merge-resolvers.js\");\n/* harmony import */ var _graphql_tools_merge__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @graphql-tools/merge */ \"(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/merge/esm/extensions.js\");\n\n\n\n\n\n/**\n * Builds a schema from the provided type definitions and resolvers.\n *\n * The type definitions are written using Schema Definition Language (SDL). They\n * can be provided as a string, a `DocumentNode`, a function, or an array of any\n * of these. If a function is provided, it will be passed no arguments and\n * should return an array of strings or `DocumentNode`s.\n *\n * Note: You can use GraphQL magic comment provide additional syntax\n * highlighting in your editor (with the appropriate editor plugin).\n *\n * ```js\n * const typeDefs = /* GraphQL *\\/ `\n *   type Query {\n *     posts: [Post]\n *     author(id: Int!): Author\n *   }\n * `;\n * ```\n *\n * The `resolvers` object should be a map of type names to nested object, which\n * themselves map the type's fields to their appropriate resolvers.\n * See the [Resolvers](/docs/resolvers) section of the documentation for more details.\n *\n * ```js\n * const resolvers = {\n *   Query: {\n *     posts: (obj, args, ctx, info) => getAllPosts(),\n *     author: (obj, args, ctx, info) => getAuthorById(args.id)\n *   }\n * };\n * ```\n *\n * Once you've defined both the `typeDefs` and `resolvers`, you can create your\n * schema:\n *\n * ```js\n * const schema = makeExecutableSchema({\n *   typeDefs,\n *   resolvers,\n * })\n * ```\n */\nfunction makeExecutableSchema({ typeDefs, resolvers = {}, resolverValidationOptions = {}, inheritResolversFromInterfaces = false, updateResolversInPlace = false, schemaExtensions, ...otherOptions }) {\n    // Validate and clean up arguments\n    if (typeof resolverValidationOptions !== 'object') {\n        throw new Error('Expected `resolverValidationOptions` to be an object');\n    }\n    if (!typeDefs) {\n        throw new Error('Must provide typeDefs');\n    }\n    let schema;\n    if ((0,graphql__WEBPACK_IMPORTED_MODULE_0__.isSchema)(typeDefs)) {\n        schema = typeDefs;\n    }\n    else if (otherOptions === null || otherOptions === void 0 ? void 0 : otherOptions.commentDescriptions) {\n        const mergedTypeDefs = (0,_graphql_tools_merge__WEBPACK_IMPORTED_MODULE_1__.mergeTypeDefs)(typeDefs, {\n            ...otherOptions,\n            commentDescriptions: true,\n        });\n        schema = (0,graphql__WEBPACK_IMPORTED_MODULE_2__.buildSchema)(mergedTypeDefs, otherOptions);\n    }\n    else {\n        const mergedTypeDefs = (0,_graphql_tools_merge__WEBPACK_IMPORTED_MODULE_1__.mergeTypeDefs)(typeDefs, otherOptions);\n        schema = (0,graphql__WEBPACK_IMPORTED_MODULE_2__.buildASTSchema)(mergedTypeDefs, otherOptions);\n    }\n    // We allow passing in an array of resolver maps, in which case we merge them\n    schema = (0,_addResolversToSchema_js__WEBPACK_IMPORTED_MODULE_3__.addResolversToSchema)({\n        schema,\n        resolvers: (0,_graphql_tools_merge__WEBPACK_IMPORTED_MODULE_4__.mergeResolvers)(resolvers),\n        resolverValidationOptions,\n        inheritResolversFromInterfaces,\n        updateResolversInPlace,\n    });\n    if (Object.keys(resolverValidationOptions).length > 0) {\n        (0,_assertResolversPresent_js__WEBPACK_IMPORTED_MODULE_5__.assertResolversPresent)(schema, resolverValidationOptions);\n    }\n    if (schemaExtensions) {\n        schemaExtensions = (0,_graphql_tools_merge__WEBPACK_IMPORTED_MODULE_6__.mergeExtensions)((0,_graphql_tools_utils__WEBPACK_IMPORTED_MODULE_7__.asArray)(schemaExtensions));\n        (0,_graphql_tools_merge__WEBPACK_IMPORTED_MODULE_6__.applyExtensions)(schema, schemaExtensions);\n    }\n    return schema;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvQGFwb2xsby9zZXJ2ZXIvbm9kZV9tb2R1bGVzL0BncmFwaHFsLXRvb2xzL3NjaGVtYS9lc20vbWFrZUV4ZWN1dGFibGVTY2hlbWEuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7O0FBQWdFO0FBQ2pCO0FBQ2tCO0FBQ0k7QUFDa0M7QUFDdkc7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNPLGdDQUFnQyx3QkFBd0IsZ0NBQWdDLDZHQUE2RztBQUM1TTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUSxpREFBUTtBQUNoQjtBQUNBO0FBQ0E7QUFDQSwrQkFBK0IsbUVBQWE7QUFDNUM7QUFDQTtBQUNBLFNBQVM7QUFDVCxpQkFBaUIsb0RBQVc7QUFDNUI7QUFDQTtBQUNBLCtCQUErQixtRUFBYTtBQUM1QyxpQkFBaUIsdURBQWM7QUFDL0I7QUFDQTtBQUNBLGFBQWEsOEVBQW9CO0FBQ2pDO0FBQ0EsbUJBQW1CLG9FQUFjO0FBQ2pDO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLFFBQVEsa0ZBQXNCO0FBQzlCO0FBQ0E7QUFDQSwyQkFBMkIscUVBQWUsQ0FBQyw2REFBTztBQUNsRCxRQUFRLHFFQUFlO0FBQ3ZCO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL21hdGVyaWFsLXVpLW5leHRqcy8uL25vZGVfbW9kdWxlcy9AYXBvbGxvL3NlcnZlci9ub2RlX21vZHVsZXMvQGdyYXBocWwtdG9vbHMvc2NoZW1hL2VzbS9tYWtlRXhlY3V0YWJsZVNjaGVtYS5qcz81YWJjIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGJ1aWxkQVNUU2NoZW1hLCBidWlsZFNjaGVtYSwgaXNTY2hlbWEgfSBmcm9tICdncmFwaHFsJztcbmltcG9ydCB7IGFzQXJyYXkgfSBmcm9tICdAZ3JhcGhxbC10b29scy91dGlscyc7XG5pbXBvcnQgeyBhZGRSZXNvbHZlcnNUb1NjaGVtYSB9IGZyb20gJy4vYWRkUmVzb2x2ZXJzVG9TY2hlbWEuanMnO1xuaW1wb3J0IHsgYXNzZXJ0UmVzb2x2ZXJzUHJlc2VudCB9IGZyb20gJy4vYXNzZXJ0UmVzb2x2ZXJzUHJlc2VudC5qcyc7XG5pbXBvcnQgeyBhcHBseUV4dGVuc2lvbnMsIG1lcmdlRXh0ZW5zaW9ucywgbWVyZ2VSZXNvbHZlcnMsIG1lcmdlVHlwZURlZnMgfSBmcm9tICdAZ3JhcGhxbC10b29scy9tZXJnZSc7XG4vKipcbiAqIEJ1aWxkcyBhIHNjaGVtYSBmcm9tIHRoZSBwcm92aWRlZCB0eXBlIGRlZmluaXRpb25zIGFuZCByZXNvbHZlcnMuXG4gKlxuICogVGhlIHR5cGUgZGVmaW5pdGlvbnMgYXJlIHdyaXR0ZW4gdXNpbmcgU2NoZW1hIERlZmluaXRpb24gTGFuZ3VhZ2UgKFNETCkuIFRoZXlcbiAqIGNhbiBiZSBwcm92aWRlZCBhcyBhIHN0cmluZywgYSBgRG9jdW1lbnROb2RlYCwgYSBmdW5jdGlvbiwgb3IgYW4gYXJyYXkgb2YgYW55XG4gKiBvZiB0aGVzZS4gSWYgYSBmdW5jdGlvbiBpcyBwcm92aWRlZCwgaXQgd2lsbCBiZSBwYXNzZWQgbm8gYXJndW1lbnRzIGFuZFxuICogc2hvdWxkIHJldHVybiBhbiBhcnJheSBvZiBzdHJpbmdzIG9yIGBEb2N1bWVudE5vZGVgcy5cbiAqXG4gKiBOb3RlOiBZb3UgY2FuIHVzZSBHcmFwaFFMIG1hZ2ljIGNvbW1lbnQgcHJvdmlkZSBhZGRpdGlvbmFsIHN5bnRheFxuICogaGlnaGxpZ2h0aW5nIGluIHlvdXIgZWRpdG9yICh3aXRoIHRoZSBhcHByb3ByaWF0ZSBlZGl0b3IgcGx1Z2luKS5cbiAqXG4gKiBgYGBqc1xuICogY29uc3QgdHlwZURlZnMgPSAvKiBHcmFwaFFMICpcXC8gYFxuICogICB0eXBlIFF1ZXJ5IHtcbiAqICAgICBwb3N0czogW1Bvc3RdXG4gKiAgICAgYXV0aG9yKGlkOiBJbnQhKTogQXV0aG9yXG4gKiAgIH1cbiAqIGA7XG4gKiBgYGBcbiAqXG4gKiBUaGUgYHJlc29sdmVyc2Agb2JqZWN0IHNob3VsZCBiZSBhIG1hcCBvZiB0eXBlIG5hbWVzIHRvIG5lc3RlZCBvYmplY3QsIHdoaWNoXG4gKiB0aGVtc2VsdmVzIG1hcCB0aGUgdHlwZSdzIGZpZWxkcyB0byB0aGVpciBhcHByb3ByaWF0ZSByZXNvbHZlcnMuXG4gKiBTZWUgdGhlIFtSZXNvbHZlcnNdKC9kb2NzL3Jlc29sdmVycykgc2VjdGlvbiBvZiB0aGUgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCByZXNvbHZlcnMgPSB7XG4gKiAgIFF1ZXJ5OiB7XG4gKiAgICAgcG9zdHM6IChvYmosIGFyZ3MsIGN0eCwgaW5mbykgPT4gZ2V0QWxsUG9zdHMoKSxcbiAqICAgICBhdXRob3I6IChvYmosIGFyZ3MsIGN0eCwgaW5mbykgPT4gZ2V0QXV0aG9yQnlJZChhcmdzLmlkKVxuICogICB9XG4gKiB9O1xuICogYGBgXG4gKlxuICogT25jZSB5b3UndmUgZGVmaW5lZCBib3RoIHRoZSBgdHlwZURlZnNgIGFuZCBgcmVzb2x2ZXJzYCwgeW91IGNhbiBjcmVhdGUgeW91clxuICogc2NoZW1hOlxuICpcbiAqIGBgYGpzXG4gKiBjb25zdCBzY2hlbWEgPSBtYWtlRXhlY3V0YWJsZVNjaGVtYSh7XG4gKiAgIHR5cGVEZWZzLFxuICogICByZXNvbHZlcnMsXG4gKiB9KVxuICogYGBgXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYWtlRXhlY3V0YWJsZVNjaGVtYSh7IHR5cGVEZWZzLCByZXNvbHZlcnMgPSB7fSwgcmVzb2x2ZXJWYWxpZGF0aW9uT3B0aW9ucyA9IHt9LCBpbmhlcml0UmVzb2x2ZXJzRnJvbUludGVyZmFjZXMgPSBmYWxzZSwgdXBkYXRlUmVzb2x2ZXJzSW5QbGFjZSA9IGZhbHNlLCBzY2hlbWFFeHRlbnNpb25zLCAuLi5vdGhlck9wdGlvbnMgfSkge1xuICAgIC8vIFZhbGlkYXRlIGFuZCBjbGVhbiB1cCBhcmd1bWVudHNcbiAgICBpZiAodHlwZW9mIHJlc29sdmVyVmFsaWRhdGlvbk9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYHJlc29sdmVyVmFsaWRhdGlvbk9wdGlvbnNgIHRvIGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBpZiAoIXR5cGVEZWZzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIHR5cGVEZWZzJyk7XG4gICAgfVxuICAgIGxldCBzY2hlbWE7XG4gICAgaWYgKGlzU2NoZW1hKHR5cGVEZWZzKSkge1xuICAgICAgICBzY2hlbWEgPSB0eXBlRGVmcztcbiAgICB9XG4gICAgZWxzZSBpZiAob3RoZXJPcHRpb25zID09PSBudWxsIHx8IG90aGVyT3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3RoZXJPcHRpb25zLmNvbW1lbnREZXNjcmlwdGlvbnMpIHtcbiAgICAgICAgY29uc3QgbWVyZ2VkVHlwZURlZnMgPSBtZXJnZVR5cGVEZWZzKHR5cGVEZWZzLCB7XG4gICAgICAgICAgICAuLi5vdGhlck9wdGlvbnMsXG4gICAgICAgICAgICBjb21tZW50RGVzY3JpcHRpb25zOiB0cnVlLFxuICAgICAgICB9KTtcbiAgICAgICAgc2NoZW1hID0gYnVpbGRTY2hlbWEobWVyZ2VkVHlwZURlZnMsIG90aGVyT3B0aW9ucyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjb25zdCBtZXJnZWRUeXBlRGVmcyA9IG1lcmdlVHlwZURlZnModHlwZURlZnMsIG90aGVyT3B0aW9ucyk7XG4gICAgICAgIHNjaGVtYSA9IGJ1aWxkQVNUU2NoZW1hKG1lcmdlZFR5cGVEZWZzLCBvdGhlck9wdGlvbnMpO1xuICAgIH1cbiAgICAvLyBXZSBhbGxvdyBwYXNzaW5nIGluIGFuIGFycmF5IG9mIHJlc29sdmVyIG1hcHMsIGluIHdoaWNoIGNhc2Ugd2UgbWVyZ2UgdGhlbVxuICAgIHNjaGVtYSA9IGFkZFJlc29sdmVyc1RvU2NoZW1hKHtcbiAgICAgICAgc2NoZW1hLFxuICAgICAgICByZXNvbHZlcnM6IG1lcmdlUmVzb2x2ZXJzKHJlc29sdmVycyksXG4gICAgICAgIHJlc29sdmVyVmFsaWRhdGlvbk9wdGlvbnMsXG4gICAgICAgIGluaGVyaXRSZXNvbHZlcnNGcm9tSW50ZXJmYWNlcyxcbiAgICAgICAgdXBkYXRlUmVzb2x2ZXJzSW5QbGFjZSxcbiAgICB9KTtcbiAgICBpZiAoT2JqZWN0LmtleXMocmVzb2x2ZXJWYWxpZGF0aW9uT3B0aW9ucykubGVuZ3RoID4gMCkge1xuICAgICAgICBhc3NlcnRSZXNvbHZlcnNQcmVzZW50KHNjaGVtYSwgcmVzb2x2ZXJWYWxpZGF0aW9uT3B0aW9ucyk7XG4gICAgfVxuICAgIGlmIChzY2hlbWFFeHRlbnNpb25zKSB7XG4gICAgICAgIHNjaGVtYUV4dGVuc2lvbnMgPSBtZXJnZUV4dGVuc2lvbnMoYXNBcnJheShzY2hlbWFFeHRlbnNpb25zKSk7XG4gICAgICAgIGFwcGx5RXh0ZW5zaW9ucyhzY2hlbWEsIHNjaGVtYUV4dGVuc2lvbnMpO1xuICAgIH1cbiAgICByZXR1cm4gc2NoZW1hO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/@graphql-tools/schema/esm/makeExecutableSchema.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/server/node_modules/lru-cache/index.mjs":
/*!**********************************************************************!*\
  !*** ./node_modules/@apollo/server/node_modules/lru-cache/index.mjs ***!
  \**********************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nconst perf =\n  typeof performance === 'object' &&\n  performance &&\n  typeof performance.now === 'function'\n    ? performance\n    : Date\n\nconst hasAbortController = typeof AbortController === 'function'\n\n// minimal backwards-compatibility polyfill\n// this doesn't have nearly all the checks and whatnot that\n// actual AbortController/Signal has, but it's enough for\n// our purposes, and if used properly, behaves the same.\nconst AC = hasAbortController\n  ? AbortController\n  : class AbortController {\n      constructor() {\n        this.signal = new AS()\n      }\n      abort(reason = new Error('This operation was aborted')) {\n        this.signal.reason = this.signal.reason || reason\n        this.signal.aborted = true\n        this.signal.dispatchEvent({\n          type: 'abort',\n          target: this.signal,\n        })\n      }\n    }\n\nconst hasAbortSignal = typeof AbortSignal === 'function'\n// Some polyfills put this on the AC class, not global\nconst hasACAbortSignal = typeof AC.AbortSignal === 'function'\nconst AS = hasAbortSignal\n  ? AbortSignal\n  : hasACAbortSignal\n  ? AC.AbortController\n  : class AbortSignal {\n      constructor() {\n        this.reason = undefined\n        this.aborted = false\n        this._listeners = []\n      }\n      dispatchEvent(e) {\n        if (e.type === 'abort') {\n          this.aborted = true\n          this.onabort(e)\n          this._listeners.forEach(f => f(e), this)\n        }\n      }\n      onabort() {}\n      addEventListener(ev, fn) {\n        if (ev === 'abort') {\n          this._listeners.push(fn)\n        }\n      }\n      removeEventListener(ev, fn) {\n        if (ev === 'abort') {\n          this._listeners = this._listeners.filter(f => f !== fn)\n        }\n      }\n    }\n\nconst warned = new Set()\nconst deprecatedOption = (opt, instead) => {\n  const code = `LRU_CACHE_OPTION_${opt}`\n  if (shouldWarn(code)) {\n    warn(code, `${opt} option`, `options.${instead}`, LRUCache)\n  }\n}\nconst deprecatedMethod = (method, instead) => {\n  const code = `LRU_CACHE_METHOD_${method}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, method)\n    warn(code, `${method} method`, `cache.${instead}()`, get)\n  }\n}\nconst deprecatedProperty = (field, instead) => {\n  const code = `LRU_CACHE_PROPERTY_${field}`\n  if (shouldWarn(code)) {\n    const { prototype } = LRUCache\n    const { get } = Object.getOwnPropertyDescriptor(prototype, field)\n    warn(code, `${field} property`, `cache.${instead}`, get)\n  }\n}\n\nconst emitWarning = (...a) => {\n  typeof process === 'object' &&\n  process &&\n  typeof process.emitWarning === 'function'\n    ? process.emitWarning(...a)\n    : console.error(...a)\n}\n\nconst shouldWarn = code => !warned.has(code)\n\nconst warn = (code, what, instead, fn) => {\n  warned.add(code)\n  const msg = `The ${what} is deprecated. Please use ${instead} instead.`\n  emitWarning(msg, 'DeprecationWarning', code, fn)\n}\n\nconst isPosInt = n => n && n === Math.floor(n) && n > 0 && isFinite(n)\n\n/* istanbul ignore next - This is a little bit ridiculous, tbh.\n * The maximum array length is 2^32-1 or thereabouts on most JS impls.\n * And well before that point, you're caching the entire world, I mean,\n * that's ~32GB of just integers for the next/prev links, plus whatever\n * else to hold that many keys and values.  Just filling the memory with\n * zeroes at init time is brutal when you get that big.\n * But why not be complete?\n * Maybe in the future, these limits will have expanded. */\nconst getUintArray = max =>\n  !isPosInt(max)\n    ? null\n    : max <= Math.pow(2, 8)\n    ? Uint8Array\n    : max <= Math.pow(2, 16)\n    ? Uint16Array\n    : max <= Math.pow(2, 32)\n    ? Uint32Array\n    : max <= Number.MAX_SAFE_INTEGER\n    ? ZeroArray\n    : null\n\nclass ZeroArray extends Array {\n  constructor(size) {\n    super(size)\n    this.fill(0)\n  }\n}\n\nclass Stack {\n  constructor(max) {\n    if (max === 0) {\n      return []\n    }\n    const UintArray = getUintArray(max)\n    this.heap = new UintArray(max)\n    this.length = 0\n  }\n  push(n) {\n    this.heap[this.length++] = n\n  }\n  pop() {\n    return this.heap[--this.length]\n  }\n}\n\nclass LRUCache {\n  constructor(options = {}) {\n    const {\n      max = 0,\n      ttl,\n      ttlResolution = 1,\n      ttlAutopurge,\n      updateAgeOnGet,\n      updateAgeOnHas,\n      allowStale,\n      dispose,\n      disposeAfter,\n      noDisposeOnSet,\n      noUpdateTTL,\n      maxSize = 0,\n      maxEntrySize = 0,\n      sizeCalculation,\n      fetchMethod,\n      fetchContext,\n      noDeleteOnFetchRejection,\n      noDeleteOnStaleGet,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n    } = options\n\n    // deprecated options, don't trigger a warning for getting them if\n    // the thing being passed in is another LRUCache we're copying.\n    const { length, maxAge, stale } =\n      options instanceof LRUCache ? {} : options\n\n    if (max !== 0 && !isPosInt(max)) {\n      throw new TypeError('max option must be a nonnegative integer')\n    }\n\n    const UintArray = max ? getUintArray(max) : Array\n    if (!UintArray) {\n      throw new Error('invalid max value: ' + max)\n    }\n\n    this.max = max\n    this.maxSize = maxSize\n    this.maxEntrySize = maxEntrySize || this.maxSize\n    this.sizeCalculation = sizeCalculation || length\n    if (this.sizeCalculation) {\n      if (!this.maxSize && !this.maxEntrySize) {\n        throw new TypeError(\n          'cannot set sizeCalculation without setting maxSize or maxEntrySize'\n        )\n      }\n      if (typeof this.sizeCalculation !== 'function') {\n        throw new TypeError('sizeCalculation set to non-function')\n      }\n    }\n\n    this.fetchMethod = fetchMethod || null\n    if (this.fetchMethod && typeof this.fetchMethod !== 'function') {\n      throw new TypeError(\n        'fetchMethod must be a function if specified'\n      )\n    }\n\n    this.fetchContext = fetchContext\n    if (!this.fetchMethod && fetchContext !== undefined) {\n      throw new TypeError(\n        'cannot set fetchContext without fetchMethod'\n      )\n    }\n\n    this.keyMap = new Map()\n    this.keyList = new Array(max).fill(null)\n    this.valList = new Array(max).fill(null)\n    this.next = new UintArray(max)\n    this.prev = new UintArray(max)\n    this.head = 0\n    this.tail = 0\n    this.free = new Stack(max)\n    this.initialFill = 1\n    this.size = 0\n\n    if (typeof dispose === 'function') {\n      this.dispose = dispose\n    }\n    if (typeof disposeAfter === 'function') {\n      this.disposeAfter = disposeAfter\n      this.disposed = []\n    } else {\n      this.disposeAfter = null\n      this.disposed = null\n    }\n    this.noDisposeOnSet = !!noDisposeOnSet\n    this.noUpdateTTL = !!noUpdateTTL\n    this.noDeleteOnFetchRejection = !!noDeleteOnFetchRejection\n    this.allowStaleOnFetchRejection = !!allowStaleOnFetchRejection\n    this.allowStaleOnFetchAbort = !!allowStaleOnFetchAbort\n    this.ignoreFetchAbort = !!ignoreFetchAbort\n\n    // NB: maxEntrySize is set to maxSize if it's set\n    if (this.maxEntrySize !== 0) {\n      if (this.maxSize !== 0) {\n        if (!isPosInt(this.maxSize)) {\n          throw new TypeError(\n            'maxSize must be a positive integer if specified'\n          )\n        }\n      }\n      if (!isPosInt(this.maxEntrySize)) {\n        throw new TypeError(\n          'maxEntrySize must be a positive integer if specified'\n        )\n      }\n      this.initializeSizeTracking()\n    }\n\n    this.allowStale = !!allowStale || !!stale\n    this.noDeleteOnStaleGet = !!noDeleteOnStaleGet\n    this.updateAgeOnGet = !!updateAgeOnGet\n    this.updateAgeOnHas = !!updateAgeOnHas\n    this.ttlResolution =\n      isPosInt(ttlResolution) || ttlResolution === 0\n        ? ttlResolution\n        : 1\n    this.ttlAutopurge = !!ttlAutopurge\n    this.ttl = ttl || maxAge || 0\n    if (this.ttl) {\n      if (!isPosInt(this.ttl)) {\n        throw new TypeError(\n          'ttl must be a positive integer if specified'\n        )\n      }\n      this.initializeTTLTracking()\n    }\n\n    // do not allow completely unbounded caches\n    if (this.max === 0 && this.ttl === 0 && this.maxSize === 0) {\n      throw new TypeError(\n        'At least one of max, maxSize, or ttl is required'\n      )\n    }\n    if (!this.ttlAutopurge && !this.max && !this.maxSize) {\n      const code = 'LRU_CACHE_UNBOUNDED'\n      if (shouldWarn(code)) {\n        warned.add(code)\n        const msg =\n          'TTL caching without ttlAutopurge, max, or maxSize can ' +\n          'result in unbounded memory consumption.'\n        emitWarning(msg, 'UnboundedCacheWarning', code, LRUCache)\n      }\n    }\n\n    if (stale) {\n      deprecatedOption('stale', 'allowStale')\n    }\n    if (maxAge) {\n      deprecatedOption('maxAge', 'ttl')\n    }\n    if (length) {\n      deprecatedOption('length', 'sizeCalculation')\n    }\n  }\n\n  getRemainingTTL(key) {\n    return this.has(key, { updateAgeOnHas: false }) ? Infinity : 0\n  }\n\n  initializeTTLTracking() {\n    this.ttls = new ZeroArray(this.max)\n    this.starts = new ZeroArray(this.max)\n\n    this.setItemTTL = (index, ttl, start = perf.now()) => {\n      this.starts[index] = ttl !== 0 ? start : 0\n      this.ttls[index] = ttl\n      if (ttl !== 0 && this.ttlAutopurge) {\n        const t = setTimeout(() => {\n          if (this.isStale(index)) {\n            this.delete(this.keyList[index])\n          }\n        }, ttl + 1)\n        /* istanbul ignore else - unref() not supported on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n    }\n\n    this.updateItemAge = index => {\n      this.starts[index] = this.ttls[index] !== 0 ? perf.now() : 0\n    }\n\n    this.statusTTL = (status, index) => {\n      if (status) {\n        status.ttl = this.ttls[index]\n        status.start = this.starts[index]\n        status.now = cachedNow || getNow()\n        status.remainingTTL = status.now + status.ttl - status.start\n      }\n    }\n\n    // debounce calls to perf.now() to 1s so we're not hitting\n    // that costly call repeatedly.\n    let cachedNow = 0\n    const getNow = () => {\n      const n = perf.now()\n      if (this.ttlResolution > 0) {\n        cachedNow = n\n        const t = setTimeout(\n          () => (cachedNow = 0),\n          this.ttlResolution\n        )\n        /* istanbul ignore else - not available on all platforms */\n        if (t.unref) {\n          t.unref()\n        }\n      }\n      return n\n    }\n\n    this.getRemainingTTL = key => {\n      const index = this.keyMap.get(key)\n      if (index === undefined) {\n        return 0\n      }\n      return this.ttls[index] === 0 || this.starts[index] === 0\n        ? Infinity\n        : this.starts[index] +\n            this.ttls[index] -\n            (cachedNow || getNow())\n    }\n\n    this.isStale = index => {\n      return (\n        this.ttls[index] !== 0 &&\n        this.starts[index] !== 0 &&\n        (cachedNow || getNow()) - this.starts[index] >\n          this.ttls[index]\n      )\n    }\n  }\n  updateItemAge(_index) {}\n  statusTTL(_status, _index) {}\n  setItemTTL(_index, _ttl, _start) {}\n  isStale(_index) {\n    return false\n  }\n\n  initializeSizeTracking() {\n    this.calculatedSize = 0\n    this.sizes = new ZeroArray(this.max)\n    this.removeItemSize = index => {\n      this.calculatedSize -= this.sizes[index]\n      this.sizes[index] = 0\n    }\n    this.requireSize = (k, v, size, sizeCalculation) => {\n      // provisionally accept background fetches.\n      // actual value size will be checked when they return.\n      if (this.isBackgroundFetch(v)) {\n        return 0\n      }\n      if (!isPosInt(size)) {\n        if (sizeCalculation) {\n          if (typeof sizeCalculation !== 'function') {\n            throw new TypeError('sizeCalculation must be a function')\n          }\n          size = sizeCalculation(v, k)\n          if (!isPosInt(size)) {\n            throw new TypeError(\n              'sizeCalculation return invalid (expect positive integer)'\n            )\n          }\n        } else {\n          throw new TypeError(\n            'invalid size value (must be positive integer). ' +\n              'When maxSize or maxEntrySize is used, sizeCalculation or size ' +\n              'must be set.'\n          )\n        }\n      }\n      return size\n    }\n    this.addItemSize = (index, size, status) => {\n      this.sizes[index] = size\n      if (this.maxSize) {\n        const maxSize = this.maxSize - this.sizes[index]\n        while (this.calculatedSize > maxSize) {\n          this.evict(true)\n        }\n      }\n      this.calculatedSize += this.sizes[index]\n      if (status) {\n        status.entrySize = size\n        status.totalCalculatedSize = this.calculatedSize\n      }\n    }\n  }\n  removeItemSize(_index) {}\n  addItemSize(_index, _size) {}\n  requireSize(_k, _v, size, sizeCalculation) {\n    if (size || sizeCalculation) {\n      throw new TypeError(\n        'cannot set size without setting maxSize or maxEntrySize on cache'\n      )\n    }\n  }\n\n  *indexes({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.tail; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.head) {\n          break\n        } else {\n          i = this.prev[i]\n        }\n      }\n    }\n  }\n\n  *rindexes({ allowStale = this.allowStale } = {}) {\n    if (this.size) {\n      for (let i = this.head; true; ) {\n        if (!this.isValidIndex(i)) {\n          break\n        }\n        if (allowStale || !this.isStale(i)) {\n          yield i\n        }\n        if (i === this.tail) {\n          break\n        } else {\n          i = this.next[i]\n        }\n      }\n    }\n  }\n\n  isValidIndex(index) {\n    return (\n      index !== undefined &&\n      this.keyMap.get(this.keyList[index]) === index\n    )\n  }\n\n  *entries() {\n    for (const i of this.indexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield [this.keyList[i], this.valList[i]]\n      }\n    }\n  }\n  *rentries() {\n    for (const i of this.rindexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield [this.keyList[i], this.valList[i]]\n      }\n    }\n  }\n\n  *keys() {\n    for (const i of this.indexes()) {\n      if (\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.keyList[i]\n      }\n    }\n  }\n  *rkeys() {\n    for (const i of this.rindexes()) {\n      if (\n        this.keyList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.keyList[i]\n      }\n    }\n  }\n\n  *values() {\n    for (const i of this.indexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.valList[i]\n      }\n    }\n  }\n  *rvalues() {\n    for (const i of this.rindexes()) {\n      if (\n        this.valList[i] !== undefined &&\n        !this.isBackgroundFetch(this.valList[i])\n      ) {\n        yield this.valList[i]\n      }\n    }\n  }\n\n  [Symbol.iterator]() {\n    return this.entries()\n  }\n\n  find(fn, getOptions) {\n    for (const i of this.indexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      if (fn(value, this.keyList[i], this)) {\n        return this.get(this.keyList[i], getOptions)\n      }\n    }\n  }\n\n  forEach(fn, thisp = this) {\n    for (const i of this.indexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.keyList[i], this)\n    }\n  }\n\n  rforEach(fn, thisp = this) {\n    for (const i of this.rindexes()) {\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      fn.call(thisp, value, this.keyList[i], this)\n    }\n  }\n\n  get prune() {\n    deprecatedMethod('prune', 'purgeStale')\n    return this.purgeStale\n  }\n\n  purgeStale() {\n    let deleted = false\n    for (const i of this.rindexes({ allowStale: true })) {\n      if (this.isStale(i)) {\n        this.delete(this.keyList[i])\n        deleted = true\n      }\n    }\n    return deleted\n  }\n\n  dump() {\n    const arr = []\n    for (const i of this.indexes({ allowStale: true })) {\n      const key = this.keyList[i]\n      const v = this.valList[i]\n      const value = this.isBackgroundFetch(v)\n        ? v.__staleWhileFetching\n        : v\n      if (value === undefined) continue\n      const entry = { value }\n      if (this.ttls) {\n        entry.ttl = this.ttls[i]\n        // always dump the start relative to a portable timestamp\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = perf.now() - this.starts[i]\n        entry.start = Math.floor(Date.now() - age)\n      }\n      if (this.sizes) {\n        entry.size = this.sizes[i]\n      }\n      arr.unshift([key, entry])\n    }\n    return arr\n  }\n\n  load(arr) {\n    this.clear()\n    for (const [key, entry] of arr) {\n      if (entry.start) {\n        // entry.start is a portable timestamp, but we may be using\n        // node's performance.now(), so calculate the offset.\n        // it's ok for this to be a bit slow, it's a rare operation.\n        const age = Date.now() - entry.start\n        entry.start = perf.now() - age\n      }\n      this.set(key, entry.value, entry)\n    }\n  }\n\n  dispose(_v, _k, _reason) {}\n\n  set(\n    k,\n    v,\n    {\n      ttl = this.ttl,\n      start,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      status,\n    } = {}\n  ) {\n    size = this.requireSize(k, v, size, sizeCalculation)\n    // if the item doesn't fit, don't do anything\n    // NB: maxEntrySize set to maxSize by default\n    if (this.maxEntrySize && size > this.maxEntrySize) {\n      if (status) {\n        status.set = 'miss'\n        status.maxEntrySizeExceeded = true\n      }\n      // have to delete, in case a background fetch is there already.\n      // in non-async cases, this is a no-op\n      this.delete(k)\n      return this\n    }\n    let index = this.size === 0 ? undefined : this.keyMap.get(k)\n    if (index === undefined) {\n      // addition\n      index = this.newIndex()\n      this.keyList[index] = k\n      this.valList[index] = v\n      this.keyMap.set(k, index)\n      this.next[this.tail] = index\n      this.prev[index] = this.tail\n      this.tail = index\n      this.size++\n      this.addItemSize(index, size, status)\n      if (status) {\n        status.set = 'add'\n      }\n      noUpdateTTL = false\n    } else {\n      // update\n      this.moveToTail(index)\n      const oldVal = this.valList[index]\n      if (v !== oldVal) {\n        if (this.isBackgroundFetch(oldVal)) {\n          oldVal.__abortController.abort(new Error('replaced'))\n        } else {\n          if (!noDisposeOnSet) {\n            this.dispose(oldVal, k, 'set')\n            if (this.disposeAfter) {\n              this.disposed.push([oldVal, k, 'set'])\n            }\n          }\n        }\n        this.removeItemSize(index)\n        this.valList[index] = v\n        this.addItemSize(index, size, status)\n        if (status) {\n          status.set = 'replace'\n          const oldValue =\n            oldVal && this.isBackgroundFetch(oldVal)\n              ? oldVal.__staleWhileFetching\n              : oldVal\n          if (oldValue !== undefined) status.oldValue = oldValue\n        }\n      } else if (status) {\n        status.set = 'update'\n      }\n    }\n    if (ttl !== 0 && this.ttl === 0 && !this.ttls) {\n      this.initializeTTLTracking()\n    }\n    if (!noUpdateTTL) {\n      this.setItemTTL(index, ttl, start)\n    }\n    this.statusTTL(status, index)\n    if (this.disposeAfter) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return this\n  }\n\n  newIndex() {\n    if (this.size === 0) {\n      return this.tail\n    }\n    if (this.size === this.max && this.max !== 0) {\n      return this.evict(false)\n    }\n    if (this.free.length !== 0) {\n      return this.free.pop()\n    }\n    // initial fill, just keep writing down the list\n    return this.initialFill++\n  }\n\n  pop() {\n    if (this.size) {\n      const val = this.valList[this.head]\n      this.evict(true)\n      return val\n    }\n  }\n\n  evict(free) {\n    const head = this.head\n    const k = this.keyList[head]\n    const v = this.valList[head]\n    if (this.isBackgroundFetch(v)) {\n      v.__abortController.abort(new Error('evicted'))\n    } else {\n      this.dispose(v, k, 'evict')\n      if (this.disposeAfter) {\n        this.disposed.push([v, k, 'evict'])\n      }\n    }\n    this.removeItemSize(head)\n    // if we aren't about to use the index, then null these out\n    if (free) {\n      this.keyList[head] = null\n      this.valList[head] = null\n      this.free.push(head)\n    }\n    this.head = this.next[head]\n    this.keyMap.delete(k)\n    this.size--\n    return head\n  }\n\n  has(k, { updateAgeOnHas = this.updateAgeOnHas, status } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined) {\n      if (!this.isStale(index)) {\n        if (updateAgeOnHas) {\n          this.updateItemAge(index)\n        }\n        if (status) status.has = 'hit'\n        this.statusTTL(status, index)\n        return true\n      } else if (status) {\n        status.has = 'stale'\n        this.statusTTL(status, index)\n      }\n    } else if (status) {\n      status.has = 'miss'\n    }\n    return false\n  }\n\n  // like get(), but without any LRU updating or TTL expiration\n  peek(k, { allowStale = this.allowStale } = {}) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined && (allowStale || !this.isStale(index))) {\n      const v = this.valList[index]\n      // either stale and allowed, or forcing a refresh of non-stale value\n      return this.isBackgroundFetch(v) ? v.__staleWhileFetching : v\n    }\n  }\n\n  backgroundFetch(k, index, options, context) {\n    const v = index === undefined ? undefined : this.valList[index]\n    if (this.isBackgroundFetch(v)) {\n      return v\n    }\n    const ac = new AC()\n    if (options.signal) {\n      options.signal.addEventListener('abort', () =>\n        ac.abort(options.signal.reason)\n      )\n    }\n    const fetchOpts = {\n      signal: ac.signal,\n      options,\n      context,\n    }\n    const cb = (v, updateCache = false) => {\n      const { aborted } = ac.signal\n      const ignoreAbort = options.ignoreFetchAbort && v !== undefined\n      if (options.status) {\n        if (aborted && !updateCache) {\n          options.status.fetchAborted = true\n          options.status.fetchError = ac.signal.reason\n          if (ignoreAbort) options.status.fetchAbortIgnored = true\n        } else {\n          options.status.fetchResolved = true\n        }\n      }\n      if (aborted && !ignoreAbort && !updateCache) {\n        return fetchFail(ac.signal.reason)\n      }\n      // either we didn't abort, and are still here, or we did, and ignored\n      if (this.valList[index] === p) {\n        if (v === undefined) {\n          if (p.__staleWhileFetching) {\n            this.valList[index] = p.__staleWhileFetching\n          } else {\n            this.delete(k)\n          }\n        } else {\n          if (options.status) options.status.fetchUpdated = true\n          this.set(k, v, fetchOpts.options)\n        }\n      }\n      return v\n    }\n    const eb = er => {\n      if (options.status) {\n        options.status.fetchRejected = true\n        options.status.fetchError = er\n      }\n      return fetchFail(er)\n    }\n    const fetchFail = er => {\n      const { aborted } = ac.signal\n      const allowStaleAborted =\n        aborted && options.allowStaleOnFetchAbort\n      const allowStale =\n        allowStaleAborted || options.allowStaleOnFetchRejection\n      const noDelete = allowStale || options.noDeleteOnFetchRejection\n      if (this.valList[index] === p) {\n        // if we allow stale on fetch rejections, then we need to ensure that\n        // the stale value is not removed from the cache when the fetch fails.\n        const del = !noDelete || p.__staleWhileFetching === undefined\n        if (del) {\n          this.delete(k)\n        } else if (!allowStaleAborted) {\n          // still replace the *promise* with the stale value,\n          // since we are done with the promise at this point.\n          // leave it untouched if we're still waiting for an\n          // aborted background fetch that hasn't yet returned.\n          this.valList[index] = p.__staleWhileFetching\n        }\n      }\n      if (allowStale) {\n        if (options.status && p.__staleWhileFetching !== undefined) {\n          options.status.returnedStale = true\n        }\n        return p.__staleWhileFetching\n      } else if (p.__returned === p) {\n        throw er\n      }\n    }\n    const pcall = (res, rej) => {\n      this.fetchMethod(k, v, fetchOpts).then(v => res(v), rej)\n      // ignored, we go until we finish, regardless.\n      // defer check until we are actually aborting,\n      // so fetchMethod can override.\n      ac.signal.addEventListener('abort', () => {\n        if (\n          !options.ignoreFetchAbort ||\n          options.allowStaleOnFetchAbort\n        ) {\n          res()\n          // when it eventually resolves, update the cache.\n          if (options.allowStaleOnFetchAbort) {\n            res = v => cb(v, true)\n          }\n        }\n      })\n    }\n    if (options.status) options.status.fetchDispatched = true\n    const p = new Promise(pcall).then(cb, eb)\n    p.__abortController = ac\n    p.__staleWhileFetching = v\n    p.__returned = null\n    if (index === undefined) {\n      // internal, don't expose status.\n      this.set(k, p, { ...fetchOpts.options, status: undefined })\n      index = this.keyMap.get(k)\n    } else {\n      this.valList[index] = p\n    }\n    return p\n  }\n\n  isBackgroundFetch(p) {\n    return (\n      p &&\n      typeof p === 'object' &&\n      typeof p.then === 'function' &&\n      Object.prototype.hasOwnProperty.call(\n        p,\n        '__staleWhileFetching'\n      ) &&\n      Object.prototype.hasOwnProperty.call(p, '__returned') &&\n      (p.__returned === p || p.__returned === null)\n    )\n  }\n\n  // this takes the union of get() and set() opts, because it does both\n  async fetch(\n    k,\n    {\n      // get options\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      // set options\n      ttl = this.ttl,\n      noDisposeOnSet = this.noDisposeOnSet,\n      size = 0,\n      sizeCalculation = this.sizeCalculation,\n      noUpdateTTL = this.noUpdateTTL,\n      // fetch exclusive options\n      noDeleteOnFetchRejection = this.noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection = this.allowStaleOnFetchRejection,\n      ignoreFetchAbort = this.ignoreFetchAbort,\n      allowStaleOnFetchAbort = this.allowStaleOnFetchAbort,\n      fetchContext = this.fetchContext,\n      forceRefresh = false,\n      status,\n      signal,\n    } = {}\n  ) {\n    if (!this.fetchMethod) {\n      if (status) status.fetch = 'get'\n      return this.get(k, {\n        allowStale,\n        updateAgeOnGet,\n        noDeleteOnStaleGet,\n        status,\n      })\n    }\n\n    const options = {\n      allowStale,\n      updateAgeOnGet,\n      noDeleteOnStaleGet,\n      ttl,\n      noDisposeOnSet,\n      size,\n      sizeCalculation,\n      noUpdateTTL,\n      noDeleteOnFetchRejection,\n      allowStaleOnFetchRejection,\n      allowStaleOnFetchAbort,\n      ignoreFetchAbort,\n      status,\n      signal,\n    }\n\n    let index = this.keyMap.get(k)\n    if (index === undefined) {\n      if (status) status.fetch = 'miss'\n      const p = this.backgroundFetch(k, index, options, fetchContext)\n      return (p.__returned = p)\n    } else {\n      // in cache, maybe already fetching\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        const stale =\n          allowStale && v.__staleWhileFetching !== undefined\n        if (status) {\n          status.fetch = 'inflight'\n          if (stale) status.returnedStale = true\n        }\n        return stale ? v.__staleWhileFetching : (v.__returned = v)\n      }\n\n      // if we force a refresh, that means do NOT serve the cached value,\n      // unless we are already in the process of refreshing the cache.\n      const isStale = this.isStale(index)\n      if (!forceRefresh && !isStale) {\n        if (status) status.fetch = 'hit'\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        this.statusTTL(status, index)\n        return v\n      }\n\n      // ok, it is stale or a forced refresh, and not already fetching.\n      // refresh the cache.\n      const p = this.backgroundFetch(k, index, options, fetchContext)\n      const hasStale = p.__staleWhileFetching !== undefined\n      const staleVal = hasStale && allowStale\n      if (status) {\n        status.fetch = hasStale && isStale ? 'stale' : 'refresh'\n        if (staleVal && isStale) status.returnedStale = true\n      }\n      return staleVal ? p.__staleWhileFetching : (p.__returned = p)\n    }\n  }\n\n  get(\n    k,\n    {\n      allowStale = this.allowStale,\n      updateAgeOnGet = this.updateAgeOnGet,\n      noDeleteOnStaleGet = this.noDeleteOnStaleGet,\n      status,\n    } = {}\n  ) {\n    const index = this.keyMap.get(k)\n    if (index !== undefined) {\n      const value = this.valList[index]\n      const fetching = this.isBackgroundFetch(value)\n      this.statusTTL(status, index)\n      if (this.isStale(index)) {\n        if (status) status.get = 'stale'\n        // delete only if not an in-flight background fetch\n        if (!fetching) {\n          if (!noDeleteOnStaleGet) {\n            this.delete(k)\n          }\n          if (status) status.returnedStale = allowStale\n          return allowStale ? value : undefined\n        } else {\n          if (status) {\n            status.returnedStale =\n              allowStale && value.__staleWhileFetching !== undefined\n          }\n          return allowStale ? value.__staleWhileFetching : undefined\n        }\n      } else {\n        if (status) status.get = 'hit'\n        // if we're currently fetching it, we don't actually have it yet\n        // it's not stale, which means this isn't a staleWhileRefetching.\n        // If it's not stale, and fetching, AND has a __staleWhileFetching\n        // value, then that means the user fetched with {forceRefresh:true},\n        // so it's safe to return that value.\n        if (fetching) {\n          return value.__staleWhileFetching\n        }\n        this.moveToTail(index)\n        if (updateAgeOnGet) {\n          this.updateItemAge(index)\n        }\n        return value\n      }\n    } else if (status) {\n      status.get = 'miss'\n    }\n  }\n\n  connect(p, n) {\n    this.prev[n] = p\n    this.next[p] = n\n  }\n\n  moveToTail(index) {\n    // if tail already, nothing to do\n    // if head, move head to next[index]\n    // else\n    //   move next[prev[index]] to next[index] (head has no prev)\n    //   move prev[next[index]] to prev[index]\n    // prev[index] = tail\n    // next[tail] = index\n    // tail = index\n    if (index !== this.tail) {\n      if (index === this.head) {\n        this.head = this.next[index]\n      } else {\n        this.connect(this.prev[index], this.next[index])\n      }\n      this.connect(this.tail, index)\n      this.tail = index\n    }\n  }\n\n  get del() {\n    deprecatedMethod('del', 'delete')\n    return this.delete\n  }\n\n  delete(k) {\n    let deleted = false\n    if (this.size !== 0) {\n      const index = this.keyMap.get(k)\n      if (index !== undefined) {\n        deleted = true\n        if (this.size === 1) {\n          this.clear()\n        } else {\n          this.removeItemSize(index)\n          const v = this.valList[index]\n          if (this.isBackgroundFetch(v)) {\n            v.__abortController.abort(new Error('deleted'))\n          } else {\n            this.dispose(v, k, 'delete')\n            if (this.disposeAfter) {\n              this.disposed.push([v, k, 'delete'])\n            }\n          }\n          this.keyMap.delete(k)\n          this.keyList[index] = null\n          this.valList[index] = null\n          if (index === this.tail) {\n            this.tail = this.prev[index]\n          } else if (index === this.head) {\n            this.head = this.next[index]\n          } else {\n            this.next[this.prev[index]] = this.next[index]\n            this.prev[this.next[index]] = this.prev[index]\n          }\n          this.size--\n          this.free.push(index)\n        }\n      }\n    }\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n    return deleted\n  }\n\n  clear() {\n    for (const index of this.rindexes({ allowStale: true })) {\n      const v = this.valList[index]\n      if (this.isBackgroundFetch(v)) {\n        v.__abortController.abort(new Error('deleted'))\n      } else {\n        const k = this.keyList[index]\n        this.dispose(v, k, 'delete')\n        if (this.disposeAfter) {\n          this.disposed.push([v, k, 'delete'])\n        }\n      }\n    }\n\n    this.keyMap.clear()\n    this.valList.fill(null)\n    this.keyList.fill(null)\n    if (this.ttls) {\n      this.ttls.fill(0)\n      this.starts.fill(0)\n    }\n    if (this.sizes) {\n      this.sizes.fill(0)\n    }\n    this.head = 0\n    this.tail = 0\n    this.initialFill = 1\n    this.free.length = 0\n    this.calculatedSize = 0\n    this.size = 0\n    if (this.disposed) {\n      while (this.disposed.length) {\n        this.disposeAfter(...this.disposed.shift())\n      }\n    }\n  }\n\n  get reset() {\n    deprecatedMethod('reset', 'clear')\n    return this.clear\n  }\n\n  get length() {\n    deprecatedProperty('length', 'size')\n    return this.size\n  }\n\n  static get AbortController() {\n    return AC\n  }\n  static get AbortSignal() {\n    return AS\n  }\n}\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (LRUCache);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/server/node_modules/lru-cache/index.mjs\n");

/***/ }),

/***/ "(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/esm/protobuf.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@apollo/usage-reporting-protobuf/generated/esm/protobuf.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ContextualizedQueryLatencyStats: () => (/* binding */ ContextualizedQueryLatencyStats),\n/* harmony export */   ContextualizedStats: () => (/* binding */ ContextualizedStats),\n/* harmony export */   ContextualizedTypeStats: () => (/* binding */ ContextualizedTypeStats),\n/* harmony export */   FieldStat: () => (/* binding */ FieldStat),\n/* harmony export */   PathErrorStats: () => (/* binding */ PathErrorStats),\n/* harmony export */   QueryLatencyStats: () => (/* binding */ QueryLatencyStats),\n/* harmony export */   ReferencedFieldsForType: () => (/* binding */ ReferencedFieldsForType),\n/* harmony export */   Report: () => (/* binding */ Report),\n/* harmony export */   ReportHeader: () => (/* binding */ ReportHeader),\n/* harmony export */   StatsContext: () => (/* binding */ StatsContext),\n/* harmony export */   Trace: () => (/* binding */ Trace),\n/* harmony export */   TracesAndStats: () => (/* binding */ TracesAndStats),\n/* harmony export */   TypeStat: () => (/* binding */ TypeStat),\n/* harmony export */   \"default\": () => (/* binding */ $root),\n/* harmony export */   google: () => (/* binding */ google)\n/* harmony export */ });\n/* harmony import */ var _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @apollo/protobufjs/minimal */ \"(rsc)/./node_modules/@apollo/protobufjs/minimal.js\");\n/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\n\n// Common aliases\nconst $Reader = _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Reader, $Writer = _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.Writer, $util = _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util;\n\n// Exported root namespace\nconst $root = _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.roots[\"default\"] || (_apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.roots[\"default\"] = {});\n\nconst Trace = $root.Trace = (() => {\n\n    /**\n     * Properties of a Trace.\n     * @exports ITrace\n     * @interface ITrace\n     * @property {google.protobuf.ITimestamp|null} [startTime] Trace startTime\n     * @property {google.protobuf.ITimestamp|null} [endTime] Trace endTime\n     * @property {number|null} [durationNs] Trace durationNs\n     * @property {Trace.INode|null} [root] Trace root\n     * @property {boolean|null} [isIncomplete] Trace isIncomplete\n     * @property {string|null} [signature] Trace signature\n     * @property {string|null} [unexecutedOperationBody] Trace unexecutedOperationBody\n     * @property {string|null} [unexecutedOperationName] Trace unexecutedOperationName\n     * @property {Trace.IDetails|null} [details] Trace details\n     * @property {string|null} [clientName] Trace clientName\n     * @property {string|null} [clientVersion] Trace clientVersion\n     * @property {Trace.IHTTP|null} [http] Trace http\n     * @property {Trace.ICachePolicy|null} [cachePolicy] Trace cachePolicy\n     * @property {Trace.IQueryPlanNode|null} [queryPlan] Trace queryPlan\n     * @property {boolean|null} [fullQueryCacheHit] Trace fullQueryCacheHit\n     * @property {boolean|null} [persistedQueryHit] Trace persistedQueryHit\n     * @property {boolean|null} [persistedQueryRegister] Trace persistedQueryRegister\n     * @property {boolean|null} [registeredOperation] Trace registeredOperation\n     * @property {boolean|null} [forbiddenOperation] Trace forbiddenOperation\n     * @property {number|null} [fieldExecutionWeight] Trace fieldExecutionWeight\n     */\n\n    /**\n     * Constructs a new Trace.\n     * @exports Trace\n     * @classdesc Represents a Trace.\n     * @implements ITrace\n     * @constructor\n     * @param {ITrace=} [properties] Properties to set\n     */\n    function Trace(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Trace startTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} startTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.startTime = null;\n\n    /**\n     * Trace endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.endTime = null;\n\n    /**\n     * Trace durationNs.\n     * @member {number} durationNs\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.durationNs = 0;\n\n    /**\n     * Trace root.\n     * @member {Trace.INode|null|undefined} root\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.root = null;\n\n    /**\n     * Trace isIncomplete.\n     * @member {boolean} isIncomplete\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.isIncomplete = false;\n\n    /**\n     * Trace signature.\n     * @member {string} signature\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.signature = \"\";\n\n    /**\n     * Trace unexecutedOperationBody.\n     * @member {string} unexecutedOperationBody\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.unexecutedOperationBody = \"\";\n\n    /**\n     * Trace unexecutedOperationName.\n     * @member {string} unexecutedOperationName\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.unexecutedOperationName = \"\";\n\n    /**\n     * Trace details.\n     * @member {Trace.IDetails|null|undefined} details\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.details = null;\n\n    /**\n     * Trace clientName.\n     * @member {string} clientName\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientName = \"\";\n\n    /**\n     * Trace clientVersion.\n     * @member {string} clientVersion\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientVersion = \"\";\n\n    /**\n     * Trace http.\n     * @member {Trace.IHTTP|null|undefined} http\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.http = null;\n\n    /**\n     * Trace cachePolicy.\n     * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.cachePolicy = null;\n\n    /**\n     * Trace queryPlan.\n     * @member {Trace.IQueryPlanNode|null|undefined} queryPlan\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.queryPlan = null;\n\n    /**\n     * Trace fullQueryCacheHit.\n     * @member {boolean} fullQueryCacheHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.fullQueryCacheHit = false;\n\n    /**\n     * Trace persistedQueryHit.\n     * @member {boolean} persistedQueryHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryHit = false;\n\n    /**\n     * Trace persistedQueryRegister.\n     * @member {boolean} persistedQueryRegister\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryRegister = false;\n\n    /**\n     * Trace registeredOperation.\n     * @member {boolean} registeredOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.registeredOperation = false;\n\n    /**\n     * Trace forbiddenOperation.\n     * @member {boolean} forbiddenOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.forbiddenOperation = false;\n\n    /**\n     * Trace fieldExecutionWeight.\n     * @member {number} fieldExecutionWeight\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.fieldExecutionWeight = 0;\n\n    /**\n     * Creates a new Trace instance using the specified properties.\n     * @function create\n     * @memberof Trace\n     * @static\n     * @param {ITrace=} [properties] Properties to set\n     * @returns {Trace} Trace instance\n     */\n    Trace.create = function create(properties) {\n        return new Trace(properties);\n    };\n\n    /**\n     * Encodes the specified Trace message. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encode\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n            $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.details != null && Object.hasOwnProperty.call(message, \"details\"))\n            $root.Trace.Details.encode(message.details, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.clientVersion);\n        if (message.http != null && Object.hasOwnProperty.call(message, \"http\"))\n            $root.Trace.HTTP.encode(message.http, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n        if (message.durationNs != null && Object.hasOwnProperty.call(message, \"durationNs\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.durationNs);\n        if (message.root != null && Object.hasOwnProperty.call(message, \"root\"))\n            $root.Trace.Node.encode(message.root, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n        if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n            $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n        if (message.signature != null && Object.hasOwnProperty.call(message, \"signature\"))\n            writer.uint32(/* id 19, wireType 2 =*/154).string(message.signature);\n        if (message.fullQueryCacheHit != null && Object.hasOwnProperty.call(message, \"fullQueryCacheHit\"))\n            writer.uint32(/* id 20, wireType 0 =*/160).bool(message.fullQueryCacheHit);\n        if (message.persistedQueryHit != null && Object.hasOwnProperty.call(message, \"persistedQueryHit\"))\n            writer.uint32(/* id 21, wireType 0 =*/168).bool(message.persistedQueryHit);\n        if (message.persistedQueryRegister != null && Object.hasOwnProperty.call(message, \"persistedQueryRegister\"))\n            writer.uint32(/* id 22, wireType 0 =*/176).bool(message.persistedQueryRegister);\n        if (message.registeredOperation != null && Object.hasOwnProperty.call(message, \"registeredOperation\"))\n            writer.uint32(/* id 24, wireType 0 =*/192).bool(message.registeredOperation);\n        if (message.forbiddenOperation != null && Object.hasOwnProperty.call(message, \"forbiddenOperation\"))\n            writer.uint32(/* id 25, wireType 0 =*/200).bool(message.forbiddenOperation);\n        if (message.queryPlan != null && Object.hasOwnProperty.call(message, \"queryPlan\"))\n            $root.Trace.QueryPlanNode.encode(message.queryPlan, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();\n        if (message.unexecutedOperationBody != null && Object.hasOwnProperty.call(message, \"unexecutedOperationBody\"))\n            writer.uint32(/* id 27, wireType 2 =*/218).string(message.unexecutedOperationBody);\n        if (message.unexecutedOperationName != null && Object.hasOwnProperty.call(message, \"unexecutedOperationName\"))\n            writer.uint32(/* id 28, wireType 2 =*/226).string(message.unexecutedOperationName);\n        if (message.fieldExecutionWeight != null && Object.hasOwnProperty.call(message, \"fieldExecutionWeight\"))\n            writer.uint32(/* id 31, wireType 1 =*/249).double(message.fieldExecutionWeight);\n        if (message.isIncomplete != null && Object.hasOwnProperty.call(message, \"isIncomplete\"))\n            writer.uint32(/* id 33, wireType 0 =*/264).bool(message.isIncomplete);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Trace message, length delimited. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 4:\n                message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 11:\n                message.durationNs = reader.uint64();\n                break;\n            case 14:\n                message.root = $root.Trace.Node.decode(reader, reader.uint32());\n                break;\n            case 33:\n                message.isIncomplete = reader.bool();\n                break;\n            case 19:\n                message.signature = reader.string();\n                break;\n            case 27:\n                message.unexecutedOperationBody = reader.string();\n                break;\n            case 28:\n                message.unexecutedOperationName = reader.string();\n                break;\n            case 6:\n                message.details = $root.Trace.Details.decode(reader, reader.uint32());\n                break;\n            case 7:\n                message.clientName = reader.string();\n                break;\n            case 8:\n                message.clientVersion = reader.string();\n                break;\n            case 10:\n                message.http = $root.Trace.HTTP.decode(reader, reader.uint32());\n                break;\n            case 18:\n                message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                break;\n            case 26:\n                message.queryPlan = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                break;\n            case 20:\n                message.fullQueryCacheHit = reader.bool();\n                break;\n            case 21:\n                message.persistedQueryHit = reader.bool();\n                break;\n            case 22:\n                message.persistedQueryRegister = reader.bool();\n                break;\n            case 24:\n                message.registeredOperation = reader.bool();\n                break;\n            case 25:\n                message.forbiddenOperation = reader.bool();\n                break;\n            case 31:\n                message.fieldExecutionWeight = reader.double();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Trace message.\n     * @function verify\n     * @memberof Trace\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Trace.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\")) {\n            let error = $root.google.protobuf.Timestamp.verify(message.startTime);\n            if (error)\n                return \"startTime.\" + error;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            let error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (!$util.isInteger(message.durationNs) && !(message.durationNs && $util.isInteger(message.durationNs.low) && $util.isInteger(message.durationNs.high)))\n                return \"durationNs: integer|Long expected\";\n        if (message.root != null && message.hasOwnProperty(\"root\")) {\n            let error = $root.Trace.Node.verify(message.root);\n            if (error)\n                return \"root.\" + error;\n        }\n        if (message.isIncomplete != null && message.hasOwnProperty(\"isIncomplete\"))\n            if (typeof message.isIncomplete !== \"boolean\")\n                return \"isIncomplete: boolean expected\";\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            if (!$util.isString(message.signature))\n                return \"signature: string expected\";\n        if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\"))\n            if (!$util.isString(message.unexecutedOperationBody))\n                return \"unexecutedOperationBody: string expected\";\n        if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\"))\n            if (!$util.isString(message.unexecutedOperationName))\n                return \"unexecutedOperationName: string expected\";\n        if (message.details != null && message.hasOwnProperty(\"details\")) {\n            let error = $root.Trace.Details.verify(message.details);\n            if (error)\n                return \"details.\" + error;\n        }\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        if (message.http != null && message.hasOwnProperty(\"http\")) {\n            let error = $root.Trace.HTTP.verify(message.http);\n            if (error)\n                return \"http.\" + error;\n        }\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n            let error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n            if (error)\n                return \"cachePolicy.\" + error;\n        }\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\")) {\n            let error = $root.Trace.QueryPlanNode.verify(message.queryPlan);\n            if (error)\n                return \"queryPlan.\" + error;\n        }\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            if (typeof message.fullQueryCacheHit !== \"boolean\")\n                return \"fullQueryCacheHit: boolean expected\";\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            if (typeof message.persistedQueryHit !== \"boolean\")\n                return \"persistedQueryHit: boolean expected\";\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            if (typeof message.persistedQueryRegister !== \"boolean\")\n                return \"persistedQueryRegister: boolean expected\";\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            if (typeof message.registeredOperation !== \"boolean\")\n                return \"registeredOperation: boolean expected\";\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            if (typeof message.forbiddenOperation !== \"boolean\")\n                return \"forbiddenOperation: boolean expected\";\n        if (message.fieldExecutionWeight != null && message.hasOwnProperty(\"fieldExecutionWeight\"))\n            if (typeof message.fieldExecutionWeight !== \"number\")\n                return \"fieldExecutionWeight: number expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a Trace message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace\n     * @static\n     * @param {Trace} message Trace\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Trace.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.endTime = null;\n            object.startTime = null;\n            object.details = null;\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n            object.http = null;\n            object.durationNs = 0;\n            object.root = null;\n            object.cachePolicy = null;\n            object.signature = \"\";\n            object.fullQueryCacheHit = false;\n            object.persistedQueryHit = false;\n            object.persistedQueryRegister = false;\n            object.registeredOperation = false;\n            object.forbiddenOperation = false;\n            object.queryPlan = null;\n            object.unexecutedOperationBody = \"\";\n            object.unexecutedOperationName = \"\";\n            object.fieldExecutionWeight = 0;\n            object.isIncomplete = false;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n            object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);\n        if (message.details != null && message.hasOwnProperty(\"details\"))\n            object.details = $root.Trace.Details.toObject(message.details, options);\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        if (message.http != null && message.hasOwnProperty(\"http\"))\n            object.http = $root.Trace.HTTP.toObject(message.http, options);\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (typeof message.durationNs === \"number\")\n                object.durationNs = options.longs === String ? String(message.durationNs) : message.durationNs;\n            else\n                object.durationNs = options.longs === String ? $util.Long.prototype.toString.call(message.durationNs) : options.longs === Number ? new $util.LongBits(message.durationNs.low >>> 0, message.durationNs.high >>> 0).toNumber(true) : message.durationNs;\n        if (message.root != null && message.hasOwnProperty(\"root\"))\n            object.root = $root.Trace.Node.toObject(message.root, options);\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n            object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            object.signature = message.signature;\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            object.fullQueryCacheHit = message.fullQueryCacheHit;\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            object.persistedQueryHit = message.persistedQueryHit;\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            object.persistedQueryRegister = message.persistedQueryRegister;\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            object.registeredOperation = message.registeredOperation;\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            object.forbiddenOperation = message.forbiddenOperation;\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\"))\n            object.queryPlan = $root.Trace.QueryPlanNode.toObject(message.queryPlan, options);\n        if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\"))\n            object.unexecutedOperationBody = message.unexecutedOperationBody;\n        if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\"))\n            object.unexecutedOperationName = message.unexecutedOperationName;\n        if (message.fieldExecutionWeight != null && message.hasOwnProperty(\"fieldExecutionWeight\"))\n            object.fieldExecutionWeight = options.json && !isFinite(message.fieldExecutionWeight) ? String(message.fieldExecutionWeight) : message.fieldExecutionWeight;\n        if (message.isIncomplete != null && message.hasOwnProperty(\"isIncomplete\"))\n            object.isIncomplete = message.isIncomplete;\n        return object;\n    };\n\n    /**\n     * Converts this Trace to JSON.\n     * @function toJSON\n     * @memberof Trace\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Trace.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    Trace.CachePolicy = (function() {\n\n        /**\n         * Properties of a CachePolicy.\n         * @memberof Trace\n         * @interface ICachePolicy\n         * @property {Trace.CachePolicy.Scope|null} [scope] CachePolicy scope\n         * @property {number|null} [maxAgeNs] CachePolicy maxAgeNs\n         */\n\n        /**\n         * Constructs a new CachePolicy.\n         * @memberof Trace\n         * @classdesc Represents a CachePolicy.\n         * @implements ICachePolicy\n         * @constructor\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         */\n        function CachePolicy(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CachePolicy scope.\n         * @member {Trace.CachePolicy.Scope} scope\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.scope = 0;\n\n        /**\n         * CachePolicy maxAgeNs.\n         * @member {number} maxAgeNs\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.maxAgeNs = 0;\n\n        /**\n         * Creates a new CachePolicy instance using the specified properties.\n         * @function create\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         * @returns {Trace.CachePolicy} CachePolicy instance\n         */\n        CachePolicy.create = function create(properties) {\n            return new CachePolicy(properties);\n        };\n\n        /**\n         * Encodes the specified CachePolicy message. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.scope);\n            if (message.maxAgeNs != null && Object.hasOwnProperty.call(message, \"maxAgeNs\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.maxAgeNs);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CachePolicy message, length delimited. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.CachePolicy();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.scope = reader.int32();\n                    break;\n                case 2:\n                    message.maxAgeNs = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CachePolicy message.\n         * @function verify\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CachePolicy.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                switch (message.scope) {\n                default:\n                    return \"scope: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (!$util.isInteger(message.maxAgeNs) && !(message.maxAgeNs && $util.isInteger(message.maxAgeNs.low) && $util.isInteger(message.maxAgeNs.high)))\n                    return \"maxAgeNs: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a CachePolicy message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.CachePolicy} message CachePolicy\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CachePolicy.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.scope = options.enums === String ? \"UNKNOWN\" : 0;\n                object.maxAgeNs = 0;\n            }\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                object.scope = options.enums === String ? $root.Trace.CachePolicy.Scope[message.scope] : message.scope;\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (typeof message.maxAgeNs === \"number\")\n                    object.maxAgeNs = options.longs === String ? String(message.maxAgeNs) : message.maxAgeNs;\n                else\n                    object.maxAgeNs = options.longs === String ? $util.Long.prototype.toString.call(message.maxAgeNs) : options.longs === Number ? new $util.LongBits(message.maxAgeNs.low >>> 0, message.maxAgeNs.high >>> 0).toNumber() : message.maxAgeNs;\n            return object;\n        };\n\n        /**\n         * Converts this CachePolicy to JSON.\n         * @function toJSON\n         * @memberof Trace.CachePolicy\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CachePolicy.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        /**\n         * Scope enum.\n         * @name Trace.CachePolicy.Scope\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} PUBLIC=1 PUBLIC value\n         * @property {number} PRIVATE=2 PRIVATE value\n         */\n        CachePolicy.Scope = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"PUBLIC\"] = 1;\n            values[valuesById[2] = \"PRIVATE\"] = 2;\n            return values;\n        })();\n\n        return CachePolicy;\n    })();\n\n    Trace.Details = (function() {\n\n        /**\n         * Properties of a Details.\n         * @memberof Trace\n         * @interface IDetails\n         * @property {Object.<string,string>|null} [variablesJson] Details variablesJson\n         * @property {string|null} [operationName] Details operationName\n         */\n\n        /**\n         * Constructs a new Details.\n         * @memberof Trace\n         * @classdesc Represents a Details.\n         * @implements IDetails\n         * @constructor\n         * @param {Trace.IDetails=} [properties] Properties to set\n         */\n        function Details(properties) {\n            this.variablesJson = {};\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Details variablesJson.\n         * @member {Object.<string,string>} variablesJson\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.variablesJson = $util.emptyObject;\n\n        /**\n         * Details operationName.\n         * @member {string} operationName\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.operationName = \"\";\n\n        /**\n         * Creates a new Details instance using the specified properties.\n         * @function create\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails=} [properties] Properties to set\n         * @returns {Trace.Details} Details instance\n         */\n        Details.create = function create(properties) {\n            return new Details(properties);\n        };\n\n        /**\n         * Encodes the specified Details message. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.operationName != null && Object.hasOwnProperty.call(message, \"operationName\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.operationName);\n            if (message.variablesJson != null && Object.hasOwnProperty.call(message, \"variablesJson\"))\n                for (let keys = Object.keys(message.variablesJson), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.variablesJson[keys[i]]).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Details message, length delimited. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Details(), key;\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 4:\n                    reader.skip().pos++;\n                    if (message.variablesJson === $util.emptyObject)\n                        message.variablesJson = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.variablesJson[key] = reader.string();\n                    break;\n                case 3:\n                    message.operationName = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Details message.\n         * @function verify\n         * @memberof Trace.Details\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Details.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.variablesJson != null && message.hasOwnProperty(\"variablesJson\")) {\n                if (!$util.isObject(message.variablesJson))\n                    return \"variablesJson: object expected\";\n                let key = Object.keys(message.variablesJson);\n                for (let i = 0; i < key.length; ++i)\n                    if (!$util.isString(message.variablesJson[key[i]]))\n                        return \"variablesJson: string{k:string} expected\";\n            }\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                if (!$util.isString(message.operationName))\n                    return \"operationName: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Details message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.Details} message Details\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Details.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.objects || options.defaults)\n                object.variablesJson = {};\n            if (options.defaults)\n                object.operationName = \"\";\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                object.operationName = message.operationName;\n            let keys2;\n            if (message.variablesJson && (keys2 = Object.keys(message.variablesJson)).length) {\n                object.variablesJson = {};\n                for (let j = 0; j < keys2.length; ++j)\n                    object.variablesJson[keys2[j]] = message.variablesJson[keys2[j]];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Details to JSON.\n         * @function toJSON\n         * @memberof Trace.Details\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Details.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Details;\n    })();\n\n    Trace.Error = (function() {\n\n        /**\n         * Properties of an Error.\n         * @memberof Trace\n         * @interface IError\n         * @property {string|null} [message] Error message\n         * @property {Array.<Trace.ILocation>|null} [location] Error location\n         * @property {number|null} [timeNs] Error timeNs\n         * @property {string|null} [json] Error json\n         */\n\n        /**\n         * Constructs a new Error.\n         * @memberof Trace\n         * @classdesc Represents an Error.\n         * @implements IError\n         * @constructor\n         * @param {Trace.IError=} [properties] Properties to set\n         */\n        function Error(properties) {\n            this.location = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Error message.\n         * @member {string} message\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.message = \"\";\n\n        /**\n         * Error location.\n         * @member {Array.<Trace.ILocation>} location\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.location = $util.emptyArray;\n\n        /**\n         * Error timeNs.\n         * @member {number} timeNs\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.timeNs = 0;\n\n        /**\n         * Error json.\n         * @member {string} json\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.json = \"\";\n\n        /**\n         * Creates a new Error instance using the specified properties.\n         * @function create\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError=} [properties] Properties to set\n         * @returns {Trace.Error} Error instance\n         */\n        Error.create = function create(properties) {\n            return new Error(properties);\n        };\n\n        /**\n         * Encodes the specified Error message. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);\n            if (message.location != null && message.location.length)\n                for (let i = 0; i < message.location.length; ++i)\n                    $root.Trace.Location.encode(message.location[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.timeNs != null && Object.hasOwnProperty.call(message, \"timeNs\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.timeNs);\n            if (message.json != null && Object.hasOwnProperty.call(message, \"json\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.json);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Error message, length delimited. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Error();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.message = reader.string();\n                    break;\n                case 2:\n                    if (!(message.location && message.location.length))\n                        message.location = [];\n                    message.location.push($root.Trace.Location.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.timeNs = reader.uint64();\n                    break;\n                case 4:\n                    message.json = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Error message.\n         * @function verify\n         * @memberof Trace.Error\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Error.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                if (!$util.isString(message.message))\n                    return \"message: string expected\";\n            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                if (!Array.isArray(message.location))\n                    return \"location: array expected\";\n                for (let i = 0; i < message.location.length; ++i) {\n                    let error = $root.Trace.Location.verify(message.location[i]);\n                    if (error)\n                        return \"location.\" + error;\n                }\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (!$util.isInteger(message.timeNs) && !(message.timeNs && $util.isInteger(message.timeNs.low) && $util.isInteger(message.timeNs.high)))\n                    return \"timeNs: integer|Long expected\";\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                if (!$util.isString(message.json))\n                    return \"json: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from an Error message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.Error} message Error\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Error.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults)\n                object.location = [];\n            if (options.defaults) {\n                object.message = \"\";\n                object.timeNs = 0;\n                object.json = \"\";\n            }\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            if (message.location && message.location.length) {\n                object.location = [];\n                for (let j = 0; j < message.location.length; ++j)\n                    object.location[j] = $root.Trace.Location.toObject(message.location[j], options);\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (typeof message.timeNs === \"number\")\n                    object.timeNs = options.longs === String ? String(message.timeNs) : message.timeNs;\n                else\n                    object.timeNs = options.longs === String ? $util.Long.prototype.toString.call(message.timeNs) : options.longs === Number ? new $util.LongBits(message.timeNs.low >>> 0, message.timeNs.high >>> 0).toNumber(true) : message.timeNs;\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                object.json = message.json;\n            return object;\n        };\n\n        /**\n         * Converts this Error to JSON.\n         * @function toJSON\n         * @memberof Trace.Error\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Error.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Error;\n    })();\n\n    Trace.HTTP = (function() {\n\n        /**\n         * Properties of a HTTP.\n         * @memberof Trace\n         * @interface IHTTP\n         * @property {Trace.HTTP.Method|null} [method] HTTP method\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [requestHeaders] HTTP requestHeaders\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [responseHeaders] HTTP responseHeaders\n         * @property {number|null} [statusCode] HTTP statusCode\n         */\n\n        /**\n         * Constructs a new HTTP.\n         * @memberof Trace\n         * @classdesc Represents a HTTP.\n         * @implements IHTTP\n         * @constructor\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         */\n        function HTTP(properties) {\n            this.requestHeaders = {};\n            this.responseHeaders = {};\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * HTTP method.\n         * @member {Trace.HTTP.Method} method\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.method = 0;\n\n        /**\n         * HTTP requestHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} requestHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.requestHeaders = $util.emptyObject;\n\n        /**\n         * HTTP responseHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} responseHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.responseHeaders = $util.emptyObject;\n\n        /**\n         * HTTP statusCode.\n         * @member {number} statusCode\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.statusCode = 0;\n\n        /**\n         * Creates a new HTTP instance using the specified properties.\n         * @function create\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         * @returns {Trace.HTTP} HTTP instance\n         */\n        HTTP.create = function create(properties) {\n            return new HTTP(properties);\n        };\n\n        /**\n         * Encodes the specified HTTP message. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.method != null && Object.hasOwnProperty.call(message, \"method\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.method);\n            if (message.requestHeaders != null && Object.hasOwnProperty.call(message, \"requestHeaders\"))\n                for (let keys = Object.keys(message.requestHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.requestHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.responseHeaders != null && Object.hasOwnProperty.call(message, \"responseHeaders\"))\n                for (let keys = Object.keys(message.responseHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.responseHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.statusCode != null && Object.hasOwnProperty.call(message, \"statusCode\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.statusCode);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified HTTP message, length delimited. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP(), key;\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.method = reader.int32();\n                    break;\n                case 4:\n                    reader.skip().pos++;\n                    if (message.requestHeaders === $util.emptyObject)\n                        message.requestHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.requestHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    reader.skip().pos++;\n                    if (message.responseHeaders === $util.emptyObject)\n                        message.responseHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.responseHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.statusCode = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a HTTP message.\n         * @function verify\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        HTTP.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                switch (message.method) {\n                default:\n                    return \"method: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                    break;\n                }\n            if (message.requestHeaders != null && message.hasOwnProperty(\"requestHeaders\")) {\n                if (!$util.isObject(message.requestHeaders))\n                    return \"requestHeaders: object expected\";\n                let key = Object.keys(message.requestHeaders);\n                for (let i = 0; i < key.length; ++i) {\n                    let error = $root.Trace.HTTP.Values.verify(message.requestHeaders[key[i]]);\n                    if (error)\n                        return \"requestHeaders.\" + error;\n                }\n            }\n            if (message.responseHeaders != null && message.hasOwnProperty(\"responseHeaders\")) {\n                if (!$util.isObject(message.responseHeaders))\n                    return \"responseHeaders: object expected\";\n                let key = Object.keys(message.responseHeaders);\n                for (let i = 0; i < key.length; ++i) {\n                    let error = $root.Trace.HTTP.Values.verify(message.responseHeaders[key[i]]);\n                    if (error)\n                        return \"responseHeaders.\" + error;\n                }\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                if (!$util.isInteger(message.statusCode))\n                    return \"statusCode: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a HTTP message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.HTTP} message HTTP\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        HTTP.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.objects || options.defaults) {\n                object.requestHeaders = {};\n                object.responseHeaders = {};\n            }\n            if (options.defaults) {\n                object.method = options.enums === String ? \"UNKNOWN\" : 0;\n                object.statusCode = 0;\n            }\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                object.method = options.enums === String ? $root.Trace.HTTP.Method[message.method] : message.method;\n            let keys2;\n            if (message.requestHeaders && (keys2 = Object.keys(message.requestHeaders)).length) {\n                object.requestHeaders = {};\n                for (let j = 0; j < keys2.length; ++j)\n                    object.requestHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.requestHeaders[keys2[j]], options);\n            }\n            if (message.responseHeaders && (keys2 = Object.keys(message.responseHeaders)).length) {\n                object.responseHeaders = {};\n                for (let j = 0; j < keys2.length; ++j)\n                    object.responseHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.responseHeaders[keys2[j]], options);\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                object.statusCode = message.statusCode;\n            return object;\n        };\n\n        /**\n         * Converts this HTTP to JSON.\n         * @function toJSON\n         * @memberof Trace.HTTP\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        HTTP.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        HTTP.Values = (function() {\n\n            /**\n             * Properties of a Values.\n             * @memberof Trace.HTTP\n             * @interface IValues\n             * @property {Array.<string>|null} [value] Values value\n             */\n\n            /**\n             * Constructs a new Values.\n             * @memberof Trace.HTTP\n             * @classdesc Represents a Values.\n             * @implements IValues\n             * @constructor\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             */\n            function Values(properties) {\n                this.value = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Values value.\n             * @member {Array.<string>} value\n             * @memberof Trace.HTTP.Values\n             * @instance\n             */\n            Values.prototype.value = $util.emptyArray;\n\n            /**\n             * Creates a new Values instance using the specified properties.\n             * @function create\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             * @returns {Trace.HTTP.Values} Values instance\n             */\n            Values.create = function create(properties) {\n                return new Values(properties);\n            };\n\n            /**\n             * Encodes the specified Values message. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.value != null && message.value.length)\n                    for (let i = 0; i < message.value.length; ++i)\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.value[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Values message, length delimited. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP.Values();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.value && message.value.length))\n                            message.value = [];\n                        message.value.push(reader.string());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Values message.\n             * @function verify\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Values.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value))\n                        return \"value: array expected\";\n                    for (let i = 0; i < message.value.length; ++i)\n                        if (!$util.isString(message.value[i]))\n                            return \"value: string[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a Values message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.Values} message Values\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Values.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.value = [];\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (let j = 0; j < message.value.length; ++j)\n                        object.value[j] = message.value[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Values to JSON.\n             * @function toJSON\n             * @memberof Trace.HTTP.Values\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Values.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n\n            return Values;\n        })();\n\n        /**\n         * Method enum.\n         * @name Trace.HTTP.Method\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} OPTIONS=1 OPTIONS value\n         * @property {number} GET=2 GET value\n         * @property {number} HEAD=3 HEAD value\n         * @property {number} POST=4 POST value\n         * @property {number} PUT=5 PUT value\n         * @property {number} DELETE=6 DELETE value\n         * @property {number} TRACE=7 TRACE value\n         * @property {number} CONNECT=8 CONNECT value\n         * @property {number} PATCH=9 PATCH value\n         */\n        HTTP.Method = (function() {\n            const valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"OPTIONS\"] = 1;\n            values[valuesById[2] = \"GET\"] = 2;\n            values[valuesById[3] = \"HEAD\"] = 3;\n            values[valuesById[4] = \"POST\"] = 4;\n            values[valuesById[5] = \"PUT\"] = 5;\n            values[valuesById[6] = \"DELETE\"] = 6;\n            values[valuesById[7] = \"TRACE\"] = 7;\n            values[valuesById[8] = \"CONNECT\"] = 8;\n            values[valuesById[9] = \"PATCH\"] = 9;\n            return values;\n        })();\n\n        return HTTP;\n    })();\n\n    Trace.Location = (function() {\n\n        /**\n         * Properties of a Location.\n         * @memberof Trace\n         * @interface ILocation\n         * @property {number|null} [line] Location line\n         * @property {number|null} [column] Location column\n         */\n\n        /**\n         * Constructs a new Location.\n         * @memberof Trace\n         * @classdesc Represents a Location.\n         * @implements ILocation\n         * @constructor\n         * @param {Trace.ILocation=} [properties] Properties to set\n         */\n        function Location(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Location line.\n         * @member {number} line\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.line = 0;\n\n        /**\n         * Location column.\n         * @member {number} column\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.column = 0;\n\n        /**\n         * Creates a new Location instance using the specified properties.\n         * @function create\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation=} [properties] Properties to set\n         * @returns {Trace.Location} Location instance\n         */\n        Location.create = function create(properties) {\n            return new Location(properties);\n        };\n\n        /**\n         * Encodes the specified Location message. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.line != null && Object.hasOwnProperty.call(message, \"line\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.line);\n            if (message.column != null && Object.hasOwnProperty.call(message, \"column\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.column);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Location message, length delimited. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Location();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.line = reader.uint32();\n                    break;\n                case 2:\n                    message.column = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Location message.\n         * @function verify\n         * @memberof Trace.Location\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Location.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                if (!$util.isInteger(message.line))\n                    return \"line: integer expected\";\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                if (!$util.isInteger(message.column))\n                    return \"column: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Location message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.Location} message Location\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Location.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.defaults) {\n                object.line = 0;\n                object.column = 0;\n            }\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                object.line = message.line;\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                object.column = message.column;\n            return object;\n        };\n\n        /**\n         * Converts this Location to JSON.\n         * @function toJSON\n         * @memberof Trace.Location\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Location.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Location;\n    })();\n\n    Trace.Node = (function() {\n\n        /**\n         * Properties of a Node.\n         * @memberof Trace\n         * @interface INode\n         * @property {string|null} [responseName] Node responseName\n         * @property {number|null} [index] Node index\n         * @property {string|null} [originalFieldName] Node originalFieldName\n         * @property {string|null} [type] Node type\n         * @property {string|null} [parentType] Node parentType\n         * @property {Trace.ICachePolicy|null} [cachePolicy] Node cachePolicy\n         * @property {number|null} [startTime] Node startTime\n         * @property {number|null} [endTime] Node endTime\n         * @property {Array.<Trace.IError>|null} [error] Node error\n         * @property {Array.<Trace.INode>|null} [child] Node child\n         */\n\n        /**\n         * Constructs a new Node.\n         * @memberof Trace\n         * @classdesc Represents a Node.\n         * @implements INode\n         * @constructor\n         * @param {Trace.INode=} [properties] Properties to set\n         */\n        function Node(properties) {\n            this.error = [];\n            this.child = [];\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Node responseName.\n         * @member {string} responseName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.responseName = \"\";\n\n        /**\n         * Node index.\n         * @member {number} index\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.index = 0;\n\n        /**\n         * Node originalFieldName.\n         * @member {string} originalFieldName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.originalFieldName = \"\";\n\n        /**\n         * Node type.\n         * @member {string} type\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.type = \"\";\n\n        /**\n         * Node parentType.\n         * @member {string} parentType\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.parentType = \"\";\n\n        /**\n         * Node cachePolicy.\n         * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.cachePolicy = null;\n\n        /**\n         * Node startTime.\n         * @member {number} startTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.startTime = 0;\n\n        /**\n         * Node endTime.\n         * @member {number} endTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.endTime = 0;\n\n        /**\n         * Node error.\n         * @member {Array.<Trace.IError>} error\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.error = $util.emptyArray;\n\n        /**\n         * Node child.\n         * @member {Array.<Trace.INode>} child\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.child = $util.emptyArray;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * Node id.\n         * @member {\"responseName\"|\"index\"|undefined} id\n         * @memberof Trace.Node\n         * @instance\n         */\n        Object.defineProperty(Node.prototype, \"id\", {\n            get: $util.oneOfGetter($oneOfFields = [\"responseName\", \"index\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Node instance using the specified properties.\n         * @function create\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode=} [properties] Properties to set\n         * @returns {Trace.Node} Node instance\n         */\n        Node.create = function create(properties) {\n            return new Node(properties);\n        };\n\n        /**\n         * Encodes the specified Node message. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.responseName != null && Object.hasOwnProperty.call(message, \"responseName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.responseName);\n            if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);\n            if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n                $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.startTime);\n            if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.endTime);\n            if (message.error != null && message.error.length)\n                for (let i = 0; i < message.error.length; ++i)\n                    $root.Trace.Error.encode(message.error[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.child != null && message.child.length)\n                for (let i = 0; i < message.child.length; ++i)\n                    $root.Trace.Node.encode(message.child[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.parentType != null && Object.hasOwnProperty.call(message, \"parentType\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.parentType);\n            if (message.originalFieldName != null && Object.hasOwnProperty.call(message, \"originalFieldName\"))\n                writer.uint32(/* id 14, wireType 2 =*/114).string(message.originalFieldName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Node message, length delimited. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Node();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.responseName = reader.string();\n                    break;\n                case 2:\n                    message.index = reader.uint32();\n                    break;\n                case 14:\n                    message.originalFieldName = reader.string();\n                    break;\n                case 3:\n                    message.type = reader.string();\n                    break;\n                case 13:\n                    message.parentType = reader.string();\n                    break;\n                case 5:\n                    message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.startTime = reader.uint64();\n                    break;\n                case 9:\n                    message.endTime = reader.uint64();\n                    break;\n                case 11:\n                    if (!(message.error && message.error.length))\n                        message.error = [];\n                    message.error.push($root.Trace.Error.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.child && message.child.length))\n                        message.child = [];\n                    message.child.push($root.Trace.Node.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Node message.\n         * @function verify\n         * @memberof Trace.Node\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Node.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                properties.id = 1;\n                if (!$util.isString(message.responseName))\n                    return \"responseName: string expected\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                if (properties.id === 1)\n                    return \"id: multiple values\";\n                properties.id = 1;\n                if (!$util.isInteger(message.index))\n                    return \"index: integer expected\";\n            }\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                if (!$util.isString(message.originalFieldName))\n                    return \"originalFieldName: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                if (!$util.isString(message.type))\n                    return \"type: string expected\";\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                if (!$util.isString(message.parentType))\n                    return \"parentType: string expected\";\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n                let error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n                if (error)\n                    return \"cachePolicy.\" + error;\n            }\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))\n                    return \"startTime: integer|Long expected\";\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))\n                    return \"endTime: integer|Long expected\";\n            if (message.error != null && message.hasOwnProperty(\"error\")) {\n                if (!Array.isArray(message.error))\n                    return \"error: array expected\";\n                for (let i = 0; i < message.error.length; ++i) {\n                    let error = $root.Trace.Error.verify(message.error[i]);\n                    if (error)\n                        return \"error.\" + error;\n                }\n            }\n            if (message.child != null && message.hasOwnProperty(\"child\")) {\n                if (!Array.isArray(message.child))\n                    return \"child: array expected\";\n                for (let i = 0; i < message.child.length; ++i) {\n                    let error = $root.Trace.Node.verify(message.child[i]);\n                    if (error)\n                        return \"child.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a Node message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.Node} message Node\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Node.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (options.arrays || options.defaults) {\n                object.error = [];\n                object.child = [];\n            }\n            if (options.defaults) {\n                object.type = \"\";\n                object.cachePolicy = null;\n                object.startTime = 0;\n                object.endTime = 0;\n                object.parentType = \"\";\n                object.originalFieldName = \"\";\n            }\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                object.responseName = message.responseName;\n                if (options.oneofs)\n                    object.id = \"responseName\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                object.index = message.index;\n                if (options.oneofs)\n                    object.id = \"index\";\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = message.type;\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n                object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (typeof message.startTime === \"number\")\n                    object.startTime = options.longs === String ? String(message.startTime) : message.startTime;\n                else\n                    object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (typeof message.endTime === \"number\")\n                    object.endTime = options.longs === String ? String(message.endTime) : message.endTime;\n                else\n                    object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber(true) : message.endTime;\n            if (message.error && message.error.length) {\n                object.error = [];\n                for (let j = 0; j < message.error.length; ++j)\n                    object.error[j] = $root.Trace.Error.toObject(message.error[j], options);\n            }\n            if (message.child && message.child.length) {\n                object.child = [];\n                for (let j = 0; j < message.child.length; ++j)\n                    object.child[j] = $root.Trace.Node.toObject(message.child[j], options);\n            }\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                object.parentType = message.parentType;\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                object.originalFieldName = message.originalFieldName;\n            return object;\n        };\n\n        /**\n         * Converts this Node to JSON.\n         * @function toJSON\n         * @memberof Trace.Node\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Node.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        return Node;\n    })();\n\n    Trace.QueryPlanNode = (function() {\n\n        /**\n         * Properties of a QueryPlanNode.\n         * @memberof Trace\n         * @interface IQueryPlanNode\n         * @property {Trace.QueryPlanNode.ISequenceNode|null} [sequence] QueryPlanNode sequence\n         * @property {Trace.QueryPlanNode.IParallelNode|null} [parallel] QueryPlanNode parallel\n         * @property {Trace.QueryPlanNode.IFetchNode|null} [fetch] QueryPlanNode fetch\n         * @property {Trace.QueryPlanNode.IFlattenNode|null} [flatten] QueryPlanNode flatten\n         * @property {Trace.QueryPlanNode.IDeferNode|null} [defer] QueryPlanNode defer\n         * @property {Trace.QueryPlanNode.IConditionNode|null} [condition] QueryPlanNode condition\n         */\n\n        /**\n         * Constructs a new QueryPlanNode.\n         * @memberof Trace\n         * @classdesc Represents a QueryPlanNode.\n         * @implements IQueryPlanNode\n         * @constructor\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         */\n        function QueryPlanNode(properties) {\n            if (properties)\n                for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * QueryPlanNode sequence.\n         * @member {Trace.QueryPlanNode.ISequenceNode|null|undefined} sequence\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.sequence = null;\n\n        /**\n         * QueryPlanNode parallel.\n         * @member {Trace.QueryPlanNode.IParallelNode|null|undefined} parallel\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.parallel = null;\n\n        /**\n         * QueryPlanNode fetch.\n         * @member {Trace.QueryPlanNode.IFetchNode|null|undefined} fetch\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.fetch = null;\n\n        /**\n         * QueryPlanNode flatten.\n         * @member {Trace.QueryPlanNode.IFlattenNode|null|undefined} flatten\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.flatten = null;\n\n        /**\n         * QueryPlanNode defer.\n         * @member {Trace.QueryPlanNode.IDeferNode|null|undefined} defer\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.defer = null;\n\n        /**\n         * QueryPlanNode condition.\n         * @member {Trace.QueryPlanNode.IConditionNode|null|undefined} condition\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.condition = null;\n\n        // OneOf field names bound to virtual getters and setters\n        let $oneOfFields;\n\n        /**\n         * QueryPlanNode node.\n         * @member {\"sequence\"|\"parallel\"|\"fetch\"|\"flatten\"|\"defer\"|\"condition\"|undefined} node\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        Object.defineProperty(QueryPlanNode.prototype, \"node\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sequence\", \"parallel\", \"fetch\", \"flatten\", \"defer\", \"condition\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new QueryPlanNode instance using the specified properties.\n         * @function create\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         * @returns {Trace.QueryPlanNode} QueryPlanNode instance\n         */\n        QueryPlanNode.create = function create(properties) {\n            return new QueryPlanNode(properties);\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.sequence != null && Object.hasOwnProperty.call(message, \"sequence\"))\n                $root.Trace.QueryPlanNode.SequenceNode.encode(message.sequence, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.parallel != null && Object.hasOwnProperty.call(message, \"parallel\"))\n                $root.Trace.QueryPlanNode.ParallelNode.encode(message.parallel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.fetch != null && Object.hasOwnProperty.call(message, \"fetch\"))\n                $root.Trace.QueryPlanNode.FetchNode.encode(message.fetch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.flatten != null && Object.hasOwnProperty.call(message, \"flatten\"))\n                $root.Trace.QueryPlanNode.FlattenNode.encode(message.flatten, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            if (message.defer != null && Object.hasOwnProperty.call(message, \"defer\"))\n                $root.Trace.QueryPlanNode.DeferNode.encode(message.defer, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.condition != null && Object.hasOwnProperty.call(message, \"condition\"))\n                $root.Trace.QueryPlanNode.ConditionNode.encode(message.condition, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode();\n            while (reader.pos < end) {\n                let tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.sequence = $root.Trace.QueryPlanNode.SequenceNode.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.parallel = $root.Trace.QueryPlanNode.ParallelNode.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.fetch = $root.Trace.QueryPlanNode.FetchNode.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.flatten = $root.Trace.QueryPlanNode.FlattenNode.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    message.defer = $root.Trace.QueryPlanNode.DeferNode.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.condition = $root.Trace.QueryPlanNode.ConditionNode.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a QueryPlanNode message.\n         * @function verify\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        QueryPlanNode.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            let properties = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                properties.node = 1;\n                {\n                    let error = $root.Trace.QueryPlanNode.SequenceNode.verify(message.sequence);\n                    if (error)\n                        return \"sequence.\" + error;\n                }\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    let error = $root.Trace.QueryPlanNode.ParallelNode.verify(message.parallel);\n                    if (error)\n                        return \"parallel.\" + error;\n                }\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    let error = $root.Trace.QueryPlanNode.FetchNode.verify(message.fetch);\n                    if (error)\n                        return \"fetch.\" + error;\n                }\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    let error = $root.Trace.QueryPlanNode.FlattenNode.verify(message.flatten);\n                    if (error)\n                        return \"flatten.\" + error;\n                }\n            }\n            if (message.defer != null && message.hasOwnProperty(\"defer\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    let error = $root.Trace.QueryPlanNode.DeferNode.verify(message.defer);\n                    if (error)\n                        return \"defer.\" + error;\n                }\n            }\n            if (message.condition != null && message.hasOwnProperty(\"condition\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    let error = $root.Trace.QueryPlanNode.ConditionNode.verify(message.condition);\n                    if (error)\n                        return \"condition.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a plain object from a QueryPlanNode message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.QueryPlanNode} message QueryPlanNode\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        QueryPlanNode.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            let object = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                object.sequence = $root.Trace.QueryPlanNode.SequenceNode.toObject(message.sequence, options);\n                if (options.oneofs)\n                    object.node = \"sequence\";\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                object.parallel = $root.Trace.QueryPlanNode.ParallelNode.toObject(message.parallel, options);\n                if (options.oneofs)\n                    object.node = \"parallel\";\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                object.fetch = $root.Trace.QueryPlanNode.FetchNode.toObject(message.fetch, options);\n                if (options.oneofs)\n                    object.node = \"fetch\";\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                object.flatten = $root.Trace.QueryPlanNode.FlattenNode.toObject(message.flatten, options);\n                if (options.oneofs)\n                    object.node = \"flatten\";\n            }\n            if (message.defer != null && message.hasOwnProperty(\"defer\")) {\n                object.defer = $root.Trace.QueryPlanNode.DeferNode.toObject(message.defer, options);\n                if (options.oneofs)\n                    object.node = \"defer\";\n            }\n            if (message.condition != null && message.hasOwnProperty(\"condition\")) {\n                object.condition = $root.Trace.QueryPlanNode.ConditionNode.toObject(message.condition, options);\n                if (options.oneofs)\n                    object.node = \"condition\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this QueryPlanNode to JSON.\n         * @function toJSON\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        QueryPlanNode.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n        };\n\n        QueryPlanNode.SequenceNode = (function() {\n\n            /**\n             * Properties of a SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface ISequenceNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] SequenceNode nodes\n             */\n\n            /**\n             * Constructs a new SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a SequenceNode.\n             * @implements ISequenceNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             */\n            function SequenceNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SequenceNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             */\n            SequenceNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new SequenceNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode instance\n             */\n            SequenceNode.create = function create(properties) {\n                return new SequenceNode(properties);\n            };\n\n            /**\n             * Encodes the specified SequenceNode message. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (let i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SequenceNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.SequenceNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SequenceNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SequenceNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (let i = 0; i < message.nodes.length; ++i) {\n                        let error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a SequenceNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.SequenceNode} message SequenceNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SequenceNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (let j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this SequenceNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SequenceNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n\n            return SequenceNode;\n        })();\n\n        QueryPlanNode.ParallelNode = (function() {\n\n            /**\n             * Properties of a ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IParallelNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] ParallelNode nodes\n             */\n\n            /**\n             * Constructs a new ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ParallelNode.\n             * @implements IParallelNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             */\n            function ParallelNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ParallelNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             */\n            ParallelNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new ParallelNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode instance\n             */\n            ParallelNode.create = function create(properties) {\n                return new ParallelNode(properties);\n            };\n\n            /**\n             * Encodes the specified ParallelNode message. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (let i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ParallelNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ParallelNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ParallelNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ParallelNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (let i = 0; i < message.nodes.length; ++i) {\n                        let error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ParallelNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.ParallelNode} message ParallelNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ParallelNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (let j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ParallelNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ParallelNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n\n            return ParallelNode;\n        })();\n\n        QueryPlanNode.FetchNode = (function() {\n\n            /**\n             * Properties of a FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFetchNode\n             * @property {string|null} [serviceName] FetchNode serviceName\n             * @property {boolean|null} [traceParsingFailed] FetchNode traceParsingFailed\n             * @property {ITrace|null} [trace] FetchNode trace\n             * @property {number|null} [sentTimeOffset] FetchNode sentTimeOffset\n             * @property {google.protobuf.ITimestamp|null} [sentTime] FetchNode sentTime\n             * @property {google.protobuf.ITimestamp|null} [receivedTime] FetchNode receivedTime\n             */\n\n            /**\n             * Constructs a new FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FetchNode.\n             * @implements IFetchNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             */\n            function FetchNode(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FetchNode serviceName.\n             * @member {string} serviceName\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.serviceName = \"\";\n\n            /**\n             * FetchNode traceParsingFailed.\n             * @member {boolean} traceParsingFailed\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.traceParsingFailed = false;\n\n            /**\n             * FetchNode trace.\n             * @member {ITrace|null|undefined} trace\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.trace = null;\n\n            /**\n             * FetchNode sentTimeOffset.\n             * @member {number} sentTimeOffset\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTimeOffset = 0;\n\n            /**\n             * FetchNode sentTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} sentTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTime = null;\n\n            /**\n             * FetchNode receivedTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} receivedTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.receivedTime = null;\n\n            /**\n             * Creates a new FetchNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode instance\n             */\n            FetchNode.create = function create(properties) {\n                return new FetchNode(properties);\n            };\n\n            /**\n             * Encodes the specified FetchNode message. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.serviceName != null && Object.hasOwnProperty.call(message, \"serviceName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);\n                if (message.traceParsingFailed != null && Object.hasOwnProperty.call(message, \"traceParsingFailed\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.traceParsingFailed);\n                if (message.trace != null && Object.hasOwnProperty.call(message, \"trace\"))\n                    $root.Trace.encode(message.trace, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.sentTimeOffset != null && Object.hasOwnProperty.call(message, \"sentTimeOffset\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.sentTimeOffset);\n                if (message.sentTime != null && Object.hasOwnProperty.call(message, \"sentTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.sentTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                if (message.receivedTime != null && Object.hasOwnProperty.call(message, \"receivedTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.receivedTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FetchNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FetchNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.serviceName = reader.string();\n                        break;\n                    case 2:\n                        message.traceParsingFailed = reader.bool();\n                        break;\n                    case 3:\n                        message.trace = $root.Trace.decode(reader, reader.uint32());\n                        break;\n                    case 4:\n                        message.sentTimeOffset = reader.uint64();\n                        break;\n                    case 5:\n                        message.sentTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    case 6:\n                        message.receivedTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FetchNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FetchNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    if (!$util.isString(message.serviceName))\n                        return \"serviceName: string expected\";\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    if (typeof message.traceParsingFailed !== \"boolean\")\n                        return \"traceParsingFailed: boolean expected\";\n                if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n                    let error = $root.Trace.verify(message.trace);\n                    if (error)\n                        return \"trace.\" + error;\n                }\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (!$util.isInteger(message.sentTimeOffset) && !(message.sentTimeOffset && $util.isInteger(message.sentTimeOffset.low) && $util.isInteger(message.sentTimeOffset.high)))\n                        return \"sentTimeOffset: integer|Long expected\";\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\")) {\n                    let error = $root.google.protobuf.Timestamp.verify(message.sentTime);\n                    if (error)\n                        return \"sentTime.\" + error;\n                }\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\")) {\n                    let error = $root.google.protobuf.Timestamp.verify(message.receivedTime);\n                    if (error)\n                        return \"receivedTime.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a FetchNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.FetchNode} message FetchNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FetchNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.serviceName = \"\";\n                    object.traceParsingFailed = false;\n                    object.trace = null;\n                    object.sentTimeOffset = 0;\n                    object.sentTime = null;\n                    object.receivedTime = null;\n                }\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    object.serviceName = message.serviceName;\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    object.traceParsingFailed = message.traceParsingFailed;\n                if (message.trace != null && message.hasOwnProperty(\"trace\"))\n                    object.trace = $root.Trace.toObject(message.trace, options);\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (typeof message.sentTimeOffset === \"number\")\n                        object.sentTimeOffset = options.longs === String ? String(message.sentTimeOffset) : message.sentTimeOffset;\n                    else\n                        object.sentTimeOffset = options.longs === String ? $util.Long.prototype.toString.call(message.sentTimeOffset) : options.longs === Number ? new $util.LongBits(message.sentTimeOffset.low >>> 0, message.sentTimeOffset.high >>> 0).toNumber(true) : message.sentTimeOffset;\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\"))\n                    object.sentTime = $root.google.protobuf.Timestamp.toObject(message.sentTime, options);\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\"))\n                    object.receivedTime = $root.google.protobuf.Timestamp.toObject(message.receivedTime, options);\n                return object;\n            };\n\n            /**\n             * Converts this FetchNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FetchNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n\n            return FetchNode;\n        })();\n\n        QueryPlanNode.FlattenNode = (function() {\n\n            /**\n             * Properties of a FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFlattenNode\n             * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [responsePath] FlattenNode responsePath\n             * @property {Trace.IQueryPlanNode|null} [node] FlattenNode node\n             */\n\n            /**\n             * Constructs a new FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FlattenNode.\n             * @implements IFlattenNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             */\n            function FlattenNode(properties) {\n                this.responsePath = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FlattenNode responsePath.\n             * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} responsePath\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.responsePath = $util.emptyArray;\n\n            /**\n             * FlattenNode node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.node = null;\n\n            /**\n             * Creates a new FlattenNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode instance\n             */\n            FlattenNode.create = function create(properties) {\n                return new FlattenNode(properties);\n            };\n\n            /**\n             * Encodes the specified FlattenNode message. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.responsePath != null && message.responsePath.length)\n                    for (let i = 0; i < message.responsePath.length; ++i)\n                        $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.responsePath[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FlattenNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FlattenNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.responsePath && message.responsePath.length))\n                            message.responsePath = [];\n                        message.responsePath.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FlattenNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FlattenNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.responsePath != null && message.hasOwnProperty(\"responsePath\")) {\n                    if (!Array.isArray(message.responsePath))\n                        return \"responsePath: array expected\";\n                    for (let i = 0; i < message.responsePath.length; ++i) {\n                        let error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.responsePath[i]);\n                        if (error)\n                            return \"responsePath.\" + error;\n                    }\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    let error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a FlattenNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.FlattenNode} message FlattenNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FlattenNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.responsePath = [];\n                if (options.defaults)\n                    object.node = null;\n                if (message.responsePath && message.responsePath.length) {\n                    object.responsePath = [];\n                    for (let j = 0; j < message.responsePath.length; ++j)\n                        object.responsePath[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.responsePath[j], options);\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this FlattenNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FlattenNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n\n            return FlattenNode;\n        })();\n\n        QueryPlanNode.DeferNode = (function() {\n\n            /**\n             * Properties of a DeferNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferNode\n             * @property {Trace.QueryPlanNode.IDeferNodePrimary|null} [primary] DeferNode primary\n             * @property {Array.<Trace.QueryPlanNode.IDeferredNode>|null} [deferred] DeferNode deferred\n             */\n\n            /**\n             * Constructs a new DeferNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferNode.\n             * @implements IDeferNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferNode=} [properties] Properties to set\n             */\n            function DeferNode(properties) {\n                this.deferred = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferNode primary.\n             * @member {Trace.QueryPlanNode.IDeferNodePrimary|null|undefined} primary\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @instance\n             */\n            DeferNode.prototype.primary = null;\n\n            /**\n             * DeferNode deferred.\n             * @member {Array.<Trace.QueryPlanNode.IDeferredNode>} deferred\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @instance\n             */\n            DeferNode.prototype.deferred = $util.emptyArray;\n\n            /**\n             * Creates a new DeferNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferNode} DeferNode instance\n             */\n            DeferNode.create = function create(properties) {\n                return new DeferNode(properties);\n            };\n\n            /**\n             * Encodes the specified DeferNode message. Does not implicitly {@link Trace.QueryPlanNode.DeferNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNode} message DeferNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.primary != null && Object.hasOwnProperty.call(message, \"primary\"))\n                    $root.Trace.QueryPlanNode.DeferNodePrimary.encode(message.primary, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.deferred != null && message.deferred.length)\n                    for (let i = 0; i < message.deferred.length; ++i)\n                        $root.Trace.QueryPlanNode.DeferredNode.encode(message.deferred[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNode} message DeferNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferNode} DeferNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.primary = $root.Trace.QueryPlanNode.DeferNodePrimary.decode(reader, reader.uint32());\n                        break;\n                    case 2:\n                        if (!(message.deferred && message.deferred.length))\n                            message.deferred = [];\n                        message.deferred.push($root.Trace.QueryPlanNode.DeferredNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferNode} DeferNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.primary != null && message.hasOwnProperty(\"primary\")) {\n                    let error = $root.Trace.QueryPlanNode.DeferNodePrimary.verify(message.primary);\n                    if (error)\n                        return \"primary.\" + error;\n                }\n                if (message.deferred != null && message.hasOwnProperty(\"deferred\")) {\n                    if (!Array.isArray(message.deferred))\n                        return \"deferred: array expected\";\n                    for (let i = 0; i < message.deferred.length; ++i) {\n                        let error = $root.Trace.QueryPlanNode.DeferredNode.verify(message.deferred[i]);\n                        if (error)\n                            return \"deferred.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @static\n             * @param {Trace.QueryPlanNode.DeferNode} message DeferNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults)\n                    object.deferred = [];\n                if (options.defaults)\n                    object.primary = null;\n                if (message.primary != null && message.hasOwnProperty(\"primary\"))\n                    object.primary = $root.Trace.QueryPlanNode.DeferNodePrimary.toObject(message.primary, options);\n                if (message.deferred && message.deferred.length) {\n                    object.deferred = [];\n                    for (let j = 0; j < message.deferred.length; ++j)\n                        object.deferred[j] = $root.Trace.QueryPlanNode.DeferredNode.toObject(message.deferred[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this DeferNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n\n            return DeferNode;\n        })();\n\n        QueryPlanNode.ConditionNode = (function() {\n\n            /**\n             * Properties of a ConditionNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IConditionNode\n             * @property {string|null} [condition] ConditionNode condition\n             * @property {Trace.IQueryPlanNode|null} [ifClause] ConditionNode ifClause\n             * @property {Trace.IQueryPlanNode|null} [elseClause] ConditionNode elseClause\n             */\n\n            /**\n             * Constructs a new ConditionNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ConditionNode.\n             * @implements IConditionNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IConditionNode=} [properties] Properties to set\n             */\n            function ConditionNode(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ConditionNode condition.\n             * @member {string} condition\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             */\n            ConditionNode.prototype.condition = \"\";\n\n            /**\n             * ConditionNode ifClause.\n             * @member {Trace.IQueryPlanNode|null|undefined} ifClause\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             */\n            ConditionNode.prototype.ifClause = null;\n\n            /**\n             * ConditionNode elseClause.\n             * @member {Trace.IQueryPlanNode|null|undefined} elseClause\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             */\n            ConditionNode.prototype.elseClause = null;\n\n            /**\n             * Creates a new ConditionNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.IConditionNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ConditionNode} ConditionNode instance\n             */\n            ConditionNode.create = function create(properties) {\n                return new ConditionNode(properties);\n            };\n\n            /**\n             * Encodes the specified ConditionNode message. Does not implicitly {@link Trace.QueryPlanNode.ConditionNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.IConditionNode} message ConditionNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ConditionNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.condition != null && Object.hasOwnProperty.call(message, \"condition\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.condition);\n                if (message.ifClause != null && Object.hasOwnProperty.call(message, \"ifClause\"))\n                    $root.Trace.QueryPlanNode.encode(message.ifClause, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                if (message.elseClause != null && Object.hasOwnProperty.call(message, \"elseClause\"))\n                    $root.Trace.QueryPlanNode.encode(message.elseClause, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ConditionNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ConditionNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.IConditionNode} message ConditionNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ConditionNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ConditionNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ConditionNode} ConditionNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ConditionNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ConditionNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.condition = reader.string();\n                        break;\n                    case 2:\n                        message.ifClause = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    case 3:\n                        message.elseClause = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ConditionNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ConditionNode} ConditionNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ConditionNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ConditionNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ConditionNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.condition != null && message.hasOwnProperty(\"condition\"))\n                    if (!$util.isString(message.condition))\n                        return \"condition: string expected\";\n                if (message.ifClause != null && message.hasOwnProperty(\"ifClause\")) {\n                    let error = $root.Trace.QueryPlanNode.verify(message.ifClause);\n                    if (error)\n                        return \"ifClause.\" + error;\n                }\n                if (message.elseClause != null && message.hasOwnProperty(\"elseClause\")) {\n                    let error = $root.Trace.QueryPlanNode.verify(message.elseClause);\n                    if (error)\n                        return \"elseClause.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ConditionNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @static\n             * @param {Trace.QueryPlanNode.ConditionNode} message ConditionNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ConditionNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.condition = \"\";\n                    object.ifClause = null;\n                    object.elseClause = null;\n                }\n                if (message.condition != null && message.hasOwnProperty(\"condition\"))\n                    object.condition = message.condition;\n                if (message.ifClause != null && message.hasOwnProperty(\"ifClause\"))\n                    object.ifClause = $root.Trace.QueryPlanNode.toObject(message.ifClause, options);\n                if (message.elseClause != null && message.hasOwnProperty(\"elseClause\"))\n                    object.elseClause = $root.Trace.QueryPlanNode.toObject(message.elseClause, options);\n                return object;\n            };\n\n            /**\n             * Converts this ConditionNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ConditionNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ConditionNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n\n            return ConditionNode;\n        })();\n\n        QueryPlanNode.DeferNodePrimary = (function() {\n\n            /**\n             * Properties of a DeferNodePrimary.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferNodePrimary\n             * @property {Trace.IQueryPlanNode|null} [node] DeferNodePrimary node\n             */\n\n            /**\n             * Constructs a new DeferNodePrimary.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferNodePrimary.\n             * @implements IDeferNodePrimary\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary=} [properties] Properties to set\n             */\n            function DeferNodePrimary(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferNodePrimary node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @instance\n             */\n            DeferNodePrimary.prototype.node = null;\n\n            /**\n             * Creates a new DeferNodePrimary instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferNodePrimary} DeferNodePrimary instance\n             */\n            DeferNodePrimary.create = function create(properties) {\n                return new DeferNodePrimary(properties);\n            };\n\n            /**\n             * Encodes the specified DeferNodePrimary message. Does not implicitly {@link Trace.QueryPlanNode.DeferNodePrimary.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary} message DeferNodePrimary message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNodePrimary.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferNodePrimary message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferNodePrimary.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferNodePrimary} message DeferNodePrimary message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferNodePrimary.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferNodePrimary message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferNodePrimary} DeferNodePrimary\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNodePrimary.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferNodePrimary();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferNodePrimary message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferNodePrimary} DeferNodePrimary\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferNodePrimary.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferNodePrimary message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferNodePrimary.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    let error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferNodePrimary message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @static\n             * @param {Trace.QueryPlanNode.DeferNodePrimary} message DeferNodePrimary\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferNodePrimary.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults)\n                    object.node = null;\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this DeferNodePrimary to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferNodePrimary\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferNodePrimary.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n\n            return DeferNodePrimary;\n        })();\n\n        QueryPlanNode.DeferredNode = (function() {\n\n            /**\n             * Properties of a DeferredNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferredNode\n             * @property {Array.<Trace.QueryPlanNode.IDeferredNodeDepends>|null} [depends] DeferredNode depends\n             * @property {string|null} [label] DeferredNode label\n             * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [path] DeferredNode path\n             * @property {Trace.IQueryPlanNode|null} [node] DeferredNode node\n             */\n\n            /**\n             * Constructs a new DeferredNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferredNode.\n             * @implements IDeferredNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferredNode=} [properties] Properties to set\n             */\n            function DeferredNode(properties) {\n                this.depends = [];\n                this.path = [];\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferredNode depends.\n             * @member {Array.<Trace.QueryPlanNode.IDeferredNodeDepends>} depends\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.depends = $util.emptyArray;\n\n            /**\n             * DeferredNode label.\n             * @member {string} label\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.label = \"\";\n\n            /**\n             * DeferredNode path.\n             * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} path\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.path = $util.emptyArray;\n\n            /**\n             * DeferredNode node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             */\n            DeferredNode.prototype.node = null;\n\n            /**\n             * Creates a new DeferredNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferredNode} DeferredNode instance\n             */\n            DeferredNode.create = function create(properties) {\n                return new DeferredNode(properties);\n            };\n\n            /**\n             * Encodes the specified DeferredNode message. Does not implicitly {@link Trace.QueryPlanNode.DeferredNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNode} message DeferredNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.depends != null && message.depends.length)\n                    for (let i = 0; i < message.depends.length; ++i)\n                        $root.Trace.QueryPlanNode.DeferredNodeDepends.encode(message.depends[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.label != null && Object.hasOwnProperty.call(message, \"label\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.label);\n                if (message.path != null && message.path.length)\n                    for (let i = 0; i < message.path.length; ++i)\n                        $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.path[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferredNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferredNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNode} message DeferredNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferredNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferredNode} DeferredNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferredNode();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.depends && message.depends.length))\n                            message.depends = [];\n                        message.depends.push($root.Trace.QueryPlanNode.DeferredNodeDepends.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        message.label = reader.string();\n                        break;\n                    case 3:\n                        if (!(message.path && message.path.length))\n                            message.path = [];\n                        message.path.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n                        break;\n                    case 4:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferredNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferredNode} DeferredNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferredNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferredNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.depends != null && message.hasOwnProperty(\"depends\")) {\n                    if (!Array.isArray(message.depends))\n                        return \"depends: array expected\";\n                    for (let i = 0; i < message.depends.length; ++i) {\n                        let error = $root.Trace.QueryPlanNode.DeferredNodeDepends.verify(message.depends[i]);\n                        if (error)\n                            return \"depends.\" + error;\n                    }\n                }\n                if (message.label != null && message.hasOwnProperty(\"label\"))\n                    if (!$util.isString(message.label))\n                        return \"label: string expected\";\n                if (message.path != null && message.hasOwnProperty(\"path\")) {\n                    if (!Array.isArray(message.path))\n                        return \"path: array expected\";\n                    for (let i = 0; i < message.path.length; ++i) {\n                        let error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.path[i]);\n                        if (error)\n                            return \"path.\" + error;\n                    }\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    let error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferredNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @static\n             * @param {Trace.QueryPlanNode.DeferredNode} message DeferredNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferredNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.arrays || options.defaults) {\n                    object.depends = [];\n                    object.path = [];\n                }\n                if (options.defaults) {\n                    object.label = \"\";\n                    object.node = null;\n                }\n                if (message.depends && message.depends.length) {\n                    object.depends = [];\n                    for (let j = 0; j < message.depends.length; ++j)\n                        object.depends[j] = $root.Trace.QueryPlanNode.DeferredNodeDepends.toObject(message.depends[j], options);\n                }\n                if (message.label != null && message.hasOwnProperty(\"label\"))\n                    object.label = message.label;\n                if (message.path && message.path.length) {\n                    object.path = [];\n                    for (let j = 0; j < message.path.length; ++j)\n                        object.path[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.path[j], options);\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this DeferredNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferredNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferredNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n\n            return DeferredNode;\n        })();\n\n        QueryPlanNode.DeferredNodeDepends = (function() {\n\n            /**\n             * Properties of a DeferredNodeDepends.\n             * @memberof Trace.QueryPlanNode\n             * @interface IDeferredNodeDepends\n             * @property {string|null} [id] DeferredNodeDepends id\n             * @property {string|null} [deferLabel] DeferredNodeDepends deferLabel\n             */\n\n            /**\n             * Constructs a new DeferredNodeDepends.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a DeferredNodeDepends.\n             * @implements IDeferredNodeDepends\n             * @constructor\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends=} [properties] Properties to set\n             */\n            function DeferredNodeDepends(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * DeferredNodeDepends id.\n             * @member {string} id\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @instance\n             */\n            DeferredNodeDepends.prototype.id = \"\";\n\n            /**\n             * DeferredNodeDepends deferLabel.\n             * @member {string} deferLabel\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @instance\n             */\n            DeferredNodeDepends.prototype.deferLabel = \"\";\n\n            /**\n             * Creates a new DeferredNodeDepends instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.DeferredNodeDepends} DeferredNodeDepends instance\n             */\n            DeferredNodeDepends.create = function create(properties) {\n                return new DeferredNodeDepends(properties);\n            };\n\n            /**\n             * Encodes the specified DeferredNodeDepends message. Does not implicitly {@link Trace.QueryPlanNode.DeferredNodeDepends.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends} message DeferredNodeDepends message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNodeDepends.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.id != null && Object.hasOwnProperty.call(message, \"id\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.id);\n                if (message.deferLabel != null && Object.hasOwnProperty.call(message, \"deferLabel\"))\n                    writer.uint32(/* id 2, wireType 2 =*/18).string(message.deferLabel);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified DeferredNodeDepends message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.DeferredNodeDepends.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.IDeferredNodeDepends} message DeferredNodeDepends message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            DeferredNodeDepends.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a DeferredNodeDepends message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.DeferredNodeDepends} DeferredNodeDepends\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNodeDepends.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.DeferredNodeDepends();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.id = reader.string();\n                        break;\n                    case 2:\n                        message.deferLabel = reader.string();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a DeferredNodeDepends message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.DeferredNodeDepends} DeferredNodeDepends\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            DeferredNodeDepends.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a DeferredNodeDepends message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            DeferredNodeDepends.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    if (!$util.isString(message.id))\n                        return \"id: string expected\";\n                if (message.deferLabel != null && message.hasOwnProperty(\"deferLabel\"))\n                    if (!$util.isString(message.deferLabel))\n                        return \"deferLabel: string expected\";\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a DeferredNodeDepends message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @static\n             * @param {Trace.QueryPlanNode.DeferredNodeDepends} message DeferredNodeDepends\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            DeferredNodeDepends.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.id = \"\";\n                    object.deferLabel = \"\";\n                }\n                if (message.id != null && message.hasOwnProperty(\"id\"))\n                    object.id = message.id;\n                if (message.deferLabel != null && message.hasOwnProperty(\"deferLabel\"))\n                    object.deferLabel = message.deferLabel;\n                return object;\n            };\n\n            /**\n             * Converts this DeferredNodeDepends to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.DeferredNodeDepends\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            DeferredNodeDepends.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n\n            return DeferredNodeDepends;\n        })();\n\n        QueryPlanNode.ResponsePathElement = (function() {\n\n            /**\n             * Properties of a ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @interface IResponsePathElement\n             * @property {string|null} [fieldName] ResponsePathElement fieldName\n             * @property {number|null} [index] ResponsePathElement index\n             */\n\n            /**\n             * Constructs a new ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ResponsePathElement.\n             * @implements IResponsePathElement\n             * @constructor\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             */\n            function ResponsePathElement(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ResponsePathElement fieldName.\n             * @member {string} fieldName\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.fieldName = \"\";\n\n            /**\n             * ResponsePathElement index.\n             * @member {number} index\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.index = 0;\n\n            // OneOf field names bound to virtual getters and setters\n            let $oneOfFields;\n\n            /**\n             * ResponsePathElement id.\n             * @member {\"fieldName\"|\"index\"|undefined} id\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            Object.defineProperty(ResponsePathElement.prototype, \"id\", {\n                get: $util.oneOfGetter($oneOfFields = [\"fieldName\", \"index\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new ResponsePathElement instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement instance\n             */\n            ResponsePathElement.create = function create(properties) {\n                return new ResponsePathElement(properties);\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.fieldName != null && Object.hasOwnProperty.call(message, \"fieldName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldName);\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.fieldName = reader.string();\n                        break;\n                    case 2:\n                        message.index = reader.uint32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ResponsePathElement message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ResponsePathElement.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                let properties = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    properties.id = 1;\n                    if (!$util.isString(message.fieldName))\n                        return \"fieldName: string expected\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    if (properties.id === 1)\n                        return \"id: multiple values\";\n                    properties.id = 1;\n                    if (!$util.isInteger(message.index))\n                        return \"index: integer expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a ResponsePathElement message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.ResponsePathElement} message ResponsePathElement\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ResponsePathElement.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    object.fieldName = message.fieldName;\n                    if (options.oneofs)\n                        object.id = \"fieldName\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    object.index = message.index;\n                    if (options.oneofs)\n                        object.id = \"index\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ResponsePathElement to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ResponsePathElement.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n\n            return ResponsePathElement;\n        })();\n\n        return QueryPlanNode;\n    })();\n\n    return Trace;\n})();\n\nconst ReportHeader = $root.ReportHeader = (() => {\n\n    /**\n     * Properties of a ReportHeader.\n     * @exports IReportHeader\n     * @interface IReportHeader\n     * @property {string|null} [graphRef] ReportHeader graphRef\n     * @property {string|null} [hostname] ReportHeader hostname\n     * @property {string|null} [agentVersion] ReportHeader agentVersion\n     * @property {string|null} [serviceVersion] ReportHeader serviceVersion\n     * @property {string|null} [runtimeVersion] ReportHeader runtimeVersion\n     * @property {string|null} [uname] ReportHeader uname\n     * @property {string|null} [executableSchemaId] ReportHeader executableSchemaId\n     */\n\n    /**\n     * Constructs a new ReportHeader.\n     * @exports ReportHeader\n     * @classdesc Represents a ReportHeader.\n     * @implements IReportHeader\n     * @constructor\n     * @param {IReportHeader=} [properties] Properties to set\n     */\n    function ReportHeader(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReportHeader graphRef.\n     * @member {string} graphRef\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.graphRef = \"\";\n\n    /**\n     * ReportHeader hostname.\n     * @member {string} hostname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.hostname = \"\";\n\n    /**\n     * ReportHeader agentVersion.\n     * @member {string} agentVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.agentVersion = \"\";\n\n    /**\n     * ReportHeader serviceVersion.\n     * @member {string} serviceVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.serviceVersion = \"\";\n\n    /**\n     * ReportHeader runtimeVersion.\n     * @member {string} runtimeVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.runtimeVersion = \"\";\n\n    /**\n     * ReportHeader uname.\n     * @member {string} uname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.uname = \"\";\n\n    /**\n     * ReportHeader executableSchemaId.\n     * @member {string} executableSchemaId\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.executableSchemaId = \"\";\n\n    /**\n     * Creates a new ReportHeader instance using the specified properties.\n     * @function create\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader=} [properties] Properties to set\n     * @returns {ReportHeader} ReportHeader instance\n     */\n    ReportHeader.create = function create(properties) {\n        return new ReportHeader(properties);\n    };\n\n    /**\n     * Encodes the specified ReportHeader message. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encode\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.hostname != null && Object.hasOwnProperty.call(message, \"hostname\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.hostname);\n        if (message.agentVersion != null && Object.hasOwnProperty.call(message, \"agentVersion\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.agentVersion);\n        if (message.serviceVersion != null && Object.hasOwnProperty.call(message, \"serviceVersion\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.serviceVersion);\n        if (message.runtimeVersion != null && Object.hasOwnProperty.call(message, \"runtimeVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.runtimeVersion);\n        if (message.uname != null && Object.hasOwnProperty.call(message, \"uname\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.uname);\n        if (message.executableSchemaId != null && Object.hasOwnProperty.call(message, \"executableSchemaId\"))\n            writer.uint32(/* id 11, wireType 2 =*/90).string(message.executableSchemaId);\n        if (message.graphRef != null && Object.hasOwnProperty.call(message, \"graphRef\"))\n            writer.uint32(/* id 12, wireType 2 =*/98).string(message.graphRef);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReportHeader message, length delimited. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportHeader();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 12:\n                message.graphRef = reader.string();\n                break;\n            case 5:\n                message.hostname = reader.string();\n                break;\n            case 6:\n                message.agentVersion = reader.string();\n                break;\n            case 7:\n                message.serviceVersion = reader.string();\n                break;\n            case 8:\n                message.runtimeVersion = reader.string();\n                break;\n            case 9:\n                message.uname = reader.string();\n                break;\n            case 11:\n                message.executableSchemaId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReportHeader message.\n     * @function verify\n     * @memberof ReportHeader\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReportHeader.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.graphRef != null && message.hasOwnProperty(\"graphRef\"))\n            if (!$util.isString(message.graphRef))\n                return \"graphRef: string expected\";\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            if (!$util.isString(message.hostname))\n                return \"hostname: string expected\";\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            if (!$util.isString(message.agentVersion))\n                return \"agentVersion: string expected\";\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            if (!$util.isString(message.serviceVersion))\n                return \"serviceVersion: string expected\";\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            if (!$util.isString(message.runtimeVersion))\n                return \"runtimeVersion: string expected\";\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            if (!$util.isString(message.uname))\n                return \"uname: string expected\";\n        if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\"))\n            if (!$util.isString(message.executableSchemaId))\n                return \"executableSchemaId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ReportHeader message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReportHeader\n     * @static\n     * @param {ReportHeader} message ReportHeader\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReportHeader.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.hostname = \"\";\n            object.agentVersion = \"\";\n            object.serviceVersion = \"\";\n            object.runtimeVersion = \"\";\n            object.uname = \"\";\n            object.executableSchemaId = \"\";\n            object.graphRef = \"\";\n        }\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            object.hostname = message.hostname;\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            object.agentVersion = message.agentVersion;\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            object.serviceVersion = message.serviceVersion;\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            object.runtimeVersion = message.runtimeVersion;\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            object.uname = message.uname;\n        if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\"))\n            object.executableSchemaId = message.executableSchemaId;\n        if (message.graphRef != null && message.hasOwnProperty(\"graphRef\"))\n            object.graphRef = message.graphRef;\n        return object;\n    };\n\n    /**\n     * Converts this ReportHeader to JSON.\n     * @function toJSON\n     * @memberof ReportHeader\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReportHeader.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return ReportHeader;\n})();\n\nconst PathErrorStats = $root.PathErrorStats = (() => {\n\n    /**\n     * Properties of a PathErrorStats.\n     * @exports IPathErrorStats\n     * @interface IPathErrorStats\n     * @property {Object.<string,IPathErrorStats>|null} [children] PathErrorStats children\n     * @property {number|null} [errorsCount] PathErrorStats errorsCount\n     * @property {number|null} [requestsWithErrorsCount] PathErrorStats requestsWithErrorsCount\n     */\n\n    /**\n     * Constructs a new PathErrorStats.\n     * @exports PathErrorStats\n     * @classdesc Represents a PathErrorStats.\n     * @implements IPathErrorStats\n     * @constructor\n     * @param {IPathErrorStats=} [properties] Properties to set\n     */\n    function PathErrorStats(properties) {\n        this.children = {};\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PathErrorStats children.\n     * @member {Object.<string,IPathErrorStats>} children\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.children = $util.emptyObject;\n\n    /**\n     * PathErrorStats errorsCount.\n     * @member {number} errorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.errorsCount = 0;\n\n    /**\n     * PathErrorStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.requestsWithErrorsCount = 0;\n\n    /**\n     * Creates a new PathErrorStats instance using the specified properties.\n     * @function create\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats=} [properties] Properties to set\n     * @returns {PathErrorStats} PathErrorStats instance\n     */\n    PathErrorStats.create = function create(properties) {\n        return new PathErrorStats(properties);\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encode\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.children != null && Object.hasOwnProperty.call(message, \"children\"))\n            for (let keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.PathErrorStats.encode(message.children[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.requestsWithErrorsCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message, length delimited. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.PathErrorStats(), key;\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                reader.skip().pos++;\n                if (message.children === $util.emptyObject)\n                    message.children = {};\n                key = reader.string();\n                reader.pos++;\n                message.children[key] = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PathErrorStats message.\n     * @function verify\n     * @memberof PathErrorStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PathErrorStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.children != null && message.hasOwnProperty(\"children\")) {\n            if (!$util.isObject(message.children))\n                return \"children: object expected\";\n            let key = Object.keys(message.children);\n            for (let i = 0; i < key.length; ++i) {\n                let error = $root.PathErrorStats.verify(message.children[key[i]]);\n                if (error)\n                    return \"children.\" + error;\n            }\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a PathErrorStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PathErrorStats\n     * @static\n     * @param {PathErrorStats} message PathErrorStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PathErrorStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.objects || options.defaults)\n            object.children = {};\n        if (options.defaults) {\n            object.errorsCount = 0;\n            object.requestsWithErrorsCount = 0;\n        }\n        let keys2;\n        if (message.children && (keys2 = Object.keys(message.children)).length) {\n            object.children = {};\n            for (let j = 0; j < keys2.length; ++j)\n                object.children[keys2[j]] = $root.PathErrorStats.toObject(message.children[keys2[j]], options);\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        return object;\n    };\n\n    /**\n     * Converts this PathErrorStats to JSON.\n     * @function toJSON\n     * @memberof PathErrorStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PathErrorStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return PathErrorStats;\n})();\n\nconst QueryLatencyStats = $root.QueryLatencyStats = (() => {\n\n    /**\n     * Properties of a QueryLatencyStats.\n     * @exports IQueryLatencyStats\n     * @interface IQueryLatencyStats\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [latencyCount] QueryLatencyStats latencyCount\n     * @property {number|null} [requestCount] QueryLatencyStats requestCount\n     * @property {number|null} [cacheHits] QueryLatencyStats cacheHits\n     * @property {number|null} [persistedQueryHits] QueryLatencyStats persistedQueryHits\n     * @property {number|null} [persistedQueryMisses] QueryLatencyStats persistedQueryMisses\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [cacheLatencyCount] QueryLatencyStats cacheLatencyCount\n     * @property {IPathErrorStats|null} [rootErrorStats] QueryLatencyStats rootErrorStats\n     * @property {number|null} [requestsWithErrorsCount] QueryLatencyStats requestsWithErrorsCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [publicCacheTtlCount] QueryLatencyStats publicCacheTtlCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [privateCacheTtlCount] QueryLatencyStats privateCacheTtlCount\n     * @property {number|null} [registeredOperationCount] QueryLatencyStats registeredOperationCount\n     * @property {number|null} [forbiddenOperationCount] QueryLatencyStats forbiddenOperationCount\n     * @property {number|null} [requestsWithoutFieldInstrumentation] QueryLatencyStats requestsWithoutFieldInstrumentation\n     */\n\n    /**\n     * Constructs a new QueryLatencyStats.\n     * @exports QueryLatencyStats\n     * @classdesc Represents a QueryLatencyStats.\n     * @implements IQueryLatencyStats\n     * @constructor\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     */\n    function QueryLatencyStats(properties) {\n        this.latencyCount = [];\n        this.cacheLatencyCount = [];\n        this.publicCacheTtlCount = [];\n        this.privateCacheTtlCount = [];\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * QueryLatencyStats latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats requestCount.\n     * @member {number} requestCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestCount = 0;\n\n    /**\n     * QueryLatencyStats cacheHits.\n     * @member {number} cacheHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheHits = 0;\n\n    /**\n     * QueryLatencyStats persistedQueryHits.\n     * @member {number} persistedQueryHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryHits = 0;\n\n    /**\n     * QueryLatencyStats persistedQueryMisses.\n     * @member {number} persistedQueryMisses\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryMisses = 0;\n\n    /**\n     * QueryLatencyStats cacheLatencyCount.\n     * @member {Array.<number>} cacheLatencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheLatencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats rootErrorStats.\n     * @member {IPathErrorStats|null|undefined} rootErrorStats\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.rootErrorStats = null;\n\n    /**\n     * QueryLatencyStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestsWithErrorsCount = 0;\n\n    /**\n     * QueryLatencyStats publicCacheTtlCount.\n     * @member {Array.<number>} publicCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.publicCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats privateCacheTtlCount.\n     * @member {Array.<number>} privateCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.privateCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats registeredOperationCount.\n     * @member {number} registeredOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.registeredOperationCount = 0;\n\n    /**\n     * QueryLatencyStats forbiddenOperationCount.\n     * @member {number} forbiddenOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.forbiddenOperationCount = 0;\n\n    /**\n     * QueryLatencyStats requestsWithoutFieldInstrumentation.\n     * @member {number} requestsWithoutFieldInstrumentation\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestsWithoutFieldInstrumentation = 0;\n\n    /**\n     * Creates a new QueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     * @returns {QueryLatencyStats} QueryLatencyStats instance\n     */\n    QueryLatencyStats.create = function create(properties) {\n        return new QueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.requestCount != null && Object.hasOwnProperty.call(message, \"requestCount\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.requestCount);\n        if (message.cacheHits != null && Object.hasOwnProperty.call(message, \"cacheHits\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.cacheHits);\n        if (message.persistedQueryHits != null && Object.hasOwnProperty.call(message, \"persistedQueryHits\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.persistedQueryHits);\n        if (message.persistedQueryMisses != null && Object.hasOwnProperty.call(message, \"persistedQueryMisses\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.persistedQueryMisses);\n        if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, \"rootErrorStats\"))\n            $root.PathErrorStats.encode(message.rootErrorStats, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.requestsWithErrorsCount);\n        if (message.registeredOperationCount != null && Object.hasOwnProperty.call(message, \"registeredOperationCount\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.registeredOperationCount);\n        if (message.forbiddenOperationCount != null && Object.hasOwnProperty.call(message, \"forbiddenOperationCount\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.forbiddenOperationCount);\n        let array13;\n        if (message.latencyCount != null && message.latencyCount.toArray)\n            array13 = message.latencyCount.toArray();\n        else\n            array13 = message.latencyCount;\n        if (array13 != null && array13.length) {\n            writer.uint32(/* id 13, wireType 2 =*/106).fork();\n            for (let i = 0; i < array13.length; ++i)\n                writer.sint64(array13[i]);\n            writer.ldelim();\n        }\n        let array14;\n        if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)\n            array14 = message.cacheLatencyCount.toArray();\n        else\n            array14 = message.cacheLatencyCount;\n        if (array14 != null && array14.length) {\n            writer.uint32(/* id 14, wireType 2 =*/114).fork();\n            for (let i = 0; i < array14.length; ++i)\n                writer.sint64(array14[i]);\n            writer.ldelim();\n        }\n        let array15;\n        if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)\n            array15 = message.publicCacheTtlCount.toArray();\n        else\n            array15 = message.publicCacheTtlCount;\n        if (array15 != null && array15.length) {\n            writer.uint32(/* id 15, wireType 2 =*/122).fork();\n            for (let i = 0; i < array15.length; ++i)\n                writer.sint64(array15[i]);\n            writer.ldelim();\n        }\n        let array16;\n        if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)\n            array16 = message.privateCacheTtlCount.toArray();\n        else\n            array16 = message.privateCacheTtlCount;\n        if (array16 != null && array16.length) {\n            writer.uint32(/* id 16, wireType 2 =*/130).fork();\n            for (let i = 0; i < array16.length; ++i)\n                writer.sint64(array16[i]);\n            writer.ldelim();\n        }\n        if (message.requestsWithoutFieldInstrumentation != null && Object.hasOwnProperty.call(message, \"requestsWithoutFieldInstrumentation\"))\n            writer.uint32(/* id 17, wireType 0 =*/136).uint64(message.requestsWithoutFieldInstrumentation);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message, length delimited. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.QueryLatencyStats();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 13:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    let end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.sint64());\n                } else\n                    message.latencyCount.push(reader.sint64());\n                break;\n            case 2:\n                message.requestCount = reader.uint64();\n                break;\n            case 3:\n                message.cacheHits = reader.uint64();\n                break;\n            case 4:\n                message.persistedQueryHits = reader.uint64();\n                break;\n            case 5:\n                message.persistedQueryMisses = reader.uint64();\n                break;\n            case 14:\n                if (!(message.cacheLatencyCount && message.cacheLatencyCount.length))\n                    message.cacheLatencyCount = [];\n                if ((tag & 7) === 2) {\n                    let end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.cacheLatencyCount.push(reader.sint64());\n                } else\n                    message.cacheLatencyCount.push(reader.sint64());\n                break;\n            case 7:\n                message.rootErrorStats = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 8:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 15:\n                if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length))\n                    message.publicCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    let end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.publicCacheTtlCount.push(reader.sint64());\n                } else\n                    message.publicCacheTtlCount.push(reader.sint64());\n                break;\n            case 16:\n                if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length))\n                    message.privateCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    let end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.privateCacheTtlCount.push(reader.sint64());\n                } else\n                    message.privateCacheTtlCount.push(reader.sint64());\n                break;\n            case 11:\n                message.registeredOperationCount = reader.uint64();\n                break;\n            case 12:\n                message.forbiddenOperationCount = reader.uint64();\n                break;\n            case 17:\n                message.requestsWithoutFieldInstrumentation = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a QueryLatencyStats message.\n     * @function verify\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    QueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            let array13;\n            if (message.latencyCount != null && message.latencyCount.toArray)\n                array13 = message.latencyCount.toArray();\n            else\n                array13 = message.latencyCount;\n            if (!Array.isArray(array13))\n                return \"latencyCount: array expected\";\n            for (let i = 0; i < array13.length; ++i)\n                if (!$util.isInteger(array13[i]) && !(array13[i] && $util.isInteger(array13[i].low) && $util.isInteger(array13[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (!$util.isInteger(message.requestCount) && !(message.requestCount && $util.isInteger(message.requestCount.low) && $util.isInteger(message.requestCount.high)))\n                return \"requestCount: integer|Long expected\";\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (!$util.isInteger(message.cacheHits) && !(message.cacheHits && $util.isInteger(message.cacheHits.low) && $util.isInteger(message.cacheHits.high)))\n                return \"cacheHits: integer|Long expected\";\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (!$util.isInteger(message.persistedQueryHits) && !(message.persistedQueryHits && $util.isInteger(message.persistedQueryHits.low) && $util.isInteger(message.persistedQueryHits.high)))\n                return \"persistedQueryHits: integer|Long expected\";\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (!$util.isInteger(message.persistedQueryMisses) && !(message.persistedQueryMisses && $util.isInteger(message.persistedQueryMisses.low) && $util.isInteger(message.persistedQueryMisses.high)))\n                return \"persistedQueryMisses: integer|Long expected\";\n        if (message.cacheLatencyCount != null && message.hasOwnProperty(\"cacheLatencyCount\")) {\n            let array14;\n            if (message.cacheLatencyCount != null && message.cacheLatencyCount.toArray)\n                array14 = message.cacheLatencyCount.toArray();\n            else\n                array14 = message.cacheLatencyCount;\n            if (!Array.isArray(array14))\n                return \"cacheLatencyCount: array expected\";\n            for (let i = 0; i < array14.length; ++i)\n                if (!$util.isInteger(array14[i]) && !(array14[i] && $util.isInteger(array14[i].low) && $util.isInteger(array14[i].high)))\n                    return \"cacheLatencyCount: integer|Long[] expected\";\n        }\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) {\n            let error = $root.PathErrorStats.verify(message.rootErrorStats);\n            if (error)\n                return \"rootErrorStats.\" + error;\n        }\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.publicCacheTtlCount != null && message.hasOwnProperty(\"publicCacheTtlCount\")) {\n            let array15;\n            if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.toArray)\n                array15 = message.publicCacheTtlCount.toArray();\n            else\n                array15 = message.publicCacheTtlCount;\n            if (!Array.isArray(array15))\n                return \"publicCacheTtlCount: array expected\";\n            for (let i = 0; i < array15.length; ++i)\n                if (!$util.isInteger(array15[i]) && !(array15[i] && $util.isInteger(array15[i].low) && $util.isInteger(array15[i].high)))\n                    return \"publicCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.privateCacheTtlCount != null && message.hasOwnProperty(\"privateCacheTtlCount\")) {\n            let array16;\n            if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.toArray)\n                array16 = message.privateCacheTtlCount.toArray();\n            else\n                array16 = message.privateCacheTtlCount;\n            if (!Array.isArray(array16))\n                return \"privateCacheTtlCount: array expected\";\n            for (let i = 0; i < array16.length; ++i)\n                if (!$util.isInteger(array16[i]) && !(array16[i] && $util.isInteger(array16[i].low) && $util.isInteger(array16[i].high)))\n                    return \"privateCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (!$util.isInteger(message.registeredOperationCount) && !(message.registeredOperationCount && $util.isInteger(message.registeredOperationCount.low) && $util.isInteger(message.registeredOperationCount.high)))\n                return \"registeredOperationCount: integer|Long expected\";\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (!$util.isInteger(message.forbiddenOperationCount) && !(message.forbiddenOperationCount && $util.isInteger(message.forbiddenOperationCount.low) && $util.isInteger(message.forbiddenOperationCount.high)))\n                return \"forbiddenOperationCount: integer|Long expected\";\n        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty(\"requestsWithoutFieldInstrumentation\"))\n            if (!$util.isInteger(message.requestsWithoutFieldInstrumentation) && !(message.requestsWithoutFieldInstrumentation && $util.isInteger(message.requestsWithoutFieldInstrumentation.low) && $util.isInteger(message.requestsWithoutFieldInstrumentation.high)))\n                return \"requestsWithoutFieldInstrumentation: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a QueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {QueryLatencyStats} message QueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    QueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.arrays || options.defaults) {\n            object.latencyCount = [];\n            object.cacheLatencyCount = [];\n            object.publicCacheTtlCount = [];\n            object.privateCacheTtlCount = [];\n        }\n        if (options.defaults) {\n            object.requestCount = 0;\n            object.cacheHits = 0;\n            object.persistedQueryHits = 0;\n            object.persistedQueryMisses = 0;\n            object.rootErrorStats = null;\n            object.requestsWithErrorsCount = 0;\n            object.registeredOperationCount = 0;\n            object.forbiddenOperationCount = 0;\n            object.requestsWithoutFieldInstrumentation = 0;\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (typeof message.requestCount === \"number\")\n                object.requestCount = options.longs === String ? String(message.requestCount) : message.requestCount;\n            else\n                object.requestCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestCount) : options.longs === Number ? new $util.LongBits(message.requestCount.low >>> 0, message.requestCount.high >>> 0).toNumber(true) : message.requestCount;\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (typeof message.cacheHits === \"number\")\n                object.cacheHits = options.longs === String ? String(message.cacheHits) : message.cacheHits;\n            else\n                object.cacheHits = options.longs === String ? $util.Long.prototype.toString.call(message.cacheHits) : options.longs === Number ? new $util.LongBits(message.cacheHits.low >>> 0, message.cacheHits.high >>> 0).toNumber(true) : message.cacheHits;\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (typeof message.persistedQueryHits === \"number\")\n                object.persistedQueryHits = options.longs === String ? String(message.persistedQueryHits) : message.persistedQueryHits;\n            else\n                object.persistedQueryHits = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryHits) : options.longs === Number ? new $util.LongBits(message.persistedQueryHits.low >>> 0, message.persistedQueryHits.high >>> 0).toNumber(true) : message.persistedQueryHits;\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (typeof message.persistedQueryMisses === \"number\")\n                object.persistedQueryMisses = options.longs === String ? String(message.persistedQueryMisses) : message.persistedQueryMisses;\n            else\n                object.persistedQueryMisses = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryMisses) : options.longs === Number ? new $util.LongBits(message.persistedQueryMisses.low >>> 0, message.persistedQueryMisses.high >>> 0).toNumber(true) : message.persistedQueryMisses;\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\"))\n            object.rootErrorStats = $root.PathErrorStats.toObject(message.rootErrorStats, options);\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (typeof message.registeredOperationCount === \"number\")\n                object.registeredOperationCount = options.longs === String ? String(message.registeredOperationCount) : message.registeredOperationCount;\n            else\n                object.registeredOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.registeredOperationCount) : options.longs === Number ? new $util.LongBits(message.registeredOperationCount.low >>> 0, message.registeredOperationCount.high >>> 0).toNumber(true) : message.registeredOperationCount;\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (typeof message.forbiddenOperationCount === \"number\")\n                object.forbiddenOperationCount = options.longs === String ? String(message.forbiddenOperationCount) : message.forbiddenOperationCount;\n            else\n                object.forbiddenOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.forbiddenOperationCount) : options.longs === Number ? new $util.LongBits(message.forbiddenOperationCount.low >>> 0, message.forbiddenOperationCount.high >>> 0).toNumber(true) : message.forbiddenOperationCount;\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (let j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        if (message.cacheLatencyCount && message.cacheLatencyCount.length) {\n            object.cacheLatencyCount = [];\n            for (let j = 0; j < message.cacheLatencyCount.length; ++j)\n                if (typeof message.cacheLatencyCount[j] === \"number\")\n                    object.cacheLatencyCount[j] = options.longs === String ? String(message.cacheLatencyCount[j]) : message.cacheLatencyCount[j];\n                else\n                    object.cacheLatencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheLatencyCount[j]) : options.longs === Number ? new $util.LongBits(message.cacheLatencyCount[j].low >>> 0, message.cacheLatencyCount[j].high >>> 0).toNumber() : message.cacheLatencyCount[j];\n        }\n        if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {\n            object.publicCacheTtlCount = [];\n            for (let j = 0; j < message.publicCacheTtlCount.length; ++j)\n                if (typeof message.publicCacheTtlCount[j] === \"number\")\n                    object.publicCacheTtlCount[j] = options.longs === String ? String(message.publicCacheTtlCount[j]) : message.publicCacheTtlCount[j];\n                else\n                    object.publicCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.publicCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.publicCacheTtlCount[j].low >>> 0, message.publicCacheTtlCount[j].high >>> 0).toNumber() : message.publicCacheTtlCount[j];\n        }\n        if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {\n            object.privateCacheTtlCount = [];\n            for (let j = 0; j < message.privateCacheTtlCount.length; ++j)\n                if (typeof message.privateCacheTtlCount[j] === \"number\")\n                    object.privateCacheTtlCount[j] = options.longs === String ? String(message.privateCacheTtlCount[j]) : message.privateCacheTtlCount[j];\n                else\n                    object.privateCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.privateCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.privateCacheTtlCount[j].low >>> 0, message.privateCacheTtlCount[j].high >>> 0).toNumber() : message.privateCacheTtlCount[j];\n        }\n        if (message.requestsWithoutFieldInstrumentation != null && message.hasOwnProperty(\"requestsWithoutFieldInstrumentation\"))\n            if (typeof message.requestsWithoutFieldInstrumentation === \"number\")\n                object.requestsWithoutFieldInstrumentation = options.longs === String ? String(message.requestsWithoutFieldInstrumentation) : message.requestsWithoutFieldInstrumentation;\n            else\n                object.requestsWithoutFieldInstrumentation = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithoutFieldInstrumentation) : options.longs === Number ? new $util.LongBits(message.requestsWithoutFieldInstrumentation.low >>> 0, message.requestsWithoutFieldInstrumentation.high >>> 0).toNumber(true) : message.requestsWithoutFieldInstrumentation;\n        return object;\n    };\n\n    /**\n     * Converts this QueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof QueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    QueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return QueryLatencyStats;\n})();\n\nconst StatsContext = $root.StatsContext = (() => {\n\n    /**\n     * Properties of a StatsContext.\n     * @exports IStatsContext\n     * @interface IStatsContext\n     * @property {string|null} [clientName] StatsContext clientName\n     * @property {string|null} [clientVersion] StatsContext clientVersion\n     */\n\n    /**\n     * Constructs a new StatsContext.\n     * @exports StatsContext\n     * @classdesc Represents a StatsContext.\n     * @implements IStatsContext\n     * @constructor\n     * @param {IStatsContext=} [properties] Properties to set\n     */\n    function StatsContext(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * StatsContext clientName.\n     * @member {string} clientName\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientName = \"\";\n\n    /**\n     * StatsContext clientVersion.\n     * @member {string} clientVersion\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientVersion = \"\";\n\n    /**\n     * Creates a new StatsContext instance using the specified properties.\n     * @function create\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext=} [properties] Properties to set\n     * @returns {StatsContext} StatsContext instance\n     */\n    StatsContext.create = function create(properties) {\n        return new StatsContext(properties);\n    };\n\n    /**\n     * Encodes the specified StatsContext message. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encode\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.clientVersion);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified StatsContext message, length delimited. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.StatsContext();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.clientName = reader.string();\n                break;\n            case 3:\n                message.clientVersion = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a StatsContext message.\n     * @function verify\n     * @memberof StatsContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    StatsContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a StatsContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof StatsContext\n     * @static\n     * @param {StatsContext} message StatsContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    StatsContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n        }\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        return object;\n    };\n\n    /**\n     * Converts this StatsContext to JSON.\n     * @function toJSON\n     * @memberof StatsContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    StatsContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return StatsContext;\n})();\n\nconst ContextualizedQueryLatencyStats = $root.ContextualizedQueryLatencyStats = (() => {\n\n    /**\n     * Properties of a ContextualizedQueryLatencyStats.\n     * @exports IContextualizedQueryLatencyStats\n     * @interface IContextualizedQueryLatencyStats\n     * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedQueryLatencyStats queryLatencyStats\n     * @property {IStatsContext|null} [context] ContextualizedQueryLatencyStats context\n     */\n\n    /**\n     * Constructs a new ContextualizedQueryLatencyStats.\n     * @exports ContextualizedQueryLatencyStats\n     * @classdesc Represents a ContextualizedQueryLatencyStats.\n     * @implements IContextualizedQueryLatencyStats\n     * @constructor\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     */\n    function ContextualizedQueryLatencyStats(properties) {\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedQueryLatencyStats queryLatencyStats.\n     * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.queryLatencyStats = null;\n\n    /**\n     * ContextualizedQueryLatencyStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.context = null;\n\n    /**\n     * Creates a new ContextualizedQueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats instance\n     */\n    ContextualizedQueryLatencyStats.create = function create(properties) {\n        return new ContextualizedQueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\"))\n            $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message, length delimited. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedQueryLatencyStats();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedQueryLatencyStats message.\n     * @function verify\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedQueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n            let error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n            if (error)\n                return \"queryLatencyStats.\" + error;\n        }\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            let error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedQueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {ContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedQueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.defaults) {\n            object.queryLatencyStats = null;\n            object.context = null;\n        }\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\"))\n            object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedQueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedQueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return ContextualizedQueryLatencyStats;\n})();\n\nconst ContextualizedTypeStats = $root.ContextualizedTypeStats = (() => {\n\n    /**\n     * Properties of a ContextualizedTypeStats.\n     * @exports IContextualizedTypeStats\n     * @interface IContextualizedTypeStats\n     * @property {IStatsContext|null} [context] ContextualizedTypeStats context\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedTypeStats perTypeStat\n     */\n\n    /**\n     * Constructs a new ContextualizedTypeStats.\n     * @exports ContextualizedTypeStats\n     * @classdesc Represents a ContextualizedTypeStats.\n     * @implements IContextualizedTypeStats\n     * @constructor\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     */\n    function ContextualizedTypeStats(properties) {\n        this.perTypeStat = {};\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedTypeStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.context = null;\n\n    /**\n     * ContextualizedTypeStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * Creates a new ContextualizedTypeStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats instance\n     */\n    ContextualizedTypeStats.create = function create(properties) {\n        return new ContextualizedTypeStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (let keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message, length delimited. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedTypeStats(), key;\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            case 2:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedTypeStats message.\n     * @function verify\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedTypeStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            let error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            let key = Object.keys(message.perTypeStat);\n            for (let i = 0; i < key.length; ++i) {\n                let error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedTypeStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {ContextualizedTypeStats} message ContextualizedTypeStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedTypeStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.objects || options.defaults)\n            object.perTypeStat = {};\n        if (options.defaults)\n            object.context = null;\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        let keys2;\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (let j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedTypeStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedTypeStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedTypeStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return ContextualizedTypeStats;\n})();\n\nconst FieldStat = $root.FieldStat = (() => {\n\n    /**\n     * Properties of a FieldStat.\n     * @exports IFieldStat\n     * @interface IFieldStat\n     * @property {string|null} [returnType] FieldStat returnType\n     * @property {number|null} [errorsCount] FieldStat errorsCount\n     * @property {number|null} [observedExecutionCount] FieldStat observedExecutionCount\n     * @property {number|null} [estimatedExecutionCount] FieldStat estimatedExecutionCount\n     * @property {number|null} [requestsWithErrorsCount] FieldStat requestsWithErrorsCount\n     * @property {$protobuf.ToArray.<number>|Array.<number>|null} [latencyCount] FieldStat latencyCount\n     */\n\n    /**\n     * Constructs a new FieldStat.\n     * @exports FieldStat\n     * @classdesc Represents a FieldStat.\n     * @implements IFieldStat\n     * @constructor\n     * @param {IFieldStat=} [properties] Properties to set\n     */\n    function FieldStat(properties) {\n        this.latencyCount = [];\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * FieldStat returnType.\n     * @member {string} returnType\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.returnType = \"\";\n\n    /**\n     * FieldStat errorsCount.\n     * @member {number} errorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.errorsCount = 0;\n\n    /**\n     * FieldStat observedExecutionCount.\n     * @member {number} observedExecutionCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.observedExecutionCount = 0;\n\n    /**\n     * FieldStat estimatedExecutionCount.\n     * @member {number} estimatedExecutionCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.estimatedExecutionCount = 0;\n\n    /**\n     * FieldStat requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.requestsWithErrorsCount = 0;\n\n    /**\n     * FieldStat latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * Creates a new FieldStat instance using the specified properties.\n     * @function create\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat=} [properties] Properties to set\n     * @returns {FieldStat} FieldStat instance\n     */\n    FieldStat.create = function create(properties) {\n        return new FieldStat(properties);\n    };\n\n    /**\n     * Encodes the specified FieldStat message. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encode\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.returnType);\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.observedExecutionCount != null && Object.hasOwnProperty.call(message, \"observedExecutionCount\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.observedExecutionCount);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.requestsWithErrorsCount);\n        let array9;\n        if (message.latencyCount != null && message.latencyCount.toArray)\n            array9 = message.latencyCount.toArray();\n        else\n            array9 = message.latencyCount;\n        if (array9 != null && array9.length) {\n            writer.uint32(/* id 9, wireType 2 =*/74).fork();\n            for (let i = 0; i < array9.length; ++i)\n                writer.sint64(array9[i]);\n            writer.ldelim();\n        }\n        if (message.estimatedExecutionCount != null && Object.hasOwnProperty.call(message, \"estimatedExecutionCount\"))\n            writer.uint32(/* id 10, wireType 0 =*/80).uint64(message.estimatedExecutionCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified FieldStat message, length delimited. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.FieldStat();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 3:\n                message.returnType = reader.string();\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.observedExecutionCount = reader.uint64();\n                break;\n            case 10:\n                message.estimatedExecutionCount = reader.uint64();\n                break;\n            case 6:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 9:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    let end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.sint64());\n                } else\n                    message.latencyCount.push(reader.sint64());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a FieldStat message.\n     * @function verify\n     * @memberof FieldStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    FieldStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            if (!$util.isString(message.returnType))\n                return \"returnType: string expected\";\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.observedExecutionCount != null && message.hasOwnProperty(\"observedExecutionCount\"))\n            if (!$util.isInteger(message.observedExecutionCount) && !(message.observedExecutionCount && $util.isInteger(message.observedExecutionCount.low) && $util.isInteger(message.observedExecutionCount.high)))\n                return \"observedExecutionCount: integer|Long expected\";\n        if (message.estimatedExecutionCount != null && message.hasOwnProperty(\"estimatedExecutionCount\"))\n            if (!$util.isInteger(message.estimatedExecutionCount) && !(message.estimatedExecutionCount && $util.isInteger(message.estimatedExecutionCount.low) && $util.isInteger(message.estimatedExecutionCount.high)))\n                return \"estimatedExecutionCount: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            let array9;\n            if (message.latencyCount != null && message.latencyCount.toArray)\n                array9 = message.latencyCount.toArray();\n            else\n                array9 = message.latencyCount;\n            if (!Array.isArray(array9))\n                return \"latencyCount: array expected\";\n            for (let i = 0; i < array9.length; ++i)\n                if (!$util.isInteger(array9[i]) && !(array9[i] && $util.isInteger(array9[i].low) && $util.isInteger(array9[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a FieldStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof FieldStat\n     * @static\n     * @param {FieldStat} message FieldStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FieldStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.arrays || options.defaults)\n            object.latencyCount = [];\n        if (options.defaults) {\n            object.returnType = \"\";\n            object.errorsCount = 0;\n            object.observedExecutionCount = 0;\n            object.requestsWithErrorsCount = 0;\n            object.estimatedExecutionCount = 0;\n        }\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            object.returnType = message.returnType;\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.observedExecutionCount != null && message.hasOwnProperty(\"observedExecutionCount\"))\n            if (typeof message.observedExecutionCount === \"number\")\n                object.observedExecutionCount = options.longs === String ? String(message.observedExecutionCount) : message.observedExecutionCount;\n            else\n                object.observedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.observedExecutionCount) : options.longs === Number ? new $util.LongBits(message.observedExecutionCount.low >>> 0, message.observedExecutionCount.high >>> 0).toNumber(true) : message.observedExecutionCount;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (let j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        if (message.estimatedExecutionCount != null && message.hasOwnProperty(\"estimatedExecutionCount\"))\n            if (typeof message.estimatedExecutionCount === \"number\")\n                object.estimatedExecutionCount = options.longs === String ? String(message.estimatedExecutionCount) : message.estimatedExecutionCount;\n            else\n                object.estimatedExecutionCount = options.longs === String ? $util.Long.prototype.toString.call(message.estimatedExecutionCount) : options.longs === Number ? new $util.LongBits(message.estimatedExecutionCount.low >>> 0, message.estimatedExecutionCount.high >>> 0).toNumber(true) : message.estimatedExecutionCount;\n        return object;\n    };\n\n    /**\n     * Converts this FieldStat to JSON.\n     * @function toJSON\n     * @memberof FieldStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FieldStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return FieldStat;\n})();\n\nconst TypeStat = $root.TypeStat = (() => {\n\n    /**\n     * Properties of a TypeStat.\n     * @exports ITypeStat\n     * @interface ITypeStat\n     * @property {Object.<string,IFieldStat>|null} [perFieldStat] TypeStat perFieldStat\n     */\n\n    /**\n     * Constructs a new TypeStat.\n     * @exports TypeStat\n     * @classdesc Represents a TypeStat.\n     * @implements ITypeStat\n     * @constructor\n     * @param {ITypeStat=} [properties] Properties to set\n     */\n    function TypeStat(properties) {\n        this.perFieldStat = {};\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TypeStat perFieldStat.\n     * @member {Object.<string,IFieldStat>} perFieldStat\n     * @memberof TypeStat\n     * @instance\n     */\n    TypeStat.prototype.perFieldStat = $util.emptyObject;\n\n    /**\n     * Creates a new TypeStat instance using the specified properties.\n     * @function create\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat=} [properties] Properties to set\n     * @returns {TypeStat} TypeStat instance\n     */\n    TypeStat.create = function create(properties) {\n        return new TypeStat(properties);\n    };\n\n    /**\n     * Encodes the specified TypeStat message. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encode\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.perFieldStat != null && Object.hasOwnProperty.call(message, \"perFieldStat\"))\n            for (let keys = Object.keys(message.perFieldStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.FieldStat.encode(message.perFieldStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TypeStat message, length delimited. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.TypeStat(), key;\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 3:\n                reader.skip().pos++;\n                if (message.perFieldStat === $util.emptyObject)\n                    message.perFieldStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perFieldStat[key] = $root.FieldStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TypeStat message.\n     * @function verify\n     * @memberof TypeStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TypeStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.perFieldStat != null && message.hasOwnProperty(\"perFieldStat\")) {\n            if (!$util.isObject(message.perFieldStat))\n                return \"perFieldStat: object expected\";\n            let key = Object.keys(message.perFieldStat);\n            for (let i = 0; i < key.length; ++i) {\n                let error = $root.FieldStat.verify(message.perFieldStat[key[i]]);\n                if (error)\n                    return \"perFieldStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a TypeStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TypeStat\n     * @static\n     * @param {TypeStat} message TypeStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TypeStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.objects || options.defaults)\n            object.perFieldStat = {};\n        let keys2;\n        if (message.perFieldStat && (keys2 = Object.keys(message.perFieldStat)).length) {\n            object.perFieldStat = {};\n            for (let j = 0; j < keys2.length; ++j)\n                object.perFieldStat[keys2[j]] = $root.FieldStat.toObject(message.perFieldStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TypeStat to JSON.\n     * @function toJSON\n     * @memberof TypeStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TypeStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return TypeStat;\n})();\n\nconst ReferencedFieldsForType = $root.ReferencedFieldsForType = (() => {\n\n    /**\n     * Properties of a ReferencedFieldsForType.\n     * @exports IReferencedFieldsForType\n     * @interface IReferencedFieldsForType\n     * @property {Array.<string>|null} [fieldNames] ReferencedFieldsForType fieldNames\n     * @property {boolean|null} [isInterface] ReferencedFieldsForType isInterface\n     */\n\n    /**\n     * Constructs a new ReferencedFieldsForType.\n     * @exports ReferencedFieldsForType\n     * @classdesc Represents a ReferencedFieldsForType.\n     * @implements IReferencedFieldsForType\n     * @constructor\n     * @param {IReferencedFieldsForType=} [properties] Properties to set\n     */\n    function ReferencedFieldsForType(properties) {\n        this.fieldNames = [];\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReferencedFieldsForType fieldNames.\n     * @member {Array.<string>} fieldNames\n     * @memberof ReferencedFieldsForType\n     * @instance\n     */\n    ReferencedFieldsForType.prototype.fieldNames = $util.emptyArray;\n\n    /**\n     * ReferencedFieldsForType isInterface.\n     * @member {boolean} isInterface\n     * @memberof ReferencedFieldsForType\n     * @instance\n     */\n    ReferencedFieldsForType.prototype.isInterface = false;\n\n    /**\n     * Creates a new ReferencedFieldsForType instance using the specified properties.\n     * @function create\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType=} [properties] Properties to set\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType instance\n     */\n    ReferencedFieldsForType.create = function create(properties) {\n        return new ReferencedFieldsForType(properties);\n    };\n\n    /**\n     * Encodes the specified ReferencedFieldsForType message. Does not implicitly {@link ReferencedFieldsForType.verify|verify} messages.\n     * @function encode\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType} message ReferencedFieldsForType message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReferencedFieldsForType.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.fieldNames != null && message.fieldNames.length)\n            for (let i = 0; i < message.fieldNames.length; ++i)\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldNames[i]);\n        if (message.isInterface != null && Object.hasOwnProperty.call(message, \"isInterface\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).bool(message.isInterface);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReferencedFieldsForType message, length delimited. Does not implicitly {@link ReferencedFieldsForType.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {IReferencedFieldsForType} message ReferencedFieldsForType message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReferencedFieldsForType.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReferencedFieldsForType message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReferencedFieldsForType.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReferencedFieldsForType();\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.fieldNames && message.fieldNames.length))\n                    message.fieldNames = [];\n                message.fieldNames.push(reader.string());\n                break;\n            case 2:\n                message.isInterface = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReferencedFieldsForType message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReferencedFieldsForType} ReferencedFieldsForType\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReferencedFieldsForType.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReferencedFieldsForType message.\n     * @function verify\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReferencedFieldsForType.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.fieldNames != null && message.hasOwnProperty(\"fieldNames\")) {\n            if (!Array.isArray(message.fieldNames))\n                return \"fieldNames: array expected\";\n            for (let i = 0; i < message.fieldNames.length; ++i)\n                if (!$util.isString(message.fieldNames[i]))\n                    return \"fieldNames: string[] expected\";\n        }\n        if (message.isInterface != null && message.hasOwnProperty(\"isInterface\"))\n            if (typeof message.isInterface !== \"boolean\")\n                return \"isInterface: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ReferencedFieldsForType message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReferencedFieldsForType\n     * @static\n     * @param {ReferencedFieldsForType} message ReferencedFieldsForType\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReferencedFieldsForType.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.arrays || options.defaults)\n            object.fieldNames = [];\n        if (options.defaults)\n            object.isInterface = false;\n        if (message.fieldNames && message.fieldNames.length) {\n            object.fieldNames = [];\n            for (let j = 0; j < message.fieldNames.length; ++j)\n                object.fieldNames[j] = message.fieldNames[j];\n        }\n        if (message.isInterface != null && message.hasOwnProperty(\"isInterface\"))\n            object.isInterface = message.isInterface;\n        return object;\n    };\n\n    /**\n     * Converts this ReferencedFieldsForType to JSON.\n     * @function toJSON\n     * @memberof ReferencedFieldsForType\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReferencedFieldsForType.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return ReferencedFieldsForType;\n})();\n\nconst Report = $root.Report = (() => {\n\n    /**\n     * Properties of a Report.\n     * @exports IReport\n     * @interface IReport\n     * @property {IReportHeader|null} [header] Report header\n     * @property {Object.<string,ITracesAndStats>|null} [tracesPerQuery] Report tracesPerQuery\n     * @property {google.protobuf.ITimestamp|null} [endTime] Report endTime\n     * @property {number|null} [operationCount] Report operationCount\n     * @property {boolean|null} [tracesPreAggregated] Report tracesPreAggregated\n     */\n\n    /**\n     * Constructs a new Report.\n     * @exports Report\n     * @classdesc Represents a Report.\n     * @implements IReport\n     * @constructor\n     * @param {IReport=} [properties] Properties to set\n     */\n    function Report(properties) {\n        this.tracesPerQuery = {};\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Report header.\n     * @member {IReportHeader|null|undefined} header\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.header = null;\n\n    /**\n     * Report tracesPerQuery.\n     * @member {Object.<string,ITracesAndStats>} tracesPerQuery\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.tracesPerQuery = $util.emptyObject;\n\n    /**\n     * Report endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.endTime = null;\n\n    /**\n     * Report operationCount.\n     * @member {number} operationCount\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.operationCount = 0;\n\n    /**\n     * Report tracesPreAggregated.\n     * @member {boolean} tracesPreAggregated\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.tracesPreAggregated = false;\n\n    /**\n     * Creates a new Report instance using the specified properties.\n     * @function create\n     * @memberof Report\n     * @static\n     * @param {IReport=} [properties] Properties to set\n     * @returns {Report} Report instance\n     */\n    Report.create = function create(properties) {\n        return new Report(properties);\n    };\n\n    /**\n     * Encodes the specified Report message. Does not implicitly {@link Report.verify|verify} messages.\n     * @function encode\n     * @memberof Report\n     * @static\n     * @param {IReport} message Report message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Report.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.header != null && Object.hasOwnProperty.call(message, \"header\"))\n            $root.ReportHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.tracesPerQuery != null && Object.hasOwnProperty.call(message, \"tracesPerQuery\"))\n            for (let keys = Object.keys(message.tracesPerQuery), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TracesAndStats.encode(message.tracesPerQuery[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.operationCount != null && Object.hasOwnProperty.call(message, \"operationCount\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.operationCount);\n        if (message.tracesPreAggregated != null && Object.hasOwnProperty.call(message, \"tracesPreAggregated\"))\n            writer.uint32(/* id 7, wireType 0 =*/56).bool(message.tracesPreAggregated);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Report message, length delimited. Does not implicitly {@link Report.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Report\n     * @static\n     * @param {IReport} message Report message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Report.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Report message from the specified reader or buffer.\n     * @function decode\n     * @memberof Report\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Report} Report\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Report.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.Report(), key;\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.header = $root.ReportHeader.decode(reader, reader.uint32());\n                break;\n            case 5:\n                reader.skip().pos++;\n                if (message.tracesPerQuery === $util.emptyObject)\n                    message.tracesPerQuery = {};\n                key = reader.string();\n                reader.pos++;\n                message.tracesPerQuery[key] = $root.TracesAndStats.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 6:\n                message.operationCount = reader.uint64();\n                break;\n            case 7:\n                message.tracesPreAggregated = reader.bool();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Report message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Report\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Report} Report\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Report.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Report message.\n     * @function verify\n     * @memberof Report\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Report.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.header != null && message.hasOwnProperty(\"header\")) {\n            let error = $root.ReportHeader.verify(message.header);\n            if (error)\n                return \"header.\" + error;\n        }\n        if (message.tracesPerQuery != null && message.hasOwnProperty(\"tracesPerQuery\")) {\n            if (!$util.isObject(message.tracesPerQuery))\n                return \"tracesPerQuery: object expected\";\n            let key = Object.keys(message.tracesPerQuery);\n            for (let i = 0; i < key.length; ++i) {\n                let error = $root.TracesAndStats.verify(message.tracesPerQuery[key[i]]);\n                if (error)\n                    return \"tracesPerQuery.\" + error;\n            }\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            let error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        if (message.operationCount != null && message.hasOwnProperty(\"operationCount\"))\n            if (!$util.isInteger(message.operationCount) && !(message.operationCount && $util.isInteger(message.operationCount.low) && $util.isInteger(message.operationCount.high)))\n                return \"operationCount: integer|Long expected\";\n        if (message.tracesPreAggregated != null && message.hasOwnProperty(\"tracesPreAggregated\"))\n            if (typeof message.tracesPreAggregated !== \"boolean\")\n                return \"tracesPreAggregated: boolean expected\";\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a Report message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Report\n     * @static\n     * @param {Report} message Report\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Report.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.objects || options.defaults)\n            object.tracesPerQuery = {};\n        if (options.defaults) {\n            object.header = null;\n            object.endTime = null;\n            object.operationCount = 0;\n            object.tracesPreAggregated = false;\n        }\n        if (message.header != null && message.hasOwnProperty(\"header\"))\n            object.header = $root.ReportHeader.toObject(message.header, options);\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        let keys2;\n        if (message.tracesPerQuery && (keys2 = Object.keys(message.tracesPerQuery)).length) {\n            object.tracesPerQuery = {};\n            for (let j = 0; j < keys2.length; ++j)\n                object.tracesPerQuery[keys2[j]] = $root.TracesAndStats.toObject(message.tracesPerQuery[keys2[j]], options);\n        }\n        if (message.operationCount != null && message.hasOwnProperty(\"operationCount\"))\n            if (typeof message.operationCount === \"number\")\n                object.operationCount = options.longs === String ? String(message.operationCount) : message.operationCount;\n            else\n                object.operationCount = options.longs === String ? $util.Long.prototype.toString.call(message.operationCount) : options.longs === Number ? new $util.LongBits(message.operationCount.low >>> 0, message.operationCount.high >>> 0).toNumber(true) : message.operationCount;\n        if (message.tracesPreAggregated != null && message.hasOwnProperty(\"tracesPreAggregated\"))\n            object.tracesPreAggregated = message.tracesPreAggregated;\n        return object;\n    };\n\n    /**\n     * Converts this Report to JSON.\n     * @function toJSON\n     * @memberof Report\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Report.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return Report;\n})();\n\nconst ContextualizedStats = $root.ContextualizedStats = (() => {\n\n    /**\n     * Properties of a ContextualizedStats.\n     * @exports IContextualizedStats\n     * @interface IContextualizedStats\n     * @property {IStatsContext|null} [context] ContextualizedStats context\n     * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedStats queryLatencyStats\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedStats perTypeStat\n     */\n\n    /**\n     * Constructs a new ContextualizedStats.\n     * @exports ContextualizedStats\n     * @classdesc Represents a ContextualizedStats.\n     * @implements IContextualizedStats\n     * @constructor\n     * @param {IContextualizedStats=} [properties] Properties to set\n     */\n    function ContextualizedStats(properties) {\n        this.perTypeStat = {};\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.context = null;\n\n    /**\n     * ContextualizedStats queryLatencyStats.\n     * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.queryLatencyStats = null;\n\n    /**\n     * ContextualizedStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * Creates a new ContextualizedStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats=} [properties] Properties to set\n     * @returns {ContextualizedStats} ContextualizedStats instance\n     */\n    ContextualizedStats.create = function create(properties) {\n        return new ContextualizedStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedStats message. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\"))\n            $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (let keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedStats message, length delimited. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedStats} ContextualizedStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedStats(), key;\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n                break;\n            case 3:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedStats} ContextualizedStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedStats message.\n     * @function verify\n     * @memberof ContextualizedStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            let error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n            let error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n            if (error)\n                return \"queryLatencyStats.\" + error;\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            let key = Object.keys(message.perTypeStat);\n            for (let i = 0; i < key.length; ++i) {\n                let error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedStats\n     * @static\n     * @param {ContextualizedStats} message ContextualizedStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.objects || options.defaults)\n            object.perTypeStat = {};\n        if (options.defaults) {\n            object.context = null;\n            object.queryLatencyStats = null;\n        }\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\"))\n            object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n        let keys2;\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (let j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return ContextualizedStats;\n})();\n\nconst TracesAndStats = $root.TracesAndStats = (() => {\n\n    /**\n     * Properties of a TracesAndStats.\n     * @exports ITracesAndStats\n     * @interface ITracesAndStats\n     * @property {Array.<ITrace|Uint8Array>|null} [trace] TracesAndStats trace\n     * @property {$protobuf.ToArray.<IContextualizedStats>|Array.<IContextualizedStats>|null} [statsWithContext] TracesAndStats statsWithContext\n     * @property {Object.<string,IReferencedFieldsForType>|null} [referencedFieldsByType] TracesAndStats referencedFieldsByType\n     * @property {Array.<ITrace|Uint8Array>|null} [internalTracesContributingToStats] TracesAndStats internalTracesContributingToStats\n     */\n\n    /**\n     * Constructs a new TracesAndStats.\n     * @exports TracesAndStats\n     * @classdesc Represents a TracesAndStats.\n     * @implements ITracesAndStats\n     * @constructor\n     * @param {ITracesAndStats=} [properties] Properties to set\n     */\n    function TracesAndStats(properties) {\n        this.trace = [];\n        this.statsWithContext = [];\n        this.referencedFieldsByType = {};\n        this.internalTracesContributingToStats = [];\n        if (properties)\n            for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TracesAndStats trace.\n     * @member {Array.<ITrace|Uint8Array>} trace\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.trace = $util.emptyArray;\n\n    /**\n     * TracesAndStats statsWithContext.\n     * @member {Array.<IContextualizedStats>} statsWithContext\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.statsWithContext = $util.emptyArray;\n\n    /**\n     * TracesAndStats referencedFieldsByType.\n     * @member {Object.<string,IReferencedFieldsForType>} referencedFieldsByType\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.referencedFieldsByType = $util.emptyObject;\n\n    /**\n     * TracesAndStats internalTracesContributingToStats.\n     * @member {Array.<ITrace|Uint8Array>} internalTracesContributingToStats\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.internalTracesContributingToStats = $util.emptyArray;\n\n    /**\n     * Creates a new TracesAndStats instance using the specified properties.\n     * @function create\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats=} [properties] Properties to set\n     * @returns {TracesAndStats} TracesAndStats instance\n     */\n    TracesAndStats.create = function create(properties) {\n        return new TracesAndStats(properties);\n    };\n\n    /**\n     * Encodes the specified TracesAndStats message. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n     * @function encode\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesAndStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.trace != null && message.trace.length)\n            for (let i = 0; i < message.trace.length; ++i)\n                if (message.trace[i] instanceof Uint8Array) {\n                    writer.uint32(/* id 1, wireType 2 =*/10);\n                    writer.bytes(message.trace[i]);\n                } else\n                    $root.Trace.encode(message.trace[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        let array2;\n        if (message.statsWithContext != null && message.statsWithContext.toArray)\n            array2 = message.statsWithContext.toArray();\n        else\n            array2 = message.statsWithContext;\n        if (array2 != null && array2.length)\n            for (let i = 0; i < array2.length; ++i)\n                $root.ContextualizedStats.encode(array2[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.internalTracesContributingToStats != null && message.internalTracesContributingToStats.length)\n            for (let i = 0; i < message.internalTracesContributingToStats.length; ++i)\n                if (message.internalTracesContributingToStats[i] instanceof Uint8Array) {\n                    writer.uint32(/* id 3, wireType 2 =*/26);\n                    writer.bytes(message.internalTracesContributingToStats[i]);\n                } else\n                    $root.Trace.encode(message.internalTracesContributingToStats[i], writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.referencedFieldsByType != null && Object.hasOwnProperty.call(message, \"referencedFieldsByType\"))\n            for (let keys = Object.keys(message.referencedFieldsByType), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.ReferencedFieldsForType.encode(message.referencedFieldsByType[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TracesAndStats message, length delimited. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesAndStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TracesAndStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof TracesAndStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TracesAndStats} TracesAndStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesAndStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        let end = length === undefined ? reader.len : reader.pos + length, message = new $root.TracesAndStats(), key;\n        while (reader.pos < end) {\n            let tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.trace && message.trace.length))\n                    message.trace = [];\n                message.trace.push($root.Trace.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                if (!(message.statsWithContext && message.statsWithContext.length))\n                    message.statsWithContext = [];\n                message.statsWithContext.push($root.ContextualizedStats.decode(reader, reader.uint32()));\n                break;\n            case 4:\n                reader.skip().pos++;\n                if (message.referencedFieldsByType === $util.emptyObject)\n                    message.referencedFieldsByType = {};\n                key = reader.string();\n                reader.pos++;\n                message.referencedFieldsByType[key] = $root.ReferencedFieldsForType.decode(reader, reader.uint32());\n                break;\n            case 3:\n                if (!(message.internalTracesContributingToStats && message.internalTracesContributingToStats.length))\n                    message.internalTracesContributingToStats = [];\n                message.internalTracesContributingToStats.push($root.Trace.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TracesAndStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TracesAndStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TracesAndStats} TracesAndStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesAndStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TracesAndStats message.\n     * @function verify\n     * @memberof TracesAndStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TracesAndStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n            if (!Array.isArray(message.trace))\n                return \"trace: array expected\";\n            for (let i = 0; i < message.trace.length; ++i)\n                if (!(message.trace[i] instanceof Uint8Array)) {\n                    let error = $root.Trace.verify(message.trace[i]);\n                    if (error)\n                        return \"trace.\" + error;\n                }\n        }\n        if (message.statsWithContext != null && message.hasOwnProperty(\"statsWithContext\")) {\n            let array2;\n            if (message.statsWithContext != null && message.statsWithContext.toArray)\n                array2 = message.statsWithContext.toArray();\n            else\n                array2 = message.statsWithContext;\n            if (!Array.isArray(array2))\n                return \"statsWithContext: array expected\";\n            for (let i = 0; i < array2.length; ++i) {\n                let error = $root.ContextualizedStats.verify(array2[i]);\n                if (error)\n                    return \"statsWithContext.\" + error;\n            }\n        }\n        if (message.referencedFieldsByType != null && message.hasOwnProperty(\"referencedFieldsByType\")) {\n            if (!$util.isObject(message.referencedFieldsByType))\n                return \"referencedFieldsByType: object expected\";\n            let key = Object.keys(message.referencedFieldsByType);\n            for (let i = 0; i < key.length; ++i) {\n                let error = $root.ReferencedFieldsForType.verify(message.referencedFieldsByType[key[i]]);\n                if (error)\n                    return \"referencedFieldsByType.\" + error;\n            }\n        }\n        if (message.internalTracesContributingToStats != null && message.hasOwnProperty(\"internalTracesContributingToStats\")) {\n            if (!Array.isArray(message.internalTracesContributingToStats))\n                return \"internalTracesContributingToStats: array expected\";\n            for (let i = 0; i < message.internalTracesContributingToStats.length; ++i)\n                if (!(message.internalTracesContributingToStats[i] instanceof Uint8Array)) {\n                    let error = $root.Trace.verify(message.internalTracesContributingToStats[i]);\n                    if (error)\n                        return \"internalTracesContributingToStats.\" + error;\n                }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a plain object from a TracesAndStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TracesAndStats\n     * @static\n     * @param {TracesAndStats} message TracesAndStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TracesAndStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        let object = {};\n        if (options.arrays || options.defaults) {\n            object.trace = [];\n            object.statsWithContext = [];\n            object.internalTracesContributingToStats = [];\n        }\n        if (options.objects || options.defaults)\n            object.referencedFieldsByType = {};\n        if (message.trace && message.trace.length) {\n            object.trace = [];\n            for (let j = 0; j < message.trace.length; ++j)\n                object.trace[j] = $root.Trace.toObject(message.trace[j], options);\n        }\n        if (message.statsWithContext && message.statsWithContext.length) {\n            object.statsWithContext = [];\n            for (let j = 0; j < message.statsWithContext.length; ++j)\n                object.statsWithContext[j] = $root.ContextualizedStats.toObject(message.statsWithContext[j], options);\n        }\n        if (message.internalTracesContributingToStats && message.internalTracesContributingToStats.length) {\n            object.internalTracesContributingToStats = [];\n            for (let j = 0; j < message.internalTracesContributingToStats.length; ++j)\n                object.internalTracesContributingToStats[j] = $root.Trace.toObject(message.internalTracesContributingToStats[j], options);\n        }\n        let keys2;\n        if (message.referencedFieldsByType && (keys2 = Object.keys(message.referencedFieldsByType)).length) {\n            object.referencedFieldsByType = {};\n            for (let j = 0; j < keys2.length; ++j)\n                object.referencedFieldsByType[keys2[j]] = $root.ReferencedFieldsForType.toObject(message.referencedFieldsByType[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TracesAndStats to JSON.\n     * @function toJSON\n     * @memberof TracesAndStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TracesAndStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n    };\n\n    return TracesAndStats;\n})();\n\nconst google = $root.google = (() => {\n\n    /**\n     * Namespace google.\n     * @exports google\n     * @namespace\n     */\n    const google = {};\n\n    google.protobuf = (function() {\n\n        /**\n         * Namespace protobuf.\n         * @memberof google\n         * @namespace\n         */\n        const protobuf = {};\n\n        protobuf.Timestamp = (function() {\n\n            /**\n             * Properties of a Timestamp.\n             * @memberof google.protobuf\n             * @interface ITimestamp\n             * @property {number|null} [seconds] Timestamp seconds\n             * @property {number|null} [nanos] Timestamp nanos\n             */\n\n            /**\n             * Constructs a new Timestamp.\n             * @memberof google.protobuf\n             * @classdesc Represents a Timestamp.\n             * @implements ITimestamp\n             * @constructor\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             */\n            function Timestamp(properties) {\n                if (properties)\n                    for (let keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Timestamp seconds.\n             * @member {number} seconds\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.seconds = 0;\n\n            /**\n             * Timestamp nanos.\n             * @member {number} nanos\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.nanos = 0;\n\n            /**\n             * Creates a new Timestamp instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             * @returns {google.protobuf.Timestamp} Timestamp instance\n             */\n            Timestamp.create = function create(properties) {\n                return new Timestamp(properties);\n            };\n\n            /**\n             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);\n                if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                let end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();\n                while (reader.pos < end) {\n                    let tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.seconds = reader.int64();\n                        break;\n                    case 2:\n                        message.nanos = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Timestamp message.\n             * @function verify\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Timestamp.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))\n                        return \"seconds: integer|Long expected\";\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    if (!$util.isInteger(message.nanos))\n                        return \"nanos: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.Timestamp} message Timestamp\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Timestamp.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                let object = {};\n                if (options.defaults) {\n                    object.seconds = 0;\n                    object.nanos = 0;\n                }\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (typeof message.seconds === \"number\")\n                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;\n                    else\n                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    object.nanos = message.nanos;\n                return object;\n            };\n\n            /**\n             * Converts this Timestamp to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Timestamp.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, _apollo_protobufjs_minimal__WEBPACK_IMPORTED_MODULE_0__.util.toJSONOptions);\n            };\n\n            return Timestamp;\n        })();\n\n        return protobuf;\n    })();\n\n    return google;\n})();\n\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/@apollo/usage-reporting-protobuf/generated/esm/protobuf.js\n");

/***/ })

};
;